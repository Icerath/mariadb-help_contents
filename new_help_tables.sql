
-- Copyright (c) 2003, 2008-2012, Oracle and/or its affiliates. All rights reserved.
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; version 2 of the License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

-- DO NOT EDIT THIS FILE. It is generated automatically.

-- To use this file, load its contents into the mysql database. For example,
-- with the mysql client program, process the file like this, where
-- file_name is the name of this file:

--     mysql -u root -p mysql < file_name

set names 'utf8';

set sql_log_bin = 0;

use mysql;
delete from help_topic;
delete from help_category;
delete from help_keyword;
delete from help_relation;

lock tables help_topic write, help_category write, help_keyword write, help_relation write;
insert into help_category (help_category_id,name,parent_category_id,url) values (1,'Geographic',0,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (2,'Polygon Properties',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (3,'WKT',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (4,'Numeric Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (5,'Plugins',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (6,'MBR',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (7,'Control Flow Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (8,'Transactions',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (9,'Help Metadata',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (10,'Account Management',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (11,'Point Properties',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (12,'Encryption Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (13,'LineString Properties',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (14,'Miscellaneous Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (15,'Logical Operators',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (16,'Functions and Modifiers for Use with GROUP BY',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (17,'Information Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (18,'Comparison Operators',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (19,'Bit Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (20,'Table Maintenance',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (21,'User-Defined Functions',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (22,'Data Types',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (23,'Compound Statements',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (24,'Geometry Constructors',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (25,'GeometryCollection Properties',1,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (26,'Administration',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (27,'Data Manipulation',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (28,'Utility',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (29,'Language Structure',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (30,'Geometry Relations',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (31,'Date and Time Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (32,'WKB',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (33,'Procedures',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (34,'Geographic Features',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (35,'Contents',0,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (36,'Geometry Properties',34,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (37,'String Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (38,'Functions',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (39,'Data Definition',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (40,'Sequences',35,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (41,'JSON Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (42,'Window Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (43,'Spider Functions',38,'');
insert into help_category (help_category_id,name,parent_category_id,url) values (44,'Dynamic Column Functions',38,'');

insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (1,9,'HELP_DATE','This help information was generated from the MariaDB Knowledge Base\non 22 July 2019.','','');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (2,2,'AREA','A synonym for ST_AREA.\n','','https://mariadb.com/kb/en/library/polygon-properties-area/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (3,2,'CENTROID','A synonym for ST_CENTROID.\n','','https://mariadb.com/kb/en/library/centroid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (4,2,'ExteriorRing','A synonym for ST_ExteriorRing.\n','','https://mariadb.com/kb/en/library/polygon-properties-exteriorring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (5,2,'InteriorRingN','A synonym for ST_InteriorRingN.\n','','https://mariadb.com/kb/en/library/polygon-properties-interiorringn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (6,2,'NumInteriorRings','A synonym for ST_NumInteriorRings.\n','','https://mariadb.com/kb/en/library/polygon-properties-numinteriorrings/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (7,2,'ST_AREA','Syntax\n------\nST_Area(poly)\nArea(poly)\n\nDescription\n-----------\nReturns as a double-precision number the area of the Polygon value poly, as measured\nin its spatial reference system.\n\nST_Area() and Area() are synonyms.\n\nExamples\n--------\nSET @poly = 'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\n\nSELECT Area(GeomFromText(@poly));\n+---------------------------+\n| Area(GeomFromText(@poly)) |\n+---------------------------+\n|                         4 |\n+---------------------------+\n','','https://mariadb.com/kb/en/library/st_area/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (8,2,'ST_CENTROID','Syntax\n------\nST_Centroid(mpoly)\nCentroid(mpoly)\n\nDescription\n-----------\nReturns a point reflecting the mathematical centroid (geometric center) for the\nMultiPolygon mpoly. The resulting point will not necessarily be on the MultiPolygon.\n\nST_Centroid() and Centroid() are synonyms.\n\nExamples\n--------\nSET @poly = ST_GeomFromText('POLYGON((0 0,20 0,20 20,0 20,0 0))');\nSELECT ST_AsText(ST_Centroid(@poly)) AS center;\n+--------------+\n| center       |\n+--------------+\n| POINT(10 10) |\n+--------------+\n','','https://mariadb.com/kb/en/library/st_centroid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (9,2,'ST_ExteriorRing','Syntax\n------\nST_ExteriorRing(poly)\nExteriorRing(poly)\n\nDescription\n-----------\nReturns the exterior ring of the Polygon value poly as a LineString.\n\nST_ExteriorRing() and ExteriorRing() are synonyms.\n\nExamples\n--------\nSET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(ExteriorRing(GeomFromText(@poly)));\n+-------------------------------------------+\n| AsText(ExteriorRing(GeomFromText(@poly))) |\n+-------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)           |\n+-------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_exteriorring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (10,2,'ST_InteriorRingN','Syntax\n------\nST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n\nDescription\n-----------\nReturns the N-th interior ring for the Polygon value poly as a LineString. Rings are\nnumbered beginning with 1.\n\nST_InteriorRingN() and InteriorRingN() are synonyms.\n\nExamples\n--------\nSET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(InteriorRingN(GeomFromText(@poly),1));\n+----------------------------------------------+\n| AsText(InteriorRingN(GeomFromText(@poly),1)) |\n+----------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)              |\n+----------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_interiorringn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (11,2,'ST_NumInteriorRings','Syntax\n------\nST_NumInteriorRings(poly)\nNumInteriorRings(poly)\n\nDescription\n-----------\nReturns an integer containing the number of interior rings in the Polygon value poly.\n\nNote that according the the OpenGIS standard, a POLYGON should have exactly one\nExteriorRing and all other rings should lie within that ExteriorRing and thus be the\nInteriorRings. Practically, however, some systems, including MariaDB's, permit\npolygons to have several 'ExteriorRings'. In the case of there being multiple,\nnon-overlapping exterior rings ST_NumInteriorRings() will return 1.\n\nST_NumInteriorRings() and NumInteriorRings() are synonyms.\n\nExamples\n--------\nSET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT NumInteriorRings(GeomFromText(@poly));\n+---------------------------------------+\n| NumInteriorRings(GeomFromText(@poly)) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n\nNon-overlapping 'polygon':\nSELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n','','https://mariadb.com/kb/en/library/st_numinteriorrings/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (12,3,'WKT Definition','Description\n-----------\nThe Well-Known Text (WKT) representation of Geometry is designed to exchange geometry\ndata in ASCII form. Examples of the basic geometry types include:\n+------------------+\n|Geometry Types    |\n|POINT             |\n|LINESTRING        |\n|POLYGON           |\n|MULTIPOINT        |\n|MULTILINESTRING   |\n|MULTIPOLYGON      |\n|GEOMETRYCOLLECTION|\n|GEOMETRY          |\n+------------------+\n','','https://mariadb.com/kb/en/library/wkt-definition/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (13,3,'AsText','A synonym for ST_AsText().\n','','https://mariadb.com/kb/en/library/wkt-astext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (14,3,'AsWKT','A synonym for ST_AsText().\n','','https://mariadb.com/kb/en/library/wkt-aswkt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (15,3,'GeomCollFromText','A synonym for ST_GeomCollFromText.\n','','https://mariadb.com/kb/en/library/wkt-geomcollfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (16,3,'GeometryCollectionFromText','A synonym for ST_GeomCollFromText.\n','','https://mariadb.com/kb/en/library/geometrycollectionfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (17,3,'GeometryFromText','A synonym for ST_GeomFromText.\n','','https://mariadb.com/kb/en/library/geometryfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (18,3,'GeomFromText','A synonym for ST_GeomFromText.\n','','https://mariadb.com/kb/en/library/wkt-geomfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (19,3,'LineFromText','A synonym for ST_LineFromText.\n','','https://mariadb.com/kb/en/library/wkt-linefromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (20,3,'LineStringFromText','A synonym for ST_LineFromText.\n','','https://mariadb.com/kb/en/library/linestringfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (21,3,'MLineFromText','Syntax\n------\nMLineFromText(wkt[,srid])\nMultiLineStringFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a MULTILINESTRING value using its WKT representation and SRID.\n\nMLineFromText() and MultiLineStringFromText() are synonyms.\n\nExamples\n--------\nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\nINSERT INTO gis_multi_line VALUES\n  (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16\n23,16 48))')),\n  (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n  (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)),\nLineString(Point(2, 5), Point(5, 8), Point(21, 7))))));\n','','https://mariadb.com/kb/en/library/mlinefromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (22,3,'MPointFromText','Syntax\n------\nMPointFromText(wkt[,srid])\nMultiPointFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a MULTIPOINT value using its WKT representation and SRID.\n\nMPointFromText() and MultiPointFromText() are synonyms.\n\nExamples\n--------\nCREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\nINSERT INTO gis_multi_point VALUES\n  (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n  (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n  (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n','','https://mariadb.com/kb/en/library/mpointfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (23,3,'MPolyFromText','Syntax\n------\nMPolyFromText(wkt[,srid])\nMultiPolygonFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a MULTIPOLYGON value using its WKT representation and SRID.\n\nMPolyFromText() and MultiPolygonFromText() are synonyms.\n\nExamples\n--------\nCREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\nINSERT INTO gis_multi_polygon VALUES\n  (MultiPolygonFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66\n23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48\n6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0, 3), Point(3, 3),\nPoint(3, 0), Point(0, 3)))))));\n','','https://mariadb.com/kb/en/library/mpolyfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (24,3,'MultiLineStringFromText','A synonym for MLineFromText.\n','','https://mariadb.com/kb/en/library/multilinestringfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (25,3,'MultiPointFromText','A synonym for MPointFromText.\n','','https://mariadb.com/kb/en/library/multipointfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (26,3,'MultiPolygonFromText','A synonym for MPolyFromText.\n','','https://mariadb.com/kb/en/library/multipolygonfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (27,3,'PointFromText','A synonym for ST_PointFromText.\n','','https://mariadb.com/kb/en/library/wkt-pointfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (28,3,'PolyFromText','A synonym for ST_PolyFromText.\n','','https://mariadb.com/kb/en/library/wkt-polyfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (29,3,'PolygonFromText','A synonym for ST_PolyFromText.\n','','https://mariadb.com/kb/en/library/polygonfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (30,3,'ST_AsText','Syntax\n------\nST_AsText(g)\nAsText(g)\nST_AsWKT(g)\nAsWKT(g)\n\nDescription\n-----------\nConverts a value in internal geometry format to its WKT representation and returns\nthe string result.\n\nST_AsText(), AsText(), ST_AsWKT() and AsWKT() are all synonyms.\n\nExamples\n--------\nSET @g = 'LineString(1 1,4 4,6 6)';\n\nSELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,4 4,6 6)        |\n+--------------------------------+\n','','https://mariadb.com/kb/en/library/st_astext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (31,3,'ST_ASWKT','A synonym for ST_ASTEXT().\n','','https://mariadb.com/kb/en/library/st_aswkt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (32,3,'ST_GeomCollFromText','Syntax\n------\nST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a GEOMETRYCOLLECTION value using its WKT \nrepresentation and SRID.\n\nST_GeomCollFromText(), ST_GeometryCollectionFromText(), GeomCollFromText() and\nGeometryCollectionFromText() are all synonyms.\n\nExample\n-------\nCREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n  (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n  (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6),\nPoint(7, 9)))))),\n  (GeomFromText('GeometryCollection()')),\n  (GeomFromText('GeometryCollection EMPTY'));\n','','https://mariadb.com/kb/en/library/st_geomcollfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (33,3,'ST_GeometryCollectionFromText','A synonym for ST_GeomCollFromText.\n','','https://mariadb.com/kb/en/library/st_geometrycollectionfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (34,3,'ST_GeometryFromText','A synonym for ST_GeomFromText.\n','','https://mariadb.com/kb/en/library/st_geometryfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (35,3,'ST_GeomFromText','Syntax\n------\nST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a geometry value of any type using its WKT representation and SRID.\n\nGeomFromText(), GeometryFromText(), ST_GeomFromText() and ST_GeometryFromText() are\nall synonyms.\n\nExample\n-------\nSET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n','','https://mariadb.com/kb/en/library/st_geomfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (36,3,'ST_LineFromText','Syntax\n------\nST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a LINESTRING value using its WKT representation and SRID.\n\nST_LineFromText(), ST_LineStringFromText(), ST_LineFromText() and\nST_LineStringFromText() are all synonyms.\n\nExamples\n--------\nCREATE TABLE gis_line  (g LINESTRING);\nSHOW FIELDS FROM gis_line;\nINSERT INTO gis_line VALUES\n  (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n  (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n  (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n','','https://mariadb.com/kb/en/library/st_linefromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (37,3,'ST_LineStringFromText','A synonym for ST_LineFromText.\n','','https://mariadb.com/kb/en/library/st_linestringfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (38,3,'ST_PointFromText','Syntax\n------\nST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a POINT value using its WKT representation and SRID.\n\nST_PointFromText() and PointFromText() are synonyms.\n\nExamples\n--------\nCREATE TABLE gis_point  (g POINT);\nSHOW FIELDS FROM gis_point;\nINSERT INTO gis_point VALUES\n  (PointFromText('POINT(10 10)')),\n  (PointFromText('POINT(20 10)')),\n  (PointFromText('POINT(20 20)')),\n  (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n','','https://mariadb.com/kb/en/library/st_pointfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (39,3,'ST_PolyFromText','Syntax\n------\nST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n\nDescription\n-----------\nConstructs a POLYGON value using its WKT representation and SRID.\n\nST_PolyFromText(), ST_PolygonFromText(), PolyFromText() and ST_PolygonFromText() are\nall synonyms.\n\nExamples\n--------\nCREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n  (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n  (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10\n20,10 10))'));\n','','https://mariadb.com/kb/en/library/st_polyfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (40,3,'ST_PolygonFromText','A synonym for ST_PolyFromText.\n','','https://mariadb.com/kb/en/library/st_polygonfromtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (41,4,'Addition Operator (+)','Syntax\n------\n+\n\nDescription\n-----------\nAddition.\n\nIf both operands are integers, the result is calculated with BIGINT precision. If\neither integer is unsigned, the result is also an unsigned integer.\n\nFor real or string operands, the operand with the highest precision determines the\nresult precision.\n\nExamples\n--------\nSELECT 3+5;\n+-----+\n| 3+5 |\n+-----+\n|   8 |\n+-----+\n','','https://mariadb.com/kb/en/library/addition-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (42,4,'Subtraction Operator (-)','Syntax\n------\n-\n\nDescription\n-----------\nSubtraction. The operator is also used as the unary minus for changing sign.\n\nIf both operands are integers, the result is calculated with BIGINT precision. If\neither integer is unsigned, the result is also an unsigned integer, unless the\nNO_UNSIGNED_SUBTRACTION SQL_MODE is enabled, in which case the result is\nalways signed.\n\nFor real or string operands, the operand with the highest precision determines the\nresult precision.\n\nExamples\n--------\nSELECT 96-9;\n+------+\n| 96-9 |\n+------+\n|   87 |\n+------+\n\nSELECT 15-17;\n+-------+\n| 15-17 |\n+-------+\n|    -2 |\n+-------+\n\nSELECT 3.66 + 1.333;\n+--------------+\n| 3.66 + 1.333 |\n+--------------+\n|        4.993 |\n+--------------+\n\nUnary minus:\n SELECT - (3+5);\n+---------+\n| - (3+5) |\n+---------+\n|      -8 |\n+---------+\n','','https://mariadb.com/kb/en/library/subtraction-operator-/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (43,4,'Division Operator (/)','Syntax\n------\n/\n\nDescription\n-----------\nDivision operator. Dividing by zero will return NULL. By default, returns four digits\nafter the decimal. This is determined by the server system variable\ndiv_precision_increment which by default is four. It can be set from 0 to 30.\n\nDividing by zero returns NULL. If the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used (the\ndefault since MariaDB 10.2.4), a division by zero also produces a warning.\n\nExamples\n--------\nSELECT 4/5;\n+--------+\n| 4/5    |\n+--------+\n| 0.8000 |\n+--------+\n\nSELECT 300/(2-2);\n+-----------+\n| 300/(2-2) |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 300/7;\n+---------+\n| 300/7   |\n+---------+\n| 42.8571 |\n+---------+\n\nChanging div_precision_increment for the session from the default of four to six:\nSET div_precision_increment = 6;\n\nSELECT 300/7;\n+-----------+\n| 300/7     |\n+-----------+\n| 42.857143 |\n+-----------+\n\nSELECT 300/7;\n+-----------+\n| 300/7     |\n+-----------+\n| 42.857143 |\n+-----------+\n','','https://mariadb.com/kb/en/library/division-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (44,4,'Multiplication Operator (*)','Syntax\n------\n*\n\nDescription\n-----------\nMultiplication operator.\n\nExamples\n--------\nSELECT 7*6;\n+-----+\n| 7*6 |\n+-----+\n|  42 |\n+-----+\n\nSELECT 1234567890*9876543210;\n+-----------------------+\n| 1234567890*9876543210 |\n+-----------------------+\n|  -6253480962446024716 |\n+-----------------------+\n\nSELECT 18014398509481984*18014398509481984.0;\n+---------------------------------------+\n| 18014398509481984*18014398509481984.0 |\n+---------------------------------------+\n|   324518553658426726783156020576256.0 |\n+---------------------------------------+\n\nSELECT 18014398509481984*18014398509481984;\n+-------------------------------------+\n| 18014398509481984*18014398509481984 |\n+-------------------------------------+\n|                                   0 |\n+-------------------------------------+\n','','https://mariadb.com/kb/en/library/multiplication-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (45,4,'Modulo Operator (%)','Syntax\n------\nN % M\n\nDescription\n-----------\nModulo operator. Returns the remainder of N divided by M. See also MOD.\n\nExamples\n--------\nSELECT 1042 % 50;\n+-----------+\n| 1042 % 50 |\n+-----------+\n|        42 |\n+-----------+\n','','https://mariadb.com/kb/en/library/modulo-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (46,4,'DIV','Syntax\n------\nDIV\n\nDescription\n-----------\nInteger division. Similar to FLOOR(), but is safe with BIGINT values.\n\nIncorrect results may occur for non-integer operands that exceed BIGINT range.\n\nIf the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, a division by zero produces an\nerror. Otherwise, it returns NULL.\n\nThe remainder of a division can be obtained using the MOD operator.\n\nExamples\n--------\nSELECT 300 DIV 7;\n+-----------+\n| 300 DIV 7 |\n+-----------+\n|        42 |\n+-----------+\n\nSELECT 300 DIV 0;\n+-----------+\n| 300 DIV 0 |\n+-----------+\n|      NULL |\n+-----------+\n','','https://mariadb.com/kb/en/library/div/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (47,4,'ABS','Syntax\n------\nABS(X)\n\nDescription\n-----------\nReturns the absolute (non-negative) value of X. If X is not a number, it is converted\nto a numeric type.\n\nExamples\n--------\nSELECT ABS(42);\n+---------+\n| ABS(42) |\n+---------+\n|      42 |\n+---------+\n\nSELECT ABS(-42);\n+----------+\n| ABS(-42) |\n+----------+\n|       42 |\n+----------+\n\nSELECT ABS(DATE '1994-01-01');\n+------------------------+\n| ABS(DATE '1994-01-01') |\n+------------------------+\n|               19940101 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/abs/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (48,4,'ACOS','Syntax\n------\nACOS(X)\n\nDescription\n-----------\nReturns the arc cosine of X, that is, the value whose cosine is X.\n\nReturns NULL if X is not in the range -1 to 1.\n\nExamples\n--------\nSELECT ACOS(1);\n+---------+\n| ACOS(1) |\n+---------+\n|       0 |\n+---------+\n\nSELECT ACOS(1.0001);\n+--------------+\n| ACOS(1.0001) |\n+--------------+\n|         NULL |\n+--------------+\n\nSELECT ACOS(0);\n+-----------------+\n| ACOS(0)         |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n\nSELECT ACOS(0.234);\n+------------------+\n| ACOS(0.234)      |\n+------------------+\n| 1.33460644244679 |\n+------------------+\n','','https://mariadb.com/kb/en/library/acos/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (49,4,'ASIN','Syntax\n------\nASIN(X)\n\nDescription\n-----------\nReturns the arc sine of X, that is, the value whose sine is X. Returns\nNULL if X is not in the range -1 to 1.\n\nExamples\n--------\nSELECT ASIN(0.2);\n+--------------------+\n| ASIN(0.2)          |\n+--------------------+\n| 0.2013579207903308 |\n+--------------------+\n\nSELECT ASIN('foo');\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+\n','','https://mariadb.com/kb/en/library/asin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (50,4,'ATAN','Syntax\n------\nATAN(X)\n\nDescription\n-----------\nReturns the arc tangent of X, that is, the value whose tangent is X.\n\nExamples\n--------\nSELECT ATAN(2);\n+--------------------+\n| ATAN(2)            |\n+--------------------+\n| 1.1071487177940904 |\n+--------------------+\n\nSELECT ATAN(-2);\n+---------------------+\n| ATAN(-2)            |\n+---------------------+\n| -1.1071487177940904 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/atan/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (51,4,'ATAN2','Syntax\n------\nATAN(Y,X), ATAN2(Y,X)\n\nDescription\n-----------\nReturns the arc tangent of the two variables X and Y. It is similar to\ncalculating the arc tangent of Y / X, except that the signs of both\narguments are used to determine the quadrant of the result.\n\nExamples\n--------\nSELECT ATAN(-2,2);\n+---------------------+\n| ATAN(-2,2)          |\n+---------------------+\n| -0.7853981633974483 |\n+---------------------+\n\nSELECT ATAN2(PI(),0);\n+--------------------+\n| ATAN2(PI(),0)      |\n+--------------------+\n| 1.5707963267948966 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/atan2/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (52,4,'CEIL','Syntax\n------\nCEIL(X)\n\nDescription\n-----------\nCEIL() is a synonym for CEILING().\n','','https://mariadb.com/kb/en/library/ceil/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (53,4,'CEILING','Syntax\n------\nCEILING(X)\n\nDescription\n-----------\nReturns the smallest integer value not less than X.\n\nExamples\n--------\nSELECT CEILING(1.23);\n+---------------+\n| CEILING(1.23) |\n+---------------+\n|             2 |\n+---------------+\n\nSELECT CEILING(-1.23);\n+----------------+\n| CEILING(-1.23) |\n+----------------+\n|             -1 |\n+----------------+\n','','https://mariadb.com/kb/en/library/ceiling/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (54,4,'CONV','Syntax\n------\nCONV(N,from_base,to_base)\n\nDescription\n-----------\nConverts numbers between different number bases. Returns a string\nrepresentation of the number N, converted from base from_base\nto base to_base.\n\nReturns NULL if any argument is NULL, or if the second or third argument are not in\nthe allowed range.\n\nThe argument N is interpreted as an integer, but may be specified as an\ninteger or a string. The minimum base is 2 and the maximum base is 36. If\nto_base is a negative number, N is regarded as a signed number.\n\nOtherwise, N is treated as unsigned. CONV() works with 64-bit\nprecision.\n\nSome shortcuts for this function are also available: BIN(), OCT(), HEX(), UNHEX().\n\nAlso, MariaDB allows binary literal values and hexadecimal literal values.\n\nExamples\n--------\nSELECT CONV('a',16,2);\n+----------------+\n| CONV('a',16,2) |\n+----------------+\n| 1010           |\n+----------------+\n\nSELECT CONV('6E',18,8);\n+-----------------+\n| CONV('6E',18,8) |\n+-----------------+\n| 172             |\n+-----------------+\n\nSELECT CONV(-17,10,-18);\n+------------------+\n| CONV(-17,10,-18) |\n+------------------+\n| -H               |\n+------------------+\n\nSELECT CONV(12+'10'+'10'+0xa,10,10);\n+------------------------------+\n| CONV(12+'10'+'10'+0xa,10,10) |\n+------------------------------+\n| 42                           |\n+------------------------------+\n','','https://mariadb.com/kb/en/library/conv/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (55,4,'COS','Syntax\n------\nCOS(X)\n\nDescription\n-----------\nReturns the cosine of X, where X is given in radians.\n\nExamples\n--------\nSELECT COS(PI());\n+-----------+\n| COS(PI()) |\n+-----------+\n|        -1 |\n+-----------\n','','https://mariadb.com/kb/en/library/cos/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (56,4,'COT','Syntax\n------\nCOT(X)\n\nDescription\n-----------\nReturns the cotangent of X.\n\nExamples\n--------\nSELECT COT(42);\n+--------------------+\n| COT(42)            |\n+--------------------+\n| 0.4364167060752729 |\n+--------------------+\n\nSELECT COT(12);\n+---------------------+\n| COT(12)             |\n+---------------------+\n| -1.5726734063976893 |\n+---------------------+\n\nSELECT COT(0);\nERROR 1690 (22003): DOUBLE value is out of range in 'cot(0)'\n','','https://mariadb.com/kb/en/library/cot/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (57,4,'CRC32','Syntax\n------\n<= MariaDB 10.7\nCRC32(expr)\n\nFrom MariaDB 10.8\nCRC32([par,]expr)\n\nDescription\n-----------\nComputes a cyclic redundancy check (CRC) value and returns a 32-bit unsigned\nvalue. The result is NULL if the argument is NULL. The argument is\nexpected to be a string and (if possible) is treated as one if it is\nnot.\n\nUses the ISO 3309 polynomial that used by zlib and many others. MariaDB 10.8\nintroduced the CRC32C() function, which uses the alternate Castagnoli polynomia.\n\nExamples\n--------\nSELECT CRC32('MariaDB');\n+------------------+\n| CRC32('MariaDB') |\n+------------------+\n|       4227209140 |\n+------------------+\n\nSELECT CRC32('mariadb');\n+------------------+\n| CRC32('mariadb') |\n+------------------+\n|       2594253378 |\n+------------------+\n\nFrom MariaDB 10.8.0\nSELECT CRC32(CRC32('Maria'),'DB');\n+----------------------------+\n| CRC32(CRC32('Maria'),'DB') |\n+----------------------------+\n|                 4227209140 |\n+----------------------------+\n','','https://mariadb.com/kb/en/library/crc32/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (58,4,'DEGREES','Syntax\n------\nDEGREES(X)\n\nDescription\n-----------\nReturns the argument X, converted from radians to degrees.\n\nThis is the converse of the RADIANS() function.\n\nExamples\n--------\nSELECT DEGREES(PI());\n+---------------+\n| DEGREES(PI()) |\n+---------------+\n|           180 |\n+---------------+\n\nSELECT DEGREES(PI() / 2);\n+-------------------+\n| DEGREES(PI() / 2) |\n+-------------------+\n|                90 |\n+-------------------+\n\nSELECT DEGREES(45);\n+-----------------+\n| DEGREES(45)     |\n+-----------------+\n| 2578.3100780887 |\n+-----------------+\n','','https://mariadb.com/kb/en/library/degrees/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (59,4,'EXP','Syntax\n------\nEXP(X)\n\nDescription\n-----------\nReturns the value of e (the base of natural logarithms) raised to the\npower of X. The inverse of this function is LOG() (using a single\nargument only) or LN().\n\nIf X is NULL, this function returns NULL.\n\nExamples\n--------\nSELECT EXP(2);\n+------------------+\n| EXP(2)           |\n+------------------+\n| 7.38905609893065 |\n+------------------+\n\nSELECT EXP(-2);\n+--------------------+\n| EXP(-2)            |\n+--------------------+\n| 0.1353352832366127 |\n+--------------------+\n\nSELECT EXP(0);\n+--------+\n| EXP(0) |\n+--------+\n|      1 |\n+--------+\n\nSELECT EXP(NULL);\n+-----------+\n| EXP(NULL) |\n+-----------+\n|      NULL |\n+-----------+\n','','https://mariadb.com/kb/en/library/exp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (60,4,'FLOOR','Syntax\n------\nFLOOR(X)\n\nDescription\n-----------\nReturns the largest integer value not greater than X.\n\nExamples\n--------\nSELECT FLOOR(1.23);\n+-------------+\n| FLOOR(1.23) |\n+-------------+\n|           1 |\n+-------------+\n\nSELECT FLOOR(-1.23);\n+--------------+\n| FLOOR(-1.23) |\n+--------------+\n|           -2 |\n+--------------+\n','','https://mariadb.com/kb/en/library/floor/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (61,4,'LN','Syntax\n------\nLN(X)\n\nDescription\n-----------\nReturns the natural logarithm of X; that is, the base-e logarithm of X.\n\nIf X is less than or equal to 0, or NULL, then NULL is returned.\n\nThe inverse of this function is EXP().\n\nExamples\n--------\nSELECT LN(2);\n+-------------------+\n| LN(2)             |\n+-------------------+\n| 0.693147180559945 |\n+-------------------+\n\nSELECT LN(-2);\n+--------+\n| LN(-2) |\n+--------+\n|   NULL |\n+--------+\n','','https://mariadb.com/kb/en/library/ln/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (62,4,'LOG','Syntax\n------\nLOG(X), LOG(B,X)\n\nDescription\n-----------\nIf called with one parameter, this function returns the natural\nlogarithm of X. If X is less than or equal to 0, then NULL is\nreturned.\n\nIf called with two parameters, it returns the logarithm of X to the base B. If  B is\n<= 1 or X <= 0, the function returns NULL.\n\nIf any argument is NULL, the function returns NULL.\n\nThe inverse of this function (when called with a single argument) is\nthe EXP() function.\n\nExamples\n--------\nLOG(X):\nSELECT LOG(2);\n+-------------------+\n| LOG(2)            |\n+-------------------+\n| 0.693147180559945 |\n+-------------------+\n\nSELECT LOG(-2);\n+---------+\n| LOG(-2) |\n+---------+\n|    NULL |\n+---------+\n\nLOG(B,X)\nSELECT LOG(2,16);\n+-----------+\n| LOG(2,16) |\n+-----------+\n|         4 |\n+-----------+\n\nSELECT LOG(3,27);\n+-----------+\n| LOG(3,27) |\n+-----------+\n|         3 |\n+-----------+\n\nSELECT LOG(3,1);\n+----------+\n| LOG(3,1) |\n+----------+\n|        0 |\n+----------+\n\nSELECT LOG(3,0);\n+----------+\n| LOG(3,0) |\n+----------+\n|     NULL |\n+----------+\n','','https://mariadb.com/kb/en/library/log/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (63,4,'LOG10','Syntax\n------\nLOG10(X)\n\nDescription\n-----------\nReturns the base-10 logarithm of X.\n\nExamples\n--------\nSELECT LOG10(2);\n+-------------------+\n| LOG10(2)          |\n+-------------------+\n| 0.301029995663981 |\n+-------------------+\n\nSELECT LOG10(100);\n+------------+\n| LOG10(100) |\n+------------+\n|          2 |\n+------------+\n\nSELECT LOG10(-100);\n+-------------+\n| LOG10(-100) |\n+-------------+\n|        NULL |\n+-------------+\n','','https://mariadb.com/kb/en/library/log10/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (64,4,'LOG2','Syntax\n------\nLOG2(X)\n\nDescription\n-----------\nReturns the base-2 logarithm of X.\n\nExamples\n--------\nSELECT LOG2(4398046511104);\n+---------------------+\n| LOG2(4398046511104) |\n+---------------------+\n|                  42 |\n+---------------------+\n\nSELECT LOG2(65536);\n+-------------+\n| LOG2(65536) |\n+-------------+\n|          16 |\n+-------------+\n\nSELECT LOG2(-100);\n+------------+\n| LOG2(-100) |\n+------------+\n|       NULL |\n+------------+\n','','https://mariadb.com/kb/en/library/log2/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (65,4,'MOD','Syntax\n------\nMOD(N,M), N % M, N MOD M\n\nDescription\n-----------\nModulo operation. Returns the remainder of N divided by M. See also Modulo Operator.\n\nIf the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, any number modulus zero produces\nan error. Otherwise, it returns NULL.\n\nThe integer part of a division can be obtained using DIV.\n\nExamples\n--------\nSELECT 1042 % 50;\n+-----------+\n| 1042 % 50 |\n+-----------+\n|        42 |\n+-----------+\n\nSELECT MOD(234, 10);\n+--------------+\n| MOD(234, 10) |\n+--------------+\n|            4 |\n+--------------+\n\nSELECT 253 % 7;\n+---------+\n| 253 % 7 |\n+---------+\n|       1 |\n+---------+\n\nSELECT MOD(29,9);\n+-----------+\n| MOD(29,9) |\n+-----------+\n|         2 |\n+-----------+\n\nSELECT 29 MOD 9;\n+----------+\n| 29 MOD 9 |\n+----------+\n|        2 |\n+----------+\n','','https://mariadb.com/kb/en/library/mod/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (66,4,'OCT','Syntax\n------\nOCT(N)\n\nDescription\n-----------\nReturns a string representation of the octal value of N, where N is a longlong\n(BIGINT) number. This is equivalent to CONV(N,10,8). Returns NULL if N is NULL.\n\nExamples\n--------\nSELECT OCT(34);\n+---------+\n| OCT(34) |\n+---------+\n| 42      |\n+---------+\n\nSELECT OCT(12);\n+---------+\n| OCT(12) |\n+---------+\n| 14      |\n+---------+\n','','https://mariadb.com/kb/en/library/oct/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (67,4,'PI','Syntax\n------\nPI()\n\nDescription\n-----------\nReturns the value of π (pi). The default number of decimal places\ndisplayed is six, but MariaDB uses the full double-precision value\ninternally.\n\nExamples\n--------\nSELECT PI();\n+----------+\n| PI()     |\n+----------+\n| 3.141593 |\n+----------+\n\nSELECT PI()+0.0000000000000000000000;\n+-------------------------------+\n| PI()+0.0000000000000000000000 |\n+-------------------------------+\n|      3.1415926535897931159980 |\n+-------------------------------+\n','','https://mariadb.com/kb/en/library/pi/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (68,4,'POW','Syntax\n------\nPOW(X,Y)\n\nDescription\n-----------\nReturns the value of X raised to the power of Y.\n\nPOWER() is a synonym.\n\nExamples\n--------\nSELECT POW(2,3);\n+----------+\n| POW(2,3) |\n+----------+\n|        8 |\n+----------+\n\nSELECT POW(2,-2);\n+-----------+\n| POW(2,-2) |\n+-----------+\n|      0.25 |\n+-----------+\n','','https://mariadb.com/kb/en/library/pow/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (69,4,'POWER','Syntax\n------\nPOWER(X,Y)\n\nDescription\n-----------\nThis is a synonym for POW(), which returns the value of X raised to the power of Y.\n','','https://mariadb.com/kb/en/library/power/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (70,4,'RADIANS','Syntax\n------\nRADIANS(X)\n\nDescription\n-----------\nReturns the argument X, converted from degrees to radians. Note that\nπ radians equals 180 degrees.\n\nThis is the converse of the DEGREES() function.\n\nExamples\n--------\nSELECT RADIANS(45);\n+-------------------+\n| RADIANS(45)       |\n+-------------------+\n| 0.785398163397448 |\n+-------------------+\n\nSELECT RADIANS(90);\n+-----------------+\n| RADIANS(90)     |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n\nSELECT RADIANS(PI());\n+--------------------+\n| RADIANS(PI())      |\n+--------------------+\n| 0.0548311355616075 |\n+--------------------+\n\nSELECT RADIANS(180);\n+------------------+\n| RADIANS(180)     |\n+------------------+\n| 3.14159265358979 |\n+------------------+\n','','https://mariadb.com/kb/en/library/radians/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (71,4,'RAND','Syntax\n------\nRAND(), RAND(N)\n\nDescription\n-----------\nReturns a random DOUBLE precision floating point value v in the range 0 <= v <\n1.0. If\na constant integer argument N is specified, it is used as the seed\nvalue, which produces a repeatable sequence of column values. In the example below,\nnote that the sequences of values produced by\nRAND(3) is the same both places where it occurs.\n\nIn a WHERE clause, RAND() is evaluated each time the WHERE is executed.\n\nStatements using the RAND() function are not safe for statement-based replication.\n\nPractical uses\n--------------\nThe expression to get a random integer from a given range is the following:\nFLOOR(min_value + RAND() * (max_value - min_value +1))\n\nRAND() is often used to read random rows from a table, as follows:\nSELECT * FROM my_table ORDER BY RAND() LIMIT 10;\n\nNote, however, that this technique should never be used on a large table as it will\nbe extremely slow. MariaDB will read all rows in the table, generate a random value\nfor each of them, order them, and finally will apply the LIMIT clause.\n\nExamples\n--------\nCREATE TABLE t (i INT);\n\nINSERT INTO t VALUES(1),(2),(3);\n\nSELECT i, RAND() FROM t;\n+------+-------------------+\n| i    | RAND()            |\n+------+-------------------+\n|    1 | 0.255651095188829 |\n|    2 | 0.833920199269355 |\n|    3 |  0.40264774151393 |\n+------+-------------------+\n\nSELECT i, RAND(3) FROM t;\n+------+-------------------+\n| i    | RAND(3)           |\n+------+-------------------+\n|    1 |  0.90576975597606 |\n|    2 | 0.373079058130345 |\n|    3 | 0.148086053457191 |\n+------+-------------------+\n\nSELECT i, RAND() FROM t;\n+------+-------------------+\n| i    | RAND()            |\n+------+-------------------+\n|    1 | 0.511478140495232 |\n|    2 | 0.349447508668012 |\n|    3 | 0.212803152588013 |\n+------+-------------------+\n\nUsing the same seed, the same sequence will be returned:\nSELECT i, RAND(3) FROM t;\n+------+-------------------+\n| i    | RAND(3)           |\n+------+-------------------+\n|    1 |  0.90576975597606 |\n|    2 | 0.373079058130345 |\n|    3 | 0.148086053457191 |\n+------+-------------------+\n\nGenerating a random number from 5 to 15:\nSELECT FLOOR(5 + (RAND() * 11));\n','','https://mariadb.com/kb/en/library/rand/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (72,4,'ROUND','Syntax\n------\nROUND(X), ROUND(X,D)\n\nDescription\n-----------\nRounds the argument X to D decimal places. The rounding algorithm\ndepends on the data type of X. D defaults to 0 if not specified.\n\nD can be negative to cause D digits left of the decimal point of the\nvalue X to become zero.\n\nExamples\n--------\nSELECT ROUND(-1.23);\n+--------------+\n| ROUND(-1.23) |\n+--------------+\n|           -1 |\n+--------------+\n\nSELECT ROUND(-1.58);\n+--------------+\n| ROUND(-1.58) |\n+--------------+\n|           -2 |\n+--------------+\n\nSELECT ROUND(1.58); \n+-------------+\n| ROUND(1.58) |\n+-------------+\n|           2 |\n+-------------+\n\nSELECT ROUND(1.298, 1);\n+-----------------+\n| ROUND(1.298, 1) |\n+-----------------+\n|             1.3 |\n+-----------------+\n\nSELECT ROUND(1.298, 0);\n+-----------------+\n| ROUND(1.298, 0) |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT ROUND(23.298, -1);\n+-------------------+\n| ROUND(23.298, -1) |\n+-------------------+\n|                20 |\n+-------------------+\n','','https://mariadb.com/kb/en/library/round/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (73,4,'SIGN','Syntax\n------\nSIGN(X)\n\nDescription\n-----------\nReturns the sign of the argument as -1, 0, or 1, depending on whether\nX is negative, zero, or positive.\n\nExamples\n--------\nSELECT SIGN(-32);\n+-----------+\n| SIGN(-32) |\n+-----------+\n|        -1 |\n+-----------+\n\nSELECT SIGN(0);\n+---------+\n| SIGN(0) |\n+---------+\n|       0 |\n+---------+\n\nSELECT SIGN(234);\n+-----------+\n| SIGN(234) |\n+-----------+\n|         1 |\n+-----------+\n','','https://mariadb.com/kb/en/library/sign/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (74,4,'SIN','Syntax\n------\nSIN(X)\n\nDescription\n-----------\nReturns the sine of X, where X is given in radians.\n\nExamples\n--------\nSELECT SIN(1.5707963267948966);\n+-------------------------+\n| SIN(1.5707963267948966) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSELECT SIN(PI());\n+----------------------+\n| SIN(PI())            |\n+----------------------+\n| 1.22460635382238e-16 |\n+----------------------+\n\nSELECT ROUND(SIN(PI()));\n+------------------+\n| ROUND(SIN(PI())) |\n+------------------+\n|                0 |\n+------------------+\n','','https://mariadb.com/kb/en/library/sin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (75,4,'SQRT','Syntax\n------\nSQRT(X)\n\nDescription\n-----------\nReturns the square root of X. If X is negative, NULL is returned.\n\nExamples\n--------\nSELECT SQRT(4);\n+---------+\n| SQRT(4) |\n+---------+\n|       2 |\n+---------+\n\nSELECT SQRT(20);\n+------------------+\n| SQRT(20)         |\n+------------------+\n| 4.47213595499958 |\n+------------------+\n\nSELECT SQRT(-16);\n+-----------+\n| SQRT(-16) |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT SQRT(1764);\n+------------+\n| SQRT(1764) |\n+------------+\n|         42 |\n+------------+\n','','https://mariadb.com/kb/en/library/sqrt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (76,4,'TAN','Syntax\n------\nTAN(X)\n\nDescription\n-----------\nReturns the tangent of X, where X is given in radians.\n\nExamples\n--------\nSELECT TAN(0.7853981633974483);\n+-------------------------+\n| TAN(0.7853981633974483) |\n+-------------------------+\n|      0.9999999999999999 |\n+-------------------------+\n\nSELECT TAN(PI());\n+-----------------------+\n| TAN(PI())             |\n+-----------------------+\n| -1.22460635382238e-16 |\n+-----------------------+\n\nSELECT TAN(PI()+1);\n+-----------------+\n| TAN(PI()+1)     |\n+-----------------+\n| 1.5574077246549 |\n+-----------------+\n\nSELECT TAN(RADIANS(PI()));\n+--------------------+\n| TAN(RADIANS(PI())) |\n+--------------------+\n| 0.0548861508080033 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/tan/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (77,4,'TRUNCATE','This page documents the TRUNCATE function. See TRUNCATE TABLE for the\nDDL statement.\n\nSyntax\n------\nTRUNCATE(X,D)\n\nDescription\n-----------\nReturns the number X, truncated to D decimal places. If D is 0, the\nresult has no decimal point or fractional part. D can be negative to\ncause D digits left of the decimal point of the value X to become\nzero.\n\nExamples\n--------\nSELECT TRUNCATE(1.223,1);\n+-------------------+\n| TRUNCATE(1.223,1) |\n+-------------------+\n|               1.2 |\n+-------------------+\n\nSELECT TRUNCATE(1.999,1);\n+-------------------+\n| TRUNCATE(1.999,1) |\n+-------------------+\n|               1.9 |\n+-------------------+\n\nSELECT TRUNCATE(1.999,0); \n+-------------------+\n| TRUNCATE(1.999,0) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSELECT TRUNCATE(-1.999,1);\n+--------------------+\n| TRUNCATE(-1.999,1) |\n+--------------------+\n|               -1.9 |\n+--------------------+\n\nSELECT TRUNCATE(122,-2);\n+------------------+\n| TRUNCATE(122,-2) |\n+------------------+\n|              100 |\n+------------------+\n\nSELECT TRUNCATE(10.28*100,0);\n+-----------------------+\n| TRUNCATE(10.28*100,0) |\n+-----------------------+\n|                  1028 |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/truncate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (78,5,'Plugin Overview','Plugins are server components that enhance MariaDB in some way. These can be anything\nfrom new storage engines, plugins for enhancing full-text parsing, or even small\nenhancements, such as a plugin to get a timestamp as an integer.\n\nQuerying Plugin Information\n---------------------------\nThere are a number of ways to see which plugins are currently active.\n\nA server almost always has a large number of active plugins, because the server\ncontains a large number of built-in plugins, which are active by default and cannot\nbe uninstalled.\n\nQuerying Plugin Information with SHOW PLUGINS\n\nThe SHOW PLUGINS statement can be used to query information about all active plugins.\n\nFor example:\nSHOW PLUGINS\G;\n********************** 1. row **********************\n Name: binlog\n Status: ACTIVE\n Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n********************** 2. row **********************\n Name: mysql_native_password\n Status: ACTIVE\n Type: AUTHENTICATION\nLibrary: NULL\nLicense: GPL\n********************** 3. row **********************\n Name: mysql_old_password\n Status: ACTIVE\n Type: AUTHENTICATION\nLibrary: NULL\nLicense: GPL\n...\n\nIf a plugin's Library column has a NULL value, then the plugin is built-in, and it\ncannot be uninstalled.\n\nQuerying Plugin Information with information_schema.PLUGINS\n\nThe information_schema.PLUGINS table can be queried to get more detailed information\nabout plugins.\n\nFor example:\nSELECT * FROM information_schema.PLUGINS\G\n...\n*************************** 6. row ***************************\n     PLUGIN_NAME: CSV\n    PLUGIN_VERSION: 1.0\n    PLUGIN_STATUS: ACTIVE\n     PLUGIN_TYPE: STORAGE ENGINE\n PLUGIN_TYPE_VERSION: 100003.0\n    PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n    PLUGIN_AUTHOR: Brian Aker, MySQL AB\n  PLUGIN_DESCRIPTION: CSV storage engine\n    PLUGIN_LICENSE: GPL\n     LOAD_OPTION: FORCE\n   PLUGIN_MATURITY: Stable\n PLUGIN_AUTH_VERSION: 1.0\n*************************** 7. row ***************************\n     PLUGIN_NAME: MEMORY\n    PLUGIN_VERSION: 1.0\n    PLUGIN_STATUS: ACTIVE\n     PLUGIN_TYPE: STORAGE ENGINE\n PLUGIN_TYPE_VERSION: 100003.0\n    PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n    PLUGIN_AUTHOR: MySQL AB\n  PLUGIN_DESCRIPTION: Hash based, stored in memory, useful for temporary tables\n    PLUGIN_LICENSE: GPL\n     LOAD_OPTION: FORCE\n   PLUGIN_MATURITY: Stable\n PLUGIN_AUTH_VERSION: 1.0\n...\n\nIf a plugin's PLUGIN_LIBRARY column has the NULL value, then the plugin is built-in,\nand it cannot be uninstalled.\n\nQuerying Plugin Information with mysql.plugin\n\nThe mysql.plugin table can be queried to get information about installed plugins.\n\nThis table only contains information about plugins that have been installed via the\nfollowing methods:\n\nThis table does not contain information about:\n\nThis table only contains enough information to reload the plugin when the server is\nrestarted, which means it only contains the plugin name and the plugin library.\n\nFor example:\nSELECT * FROM mysql.plugin;\n\n+------+------------+\n| name | dl         |\n+------+------------+\n| PBXT | libpbxt.so |\n+------+------------+\n\nInstalling a Plugin\n-------------------\nThere are three primary ways to install a plugin:\n\nWhen you are installing a plugin, you also have to ensure that:\n\nInstalling a Plugin Dynamically\n\nA plugin can be installed dynamically by executing either the INSTALL SONAME or the\nINSTALL PLUGIN statement.\n\nIf a plugin is installed with one of these statements, then a record will be added to\nthe mysql.plugins table for the plugin. This means that the plugin will automatically\nbe loaded every time the server restarts, unless specifically uninstalled\nor deactivated.\n\nInstalling a Plugin with INSTALL SONAME\nYou can install a plugin dynamically by executing the INSTALL SONAME statement.\n\nINSTALL SONAME installs all plugins from the given plugin library. This could be\nrequired for some plugin libraries.\n\nFor example, to install all plugins in the server_audit plugin library (which is\ncurrently only the server_audit audit plugin), you could execute the following:\nINSTALL SONAME 'server_audit';\n\nInstalling a Plugin with INSTALL PLUGIN\nYou can install a plugin dynamically by executing the INSTALL PLUGIN statement.\n\nINSTALL PLUGIN installs a single plugin from the given plugin library.\n\nFor example, to install the server_audit audit plugin from the server_audit plugin\nlibrary, you could execute the following:\nINSTALL PLUGIN server_audit SONAME 'server_audit';\n\nInstalling a Plugin with Plugin Load Options\n\nA plugin can be installed with a mysqld option by providing either the\n--plugin-load-add or the --plugin-load option.\n\nIf a plugin is installed with one of these options, then a record will not be added\nto the mysql.plugins table for the plugin. This means that if the server is restarted\nwithout the same option set, then the plugin will not automatically be loaded.\n\nInstalling a Plugin with --plugin-load-add\nYou can install a plugin with the --plugin-load-add option by specifying the option\nas a command-line argument to mysqld or by specifying the option in a relevant server\noption group in an option file.\n\nThe --plugin-load-add option uses the following format:\n\nFor example, to install all plugins in the server_audit plugin library (which is\ncurrently only the server_audit audit plugin) and also the ed25519 authentication\nplugin from the auth_ed25519 plugin library, you could set the option to the\nfollowing values on the command-line:\n$ mysqld --user=mysql\n--plugin-load-add='server_audit' --plugin-load-add='ed25519=auth_ed25519'\n\nYou could also set the option to the same values in an option file:\n[mariadb]\n...\nplugin_load_add = server_audit\nplugin_load_add = ed25519=auth_ed25519\n\nSpecial care must be taken when specifying both the --plugin-load option and the\n--plugin-load-add option together. The --plugin-load option resets the plugin load\nlist, and this can cause unexpected problems if you are not aware. The\n--plugin-load-add option does not reset the plugin load list, so it is much safer to\nuse. See Specifying Multiple Plugin Load Options for more information.\n\nInstalling a Plugin with --plugin-load\nYou can install a plugin with the --plugin-load option by specifying the option as a\ncommand-line argument to mysqld or by specifying the option in a relevant server\noption group in an option file.\n\nThe --plugin-load option uses the following format:\n\nFor example, to install all plugins in the server_audit plugin library (which is\ncurrently only the server_audit audit plugin) and also the ed25519 authentication\nplugin from the auth_ed25519 plugin library, you could set the option to the\nfollowing values on the command-line:\n$ mysqld --user=mysql --plugin-load='server_audit;ed25519=auth_ed25519'\n\nYou could also set the option to the same values in an option file:\n[mariadb]\n...\nplugin_load = server_audit;ed25519=auth_ed25519\n\nSpecial care must be taken when specifying the --plugin-load option multiple times,\nor when specifying both the --plugin-load option and the --plugin-load-add option\ntogether. The --plugin-load option resets the plugin load list, and this can cause\nunexpected problems if you are not aware. The --plugin-load-add option does not reset\nthe plugin load list, so it is much safer to use. See Specifying Multiple Plugin Load\nOptions for more information.\n\nSpecifying Multiple Plugin Load Options\nSpecial care must be taken when specifying the --plugin-load option multiple times,\nor when specifying both the --plugin-load option and the --plugin-load-add option.\n\nThe --plugin-load option resets the plugin load list, and this can cause unexpected\nproblems if you are not aware. The --plugin-load-add option does not reset the plugin\nload list, so it is much safer to use.\n\nThis can have the following consequences:\n\n[mariadb]\n...\nplugin_load = server_audit\nplugin_load = ed25519=auth_ed25519\n\n[mariadb]\n...\nplugin_load_add = server_audit\nplugin_load = ed25519=auth_ed25519\n\n[mariadb]\n...\nplugin_load = server_audit\nplugin_load_add = ed25519=auth_ed25519\n\nInstalling a Plugin with mysql_plugin\n\nA plugin can be installed with the mysql_plugin utility if the server is completely\noffline.\n\nThe syntax is:\nmysql_plugin [options] <plugin> ENABLE|DISABLE\n\nFor example, to install the server_audit audit plugin, you could execute\nthe following:\nmysql_plugin server_audit ENABLE\n\nIf a plugin is installed with this utility, then a record will be added to the\nmysql.plugins table for the plugin. This means that the plugin will automatically be\nloaded every time the server restarts, unless specifically uninstalled\nor deactivated.\n\nConfiguring the Plugin Directory\n\nWhen a plugin is being installed, the server looks for the plugin's library in the\nserver's plugin directory. This directory is configured by the plugin_dir system\nvariable. This can be specified as a command-line argument to mysqld or it can be\nspecified in a relevant server option group in an option file. For example:\n[mariadb]\n...\nplugin_dir = /usr/lib64/mysql/plugin\n\nConfiguring the Minimum Plugin Maturity\n\nWhen a plugin is being installed, the server compares the plugin's maturity level\nagainst the server's minimum allowed plugin maturity. This can help prevent users\nfrom using unstable plugins on production servers. This minimum plugin maturity is\nconfigured by the plugin_maturity system variable. This can be specified as a\ncommand-line argument to mysqld or it can be specified in a relevant server option\ngroup in an option file. For example:\n[mariadb]\n...\nplugin_maturity = stable\n\nConfiguring Plugin Activation at Server Startup\n\nA plugin will be loaded by default when the server starts if:\n\nThis behavior can be changed with special options that take the form --plugin-name.\n\nFor example, for the server_audit audit plugin, the special option is\ncalled --server-audit.\n\nThe possible values for these special options are:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------+--------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------+\n|Option Value\n\n|Description\n\n|\n|OFF\n\n|Disables the plugin without\nremoving it from the mysql.plugins table.\n\n|\n|ON\n\n|Enables the plugin. If the\nplugin cannot be initialized, then the server will still continue starting up, but\nthe plugin will be disabled.\n\n|\n|FORCE\n\n|Enables the plugin. If the\nplugin cannot be initialized, then the server will fail to start with an error.\n\n|\n|FORCE_PLUS_PERMANENT\n\n|Enables the plugin. If the\nplugin cannot be initialized, then the server will fail to start with an error. In\naddition, the plugin cannot be uninstalled with UNINSTALL SONAME or UNINSTALL PLUGIN\nwhile the server is running.|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------+--------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------+\nA plugin's status can be found by looking at the PLUGIN_STATUS column of the\ninformation_schema.PLUGINS table.\n\nUninstalling Plugins\n--------------------\nPlugins that are found in the mysql.plugin table, that is those that were installed\nwith INSTALL SONAME, INSTALL PLUGIN or mysql_plugin can be uninstalled in one of\ntwo ways:\n\nPlugins that were enabled as a --plugin-load option do not need to be uninstalled. If\n--plugin-load is omitted the next time the server starts, or the plugin is not listed\nas one of the --plugin-load entries, the plugin will not be loaded.\n\nUNINSTALL PLUGIN uninstalls a single installed plugin, while UNINSTALL SONAME\nuninstalls all plugins belonging to a given library.\n','','https://mariadb.com/kb/en/library/plugin-overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (79,5,'INSTALL PLUGIN','Syntax\n------\nINSTALL PLUGIN [IF NOT EXISTS] plugin_name SONAME 'plugin_library'\n\nDescription\n-----------\nThis statement installs an individual plugin from the specified library. To install\nthe whole library (which could be required), use INSTALL SONAME. See also Installing\na Plugin.\n\nplugin_name is the name of the plugin as defined in the\nplugin declaration structure contained in the library file. Plugin names are\nnot case sensitive. For maximal compatibility, plugin names should be limited\nto ASCII letters, digits, and underscore, because they are used in C source\nfiles, shell command lines, M4 and Bourne shell scripts, and SQL environments.\n\nplugin_library is the name of the shared library that\ncontains the plugin code. The file name extension can be omitted (which makes the\nstatement look the same on all architectures).\n\nThe shared library must be located in the plugin directory (that is,\nthe directory named by the plugin_dir system variable). The library must be in the\nplugin directory itself, not in a subdirectory. By\ndefault, plugin_dir is plugin directory under the directory named by\nthe pkglibdir configuration variable, but it can be changed by setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:\n[mysqld]\nplugin_dir=/path/to/plugin/directory\nIf the value of plugin_dir is a relative path name, it is\ntaken to be relative to the MySQL base directory (the value of the basedir\nsystem variable).\n\nINSTALL PLUGIN adds a line to the mysql.plugin table that\ndescribes the plugin. This table contains the plugin name and library file\nname.\n\nINSTALL PLUGIN causes the server to read\noption (my.cnf) files just as during server startup. This enables the plugin to\npick up any relevant options from those files. It is possible to add plugin\noptions to an option file even before loading a plugin (if the loose prefix is\nused). It is also possible to uninstall a plugin, edit my.cnf, and install the\nplugin again. Restarting the plugin this way enables it to the new option\nvalues without a server restart.\n\nINSTALL PLUGIN also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized by executing its\ninitialization function, which handles any setup that the plugin must perform\nbefore it can be used.\n\nTo use INSTALL PLUGIN, you must have the\nINSERT privilege for the mysql.plugin table.\n\nAt server startup, the server loads and initializes any plugin that is\nlisted in the mysql.plugin table. This means that a plugin is installed\nwith INSTALL PLUGIN only once, not every time the server\nstarts. Plugin loading at startup does not occur if the server is started with\nthe --skip-grant-tables option.\n\nWhen the server shuts down, it executes the de-initialization function\nfor each plugin that is loaded so that the plugin has a chance to\nperform any final cleanup.\n\nIf you need to load plugins for a single server startup when the\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mysqld option.\n\nExamples\n--------\nINSTALL PLUGIN sphinx SONAME 'ha_sphinx.so';\n\nThe extension can also be omitted:\nINSTALL PLUGIN innodb SONAME 'ha_xtradb';\n\nFrom MariaDB 10.4.0:\nINSTALL PLUGIN IF NOT EXISTS example SONAME 'ha_example';\nQuery OK, 0 rows affected (0.104 sec)\n\nINSTALL PLUGIN IF NOT EXISTS example SONAME 'ha_example';\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1968 | Plugin 'example' already installed |\n+-------+------+------------------------------------+\n','','https://mariadb.com/kb/en/library/install-plugin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (80,5,'UNINSTALL PLUGIN','Syntax\n------\nUNINSTALL PLUGIN [IF EXISTS] plugin_name\n\nDescription\n-----------\nThis statement removes a single installed plugin. To uninstall the whole library\nwhich contains the plugin, use UNINSTALL SONAME. You cannot uninstall a plugin if any\ntable that uses it is open.\n\nplugin_name must be the name of some plugin that is listed\nin the mysql.plugin table. The server executes the plugin's deinitialization\nfunction and removes the row for the plugin from the mysql.plugin\ntable, so that subsequent server restarts will not load and initialize\nthe plugin. UNINSTALL PLUGIN does not remove the plugin's\nshared library file.\n\nTo use UNINSTALL PLUGIN, you must have the\nDELETE privilege for the mysql.plugin table.\n\nExamples\n--------\nUNINSTALL PLUGIN example;\n\nFrom MariaDB 10.4.0:\nUNINSTALL PLUGIN IF EXISTS example;\nQuery OK, 0 rows affected (0.099 sec)\n\nUNINSTALL PLUGIN IF EXISTS example;\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------+\n| Level | Code | Message                       |\n+-------+------+-------------------------------+\n| Note  | 1305 | PLUGIN example does not exist |\n+-------+------+-------------------------------+\n','','https://mariadb.com/kb/en/library/uninstall-plugin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (81,5,'INSTALL SONAME','Syntax\n------\nINSTALL SONAME 'plugin_library'\n\nDescription\n-----------\nThis statement is a variant of INSTALL PLUGIN. It installs all plugins from a given\nplugin_library. See INSTALL PLUGIN for details.\n\nplugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted (which makes the statement\nlook the same on all architectures).\n\nThe shared library must be located in the plugin directory (that is,\nthe directory named by the plugin_dir system variable). The library must be in the\nplugin directory itself, not in a subdirectory. By\ndefault, plugin_dir is plugin directory under the directory named by\nthe pkglibdir configuration variable, but it can be changed by setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:\n[mysqld]\nplugin_dir=/path/to/plugin/directory\nIf the value of plugin_dir is a relative path name, it is\ntaken to be relative to the MySQL base directory (the value of the basedir\nsystem variable).\n\nINSTALL SONAME adds one or more lines to the mysql.plugin table that\ndescribes the plugin. This table contains the plugin name and library file\nname.\n\nINSTALL SONAME causes the server to read\noption (my.cnf) files just as during server startup. This enables the plugin to\npick up any relevant options from those files. It is possible to add plugin\noptions to an option file even before loading a plugin (if the loose prefix is\nused). It is also possible to uninstall a plugin, edit my.cnf, and install the\nplugin again. Restarting the plugin this way enables it to the new option\nvalues without a server restart.\n\nINSTALL SONAME also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized by executing its\ninitialization function, which handles any setup that the plugin must perform\nbefore it can be used.\n\nTo use INSTALL SONAME, you must have the\nINSERT privilege for the mysql.plugin table.\n\nAt server startup, the server loads and initializes any plugin that is\nlisted in the mysql.plugin table. This means that a plugin is installed\nwith INSTALL SONAME only once, not every time the server\nstarts. Plugin loading at startup does not occur if the server is started with\nthe --skip-grant-tables option.\n\nWhen the server shuts down, it executes the de-initialization function\nfor each plugin that is loaded so that the plugin has a chance to\nperform any final cleanup.\n\nIf you need to load plugins for a single server startup when the\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mysqld option.\n\nIf you need to install only one plugin from a library, use the INSTALL\nPLUGIN statement.\n\nExamples\n--------\nTo load the XtraDB storage engine and all of its information_schema tables with one\nstatement, use\nINSTALL SONAME 'ha_xtradb';\n\nThis statement can be used instead of INSTALL PLUGIN even when the library contains\nonly one plugin:\nINSTALL SONAME 'ha_sequence';\n','','https://mariadb.com/kb/en/library/install-soname/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (82,5,'UNINSTALL SONAME','Syntax\n------\nUNINSTALL SONAME  [IF EXISTS] 'plugin_library'\n\nDescription\n-----------\nThis statement is a variant of UNINSTALL PLUGIN statement, that removes all plugins\nbelonging to a specified plugin_library. See UNINSTALL PLUGIN for details.\n\nplugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted (which makes the statement\nlook the same on all architectures).\n\nTo use UNINSTALL SONAME, you must have the\nDELETE privilege for the mysql.plugin table.\n\nExamples\n--------\nTo uninstall the XtraDB plugin and all of its information_schema tables with one\nstatement, use\nUNINSTALL SONAME 'ha_xtradb';\n\nFrom MariaDB 10.4.0:\nUNINSTALL SONAME IF EXISTS 'ha_example';\nQuery OK, 0 rows affected (0.099 sec)\n\nUNINSTALL SONAME IF EXISTS 'ha_example';\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------------+\n| Level | Code | Message                             |\n+-------+------+-------------------------------------+\n| Note  | 1305 | SONAME ha_example.so does not exist |\n+-------+------+-------------------------------------+\n','','https://mariadb.com/kb/en/library/uninstall-soname/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (83,6,'MBR Definition','Description\n-----------\nThe MBR (Minimum Bounding Rectangle), or Envelope is the bounding\ngeometry, formed by the minimum and maximum (X,Y) coordinates:\n\nExamples\n--------\n((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n','','https://mariadb.com/kb/en/library/mbr-definition/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (84,6,'MBRContains','Syntax\n------\nMBRContains(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 contains the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRWithin().\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GeomFromText('Point(1 1)');\n\nSELECT MBRContains(@g1,@g2), MBRContains(@g2,@g1);\n+----------------------+----------------------+\n| MBRContains(@g1,@g2) | MBRContains(@g2,@g1) |\n+----------------------+----------------------+\n|                    1 |                    0 |\n+----------------------+----------------------+\n','','https://mariadb.com/kb/en/library/mbrcontains/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (85,6,'MBRDisjoint','Syntax\n------\nMBRDisjoint(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two\ngeometries g1 and g2 are disjoint. Two geometries are disjoint if they do not\nintersect, that is touch or overlap.\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECTmbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/mbrdisjoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (86,6,'MBREqual','Syntax\n------\nMBREqual(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 are the same.\n\nExamples\n--------\nSET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 2)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 2, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 3)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 4, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 0 |\n+-------------------+\n','','https://mariadb.com/kb/en/library/mbrequal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (87,6,'MBRIntersects','Syntax\n------\nMBRIntersects(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two\ngeometries g1 and g2 intersect.\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/mbrintersects/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (88,6,'MBROverlaps','Syntax\n------\nMBROverlaps(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 overlap. The term spatially overlaps is\nused if two geometries intersect and their intersection results in a\ngeometry of the same dimension but not equal to either of the given\ngeometries.\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/mbroverlaps/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (89,6,'MBRTouches','Syntax\n------\nMBRTouches(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 touch. Two geometries spatially touch if\nthe interiors of the geometries do not intersect, but the boundary of\none of the geometries intersects either the boundary or the interior\nof the other.\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/mbrtouches/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (90,6,'MBRWithin','Syntax\n------\nMBRWithin(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 is within the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRContains().\n\nExamples\n--------\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nSELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n','','https://mariadb.com/kb/en/library/mbrwithin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (91,7,'CASE OPERATOR','Syntax\n------\nCASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN\nresult ...] [ELSE result] END\n\nCASE WHEN [condition] THEN result [WHEN [condition] THEN result ...]\n[ELSE result] END\n\nDescription\n-----------\nThe first version returns the result where value=compare_value. The\nsecond version returns the result for the first condition that is\ntrue.  If there was no matching result value, the result after ELSE is\nreturned, or NULL if there is no ELSE part.\n\nThere is also a CASE statement, which differs from the CASE operator described here.\n\nExamples\n--------\nSELECT CASE 1 WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'more' END;\n+------------------------------------------------------------+\n| CASE 1 WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'more' END |\n+------------------------------------------------------------+\n| one                                                        |\n+------------------------------------------------------------+\n\nSELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;\n+--------------------------------------------+\n| CASE WHEN 1>0 THEN 'true' ELSE 'false' END |\n+--------------------------------------------+\n| true                                       |\n+--------------------------------------------+\n\nSELECT CASE BINARY 'B' WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;\n+-----------------------------------------------------+\n| CASE BINARY 'B' WHEN 'a' THEN 1 WHEN 'b' THEN 2 END |\n+-----------------------------------------------------+\n|                                                NULL |\n+-----------------------------------------------------+\n','','https://mariadb.com/kb/en/library/case-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (92,7,'IF Function','Syntax\n------\nIF(expr1,expr2,expr3)\n\nDescription\n-----------\nIf expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then IF()\nreturns expr2; otherwise it returns expr3. IF() returns a numeric\nor string value, depending on the context in which it is used.\n\nNote: There is also an IF statement which differs from the\nIF() function described here.\n\nExamples\n--------\nSELECT IF(1>2,2,3);\n+-------------+\n| IF(1>2,2,3) |\n+-------------+\n|           3 |\n+-------------+\n\nSELECT IF(1<2,'yes','no');\n+--------------------+\n| IF(1<2,'yes','no') |\n+--------------------+\n| yes                |\n+--------------------+\n\nSELECT IF(STRCMP('test','test1'),'no','yes');\n+---------------------------------------+\n| IF(STRCMP('test','test1'),'no','yes') |\n+---------------------------------------+\n| no                                    |\n+---------------------------------------+\n\nThere is also an IF statement, which differs from the IF() function described above.\n','','https://mariadb.com/kb/en/library/if-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (93,7,'IFNULL','Syntax\n------\nIFNULL(expr1,expr2)\nNVL(expr1,expr2)\n\nDescription\n-----------\nIf expr1 is not NULL, IFNULL() returns expr1; otherwise it returns\nexpr2. IFNULL() returns a numeric or string value, depending on the\ncontext in which it is used.\n\nFrom MariaDB 10.3, NVL() is an alias for IFNULL().\n\nExamples\n--------\nSELECT IFNULL(1,0); \n+-------------+\n| IFNULL(1,0) |\n+-------------+\n|           1 |\n+-------------+\n\nSELECT IFNULL(NULL,10);\n+-----------------+\n| IFNULL(NULL,10) |\n+-----------------+\n|              10 |\n+-----------------+\n\nSELECT IFNULL(1/0,10);\n+----------------+\n| IFNULL(1/0,10) |\n+----------------+\n|        10.0000 |\n+----------------+\n\nSELECT IFNULL(1/0,'yes');\n+-------------------+\n| IFNULL(1/0,'yes') |\n+-------------------+\n| yes               |\n+-------------------+\n','','https://mariadb.com/kb/en/library/ifnull/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (94,7,'NULLIF','Syntax\n------\nNULLIF(expr1,expr2)\n\nDescription\n-----------\nReturns NULL if expr1 = expr2 is true, otherwise returns expr1. This is\nthe same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END.\n\nExamples\n--------\nSELECT NULLIF(1,1);\n+-------------+\n| NULLIF(1,1) |\n+-------------+\n|        NULL |\n+-------------+\n\nSELECT NULLIF(1,2);\n+-------------+\n| NULLIF(1,2) |\n+-------------+\n|           1 |\n+-------------+\n','','https://mariadb.com/kb/en/library/nullif/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (95,8,'CHANGE MASTER TO','The terms master and slave have historically been used in replication, but\nthe terms terms primary and replica are now preferred. The old terms are used still\nused in parts of the documentation, and in MariaDB commands, although MariaDB 10.5\nhas begun the process of renaming. The documentation process is ongoing. See\nMDEV-18777 to follow progress on this effort.\n\nSyntax\n------\nCHANGE MASTER ['connection_name'] TO master_def  [, master_def] ... \n [FOR CHANNEL 'channel_name']\n\nmaster_def:\n  MASTER_BIND = 'interface_name'\n | MASTER_HOST = 'host_name'\n | MASTER_USER = 'user_name'\n | MASTER_PASSWORD = 'password'\n | MASTER_PORT = port_num\n | MASTER_CONNECT_RETRY = interval\n | MASTER_HEARTBEAT_PERIOD = interval\n | MASTER_LOG_FILE = 'master_log_name'\n | MASTER_LOG_POS = master_log_pos\n | RELAY_LOG_FILE = 'relay_log_name'\n | RELAY_LOG_POS = relay_log_pos\n | MASTER_DELAY = interval\n | MASTER_SSL = {0|1}\n | MASTER_SSL_CA = 'ca_file_name'\n | MASTER_SSL_CAPATH = 'ca_directory_name'\n | MASTER_SSL_CERT = 'cert_file_name'\n | MASTER_SSL_CRL = 'crl_file_name'\n | MASTER_SSL_CRLPATH = 'crl_directory_name'\n | MASTER_SSL_KEY = 'key_file_name'\n | MASTER_SSL_CIPHER = 'cipher_list'\n | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}\n | MASTER_USE_GTID = {current_pos|slave_pos|no}\n | IGNORE_SERVER_IDS = (server_id_list)\n | DO_DOMAIN_IDS = ([N,..])\n | IGNORE_DOMAIN_IDS = ([N,..])\n\nDescription\n-----------\nThe CHANGE MASTER statement sets the options that a replica uses to connect to and\nreplicate from a primary.\n\nMulti-Source Replication\n------------------------\nIf you are using multi-source replication, then you need to specify a connection name\nwhen you execute CHANGE MASTER. There are two ways to do this:\n\ndefault_master_connection\n\nSET default_master_connection = 'gandalf';\nSTOP SLAVE;\nCHANGE MASTER TO \n MASTER_PASSWORD='new3cret';\nSTART SLAVE;\n\nconnection_name\n\nSTOP SLAVE 'gandalf';\nCHANGE MASTER 'gandalf' TO \n MASTER_PASSWORD='new3cret';\nSTART SLAVE 'gandalf';\n\nOptions\n-------\n\nConnection Options\n\nMASTER_USER\nThe MASTER_USER option for CHANGE MASTER defines the user account that the replica\nwill use to connect to the primary.\n\nThis user account will need the REPLICATION SLAVE privilege (or, from MariaDB 10.5.1,\nthe REPLICATION REPLICA on the primary.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_USER='repl',\n MASTER_PASSWORD='new3cret';\nSTART SLAVE;\n\nThe maximum length of the MASTER_USER string is 96 characters until MariaDB 10.5, and\n128 characters from MariaDB 10.6.\n\nMASTER_PASSWORD\nThe MASTER_USER option for CHANGE MASTER defines the password that the replica will\nuse to connect to the primary as the user account defined by the MASTER_USER option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO \n MASTER_PASSWORD='new3cret';\nSTART SLAVE;\n\nThe maximum length of the MASTER_PASSWORD string is 32 characters.\n\nMASTER_HOST\nThe MASTER_HOST option for CHANGE MASTER defines the hostname or IP address of\nthe primary.\n\nIf you set the value of the MASTER_HOST option to the empty string, then that is not\nthe same as not setting the option's value at all. If you set the value of the\nMASTER_HOST option to the empty string, then the CHANGE MASTER command will fail with\nan error. In MariaDB 5.3 and before, if you set the value of the MASTER_HOST option\nto the empty string, then the CHANGE MASTER command would succeed, but the subsequent\nSTART SLAVE command would fail.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_HOST='dbserver1.example.com',\n MASTER_USER='repl',\n MASTER_PASSWORD='new3cret',\n MASTER_USE_GTID=slave_pos;\nSTART SLAVE;\n\nIf you set the value of the MASTER_HOST option in a CHANGE MASTER command, then the\nreplica assumes that the primary is different from before, even if you set the value\nof this option to the same value it had previously. In this scenario, the replica\nwill consider the old values for the primary's binary\nlog file name and position to be invalid for the new primary. As a side effect, if\nyou do not explicitly set the values of the MASTER_LOG_FILE and MASTER_LOG_POS\noptions in the statement, then the statement will be implicitly appended with\nMASTER_LOG_FILE='' and MASTER_LOG_POS=4. However, if you enable GTID mode for\nreplication by setting the MASTER_USE_GTID option to some value other than no in the\nstatement, then these values will effectively be ignored anyway.\n\nReplicas cannot connect to primaries using Unix socket files or Windows named pipes.\n\nThe replica must connect to the primary using TCP/IP.\n\nThe maximum length of the MASTER_HOST string is 60 characters until MariaDB 10.5, and\n255 characters from MariaDB 10.6.\n\nMASTER_PORT\nThe MASTER_PORT option for CHANGE MASTER defines the TCP/IP port of the primary.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_HOST='dbserver1.example.com',\n MASTER_PORT=3307,\n MASTER_USER='repl',\n MASTER_PASSWORD='new3cret',\n MASTER_USE_GTID=slave_pos;\nSTART SLAVE;\n\nIf you set the value of the MASTER_PORT option in a CHANGE MASTER command, then the\nreplica assumes that the primary is different from before, even if you set the value\nof this option to the same value it had previously. In this scenario, the replica\nwill consider the old values for the primary's binary\nlog file name and position to be invalid for the new primary. As a side effect, if\nyou do not explicitly set the values of the MASTER_LOG_FILE and MASTER_LOG_POS\noptions in the statement, then the statement will be implicitly appended with\nMASTER_LOG_FILE='' and MASTER_LOG_POS=4. However, if you enable GTID mode for\nreplication by setting the MASTER_USE_GTID option to some value other than no in the\nstatement, then these values will effectively be ignored anyway.\n\nReplicas cannot connect to primaries using Unix socket files or Windows named pipes.\n\nThe replica must connect to the primary using TCP/IP.\n\nMASTER_CONNECT_RETRY\nThe MASTER_CONNECT_RETRY option for CHANGE MASTER defines how many seconds that the\nreplica will wait between connection retries. The default is 60.\n\nSTOP SLAVE;\nCHANGE MASTER TO \n MASTER_CONNECT_RETRY=20;\nSTART SLAVE;\n\nThe number of connection attempts is limited by the master_retry_count option. It can\nbe set either on the command-line or in a server option group in an option file prior\nto starting up the server. For example:\n[mariadb]\n...\nmaster_retry_count=4294967295\n\nMASTER_BIND\nThe MASTER_BIND option for CHANGE MASTER is only supported by MySQL 5.6.2 and later\nand by MySQL NDB Cluster 7.3.1 and later. This option is not supported by MariaDB.\n\nSee MDEV-19248 for more information.\n\nThe MASTER_BIND option for CHANGE MASTER can be used on replicas that have multiple\nnetwork interfaces to choose which network interface the replica will use to connect\nto the primary.\n\nMASTER_HEARTBEAT_PERIOD\nThe MASTER_HEARTBEAT_PERIOD option for CHANGE MASTER can be used to set the interval\nin seconds between replication heartbeats. Whenever the primary's binary log is\nupdated with an event, the waiting period for the next heartbeat is reset.\n\nThis option's interval argument has the following characteristics:\n\nHeartbeats are sent by the primary only if there are no unsent events in the binary\nlog file for a period longer than the interval.\n\nIf the RESET SLAVE statement is executed, then the heartbeat interval is reset to\nthe default.\n\nIf the slave_net_timeout system variable is set to a value that is lower than the\ncurrent heartbeat interval, then a warning will be issued.\n\nTLS Options\n\nThe TLS options are used for providing information about TLS. The options can be set\neven on replicas that are compiled without TLS support. The TLS options are saved to\neither the default master.info file or the file that is configured by the\nmaster_info_file option, but these TLS options are ignored unless the replica\nsupports TLS.\n\nSee Replication with Secure Connections for more information.\n\nMASTER_SSL\nThe MASTER_SSL option for CHANGE MASTER tells the replica whether to force TLS for\nthe connection. The valid values are 0 or 1.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL=1;\nSTART SLAVE;\n\nMASTER_SSL_CA\nThe MASTER_SSL_CA option for CHANGE MASTER defines a path to a PEM file that should\ncontain one or more X509 certificates for trusted Certificate Authorities (CAs) to\nuse for TLS. This option requires that you use the absolute path, not a relative\npath. This option implies the MASTER_SSL option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\nSTART SLAVE;\n\nSee Secure Connections Overview: Certificate Authorities (CAs) for more information.\n\nThe maximum length of MASTER_SSL_CA string is 511 characters.\n\nMASTER_SSL_CAPATH\nThe MASTER_SSL_CAPATH option for CHANGE MASTER defines a path to a directory that\ncontains one or more PEM files that should each contain one X509 certificate for a\ntrusted Certificate Authority (CA) to use for TLS. This option requires that you use\nthe absolute path, not a relative path. The directory specified by this option needs\nto be run through the openssl rehash command. This option implies the\nMASTER_SSL option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CAPATH='/etc/my.cnf.d/certificates/ca/',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\nSTART SLAVE;\n\nSee Secure Connections Overview: Certificate Authorities (CAs) for more information.\n\nThe maximum length of MASTER_SSL_CA_PATH string is 511 characters.\n\nMASTER_SSL_CERT\nThe MASTER_SSL_CERT option for CHANGE MASTER defines a path to the X509 certificate\nfile to use for TLS. This option requires that you use the absolute path, not a\nrelative path. This option implies the MASTER_SSL option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\nSTART SLAVE;\n\nThe maximum length of MASTER_SSL_CERT string is 511 characters.\n\nMASTER_SSL_CRL\nThe MASTER_SSL_CRL option for CHANGE MASTER defines a path to a PEM file that should\ncontain one or more revoked X509 certificates to use for TLS. This option requires\nthat you use the absolute path, not a relative path.\n\nThis option is only supported if the server was built with OpenSSL. If the server was\nbuilt with yaSSL, then this option is not supported. See TLS and Cryptography\nLibraries Used by MariaDB for more information about which libraries are used on\nwhich platforms.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CRL='/etc/my.cnf.d/certificates/crl.pem';\nSTART SLAVE;\n\nSee Secure Connections Overview: Certificate Revocation Lists (CRLs) for\nmore information.\n\nThe maximum length of MASTER_SSL_CRL string is 511 characters.\n\nMASTER_SSL_CRLPATH\nThe MASTER_SSL_CRLPATH option for CHANGE MASTER defines a path to a directory that\ncontains one or more PEM files that should each contain one revoked X509 certificate\nto use for TLS. This option requires that you use the absolute path, not a relative\npath. The directory specified by this variable needs to be run through the openssl\nrehash command.\n\nThis option is only supported if the server was built with OpenSSL. If the server was\nbuilt with yaSSL, then this option is not supported. See TLS and Cryptography\nLibraries Used by MariaDB for more information about which libraries are used on\nwhich platforms.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CRLPATH='/etc/my.cnf.d/certificates/crl/';\nSTART SLAVE;\n\nSee Secure Connections Overview: Certificate Revocation Lists (CRLs) for\nmore information.\n\nThe maximum length of MASTER_SSL_CRL_PATH string is 511 characters.\n\nMASTER_SSL_KEY\nThe MASTER_SSL_KEY option for CHANGE MASTER defines a path to a private key file to\nuse for TLS. This option requires that you use the absolute path, not a relative\npath. This option implies the MASTER_SSL option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\nSTART SLAVE;\n\nThe maximum length of MASTER_SSL_KEY string is 511 characters.\n\nMASTER_SSL_CIPHER\nThe MASTER_SSL_CIPHER option for CHANGE MASTER defines the list of permitted ciphers\nor cipher suites to use for TLS. Besides cipher names, if MariaDB was compiled with\nOpenSSL, this option could be set to "SSLv3" or "TLSv1.2" to allow all SSLv3 or all\nTLSv1.2 ciphers. Note that the TLSv1.3 ciphers cannot be excluded when using OpenSSL,\neven by using this option. See Using TLSv1.3 for details. This option implies the\nMASTER_SSL option.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CIPHER='TLSv1.2';\nSTART SLAVE;\n\nThe maximum length of MASTER_SSL_CIPHER string is 511 characters.\n\nMASTER_SSL_VERIFY_SERVER_CERT\nThe MASTER_SSL_VERIFY_SERVER_CERT option for CHANGE MASTER enables server certificate\nverification. This option is disabled by default.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_SSL_CERT='/etc/my.cnf.d/certificates/server-cert.pem',\n MASTER_SSL_KEY='/etc/my.cnf.d/certificates/server-key.pem',\n MASTER_SSL_CA='/etc/my.cnf.d/certificates/ca.pem',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\nSTART SLAVE;\n\nSee Secure Connections Overview: Server Certificate Verification for\nmore information.\n\nBinary Log Options\n\nThese options are related to the binary log position on the primary.\n\nMASTER_LOG_FILE\nThe MASTER_LOG_FILE option for CHANGE MASTER can be used along with MASTER_LOG_POS to\nspecify the coordinates at which the replica's I/O thread should begin reading from\nthe primary's binary logs the next time the thread starts.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_LOG_FILE='master2-bin.001',\n MASTER_LOG_POS=4;\nSTART SLAVE;\n\nThe MASTER_LOG_FILE and MASTER_LOG_POS options cannot be specified if the\nRELAY_LOG_FILE and RELAY_LOG_POS options were also specified.\n\nThe MASTER_LOG_FILE and MASTER_LOG_POS options are effectively ignored if you enable\nGTID mode for replication by setting the MASTER_USE_GTID option to some value other\nthan no in the statement.\n\nMASTER_LOG_POS\nThe MASTER_LOG_POS option for CHANGE MASTER can be used along with MASTER_LOG_FILE to\nspecify the coordinates at which the replica's I/O thread should begin reading from\nthe primary's binary logs the next time the thread starts.\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_LOG_FILE='master2-bin.001',\n MASTER_LOG_POS=4;\nSTART SLAVE;\n\nThe MASTER_LOG_FILE and MASTER_LOG_POS options cannot be specified if the\nRELAY_LOG_FILE and RELAY_LOG_POS options were also specified.\n\nThe MASTER_LOG_FILE and MASTER_LOG_POS options are effectively ignored if you enable\nGTID mode for replication by setting the MASTER_USE_GTID option to some value other\nthan no in the statement.\n\nRelay Log Options\n\nThese options are related to the relay log position on the replica.\n\nRELAY_LOG_FILE\nThe RELAY_LOG_FILE option for CHANGE MASTER can be used along with the RELAY_LOG_POS\noption to specify the coordinates at which the replica's SQL thread should begin\nreading from the relay log the next time the thread starts.\n\nThe CHANGE MASTER statement usually deletes all relay log files. However, if the\nRELAY_LOG_FILE and/or RELAY_LOG_POS options are specified, then existing relay log\nfiles are kept.\n\nWhen you want to change the relay log position, you only need to stop the replica's\nSQL thread. The replica's I/O thread can continue running. The STOP SLAVE and START\nSLAVE statements support the SQL_THREAD option for this scenario. For example:\nSTOP SLAVE SQL_THREAD;\nCHANGE MASTER TO\n RELAY_LOG_FILE='slave-relay-bin.006',\n RELAY_LOG_POS=4025;\nSTART SLAVE SQL_THREAD;\n\nWhen the value of this option is changed, the metadata about the replica's SQL\nthread's position in the relay logs will also be changed in the relay-log.info file\nor the file that is configured by the relay_log_info_file system variable.\n\nThe RELAY_LOG_FILE and RELAY_LOG_POS options cannot be specified if the\nMASTER_LOG_FILE and MASTER_LOG_POS options were also specified.\n\nRELAY_LOG_POS\nThe RELAY_LOG_POS option for CHANGE MASTER can be used along with the RELAY_LOG_FILE\noption to specify the coordinates at which the replica's SQL thread should begin\nreading from the relay log the next time the thread starts.\n\nThe CHANGE MASTER statement usually deletes all relay log files. However, if the\nRELAY_LOG_FILE and/or RELAY_LOG_POS options are specified, then existing relay log\nfiles are kept.\n\nWhen you want to change the relay log position, you only need to stop the replica's\nSQL thread. The replica's I/O thread can continue running. The STOP SLAVE and START\nSLAVE statements support the SQL_THREAD option for this scenario. For example:\nSTOP SLAVE SQL_THREAD;\nCHANGE MASTER TO\n RELAY_LOG_FILE='slave-relay-bin.006',\n RELAY_LOG_POS=4025;\nSTART SLAVE SQL_THREAD;\n\nWhen the value of this option is changed, the metadata about the replica's SQL\nthread's position in the relay logs will also be changed in the relay-log.info file\nor the file that is configured by the relay_log_info_file system variable.\n\nThe RELAY_LOG_FILE and RELAY_LOG_POS options cannot be specified if the\nMASTER_LOG_FILE and MASTER_LOG_POS options were also specified.\n\nGTID Options\n\nMASTER_USE_GTID\nThe MASTER_USE_GTID option for CHANGE MASTER can be used to configure the replica to\nuse the global transaction ID (GTID) when connecting to a primary. The possible\nvalues are:\n\nFor example:\nSTOP SLAVE;\nCHANGE MASTER TO\n MASTER_USE_GTID = current_pos;\nSTART SLAVE;\n\nOr:\nSTOP SLAVE;\nSET GLOBAL gtid_slave_pos='0-1-153';\nCHANGE MASTER TO\n MASTER_USE_GTID = slave_pos;\nSTART SLAVE;\n\nReplication Filter Options\n\nAlso see Replication filters.\n\nIGNORE_SERVER_IDS\nThe IGNORE_SERVER_IDS option for CHANGE MASTER can be used to configure a replica to\nignore binary log events that originated from certain servers. Filtered binary log\nevents will not get logged to the replica’s relay log, and they will not be applied\nby the replica.\n\nThe option's value can be specified by providing a comma-separated list of server_id\nvalues. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n IGNORE_SERVER_IDS = (3,5);\nSTART SLAVE;\n\nIf you would like to clear a previously set list, then you can set the value to an\nempty list. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n IGNORE_SERVER_IDS = ();\nSTART SLAVE;\n\nDO_DOMAIN_IDS\nThe DO_DOMAIN_IDS option for CHANGE MASTER can be used to configure a replica to only\napply binary log events if the transaction's GTID is in a specific gtid_domain_id\nvalue. Filtered binary log events will not get logged to the replica’s relay log, and\nthey will not be applied by the replica.\n\nThe option's value can be specified by providing a comma-separated list of\ngtid_domain_id values. Duplicate values are automatically ignored. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n\nIf you would like to clear a previously set list, then you can set the value to an\nempty list. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n DO_DOMAIN_IDS = ();\nSTART SLAVE;\n\nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option cannot both be set to\nnon-empty values at the same time. If you want to set the DO_DOMAIN_IDS option, and\nthe IGNORE_DOMAIN_IDS option was previously set, then you need to clear the value of\nthe IGNORE_DOMAIN_IDS option. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (),\n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n\nThe DO_DOMAIN_IDS option can only be specified if the replica is replicating in GTID\nmode. Therefore, the MASTER_USE_GTID option must also be set to some value other than\nno in order to use this option.\n\nIGNORE_DOMAIN_IDS\nThe IGNORE_DOMAIN_IDS option for CHANGE MASTER can be used to configure a replica to\nignore binary log events if the transaction's GTID is in a specific gtid_domain_id\nvalue. Filtered binary log events will not get logged to the replica’s relay log, and\nthey will not be applied by the replica.\n\nThe option's value can be specified by providing a comma-separated list of\ngtid_domain_id values. Duplicate values are automatically ignored. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n\nIf you would like to clear a previously set list, then you can set the value to an\nempty list. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = ();\nSTART SLAVE;\n\nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option cannot both be set to\nnon-empty values at the same time. If you want to set the IGNORE_DOMAIN_IDS option,\nand the DO_DOMAIN_IDS option was previously set, then you need to clear the value of\nthe DO_DOMAIN_IDS option. For example:\nSTOP SLAVE;\nCHANGE MASTER TO \n DO_DOMAIN_IDS = (),\n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n\nThe IGNORE_DOMAIN_IDS option can only be specified if the replica is replicating in\nGTID mode. Therefore, the MASTER_USE_GTID option must also be set to some value other\nthan no in order to use this option.\n\nDelayed Replication Options\n\nMASTER_DELAY\nThe MASTER_DELAY option for CHANGE MASTER can be used to enable delayed replication.\n\nThis option specifies the time in seconds (at least) that a replica should lag behind\nthe primary up to a maximum value of 2147483647, or about 68 years. Before executing\nan event, the replica will first wait, if necessary, until the given time has passed\nsince the event was created on the primary. The result is that the replica will\nreflect the state of the primary some time back in the past. The default is zero,\nno delay.\n\nSTOP SLAVE;\nCHANGE MASTER TO \n MASTER_DELAY=3600;\nSTART SLAVE;\n\nChanging Option Values\n----------------------\nIf you don't specify a given option when executing the CHANGE MASTER statement, then\nthe option keeps its old value in most cases. Most of the time, there is no need to\nspecify the options that do not need to change. For example, if the password for the\nuser account that the replica uses to connect to its primary has changed, but no\nother options need to change, then you can just change the MASTER_PASSWORD option by\nexecuting the following commands:\nSTOP SLAVE;\nCHANGE MASTER TO \n MASTER_PASSWORD='new3cret';\nSTART SLAVE;\n\nThere are some cases where options are implicitly reset, such as when the MASTER_HOST\nand MASTER_PORT options are changed.\n\nOption Persistence\n------------------\nThe values of the MASTER_LOG_FILE and MASTER_LOG_POS options (i.e. the binary log\nposition on the primary) and most other options are written to either the default\nmaster.info file or the file that is configured by the master_info_file option. The\nreplica's I/O thread keeps this binary log position updated as it downloads events\nonly when MASTER_USE_GTID option\n is set to NO.  Otherwise the file is not updated on a per event basis.\n\nThe master_info_file option can be set either on the command-line or in a server\noption group in an option file prior to starting up the server. For example:\n[mariadb]\n...\nmaster_info_file=/mariadb/myserver1-master.info\n\nThe values of the RELAY_LOG_FILE and RELAY_LOG_POS options (i.e. the relay log\nposition) are written to either the default relay-log.info file or the file that is\nconfigured by the relay_log_info_file system variable. The replica's SQL thread keeps\nthis relay log position updated as it applies events.\n\nThe relay_log_info_file system variable can be set either on the command-line or in a\nserver option group in an option file prior to starting up the server. For example:\n[mariadb]\n...\nrelay_log_info_file=/mariadb/myserver1-relay-log.info\n\nGTID Persistence\n----------------\nIf the replica is replicating binary log events that contain GTIDs, then the\nreplica's SQL thread will write every GTID that it applies to the\nmysql.gtid_slave_pos table. This GTID can be inspected and modified through the\ngtid_slave_pos system variable.\n\nIf the replica has the log_slave_updates system variable enabled and if the replica\nhas the binary log enabled, then every write by the replica's SQL thread will also go\ninto the replica's binary log. This means that GTIDs of replicated transactions would\nbe reflected in the value of the gtid_binlog_pos system variable.\n\nCreating a Slave from a Backup\n------------------------------\nThe CHANGE MASTER statement is useful for setting up a replica when you have a backup\nof the primary and you also have the binary log position or GTID position\ncorresponding to the backup.\n\nAfter restoring the backup on the replica, you could execute something like this to\nuse the binary log position:\nCHANGE MASTER TO\n MASTER_LOG_FILE='master2-bin.001',\n MASTER_LOG_POS=4;\nSTART SLAVE;\n\nOr you could execute something like this to use the GTID position:\nSET GLOBAL gtid_slave_pos='0-1-153';\nCHANGE MASTER TO\n MASTER_USE_GTID=slave_pos;\nSTART SLAVE;\n\nSee Setting up a Replication Slave with Mariabackup for more information on how to do\nthis with Mariabackup.\n\nExample\n-------\nThe following example changes the primary and primary's binary log coordinates.\n\nThis is used when you want to set up the replica to replicate the primary:\nCHANGE MASTER TO\n MASTER_HOST='master2.mycompany.com',\n MASTER_USER='replication',\n MASTER_PASSWORD='bigs3cret',\n MASTER_PORT=3306,\n MASTER_LOG_FILE='master2-bin.001',\n MASTER_LOG_POS=4,\n MASTER_CONNECT_RETRY=10;\nSTART SLAVE;\n','','https://mariadb.com/kb/en/library/change-master-to/');
update help_topic set description = CONCAT(description, '_pos;\n \nSTART SLAVE;\n \nReplication Filter Options\n \nIGNORE_SERVER_IDS\n \nThe IGNORE_SERVER_IDS option for CHANGE MASTER can be used\nto configure a replication slave to ignore binary log events\nthat originated from certain servers. Filtered binary log\nevents will not get logged to the slave’s relay log, and\nthey will not be applied by the slave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of server_id values. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_SERVER_IDS = (3,5);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_SERVER_IDS = ();\nSTART SLAVE;\n \nDO_DOMAIN_IDS\n \nThe DO_DOMAIN_IDS option for CHANGE MASTER was first added\nin MariaDB 10.1.2.\n \nThe DO_DOMAIN_IDS option for CHANGE MASTER can be used to\nconfigure a replication slave to only apply binary log\nevents if the transaction\'s GTID is in a specific\ngtid_domain_id value. Filtered binary log events will not\nget logged to the slave’s relay log, and they will not be\napplied by the slave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of gtid_domain_id values. Duplicate\nvalues are automatically ignored. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = ();\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option\ncannot both be set to non-empty values at the same time. If\nyou want to set the DO_DOMAIN_IDS option, and the\nIGNORE_DOMAIN_IDS option was previously set, then you need\nto clear the value of the IGNORE_DOMAIN_IDS option. For\nexample:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (), \n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option can only be specified if the slave\nis replicating in GTID mode. Therefore, the MASTER_USE_GTID\noption must also be set to some value other than no in order\nto use this option.\n \nIGNORE_DOMAIN_IDS\n \nThe IGNORE_DOMAIN_IDS option for CHANGE MASTER was first\nadded in MariaDB 10.1.2.\n \nThe IGNORE_DOMAIN_IDS option for CHANGE MASTER can be used\nto configure a replication slave to ignore binary log events\nif the transaction\'s GTID is in a specific gtid_domain_id\nvalue. Filtered binary log events will not get logged to the\nslave’s relay log, and they will not be applied by the\nslave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of gtid_domain_id values. Duplicate\nvalues are automatically ignored. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = ();\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option\ncannot both be set to non-empty values at the same time. If\nyou want to set the IGNORE_DOMAIN_IDS option, and the\nDO_DOMAIN_IDS option was previously set, then you need to\nclear the value of the DO_DOMAIN_IDS option. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = (), \n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nThe IGNORE_DOMAIN_IDS option can only be specified if the\nslave is replicating in GTID mode. Therefore, the\nMASTER_USE_GTID option must also be set to some value other\nthan no in order to use this option.\n \nDelayed Replication Options\n \nMASTER_DELAY\n \nThe MASTER_DELAY option for CHANGE MASTER was first added in\nMariaDB 10.2.3 to enable delayed replication.\n \nThe MASTER_DELAY option for CHANGE MASTER can be used to\nenable delayed replication. This option specifies the time\nin seconds (at least) that a replication slave should lag\nbehind the master. Before executing an event, the slave will\nfirst wait, if necessary, until the given time has passed\nsince the event was created on the master. The result is\nthat the slave will reflect the state of the master some\ntime back in the past. The default is zero, no delay.\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_DELAY=3600;\n \nSTART SLAVE;\n \nChanging Option Values\n \nIf you don\'t specify a given option when executing the\nCHANGE MASTER statement, then the option keeps its old value\nin most cases. Most of the time, there is no need to specify\nthe options that do not need to change. For example, if the\npassword for the user account that the slave uses to connect\nto its master has changed, but no other options need to\nchange, then you can just change the MASTER_PASSWORD option\nby executing the following commands:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE;\n \nThere are some cases where options are implicitly reset,\nsuch as when the MASTER_HOST and MASTER_PORT options are\nchanged.\n \nOption Persistence\n \nThe values of the MASTER_LOG_FILE and MASTER_LOG_POS options\n(i.e. the binary log position on the master) and most other\noptions are written to either the default master.info file\nor the file that is configured by the master_info_file\noption. The slave\'s I/O thread keeps this binary log\nposition updated as it downloads events only when\nMASTER_USE_GTID option\n is set to NO. Otherwise the file is not updated on a per\nevent basis.\n \nThe master_info_file option can be set either on the\ncommand-line or in a server option group in an option file\nprior to starting up the server. For example:\n \n[mariadb]\n...\nmaster_info_file=/mariadb/myserver1-master.info\n \nThe values of the RELAY_LOG_FILE and RELAY_LOG_POS options\n(i.e. the relay log position) are written to either the\ndefault relay-log.info file or the file that is configured\nby the relay_log_info_file system variable. The slave\'s SQL\nthread keeps this relay log position updated as it applies\nevents.\n \nThe relay_log_info_file system variable can be set either on\nthe command-line or in a server option group in an option\nfile prior to starting up the server. For example:\n \n[mariadb]\n...\nrelay_log_info_file=/mariadb/myserver1-relay-log.info\n \nGTID Persistence\n \nIf the slave is replicating binary log events that contain\nGTIDs, then the slave\'s SQL thread will write every GTID\nthat it applies to the mysql.gtid_slave_pos table. This GTID\ncan be inspected and modified through the gtid_slave_pos\nsystem variable.\n \nIf the slave has the log_slave_updates system variable\nenabled and if the slave has the binary log enabled, then\nevery write by the slave\'s SQL thread will also go into the\nslave\'s binary log. This means that GTIDs of replicated\ntransactions would be reflected in the value of the\ngtid_binlog_pos system variable.\n \nCreating a Slave from a Backup\n \nThe CHANGE MASTER statement is useful for setting up a slave\nwhen you have a backup of the master and you also have the\nbinary log position or GTID position corresponding to the\nbackup.\n \nAfter restoring the backup on the slave, you could execute\nsomething like this to use the binary log position:\n \nCHANGE MASTER TO\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4;\n \nSTART SLAVE;\n \nOr you could execute something like this to use the GTID\nposition:\n \nSET GLOBAL gtid_slave_pos=\'0-1-153\';\n \nCHANGE MASTER TO\n MASTER_USE_GTID=slave_pos;\n \nSTART SLAVE;\n \nSee Setting up a Replication Slave with Mariabackup for more\ninformation on how to do this with Mariabackup.\n \nExample\n \nThe following example changes the master and master\'s\nbinary log coordinates.\nThis is used when you want to set up the slave to replicate\nthe master:\n \nCHANGE MASTER TO\n MASTER_HOST=\'master2.mycompany.com\',\n MASTER_USER=\'replication\',\n MASTER_PASSWORD=\'bigs3cret\',\n MASTER_PORT=3306,\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4,\n MASTER_CONNECT_RETRY=10;\n \nSTART SLAVE;\n \n\n\nURL: https://mariadb.com/kb/en/library/change-master-to/') WHERE help_topic_id = 95;
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (96,8,'COMMIT','The COMMIT  statement ends a transaction, saving any changes to the data so\nthat they become visible to subsequent transactions. Also, unlocks metadata changed\nby current transaction. If autocommit is set to 1, an implicit commit is performed\nafter each statement. Otherwise, all transactions which don't end with an explicit\nCOMMIT are implicitly rollbacked and the changes are lost. The ROLLBACK statement can\nbe used to do this explicitly.\n\nThe required syntax for the COMMIT  statement is as follows:\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\n\nCOMMIT is the more important transaction terminator, as well as the more interesting\none. The basic form of the COMMIT statement is simply the keyword COMMIT  (the\nkeyword WORK is simply noise and can be omitted without changing the effect).\n\nThe optional AND CHAIN clause is a convenience for initiating a new transaction as\nsoon as the old transaction terminates. If AND CHAIN is specified, then there is\neffectively nothing between the old and new transactions, although they remain\nseparate. The characteristics of the new transaction will be the same as the\ncharacteristics of the old one — that is, the new transaction will have the same\naccess mode, isolation level and diagnostics area size (we'll discuss all of these\nshortly) as the transaction just terminated.\n\nRELEASE tells the server to disconnect the client immediately after the\ncurrent transaction.\n\nThere are NO RELEASE and AND NO CHAIN options. By default, commits do not RELEASE or\nCHAIN, but it's possible to change this default behavior with the completion_type\nserver system variable. In this case, the AND NO CHAIN and NO RELEASE options\noverride the server default.\n','','https://mariadb.com/kb/en/library/commit/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (97,8,'DEALLOCATE / DROP PREPARE','Syntax\n------\n{DEALLOCATE | DROP} PREPARE stmt_name\n\nDescription\n-----------\nTo deallocate a prepared statement produced with PREPARE, use a\nDEALLOCATE PREPARE statement that refers to the prepared statement\nname.\n\nA prepared statement is implicitly deallocated when a new PREPARE command is issued.\n\nIn that case, there is no need to use DEALLOCATE.\n\nAttempting to execute a prepared statement after deallocating it\nresults in an error, as if it was not prepared at all:\nERROR 1243 (HY000): Unknown prepared statement handler (stmt_name) given to EXECUTE\n\nIf the specified statement has not been PREPAREd, an error similar to the following\nwill be produced:\nERROR 1243 (HY000): Unknown prepared statement handler (stmt_name) given to\nDEALLOCATE PREPARE\n\nExample\n-------\nSee example in PREPARE.\n','','https://mariadb.com/kb/en/library/deallocate-drop-prepared-statement/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (98,8,'EXECUTE Statement','Syntax\n------\nEXECUTE stmt_name\n  [USING expression[, expression] ...]\n\nDescription\n-----------\nAfter preparing a statement with PREPARE, you execute it with an\nEXECUTE statement that refers to the prepared statement name. If the\nprepared statement contains any parameter markers, you must supply a\nUSING clause that lists user variables containing the values to be\nbound to the parameters. Parameter values can be supplied only by user\nvariables, and the USING clause must name exactly as many variables as\nthe number of parameter markers in the statement.\n\nYou can execute a given prepared statement multiple times, passing\ndifferent variables to it or setting the variables to different values\nbefore each execution.\n\nIf the specified statement has not been PREPAREd, an error similar to the following\nis produced:\nERROR 1243 (HY000): Unknown prepared statement handler (stmt_name) given to EXECUTE\n\nExample\n-------\nSee example in PREPARE.\n','','https://mariadb.com/kb/en/library/execute-statement/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (99,8,'EXECUTE IMMEDIATE','Syntax\n------\nEXECUTE IMMEDIATE statement\n\nDescription\n-----------\nEXECUTE IMMEDIATE executes a dynamic SQL statement created on the fly, which can\nreduce performance overhead.\n\nFor example:\nEXECUTE IMMEDIATE 'SELECT 1'\n\nwhich is shorthand for:\nprepare stmt from "select 1";\nexecute stmt;\ndeallocate prepare stmt;\n\nEXECUTE IMMEDIATE supports complex expressions as prepare source and parameters:\nEXECUTE IMMEDIATE CONCAT('SELECT COUNT(*) FROM ', 't1', ' WHERE a=?') USING 5+5;\n\nLimitations: subselects and stored function calls are not supported as a\nprepare source.\n\nThe following examples return an error:\nCREATE OR REPLACE FUNCTION f1() RETURNS VARCHAR(64) RETURN 'SELECT * FROM t1';\nEXECUTE IMMEDIATE f1();\nERROR 1970 (42000): EXECUTE IMMEDIATE does not support subqueries or stored functions\n\nEXECUTE IMMEDIATE (SELECT 'SELECT * FROM t1');\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that \n corresponds to your MariaDB server version for the right syntax to use near\n 'SELECT 'SELECT * FROM t1')' at line 1\n\nCREATE OR REPLACE FUNCTION f1() RETURNS INT RETURN 10;\nEXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING f1();\nERROR 1970 (42000): EXECUTE..USING does not support subqueries or stored functions\n\nEXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING (SELECT 10);\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that \n corresponds to your MariaDB server version for the right syntax to use near\n 'SELECT 10)' at line 1\n\nOne can use a user or an SP variable as a workaround:\nCREATE OR REPLACE FUNCTION f1() RETURNS VARCHAR(64) RETURN 'SELECT * FROM t1';\nSET @stmt=f1();\nEXECUTE IMMEDIATE @stmt;\n\nSET @stmt=(SELECT 'SELECT 1');\nEXECUTE IMMEDIATE @stmt;\n\nCREATE OR REPLACE FUNCTION f1() RETURNS INT RETURN 10;\nSET @param=f1();\nEXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING @param;\n\nSET @param=(SELECT 10);\nEXECUTE IMMEDIATE 'SELECT * FROM t1 WHERE a=?' USING @param;\n\nEXECUTE IMMEDIATE supports user variables and SP variables as OUT parameters\nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1(OUT a INT)\nBEGIN\n SET a:= 10;\nEND;\n$$\nDELIMITER ;\nSET @a=2;\nEXECUTE IMMEDIATE 'CALL p1(?)' USING @a;\nSELECT @a;\n+------+\n| @a   |\n+------+\n|   10 |\n+------+\n\nSimilar to PREPARE, EXECUTE IMMEDIATE is allowed in stored procedures but is not\nallowed in stored functions.\n\nThis example uses EXECUTE IMMEDIATE inside a stored procedure:\nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1()\nBEGIN\n EXECUTE IMMEDIATE 'SELECT 1';\nEND;\n$$\nDELIMITER ;\nCALL p1;\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n\nThis script returns an error:\nDELIMITER $$\nCREATE FUNCTION f1() RETURNS INT\nBEGIN\n EXECUTE IMMEDIATE 'DO 1';\n RETURN 1;\nEND;\n$$\nERROR 1336 (0A000): Dynamic SQL is not allowed in stored function or trigger\n\nEXECUTE IMMEDIATE can use DEFAULT and IGNORE indicators as bind parameters:\nCREATE OR REPLACE TABLE t1 (a INT DEFAULT 10);\nEXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (?)' USING DEFAULT;\nSELECT * FROM t1;\n+------+\n| a    |\n+------+\n|   10 |\n+------+\n\nEXECUTE IMMEDIATE increments the Com_execute_immediate status variable, as well as\nthe Com_stmt_prepare, Com_stmt_execute and Com_stmt_close status variables.\n\nNote, EXECUTE IMMEDIATE does not increment the Com_execute_sql status variable.\n\nCom_execute_sql is used only for PREPARE..EXECUTE.\n\nThis session screenshot demonstrates how EXECUTE IMMEDIATE affects status variables:\nSELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME RLIKE \n ('COM_(EXECUTE|STMT_PREPARE|STMT_EXECUTE|STMT_CLOSE)');\n\n+-----------------------+----------------+\n| VARIABLE_NAME         | VARIABLE_VALUE |\n+-----------------------+----------------+\n| COM_EXECUTE_IMMEDIATE | 0              |\n| COM_EXECUTE_SQL       | 0              |\n| COM_STMT_CLOSE        | 0              |\n| COM_STMT_EXECUTE      | 0              |\n| COM_STMT_PREPARE      | 0              |\n+-----------------------+----------------+\n\nEXECUTE IMMEDIATE 'SELECT 1';\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n\nSELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME RLIKE \n ('COM_(EXECUTE|STMT_PREPARE|STMT_EXECUTE|STMT_CLOSE)');\n+-----------------------+----------------+\n| VARIABLE_NAME         | VARIABLE_VALUE |\n+-----------------------+----------------+\n| COM_EXECUTE_IMMEDIATE | 1              |\n| COM_EXECUTE_SQL       | 0              |\n| COM_STMT_CLOSE        | 1              |\n| COM_STMT_EXECUTE      | 1              |\n| COM_STMT_PREPARE      | 1              |\n+-----------------------+----------------+\n','','https://mariadb.com/kb/en/library/execute-immediate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (100,8,'LOCK TABLES','Syntax\n------\nLOCK TABLE[S]\n  tbl_name [[AS] alias] lock_type\n  [, tbl_name [[AS] alias] lock_type] ...\n  [WAIT n|NOWAIT]\n\nlock_type:\n  READ [LOCAL]\n | [LOW_PRIORITY] WRITE\n | WRITE CONCURRENT\n\nUNLOCK TABLES\n\nDescription\n-----------\nThe lock_type can be one of:\n+------------------------------------------------------------------------------------\n---+---------------------------------------------------------------------------------\n------+\n|Option                                                                              \n |Description\n   |\n|READ                                                                                \n |Read lock, no writes allowed\n   |\n|READ LOCAL                                                                          \n |Read lock, but allow concurrent inserts\n   |\n|WRITE                                                                               \n |Exclusive write lock. No other connections can read or write to this table\n   |\n|LOW_PRIORITY WRITE                                                                  \n |Exclusive write lock, but allow new read locks on the table until we get the\nwrite lock.|\n|WRITE CONCURRENT                                                                    \n |Exclusive write lock, but allow READ LOCAL locks to the table.\n\n|\n+------------------------------------------------------------------------------------\n---+---------------------------------------------------------------------------------\n------+\nMariaDB enables client sessions to acquire table locks explicitly for the\npurpose of cooperating with other sessions for access to tables, or to\nprevent other sessions from modifying tables during periods when a\nsession requires exclusive access to them. A session can acquire or\nrelease locks only for itself. One session cannot acquire locks for\nanother session or release locks held by another session.\n\nLocks may be used to emulate transactions or to get more speed when\nupdating tables.\n\nLOCK TABLES explicitly acquires table locks for the current client session.\n\nTable locks can be acquired for base tables or views. To use LOCK TABLES,\nyou must have the LOCK TABLES privilege, and the SELECT privilege for\neach object to be locked. See GRANT\nFor view locking, LOCK TABLES adds all base tables used in the view to the\nset of tables to be locked and locks them automatically. If you lock a table\nexplicitly with LOCK TABLES, any tables used in triggers are also locked\nimplicitly, as described in Triggers and Implicit Locks.\n\nUNLOCK TABLES explicitly releases any table locks held by the\ncurrent session.\n\nLimitations\n-----------\n\nERROR 1099 (HY000): Table 'tab_name' was locked with a READ lock and can't be updated\n\nERROR 1100 (HY000): Table 'tab_name' was not locked with LOCK TABLES\n\nERROR 1192 (HY000): Can't execute the given command because you have active locked\ntables or an active transaction\n\nERROR 1314 (0A000): LOCK is not allowed in stored procedures\n','','https://mariadb.com/kb/en/library/lock-tables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (101,8,'ROLLBACK','The ROLLBACK statement rolls back (ends) a transaction, destroying any\nchanges to SQL-data so that they never become visible to subsequent transactions. The\nrequired syntax for the ROLLBACK statement is as follows.\n\nROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] \n[ TO [ SAVEPOINT ] {<savepoint name> | <simple target specification>} ]\n\nThe ROLLBACK statement will either end a transaction, destroying all data changes\nthat happened during any of the transaction, or it will just destroy any data changes\nthat happened since you established a savepoint. The basic form of the ROLLBACK\nstatement is just the keyword ROLLBACK (the keyword WORK is simply noise and can be\nomitted without changing the effect).\n\nThe optional AND CHAIN clause is a convenience for initiating a new transaction as\nsoon as the old transaction terminates. If AND CHAIN is specified, then there is\neffectively nothing between the old and new transactions, although they remain\nseparate. The characteristics of the new transaction will be the same as the\ncharacteristics of the old one — that is, the new transaction will have the same\naccess mode, isolation level and diagnostics area size (we'll discuss all of these\nshortly) as the transaction just terminated. The AND NO CHAIN option just tells your\nDBMS to end the transaction — that is, these four SQL statements are equivalent: \nROLLBACK; \nROLLBACK WORK; \nROLLBACK AND NO CHAIN; \nROLLBACK WORK AND NO CHAIN;\n\nAll of them end a transaction without saving any transaction characteristics. The\nonly other options, the equivalent statements: \nROLLBACK AND CHAIN;\nROLLBACK WORK AND CHAIN;\n\nboth tell your DBMS to end a transaction, but to save that transaction's\ncharacteristics for the next transaction.\n\nROLLBACK is much simpler than COMMIT: it may involve no more than a few deletions (of\nCursors, locks, prepared SQL statements and log-file entries). It's usually assumed\nthat ROLLBACK can't fail, although such a thing is conceivable (for example, an\nencompassing transaction might reject an attempt to ROLLBACK because it's lining up\nfor a COMMIT).\n\nROLLBACK cancels all effects of a transaction. It does not cancel effects on objects\noutside the DBMS's control (for example the values in host program variables or the\nsettings made by some SQL/CLI function calls). But in general, it is a convenient\nstatement for those situations when you say "oops, this isn't working" or when you\nsimply don't care whether your temporary work becomes permanent or not.\n\nHere is a moot question. If all you've been doing is SELECTs, so that there have been\nno data changes, should you end the transaction with ROLLBACK or COMMIT? It shouldn't\nreally matter because both ROLLBACK and COMMIT do the same transaction-terminating\njob. However, the popular conception is that ROLLBACK implies failure, so after a\nsuccessful series of SELECT statements the convention is to end the transaction with\nCOMMIT rather than ROLLBACK.\n\nMariaDB (and most other DBMSs) supports rollback of SQL-data change statements, but\nnot of SQL-Schema statements. This means that if you use any of CREATE, ALTER, DROP,\nGRANT, REVOKE, you are implicitly committing at execution time.\n\nINSERT INTO Table_2 VALUES(5); \nDROP TABLE Table_3 CASCADE; \nROLLBACK;\n\nThe result will be that both the INSERT and the DROP will go through as separate\ntransactions so the ROLLBACK will have no effect.\n','','https://mariadb.com/kb/en/library/rollback/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (102,8,'SAVEPOINT','Syntax\n------\nSAVEPOINT identifier\nROLLBACK [WORK] TO [SAVEPOINT] identifier\nRELEASE SAVEPOINT identifier\n\nDescription\n-----------\nInnoDB supports the SQL statements SAVEPOINT,\nROLLBACK TO SAVEPOINT, RELEASE SAVEPOINT\nand the optional WORK keyword for\nROLLBACK.\n\nEach savepoint must have a legal MariaDB identifier. A savepoint is a\nnamed sub-transaction.\n\nNormally ROLLBACK undoes the changes performed by the whole transaction. When used\nwith the TO clause, it undoes the changes performed after the specified savepoint,\nand erases all subsequent savepoints. However, all locks that have been acquired\nafter the save point will survive. RELEASE SAVEPOINT does not rollback or commit any\nchanges, but removes the specified savepoint.\n\nWhen the execution of a trigger or a stored function begins, it is not possible to\nuse statements which reference a savepoint which was defined from out of that\nstored program.\n\nWhen a COMMIT (including implicit commits) or a ROLLBACK statement (with no TO\nclause) is performed, they act on the whole transaction, and all savepoints\nare removed.\n\nErrors\n------\nIf COMMIT or ROLLBACK is issued and no transaction was started, no error is reported.\n\nIf SAVEPOINT is issued and no transaction was started, no error is reported but no\nsavepoint is created. When ROLLBACK TO SAVEPOINT or RELEASE SAVEPOINT is called for a\nsavepoint that does not exist, an error like this is issued:\nERROR 1305 (42000): SAVEPOINT svp_name does not exist\n','','https://mariadb.com/kb/en/library/savepoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (103,8,'Metadata Locking','MariaDB supports metadata locking. This means that when a transaction\n(including XA transactions) uses a table, it locks its metadata until the end of\ntransaction. Non-transactional tables are also locked, as well as views and objects\nwhich are related to locked tables/views (stored functions, triggers, etc). When a\nconnection tries to use a DDL statement (like an ALTER TABLE) which modifies a table\nthat is locked, that connection is queued, and has to wait until it's unlocked. Using\nsavepoints and performing a partial rollback does not release metadata locks.\n\nLOCK TABLES ... WRITE are also queued. Some wrong statements which produce an error\nmay not need to wait for the lock to be freed.\n\nThe metadata lock's timeout is determined by the value of the lock_wait_timeout\nserver system variable (in seconds). However, note that its default value is 31536000\n(1 year, MariaDB <= 10.2.3), or 86400 (1 day, MariaDB >= 10.2.4). If this timeout is\nexceeded, the following error is returned:\nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\n\nIf the metadata_lock_info plugin is installed, the Information Schema\nmetadata_lock_info table stores information about existing metadata locks.\n\nExample\n-------\nLet's use the following MEMORY (non-transactional) table:\nCREATE TABLE t (a INT) ENGINE = MEMORY;\n\nConnection 1 starts a transaction, and INSERTs a row into t:\nSTART TRANSACTION;\n\nINSERT INTO t SET a=1;\n\nt's metadata is now locked by connection 1. Connection 2 tries to alter t, but has\nto wait:\nALTER TABLE t ADD COLUMN b INT;\n\nConnection 2's prompt is blocked now.\n\nNow connection 1 ends the transaction:\nCOMMIT;\n\n...and connection 2 finally gets the output of its command:\nQuery OK, 1 row affected (35.23 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n','','https://mariadb.com/kb/en/library/metadata-locking/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (104,8,'PREPARE Statement','Syntax\n------\nPREPARE stmt_name FROM preparable_stmt\n\nDescription\n-----------\nThe PREPARE statement prepares a statement and assigns it a name,\nstmt_name, by which to refer to the statement later. Statement names\nare not case sensitive. preparable_stmt is either a string literal or a user variable\n(not a local variable, an SQL expression or a subquery) that contains the text of the\nstatement. The text must   \nrepresent a single SQL statement, not multiple statements. Within the\nstatement, "?" characters can be used as parameter markers to indicate\nwhere data values are to be bound to the query later when you execute\nit. The "?" characters should not be enclosed within quotes, even if\nyou intend to bind them to string values. Parameter markers can be used\nonly where expressions should appear, not for SQL keywords,\nidentifiers, and so forth.\n\nThe scope of a prepared statement is the session within which it is\ncreated. Other sessions cannot see it.\n\nIf a prepared statement with the given name already exists, it is\ndeallocated implicitly before the new statement is prepared. This means\nthat if the new statement contains an error and cannot be prepared, an\nerror is returned and no statement with the given name exists.\n\nPrepared statements can be PREPAREd and EXECUTEd in a stored procedure, but not in a\nstored function or trigger. Also, even if the statement is PREPAREd in a procedure,\nit will not be deallocated when the procedure execution ends.\n\nA prepared statement can access user-defined variables, but not local variables or\nprocedure's parameters.\n\nIf the prepared statement contains a syntax error, PREPARE will fail. As a side\neffect, stored procedures can use it to check if a statement is valid. For example:\nCREATE PROCEDURE `test_stmt`(IN sql_text TEXT)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SELECT CONCAT(sql_text, ' is not valid');\n    END;\n    SET @SQL := sql_text;\n    PREPARE stmt FROM @SQL;\n    DEALLOCATE PREPARE stmt;\nEND;\n\nThe FOUND_ROWS() and ROW_COUNT() functions, if called immediatly after EXECUTE,\nreturn the number of rows read or affected by the prepared statements; however, if\nthey are called after DEALLOCATE PREPARE, they provide information about this\nstatement. If the prepared statement produces errors or warnings, GET DIAGNOSTICS\nreturn information about them. DEALLOCATE PREPARE shouldn't clear the diagnostics\narea, unless it produces an error.\n\nA prepared statement is executed with EXECUTE and released \nwith DEALLOCATE PREPARE.\n\nThe max_prepared_stmt_count server system variable determines the number of allowed\nprepared statements that can be prepared on the server. If it is set to 0, prepared\nstatements are not allowed. If the limit is reached, an error similar to the\nfollowing will be produced:\nERROR 1461 (42000): Can't create more than max_prepared_stmt_count statements \n (current value: 0)\n\nOracle Mode\n\nPermitted Statements\n--------------------\nNot all statements can be prepared. Only the following SQL commands are permitted:\n\nSynonyms are not listed here, but can be used. For example, DESC can be used instead\nof DESCRIBE.\n\nNote that if a statement can be run in a stored routine, it will work even if it is\ncalled by a prepared statement. For example, SIGNAL can't be directly prepared.\n\nHowever, it is allowed in stored routines. If the x() procedure contains SIGNAL, you\ncan still prepare and execute the 'CALL x();' prepared statement.\n\nWhen PREPARE is used with a statement which is not supported, the following error\nis produced:\nERROR 1295 (HY000): This command is not supported in the prepared statement\nprotocol yet\n\nExample\n-------\ncreate table t1 (a int,b char(10));\ninsert into t1 values (1,"one"),(2, "two"),(3,"three");\nprepare test from "select * from t1 where a=?";\nset @param=2;\nexecute test using @param;\n+------+------+\n| a    | b    |\n+------+------+\n|    2 | two  |\n+------+------+\nset @param=3;\nexecute test using @param;\n+------+-------+\n| a    | b     |\n+------+-------+\n|    3 | three |\n+------+-------+\ndeallocate prepare test;\n\nSince identifiers are not permitted as prepared statements parameters, sometimes it\nis necessary to dynamically compose an SQL statement. This technique is called\ndynamic SQL). The following example shows how to use dynamic SQL:\nCREATE PROCEDURE test.stmt_test(IN tab_name VARCHAR(64))\nBEGIN\n	SET @sql = CONCAT('SELECT COUNT(*) FROM ', tab_name);\n	PREPARE stmt FROM @sql;\n	EXECUTE stmt;\n	DEALLOCATE PREPARE stmt;\nEND;\n\nCALL test.stmt_test('mysql.user');\n+----------+\n| COUNT(*) |\n+----------+\n|        4 |\n+----------+\n\nUse of variables in prepared statements:\nPREPARE stmt FROM 'SELECT @x;';\n\nSET @x = 1;\n\nEXECUTE stmt;\n+------+\n| @x   |\n+------+\n|    1 |\n+------+\n\nSET @x = 0;\n\nEXECUTE stmt;\n+------+\n| @x   |\n+------+\n|    0 |\n+------+\n\nDEALLOCATE PREPARE stmt;\n','','https://mariadb.com/kb/en/library/prepare-statement/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (105,8,'PURGE BINARY LOGS','Syntax\n------\nPURGE { BINARY | MASTER } LOGS\n  { TO 'log_name' | BEFORE datetime_expr }\n\nDescription\n-----------\nThe PURGE BINARY LOGS statement deletes all the binary log\nfiles listed in the log index file prior to the specified log file name or\ndate. BINARY and MASTER are synonyms.\n\nDeleted log files also are removed from the list recorded in the index file, so\nthat the given log file becomes the first in the list.\n\nThe datetime expression is in the format 'YYYY-MM-DD hh:mm:ss'.\n\nIf a replica is active but has yet to read from a binary log file you attempt to\ndelete, the statement will fail with an error. However, if the replica is not\nconnected and has yet to read from a log file you delete, the file will be deleted,\nbut the replica will be unable to continue replicating once it connects again.\n\nThis statement has no effect if the server was not started with the\n--log-bin option to enable binary logging.\n\nTo list the binary log files on the server, use SHOW BINARY LOGS. To see which files\nthey are reading, use SHOW SLAVE STATUS (or SHOW REPLICA STATUS from MariaDB 10.5.1).\n\nYou can only delete the files that are older than the oldest file that is used by\nthe slaves.\n\nTo delete all binary log files, use RESET MASTER.\n\nTo move to a new log file (for example if you want to remove the current log file),\nuse FLUSH LOGS before you execute PURGE LOGS.\n\nIf the expire_logs_days server system variable is not set to 0, the server\nautomatically deletes binary log files after the given number of days. From MariaDB\n10.6, the binlog_expire_logs_seconds variable allows more precise control over binlog\ndeletion, and takes precedence if both are non-zero.\n\nRequires the SUPER privilege or, from MariaDB 10.5.2, the BINLOG ADMIN privilege,\nto run.\n\nExamples\n--------\nPURGE BINARY LOGS TO 'mariadb-bin.000063';\n\nPURGE BINARY LOGS BEFORE '2013-04-21';\n\nPURGE BINARY LOGS BEFORE '2013-04-22 09:55:22';\n','','https://mariadb.com/kb/en/library/purge-binary-logs/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (106,8,'RESET MASTER','RESET MASTER [TO #]\n\nDeletes all binary log files listed in the index file, resets the\nbinary log index file to be empty, and creates a new binary log file with a suffix\nof .000001.\n\nIf TO # is given, then the first new binary log file will start from number #.\n\nThis statement is for use only when the master is started for the first time, and\nshould never be used if any slaves are actively replicating from the binary log.\n','','https://mariadb.com/kb/en/library/reset-master/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (107,8,'RESET SLAVE','The terms master and slave have historically been used in replication, but\nthe terms terms primary and replica are now preferred. The old terms are used still\nused in parts of the documentation, and in MariaDB commands, although MariaDB 10.5\nhas begun the process of renaming. The documentation process is ongoing. See\nMDEV-18777 to follow progress on this effort.\n\nSyntax\n------\nRESET REPLICA ["connection_name"] [ALL]  [FOR CHANNEL "connection_name"] -- from\nMariaDB 10.5.1         \nRESET SLAVE ["connection_name"] [ALL]  [FOR CHANNEL "connection_name"]\n\nDescription\n-----------\nRESET REPLICA/SLAVE makes the replica forget its replication position in the\nmaster's binary log. This statement is meant to be used for a clean\nstart. It deletes the master.info and relay-log.info files, all the\nrelay log files, and starts a new relay log file. To use RESET REPLICA/SLAVE,\nthe replica threads must be stopped (use STOP REPLICA/SLAVE if\nnecessary).\n\nNote: All relay log files are deleted, even if they have not been\ncompletely executed by the slave SQL thread. (This is a condition\nlikely to exist on a replication slave if you have issued a STOP REPLICA/SLAVE\nstatement or if the slave is highly loaded.)\nNote: RESET REPLICA does not reset the global\ngtid_slave_pos variable. This means that a replica\nserver configured with CHANGE MASTER TO MASTER_USE_GTID=slave_pos\nwill not receive events with GTIDs occurring before the state saved in\ngtid_slave_pos. If the intent is to reprocess these events,\ngtid_slave_pos must be manually reset, e.g. by executing\nset global gtid_slave_pos="".\n\nConnection information stored in the master.info file is immediately\nreset using any values specified in the corresponding startup options.\n\nThis information includes values such as master host, master port,\nmaster user, and master password. If the replica SQL thread was in the\nmiddle of replicating temporary tables when it was stopped, and RESET\nREPLICA/SLAVE is issued, these replicated temporary tables are deleted on the\nslave.\n\nThe ALL also resets the PORT, HOST, USER and PASSWORD parameters for the slave. If\nyou are using a connection name, it will permanently delete it and it will not show\nup anymore in SHOW ALL REPLICAS/SLAVE STATUS.\n\nconnection_name\nThe connection_name option is used for multi-source replication.\n\nIf there is only one nameless primary, or the default primary (as specified by the\ndefault_master_connection system variable) is intended, connection_name can be\nomitted. If provided, the RESET REPLICA/SLAVE statement will apply to the specified\nprimary. connection_name is case-insensitive.\n\nRESET REPLICA\n','','https://mariadb.com/kb/en/library/reset-slave-connection_name/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (108,8,'SET TRANSACTION','Syntax\n------\nSET [GLOBAL | SESSION] TRANSACTION\n  transaction_property [, transaction_property] ...\n\ntransaction_property:\n  ISOLATION LEVEL level\n | READ WRITE\n | READ ONLY\n\nlevel:\n  REPEATABLE READ\n | READ COMMITTED\n | READ UNCOMMITTED\n | SERIALIZABLE\n\nDescription\n-----------\nThis statement sets the transaction isolation level or the transaction access mode\nglobally, for the current session, or for the next transaction:\n\nA change to the global default isolation level requires the \nSUPER privilege. Any session is free to change its\nsession isolation level (even in the middle of a transaction), or the isolation\nlevel for its next transaction.\n\nIsolation Level\n\nTo set the global default isolation level at server startup, use the\n--transaction-isolation=level option on the command line or in an option file. Values\nof level for this option use dashes\nrather than spaces, so the allowable values are READ-UNCOMMITTED,\nREAD-COMMITTED, REPEATABLE-READ, or\nSERIALIZABLE. For example, to set the default isolation\nlevel to REPEATABLE READ, use these lines in the [mysqld]\nsection of an option file:\n[mysqld]\ntransaction-isolation = REPEATABLE-READ\nTo determine the global and session transaction isolation levels at\nruntime, check the value of the tx_isolation system variable:\nSELECT @@GLOBAL.tx_isolation, @@tx_isolation;\n\nInnoDB supports each of the translation isolation levels described here\nusing different locking strategies. The default level is \nREPEATABLE READ. For additional information about InnoDB\nrecord-level locks and how it uses them to execute various types of statements,\nsee InnoDB Lock Modes,\nand http://dev.mysql.com/doc/refman/en/innodb-locks-set.html.\n\nIsolation Levels\n\nThe following sections describe how MariaDB supports the different\ntransaction levels.\n\nREAD UNCOMMITTED\nSELECT statements are performed in a non-locking fashion,\nbut a possible earlier version of a row might be used. Thus, using this\nisolation level, such reads are not consistent. This is also called a "dirty\nread." Otherwise, this isolation level works like \nREAD COMMITTED.\n\nREAD COMMITTED\nA somewhat Oracle-like isolation level with respect to consistent\n(non-locking) reads: Each consistent read, even within the same\ntransaction, sets and reads its own fresh snapshot. See\nhttp://dev.mysql.com/doc/refman/en/innodb-consistent-read.html.\n\nFor locking reads (SELECT with FOR UPDATE\nor LOCK IN SHARE MODE), InnoDB locks only index records, not\nthe gaps before them, and thus allows the free insertion of new records next to\nlocked records. For UPDATE and DELETE\nstatements, locking depends on whether the statement uses a unique index with a\nunique search condition (such as WHERE id = 100), or a\nrange-type search condition (such as WHERE id > 100). For a\nunique index with a unique search condition, InnoDB locks only the index record\nfound, not the gap before it. For range-type searches, InnoDB locks the index\nrange scanned, using gap locks or next-key (gap plus index-record) locks to\nblock insertions by other sessions into the gaps covered by the range. This is\nnecessary because "phantom rows" must be blocked for MySQL replication and\nrecovery to work.\n\nNote: If the READ COMMITTED isolation\nlevel is used or the innodb_locks_unsafe_for_binlog system variable is enabled,\nthere is no InnoDB gap locking except for foreign-key constraint checking and\nduplicate-key checking. Also, record locks for non-matching rows are released\nafter MariaDB has evaluated the WHERE condition.If you use READ COMMITTED or enable\ninnodb_locks_unsafe_for_binlog, you must use row-based binary logging.\n\nREPEATABLE READ\nThis is the default isolation level for InnoDB. For consistent reads,\nthere is an important difference from the READ COMMITTED\nisolation level: All consistent reads within the same transaction read the\nsnapshot established by the first read. This convention means that if you issue\nseveral plain (non-locking) SELECT statements within the\nsame transaction, these SELECT statements are consistent\nalso with respect to each other. See\nhttp://dev.mysql.com/doc/refman/en/innodb-consistent-read.html.\n\nFor locking reads (SELECT with FOR UPDATE or LOCK IN SHARE MODE),\nUPDATE, and DELETE statements, locking depends on whether the\nstatement uses a unique index with a unique search condition, or a\nrange-type search condition. For a unique index with a unique search\ncondition, InnoDB locks only the index record found, not the gap\nbefore it. For other search conditions, InnoDB locks the index range\nscanned, using gap locks or next-key (gap plus index-record) locks to\nblock insertions by other sessions into the gaps covered by the range.\n\nThis is the minimum isolation level for non-distributed XA transactions.\n\nSERIALIZABLE\nThis level is like REPEATABLE READ, but InnoDB implicitly converts all\nplain SELECT statements to SELECT ... LOCK IN SHARE MODE if autocommit\nis disabled. If autocommit is enabled, the SELECT is its own\ntransaction. It therefore is known to be read only and can be\nserialized if performed as a consistent (non-locking) read and need\nnot block for other transactions. (This means that to force a plain\nSELECT to block if other transactions have modified the selected rows,\nyou should disable autocommit.)\nDistributed XA transactions should always use this isolation level.\n\nAccess Mode\n\nThe access mode specifies whether the transaction is allowed to write data or not. By\ndefault, transactions are in READ WRITE mode (see the tx_read_only system variable).\n\nREAD ONLY mode allows the storage engine to apply optimizations that cannot be used\nfor transactions which write data. The only exception to this rule is that read only\ntransactions can perform DDL statements on temporary tables.\n\nIt is not permitted to specify both READ WRITE and READ ONLY in the same statement.\n\nREAD WRITE and READ ONLY can also be specified in the START TRANSACTION statement, in\nwhich case the specified mode is only valid for one transaction.\n\nExamples\n--------\nSET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\nAttempting to set the isolation level within an existing transaction without\nspecifying GLOBAL or SESSION.\n\nSTART TRANSACTION;\n\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nERROR 1568 (25001): Transaction characteristics can't be changed while a transaction\nis in progress\n','','https://mariadb.com/kb/en/library/set-transaction/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (109,8,'START SLAVE','The terms master and slave have historically been used in replication, but\nthe terms terms primary and replica are now preferred. The old terms are used still\nused in parts of the documentation, and in MariaDB commands, although MariaDB 10.5\nhas begun the process of renaming. The documentation process is ongoing. See\nMDEV-18777 to follow progress on this effort.\n\nSyntax\n------\nSTART SLAVE ["connection_name"] [thread_type [, thread_type] ... ] [FOR\nCHANNEL "connection_name"]\nSTART SLAVE ["connection_name"] [SQL_THREAD] UNTIL                \n  MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos [FOR\nCHANNEL "connection_name"]\nSTART SLAVE ["connection_name"] [SQL_THREAD] UNTIL\n  RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos [FOR\nCHANNEL "connection_name"]\nSTART SLAVE ["connection_name"] [SQL_THREAD] UNTIL\n  MASTER_GTID_POS = <GTID position> [FOR CHANNEL "connection_name"]\nSTART ALL SLAVES [thread_type [, thread_type]]\n\nSTART REPLICA ["connection_name"] [thread_type [, thread_type] ... ] -- from 10.5.1\nSTART REPLICA ["connection_name"] [SQL_THREAD] UNTIL                \n  MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos -- from 10.5.1\nSTART REPLICA ["connection_name"] [SQL_THREAD] UNTIL\n  RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos -- from 10.5.1\nSTART REPLICA ["connection_name"] [SQL_THREAD] UNTIL\n  MASTER_GTID_POS = <GTID position> -- from 10.5.1\nSTART ALL REPLICAS [thread_type [, thread_type]] -- from 10.5.1\n\nthread_type: IO_THREAD | SQL_THREAD\n\nDescription\n-----------\nSTART SLAVE (START REPLICA from MariaDB 10.5.1) with no thread_type options starts\nboth of the replica threads (see replication). The I/O thread reads events from the\nprimary server and stores\nthem in the relay log. The SQL thread reads events from the relay log\nand executes them. START SLAVE requires the SUPER privilege, or, from MariaDB 10.5.2,\nthe REPLICATION SLAVE ADMIN privilege.\n\nIf START SLAVE succeeds in starting the replica threads, it returns\nwithout any error. However, even in that case, it might be that the\nreplica threads start and then later stop (for example, because they do\nnot manage to connect to the primary or read its binary log, or some\nother problem). START SLAVE does not warn you about this. You must\ncheck the replica's error log for error messages generated by the replica\nthreads, or check that they are running satisfactorily with SHOW SLAVE\nSTATUS (SHOW REPLICA STATUS from MariaDB 10.5.1).\n\nSTART SLAVE UNTIL\nSTART SLAVE UNTIL refers to the SQL_THREAD replica position at which the SQL_THREAD\nreplication will halt. If SQL_THREAD isn't specified both threads are started.\n\nSTART SLAVE UNTIL master_gtid_pos=xxx is also supported. See Global Transaction\nID/START SLAVE UNTIL master_gtid_pos=xxx for more details.\n\nconnection_name\nIf there is only one nameless primary, or the default primary (as specified by the\ndefault_master_connection system variable) is intended, connection_name can be\nomitted. If provided, the START SLAVE statement will apply to the specified primary.\n\nconnection_name is case-insensitive.\n\nSTART ALL SLAVES\nSTART ALL SLAVES starts all configured replicas (replicas with master_host not empty)\nthat were not started before.  It will give a note for all started connections. You\ncan check the notes with SHOW WARNINGS.\n\nSTART REPLICA\n','','https://mariadb.com/kb/en/library/start-slave/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (110,8,'START TRANSACTION','Syntax\n------\nSTART TRANSACTION [transaction_property [, transaction_property] ...] | BEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n\ntransaction_property:\n  WITH CONSISTENT SNAPSHOT\n | READ WRITE\n | READ ONLY\n\nDescription\n-----------\nThe START TRANSACTION or BEGIN statement\nbegins a new transaction. COMMIT commits the current\ntransaction, making its changes permanent. ROLLBACK rolls\nback the current transaction, canceling its changes. The SET\nautocommit statement disables or enables the default autocommit mode for the\ncurrent session.\n\nSTART TRANSACTION and SET autocommit = 1 implicitly commit the current transaction,\nif any.\n\nThe optional WORK keyword is supported for\nCOMMIT and ROLLBACK, as are the\nCHAIN and RELEASE clauses.\n\nCHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of the\ncompletion_type system variable determines the default completion behavior.\n\nThe AND CHAIN clause causes a new transaction to begin as\nsoon as the current one ends, and the new transaction has the same isolation\nlevel as the just-terminated transaction. The RELEASE clause\ncauses the server to disconnect the current client session after terminating\nthe current transaction. Including the NO keyword suppresses\nCHAIN or RELEASE completion, which can be\nuseful if the completion_type system variable is set to cause chaining or release\ncompletion by default.\n\nAccess Mode\n\nThe access mode specifies whether the transaction is allowed to write data or not. By\ndefault, transactions are in READ WRITE mode (see the tx_read_only system variable).\n\nREAD ONLY mode allows the storage engine to apply optimizations that cannot be used\nfor transactions which write data. The only exception to this rule is that read only\ntransactions can perform DDL statements on temporary tables.\n\nIt is not permitted to specify both READ WRITE and READ ONLY in the same statement.\n\nREAD WRITE and READ ONLY can also be specified in the SET TRANSACTION statement, in\nwhich case the specified mode is valid for all sessions, or for all subsequent\ntransaction used by the current session.\n\nautocommit\n\nBy default, MariaDB runs with autocommit mode enabled. This means that as soon as you\nexecute a statement that updates (modifies) a table, MariaDB stores the update on\ndisk to make it permanent. To disable autocommit mode, use the following statement:\nSET autocommit=0;\n\nAfter disabling autocommit mode by setting the autocommit variable to zero, changes\nto transaction-safe tables (such as those for InnoDB or\nNDBCLUSTER) are not made permanent immediately. You must use COMMIT to store your\nchanges to disk or ROLLBACK to ignore the changes.\n\nTo disable autocommit mode for a single series of statements, use the START\nTRANSACTION statement.\n\nDDL Statements\n\nDDL statements (CREATE, ALTER, DROP) and administrative statements (FLUSH, RESET,\nOPTIMIZE, ANALYZE, CHECK, REPAIR, CACHE INDEX), transaction management statements\n(BEGIN, START TRANSACTION) and LOAD DATA INFILE, cause an implicit COMMIT and start a\nnew transaction. An exception to this rule are the DDL that operate on temporary\ntables: you can CREATE, ALTER and DROP them without causing any COMMIT, but those\nactions cannot be rolled back. This means that if you call ROLLBACK, the temporary\ntables you created in the transaction will remain, while the rest of the transaction\nwill be rolled back.\n\nTransactions cannot be used in Stored Functions or Triggers. In Stored Procedures and\nEvents BEGIN is not allowed, so you should use START TRANSACTION instead.\n\nA transaction acquires a metadata lock on every table it accesses to prevent other\nconnections from altering their structure. The lock is released at the end of the\ntransaction. This happens even with non-transactional storage engines (like MEMORY or\nCONNECT), so it makes sense to use transactions with non-transactional tables.\n\nin_transaction\n\nThe in_transaction system variable is a session-only, read-only variable that returns\n1 inside a transaction, and 0 if not in a transaction.\n\nWITH CONSISTENT SNAPSHOT\n\nThe WITH CONSISTENT SNAPSHOT option starts a consistent read for storage engines such\nas InnoDB that can do so, the same as if a START TRANSACTION followed by a SELECT\nfrom any InnoDB table was issued.\n\nSee Enhancements for START TRANSACTION WITH CONSISTENT SNAPSHOT.\n\nExamples\n--------\nSTART TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n','','https://mariadb.com/kb/en/library/start-transaction/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (111,8,'STOP SLAVE','The terms master and slave have historically been used in replication, but\nthe terms terms primary and replica are now preferred. The old terms are used still\nused in parts of the documentation, and in MariaDB commands, although MariaDB 10.5\nhas begun the process of renaming. The documentation process is ongoing. See\nMDEV-18777 to follow progress on this effort.\n\nSyntax\n------\nSTOP SLAVE ["connection_name"] [thread_type [, thread_type] ... ] [FOR\nCHANNEL "connection_name"]\n\nSTOP ALL SLAVES [thread_type [, thread_type]]\n\nSTOP REPLICA ["connection_name"] [thread_type [, thread_type] ... ] -- from 10.5.1\n\nSTOP ALL REPLICAS [thread_type [, thread_type]] -- from 10.5.1\n\nthread_type: IO_THREAD | SQL_THREAD\n\nDescription\n-----------\nStops the replica threads. STOP SLAVE requires the SUPER privilege, or, from MariaDB\n10.5.2, the REPLICATION SLAVE ADMIN privilege.\n\nLike START SLAVE, this statement may be used with the IO_THREAD and\nSQL_THREAD options to name the thread or threads to be stopped. In almost all cases,\none never need to use the thread_type options.\n\nSTOP SLAVE waits until any current replication event group affecting\none or more non-transactional tables has finished executing (if there\nis any such replication group), or until the user issues a KILL QUERY or KILL\nCONNECTION statement.\n\nNote that STOP SLAVE doesn't delete the connection permanently.  Next time you\nexecute START SLAVE or the MariaDB server restarts, the replica connection is\nrestored with it's original arguments. If you want to delete a connection, you should\nexecute RESET SLAVE.\n\nSTOP ALL SLAVES\nSTOP ALL SLAVES stops all your running replicas. It will give you a note for every\nstopped connection. You can check the notes with SHOW WARNINGS.\n\nconnection_name\nThe connection_name option is used for multi-source replication.\n\nIf there is only one nameless master, or the default master (as specified by the\ndefault_master_connection system variable) is intended, connection_name can be\nomitted. If provided, the STOP SLAVE statement will apply to the specified master.\n\nconnection_name is case-insensitive.\n\nSTOP REPLICA\n','','https://mariadb.com/kb/en/library/stop-slave/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (112,8,'Transaction Timeouts','MariaDB has always had the wait_timeout and interactive_timeout settings,\nwhich close connections after a certain period of inactivity.\n\nHowever, these are by default set to a long wait period. In situations where\ntransactions may be started, but not committed or rolled back, more granular control\nand a shorter timeout may be desirable so as to avoid locks being held for too long.\n\nMariaDB 10.3 introduced three new variables to handle this situation.\n\nThese accept a time in seconds to time out, by closing the connection, transactions\nthat are idle for longer than this period. By default all are set to zero, or\nno timeout.\n\nidle_transaction_timeout affects all transactions, idle_write_transaction_timeout\naffects write transactions only and idle_readonly_transaction_timeout affects read\ntransactions only. The latter two variables work independently. However, if either is\nset along with idle_transaction_timeout, the settings for\nidle_write_transaction_timeout or idle_readonly_transaction_timeout will\ntake precedence.\n\nExamples\n--------\nSET SESSION idle_transaction_timeout=2;\nBEGIN;\nSELECT * FROM t;\nEmpty set (0.000 sec)\n## wait 3 seconds\nSELECT * FROM t;\nERROR 2006 (HY000): MySQL server has gone away\n\nSET SESSION idle_write_transaction_timeout=2;\nBEGIN;\nSELECT * FROM t;\nEmpty set (0.000 sec)\n## wait 3 seconds\nSELECT * FROM t;\nEmpty set (0.000 sec)\nINSERT INTO t VALUES(1);\n## wait 3 seconds\nSELECT * FROM t;\nERROR 2006 (HY000): MySQL server has gone away\n\nSET SESSION idle_transaction_timeout=2, SESSION idle_readonly_transaction_timeout=10;\nBEGIN;\nSELECT * FROM t;\nEmpty set (0.000 sec)\n ## wait 3 seconds\nSELECT * FROM t;\nEmpty set (0.000 sec)\n## wait 11 seconds\nSELECT * FROM t;\nERROR 2006 (HY000): MySQL server has gone away\n','','https://mariadb.com/kb/en/library/transaction-timeouts/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (113,8,'UNLOCK TABLES','Syntax\n------\nUNLOCK TABLES\n\nDescription\n-----------\nUNLOCK TABLES explicitly releases any table locks held by the\ncurrent session. See LOCK TABLES for more information.\n\nIn addition to releasing table locks acquired by the LOCK TABLES statement, the\nUNLOCK TABLES statement also releases the global read lock acquired by the FLUSH\nTABLES WITH READ LOCK statement.  The FLUSH TABLES WITH READ LOCK statement is very\nuseful for performing backups. See FLUSH for more information about FLUSH TABLES WITH\nREAD LOCK.\n','','https://mariadb.com/kb/en/library/transactions-unlock-tables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (114,8,'WAIT and NOWAIT','Syntax\n------\nALTER TABLE tbl_name [WAIT n|NOWAIT] ...\nCREATE ... INDEX ON tbl_name (index_col_name, ...) [WAIT n|NOWAIT] ...\nDROP INDEX ... [WAIT n|NOWAIT]\nDROP TABLE tbl_name [WAIT n|NOWAIT] ...\nLOCK TABLE ... [WAIT n|NOWAIT]\nOPTIMIZE TABLE tbl_name [WAIT n|NOWAIT]\nRENAME TABLE tbl_name [WAIT n|NOWAIT] ...\nSELECT ... FOR UPDATE [WAIT n|NOWAIT]\nSELECT ... LOCK IN SHARE MODE [WAIT n|NOWAIT]\nTRUNCATE TABLE tbl_name [WAIT n|NOWAIT]\n\nDescription\n-----------\nThe lock wait timeout can be explicitly set in the statement by using either WAIT n\n(to set the wait in seconds) or NOWAIT, in which case the statement will immediately\nfail if the lock cannot be obtained. WAIT 0 is equivalent to NOWAIT.\n','','https://mariadb.com/kb/en/library/wait-and-nowait/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (115,8,'XA Transactions','Overview\n--------\nThe MariaDB XA implementation is based on the X/Open CAE document Distributed\nTransaction Processing: The XA Specification. This document is published by The Open\nGroup and available at http://www.opengroup.org/public/pubs/catalog/c193.htm.\n\nXA transactions are designed to allow distributed transactions, where a transaction\nmanager (the application) controls a transaction which involves multiple resources.\n\nSuch resources are usually DBMSs, but could be resources of any type. The whole set\nof required transactional operations is called a global transaction. Each subset of\noperations which involve a single resource is called a local transaction. XA used a\n2-phases commit (2PC). With the first commit, the transaction manager tells each\nresource to prepare an effective commit, and waits for a confirm message. The changes\nare not still made effective at this point. If any of the resources encountered an\nerror, the transaction manager will rollback the global transaction. If all resources\ncommunicate that the first commit is successful, the transaction manager can require\na second commit, which makes the changes effective.\n\nIn MariaDB, XA transactions can only be used with storage engines that support them.\n\nAt least InnoDB, TokuDB, SPIDER and MyRocks support them. For InnoDB, until MariaDB\n10.2, XA transactions can be disabled by setting the innodb_support_xa server system\nvariable to 0. From MariaDB 10.3, XA transactions are always supported.\n\nLike regular transactions, XA transactions create metadata locks on accessed tables.\n\nXA transactions require REPEATABLE READ as a minimum isolation level. However,\ndistributed transactions should always use SERIALIZABLE.\n\nTrying to start more than one XA transaction at the same time produces a 1400 error\n(SQLSTATE 'XAE09'). The same error is produced when attempting to start an XA\ntransaction while a regular transaction is in effect. Trying to start a regular\ntransaction while an XA transaction is in effect produces a 1399 error\n(SQLSTATE 'XAE07').\n\nThe statements that cause an implicit COMMIT for regular transactions produce a 1400\nerror (SQLSTATE 'XAE09') if a XA transaction is in effect.\n\nInternal XA vs External XA\n--------------------------\nXA transactions are an overloaded term in MariaDB. If a storage engine is XA-capable,\nit can mean one or both of these:\n\nTransaction Coordinator Log\n---------------------------\nIf you have two or more XA-capable storage engines enabled, then a transaction\ncoordinator log must be available.\n\nThere are currently two implementations of the transaction coordinator log:\n\nIf the binary log is enabled on a server, then the server will use the binary\nlog-based transaction coordinator log. Otherwise, it will use the memory-mapped\nfile-based transaction coordinator log.\n\nSee Transaction Coordinator Log for more information.\n\nSyntax\n------\nXA {START|BEGIN} xid [JOIN|RESUME]\n\nXA END xid [SUSPEND [FOR MIGRATE]]\n\nXA PREPARE xid\n\nXA COMMIT xid [ONE PHASE]\n\nXA ROLLBACK xid\n\nXA RECOVER [FORMAT=['RAW'|'SQL']]\n\nxid: gtrid [, bqual [, formatID ]]\n\nThe interface to XA transactions is a set of SQL statements starting with XA. Each\nstatement changes a transaction's state, determining which actions it can perform. A\ntransaction which does not exist is in the NON-EXISTING state.\n\nXA START (or BEGIN) starts a transaction and defines its xid (a transaction\nidentifier). The JOIN or RESUME keywords have no effect. The new transaction will be\nin ACTIVE state.\n\nThe xid can have 3 components, though only the first one is mandatory. gtrid is a\nquoted string representing a global transaction identifier. bqual is a quoted string\nrepresenting a local transaction identifier. formatID is an unsigned integer\nindicating the format used for the first two components; if not specified, defaults\nto 1. MariaDB does not interpret in any way these components, and only uses them to\nidentify a transaction. xids of transactions in effect must be unique.\n\nXA END declares that the specified ACTIVE transaction is finished and it changes its\nstate to IDLE. SUSPEND [FOR MIGRATE] has no effect.\n\nXA PREPARE prepares an IDLE transaction for commit, changing its state to PREPARED.\n\nThis is the first commit.\n\nXA COMMIT definitely commits and terminates a transaction which has already been\nPREPARED. If the ONE PHASE clause is specified, this statements performs a 1-phase\ncommit on an IDLE transaction.\n\nXA ROLLBACK rolls back and terminates an IDLE or PREPARED transaction.\n\nXA RECOVER shows information about all PREPARED transactions.\n\nWhen trying to execute an operation which is not allowed for the transaction's\ncurrent state, an error is produced:\nXA COMMIT 'test' ONE PHASE;\nERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed when global\ntransaction is in the  ACTIVE state\n\nXA COMMIT 'test2';\nERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed when global\ntransaction is in the  NON-EXISTING state\n\nXA RECOVER\n----------\nThe XA RECOVER statement shows information about all transactions which are in the\nPREPARED state. It does not matter which connection created the transaction: if it\nhas been PREPARED, it appears. But this does not mean that a connection can commit or\nrollback a transaction which was started by another connection. Note that\ntransactions using a 1-phase commit are never in the PREPARED state, so they cannot\nbe shown by XA RECOVER.\n\nXA RECOVER produces four columns:\nXA RECOVER;\n+----------+--------------+--------------+------+\n| formatID | gtrid_length | bqual_length | data |\n+----------+--------------+--------------+------+\n|        1 |            4 |            0 | test |\n+----------+--------------+--------------+------+\n\nformatID is the formatID part of xid.\n\ndata are the gtrid and bqual parts of xid, concatenated.\n\ngtrid_length and bqual_length are the lengths of gtrid and bqual, respectevely.\n\nExamples\n--------\n2-phases commit:\nXA START 'test';\n\nINSERT INTO t VALUES (1,2);\n\nXA END 'test';\n\nXA PREPARE 'test';\n\nXA COMMIT 'test';\n\n1-phase commit:\nXA START 'test';\n\nINSERT INTO t VALUES (1,2);\n\nXA END 'test';\n\nXA COMMIT 'test' ONE PHASE;\n\nHuman-readable:\nxa start '12\r34\t67\v78', 'abc\ndef', 3;\n\ninsert t1 values (40);\n\nxa end '12\r34\t67\v78', 'abc\ndef', 3;\n\nxa prepare '12\r34\t67\v78', 'abc\ndef', 3;\n\nxa recover format='RAW';\n+----------+--------------+--------------+--------------------+\n| formatID | gtrid_length | bqual_length | data               |\n+----------+--------------+--------------+--------------------+\n34      67v78abc       11 |            7 | 12\ndef |\n+----------+--------------+--------------+--------------------+\n\nxa recover format='SQL';\n+----------+--------------+--------------+-------------------------------------------\n---+\n| formatID | gtrid_length | bqual_length | data                                      \n |\n+----------+--------------+--------------+-------------------------------------------\n---+\n|        3 |           11 |            7 |\nX'31320d3334093637763738',X'6162630a646566',3 |\n+----------+--------------+--------------+-------------------------------------------\n---+\n\nxa rollback X'31320d3334093637763738',X'6162630a646566',3;\n\nKnown Issues\n------------\n\nMariaDB Galera Cluster\n\nMariaDB Galera Cluster does not support XA transactions.\n\nHowever, MariaDB Galera Cluster builds include a built-in plugin called wsrep. Prior\nto MariaDB 10.4.3, this plugin was internally considered an XA-capable storage\nengine. Consequently, these MariaDB Galera Cluster builds have multiple XA-capable\nstorage engines by default, even if the only "real" storage engine that supports\nexternal XA transactions enabled on these builds by default is InnoDB. Therefore,\nwhen using one these builds MariaDB would be forced to use a transaction coordinator\nlog by default, which could have performance implications.\n\nSee Transaction Coordinator Log Overview: MariaDB Galera Cluster for\nmore information.\n','','https://mariadb.com/kb/en/library/xa-transactions/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (116,10,'Account Locking','Description\n\nAccount locking permits privileged administrators to lock/unlock user accounts. No\nnew client connections will be permitted if an account is locked (existing\nconnections are not affected).\n\nUser accounts can be locked at creation, with the CREATE USER statement, or modified\nafter creation with the ALTER USER statement. For example:\nCREATE USER 'lorin'@'localhost' ACCOUNT LOCK;\n\nor\nALTER USER 'marijn'@'localhost' ACCOUNT LOCK;\n\nThe server will return an ER_ACCOUNT_HAS_BEEN_LOCKED error when locked users attempt\nto connect:\nmysql -ulorin\n ERROR 4151 (HY000): Access denied, this account is locked\n\nThe ALTER USER statement is also used to unlock a user:\nALTER USER 'lorin'@'localhost' ACCOUNT UNLOCK;\n\nThe SHOW CREATE USER statement will show whether the account is locked:\nSHOW CREATE USER 'marijn'@'localhost';\n+-----------------------------------------------+\n| CREATE USER for marijn@localhost              |\n+-----------------------------------------------+\n| CREATE USER 'marijn'@'localhost' ACCOUNT LOCK |\n+-----------------------------------------------+\n\nas well as querying the mysql.global_priv table:\nSELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv \n WHERE user='marijn';\n+------------------------------------------------------------------------------------\n-+\n| CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv))                               \n |\n+------------------------------------------------------------------------------------\n-+\n| marijn@localhost => {\n  "access": 0,\n  "plugin": "mysql_native_password",\n  "authentication_string": "",\n  "account_locked": true,\n  "password_last_changed": 1558017158\n} |\n+------------------------------------------------------------------------------------\n-+\n','','https://mariadb.com/kb/en/library/account-locking/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (117,10,'Authentication from MariaDB 10.4','Overview\n--------\nThere are four new main features in 10.4 relating to authentication:\n\nDescription\n-----------\nAs a result of the above changes, the open-for-everyone all-powerful root account is\nfinally gone. And installation scripts will no longer demand that you “PLEASE\nREMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !”, because the root account is\nsecurely created automatically.\n\nTwo all-powerful accounts are created by default — root and the OS user that owns the\ndata directory, typically mysql. They are created as:\nCREATE USER root@localhost IDENTIFIED VIA unix_socket OR mysql_native_password\nUSING 'invalid'\nCREATE USER mysql@localhost IDENTIFIED VIA unix_socket OR mysql_native_password\nUSING 'invalid'\n\nUsing unix_socket means that if you are the system root user, you can login as\nroot@locahost without a password. This technique was pioneered by Otto Kekäläinen in\nDebian MariaDB packages and has been successfully used in Debian since as early as\nMariaDB 10.0.\n\nIt is based on a simple fact that asking the system root for a password adds no extra\nsecurity — root has full access to all the data files and all process memory anyway.\n\nBut not asking for a password means, there is no root password to forget (no need for\nthe numerous tutorials on “how to reset MariaDB root password”). And if you want to\nscript some tedious database work, there is no need to store the root password in\nplain text for the script to use (no need for debian-sys-maint user).\n\nStill, some users may wish to log in as MariaDB root without using sudo. Hence the\nold authentication method — conventional MariaDB password — is still available. By\ndefault it is disabled (“invalid” is not a valid password hash), but one can set the\npassword with a usual SET PASSWORD statement. And still retain the password-less\naccess via sudo.\n\nIf you install MariaDB locally (say from a tarball), you would not want to use sudo\nto be able to login. This is why MariaDB creates a second all-powerful user with the\nsame name as a system user that owns the data directory. In local (not system-wide)\ninstallations, this will be the user who installed MariaDB — they automatically get\nconvenient password-less root-like access, because they can access all the data\nfiles anyway.\n\nEven if MariaDB is installed system-wide, you may not want to run your database\nmaintenance scripts as system root — now you can run them as system mysql user. And\nyou will know that they will never destroy your entire system, even if you make a\ntypo in a shell script.\n\nHowever, seasoned MariaDB DBAs who are used to the old ways do need to makes some\nchanges. See the examples below for common tasks.\n\nCookbook\n--------\nAfter installing MariaDB system-wide the first thing you’ve got used to doing is\nlogging in into the unprotected root account and protecting it, that is, setting the\nroot password:\n$ sudo dnf install MariaDB-server\n$ mysql -uroot\n...\nMariaDB> set password = password("XH4VmT3_jt");\n\nThis is not only unnecessary now, it will simply not work — there is no unprotected\nroot account. To login as root use\n$ sudo dnf install MariaDB-server\n$ sudo mysql\n\nNote that it implies you are connecting via the unix socket, not tcp. If you happen\nto have protocol=tcp in a system-wide /etc/my.cnf file, use sudo\nmysql --protocol=socket.\n\nAfter installing MariaDB locally you’ve also used to connect to the unprotected root\naccount using mysql -uroot. This will not work either, simply use mysql without\nspecifying a username.\n\nIf you've forgotten your root password, no problem — you can still connect using sudo\nand change the password. And if you've also removed unix_socket authentication, to\nrestore access do as follows:\n\nTo view inside privilege tables, the old mysql.user table still exists. You can\nselect from it as before, although you cannot update it anymore. It doesn’t show\nalternative authentication plugins and this was one of the reasons for switching to\nthe mysql.global_priv table — complex authentication rules did not fit into rigid\nstructure of a relational table. You can select from the new table, for example: \nselect concat(user, '@', host, ' => ', json_detailed(priv)) from mysql.global_priv;\n\nReverting to the Previous Authentication Method for root@localhost\n------------------------------------------------------------------\nIf you don't want the root@localhost user account created by mysql_install_db to use\nunix_socket authentication by default, then there are a few ways to revert to the\nprevious mysql_native_password authentication method for this user account.\n\nConfiguring mysql_install_db to Revert to the Previous Authentication Method\n\nOne way to revert to the previous mysql_native_password authentication method for the\nroot@localhost user account is to execute mysql_install_db with a special option. If\nmysql_install_db is executed while --auth-root-authentication-method=normal is\nspecified, then it will create the default user accounts using the default behavior\nof MariaDB 10.3 and before.\n\nThis means that the root@localhost user account will use mysql_native_password\nauthentication by default. There are some other differences as well. See\nmysql_install_db: User Accounts Created by Default for more information.\n\nFor example, the option can be set on the command-line while\nrunning mysql_install_db:\nmysql_install_db --user=mysql\n--datadir=/var/lib/mysql --auth-root-authentication-method=normal\n\nThe option can also be set in an option file in an option group supported by\nmysql_install_db. For example:\n[mysql_install_db]\nauth_root_authentication_method=normal\n\nIf the option is set in an option file and if mysql_install_db is executed, then\nmysql_install_db will read this option from the option file, and it will\nautomatically set this option.\n\nAltering the User Account to Revert to the Previous Authentication Method\n\nIf you have already installed MariaDB, and if the root@localhost user account is\nalready using unix_socket authentication, then you can revert to the old\nmysql_native_password authentication method for the user account by executing\nthe following:\nALTER USER root@localhost IDENTIFIED VIA mysql_native_password\nUSING PASSWORD("verysecret")\n','','https://mariadb.com/kb/en/library/authentication-from-mariadb-104/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (118,10,'CREATE USER','Syntax\n------\nCREATE [OR REPLACE] USER [IF NOT EXISTS] \n user_specification [,user_specification ...] \n [REQUIRE {NONE | tls_option [[AND] tls_option ...] }]\n [WITH resource_option [resource_option ...] ]\n [lock_option] [password_option]\n\nuser_specification:\n username [authentication_option]\n\nauthentication_option:\n IDENTIFIED BY 'password'\n | IDENTIFIED BY PASSWORD 'password_hash'\n | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule  ...]\n\nauthentication_rule:\n  authentication_plugin\n | authentication_plugin {USING|AS} 'authentication_string'\n | authentication_plugin {USING|AS} PASSWORD('password')\n\ntls_option:\n SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n\nresource_option:\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n\npassword_option:\n PASSWORD EXPIRE\n | PASSWORD EXPIRE DEFAULT\n | PASSWORD EXPIRE NEVER\n | PASSWORD EXPIRE INTERVAL N DAY\n\nlock_option:\n  ACCOUNT LOCK\n | ACCOUNT UNLOCK\n}\n\nDescription\n-----------\nThe CREATE USER statement creates new MariaDB accounts. To use it, you must have the\nglobal CREATE USER privilege or the INSERT privilege for the mysql database. For each\naccount, CREATE USER creates a new row in mysql.user (until MariaDB 10.3 this is a\ntable, from MariaDB 10.4 it's a view) or mysql.global_priv_table (from MariaDB 10.4)\nthat has no privileges.\n\nIf any of the specified accounts, or any permissions for the specified accounts,\nalready exist, then the server returns ERROR 1396 (HY000). If an error occurs, CREATE\nUSER will still create the accounts that do not result in an error. Only one error is\nproduced for all users which have not been created:\nERROR 1396 (HY000): \n Operation CREATE USER failed for 'u1'@'%','u2'@'%'\n\nCREATE USER, DROP USER, CREATE ROLE, and DROP ROLE  all produce the same error code\nwhen they fail.\n\nSee Account Names below for details on how account names are specified.\n\nOR REPLACE\n----------\nIf the optional OR REPLACE clause is used, it is basically a shortcut for:\nDROP USER IF EXISTS name;\nCREATE USER name ...;\n\nFor example:\nCREATE USER foo2@test IDENTIFIED BY 'password';\nERROR 1396 (HY000): Operation CREATE USER failed for 'foo2'@'test'\n\nCREATE OR REPLACE USER foo2@test IDENTIFIED BY 'password';\nQuery OK, 0 rows affected (0.00 sec)\n\nIF NOT EXISTS\n-------------\nWhen the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the specified user already exists.\n\nFor example:\nCREATE USER foo2@test IDENTIFIED BY 'password';\nERROR 1396 (HY000): Operation CREATE USER failed for 'foo2'@'test'\n\nCREATE USER IF NOT EXISTS foo2@test IDENTIFIED BY 'password';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+----------------------------------------------------+\n| Level | Code | Message                                            |\n+-------+------+----------------------------------------------------+\n| Note  | 1973 | Can't create user 'foo2'@'test'; it already exists |\n+-------+------+----------------------------------------------------+\n\nAuthentication Options\n----------------------\n\nIDENTIFIED BY 'password'\n\nThe optional IDENTIFIED BY clause can be used to provide an account with a password.\n\nThe password should be specified in plain text. It will be hashed by the PASSWORD\nfunction prior to being stored in the mysql.user/mysql.global_priv_table table.\n\nFor example, if our password is mariadb, then we can create the user with:\nCREATE USER foo2@test IDENTIFIED BY 'mariadb';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED BY PASSWORD 'password_hash'\n\nThe optional IDENTIFIED BY PASSWORD clause can be used to provide an account with a\npassword that has already been hashed. The password should be specified as a hash\nthat was provided by the PASSWORD function. It will be stored in the\nmysql.user/mysql.global_priv_table table as-is.\n\nFor example, if our password is mariadb, then we can find the hash with:\nSELECT PASSWORD('mariadb');\n+-------------------------------------------+\n| PASSWORD('mariadb')                       |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nAnd then we can create a user with the hash:\nCREATE USER foo2@test IDENTIFIED BY\nPASSWORD '*54958E764CE10E50764C2EECBB71D01F08549980';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED {VIA|WITH} authentication_plugin\n\nThe optional IDENTIFIED VIA authentication_plugin allows you to specify that the\naccount should be authenticated by a specific authentication plugin. The plugin name\nmust be an active authentication plugin as per SHOW PLUGINS. If it doesn't show up in\nthat output, then you will need to install it with INSTALL PLUGIN or INSTALL SONAME.\n\nFor example, this could be used with the PAM authentication plugin:\nCREATE USER foo2@test IDENTIFIED VIA pam;\n\nSome authentication plugins allow additional arguments to be specified after a USING\nor AS keyword. For example, the PAM authentication plugin accepts a service name:\nCREATE USER foo2@test IDENTIFIED VIA pam USING 'mariadb';\n\nThe exact meaning of the additional argument would depend on the specific\nauthentication plugin.\n\nBy default, when you create a user without specifying an authentication plugin,\nMariaDB uses the mysql_native_password plugin.\n\nTLS Options\n-----------\nBy default, MariaDB transmits data between the server and clients without encrypting\nit. This is generally acceptable when the server and client run on the same host or\nin networks where security is guaranteed through other means. However, in cases where\nthe server and client exist on separate networks or they are in a high-risk network,\nthe lack of encryption does introduce security concerns as a malicious actor could\npotentially eavesdrop on the traffic as it is sent over the network between them.\n\nTo mitigate this concern, MariaDB allows you to encrypt data in transit between the\nserver and clients using the Transport Layer Security (TLS) protocol. TLS was\nformerly known as Secure Socket Layer (SSL), but strictly speaking the SSL protocol\nis a predecessor to TLS and, that version of the protocol is now considered insecure.\n\nThe documentation still uses the term SSL often and for compatibility reasons\nTLS-related server system and status variables still use the prefix ssl_, but\ninternally, MariaDB only supports its secure successors.\n\nSee Secure Connections Overview for more information about how to determine whether\nyour MariaDB server has TLS support.\n\nYou can set certain TLS-related restrictions for specific user accounts. For\ninstance, you might use this with user accounts that require access to sensitive data\nwhile sending it across networks that you do not control. These restrictions can be\nenabled for a user account with the CREATE USER, ALTER USER, or GRANT statements. The\nfollowing options are available:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\n|Option\n\n|Description\n\n|\n|REQUIRE NONE\n\n|TLS is not required for this account, but can\nstill be used.\n\n|\n|REQUIRE SSL\n\n|The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with other TLS options.\n\n|\n|REQUIRE X509\n\n|The account must use TLS and must have a valid\nX509 certificate. This option implies REQUIRE SSL. This option cannot be combined\nwith other TLS options.\n\n|\n|REQUIRE ISSUER 'issuer'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the Certificate Authority must be the one specified via the\nstring issuer. This option implies REQUIRE X509. This option can be combined with the\nSUBJECT, and CIPHER options in any order.                                 |\n|REQUIRE SUBJECT 'subject'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the certificate's Subject must be the one specified via the\nstring subject. This option implies REQUIRE X509. This option can be combined with\nthe ISSUER, and CIPHER options in any order.                                 |\n|REQUIRE CIPHER 'cipher'\n\n|The account must use TLS, but no valid X509\ncertificate is required. Also, the encryption used for the connection must use a\nspecific cipher method specified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and SUBJECT options in any order.|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\nThe REQUIRE keyword must be used only once for all specified options, and the AND\nkeyword can be used to separate individual options, but it is not required.\n\nFor example, you can create a user account that requires these TLS options with\nthe following:\nCREATE USER 'alice'@'%'\n REQUIRE SUBJECT '/CN=alice/O=My Dom, Inc./C=US/ST=Oregon/L=Portland'\n AND ISSUER '/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com'\n AND CIPHER 'SHA-DES-CBC3-EDH-RSA';\n\nIf any of these options are set for a specific user account, then any client who\ntries to connect with that user account will have to be configured to connect\nwith TLS.\n\nSee Securing Connections for Client and Server for information on how to enable TLS\non the client and server.\n\nResource Limit Options\n----------------------\nIt is possible to set per-account limits for certain server resources. The following\ntable shows the values that can be set per account:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\n|Limit Type\n\n|Decription\n\n|\n|MAX_QUERIES_PER_HOUR\n\n|Number of statements that the account\ncan issue per hour (including updates)\n\n|\n|MAX_UPDATES_PER_HOUR\n\n|Number of updates (not queries) that\nthe account can issue per hour\n\n|\n|MAX_CONNECTIONS_PER_HOUR\n\n|Number of connections that the account\ncan start per hour\n\n|\n|MAX_USER_CONNECTIONS\n\n|Number of simultaneous connections that\ncan be accepted from the same account; if it is 0, max_connections will be used\ninstead; if max_connections is 0, there is no limit for this account's\nsimultaneous connections.|\n|MAX_STATEMENT_TIME\n\n|Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that Exceed a Certain Time to\nExecute.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\nIf any of these limits are set to 0, then there is no limit for that resource for\nthat user.\n\nHere is an example showing how to create a user with resource limits:\nCREATE USER 'someone'@'localhost' WITH\n  MAX_USER_CONNECTIONS 10\n  MAX_QUERIES_PER_HOUR 200;\n\nThe resources are tracked per account, which means 'user'@'server'; not per user name\nor per connection.\n\nThe count can be reset for all users using FLUSH USER_RESOURCES, FLUSH PRIVILEGES or\nmysqladmin reload.\n\nPer account resource limits are stored in the user table, in the mysql database.\n\nColumns used for resources limits are named max_questions, max_updates,\nmax_connections (for MAX_CONNECTIONS_PER_HOUR), and max_user_connections\n(for MAX_USER_CONNECTIONS).\n\nAccount Names\n-------------\nAccount names have both a user name component and a host name component, and are\nspecified as 'user_name'@'host_name'.\n\nThe user name and host name may be unquoted, quoted as strings using double quotes\n(") or\nsingle quotes ('), or quoted as identifiers using backticks (`). You must use quotes\nwhen using special characters (such as a hyphen) or wildcard characters. If you\nquote, you \nmust quote the user name and host name separately (for\nexample 'user_name'@'host_name').\n\nHost Name Component\n\nIf the host name is not provided, it is assumed to be '%'.\n\nHost names may contain the wildcard characters % and _. They are matched as if by\nthe LIKE clause. If you need to use a wildcard character literally (for example, to\nmatch a domain name with an underscore), prefix the character with a backslash.\n\nSee LIKE\nfor more information on escaping wildcard characters.\n\nHost name matches are case-insensitive. Host names can match either domain names\nor IP\naddresses. Use 'localhost' as the host name to allow only local client connections.\n\nYou can use a netmask to match a range of IP addresses using 'base_ip/netmask' as the\nhost name. A user with an IP address ip_addr will be allowed to connect if\nthe following\ncondition is true:\nip_addr & netmask = base_ip\n\nFor example, given a user:\nCREATE USER 'maria'@'247.150.130.0/255.255.255.0';\n\nthe IP addresses satisfying this condition range from 247.150.130.0 to\n247.150.130.255.\n\nUsing 255.255.255.255 is equivalent to not using a netmask at all. Netmasks cannot be\nused for IPv6 addresses.\n\nNote that the credentials added when creating a user with the '%' wildcard host will\nnot grant access in all cases. For example, some systems come with an anonymous\nlocalhost user, and when connecting from localhost this will take precedence.\n\nBefore MariaDB 10.6, the host name component could be up to 60 characters in length.\n\nStarting from MariaDB 10.6, it can be up to 255 characters.\n\nUser Name Component\n\nUser names must match exactly, including case. A user name that is empty is known as\nan anonymous account and is allowed to match a login attempt with any user name\ncomponent. These are described more in the next section.\n\nFor valid identifiers to use as user names, see Identifier Names.\n\nIt is possible for more than one account to match when a user connects.\n\nMariaDB selects\nthe first matching account after sorting according to the following criteria:\n\nThe following table shows a list of example account as sorted by these criteria:\n+---------+-------------+\n| User    | Host        |\n+---------+-------------+\n| joffrey | 192.168.0.3 |\n|         | 192.168.0.% |\n| joffrey | 192.168.%   |\n|         | 192.168.%   |\n+---------+-------------+\n\nOnce connected, you only have the privileges granted to the account that matched,\nnot all accounts that could have matched. For example, consider the following\ncommands:\nCREATE USER 'joffrey'@'192.168.0.3';\nCREATE USER 'joffrey'@'%';\nGRANT SELECT ON test.t1 to 'joffrey'@'192.168.0.3';\nGRANT SELECT ON test.t2 to 'joffrey'@'%';\n\nIf you connect as joffrey from 192.168.0.3, you will have the SELECT\nprivilege on the table test.t1, but not on the table test.t2. If you connect as\njoffrey from any other IP address, you will have the SELECT privilege on the table\ntest.t2, but not\non the table test.t1.\n\nUsernames can be up to 80 characters long before 10.6 and starting from 10.6 it can\nbe 128 characters long.\n\nAnonymous Accounts\n\nAnonymous accounts are accounts where the user name portion of the account name is\nempty. These accounts act as special catch-all accounts. If a user attempts to log\ninto the system from a host, and an anonymous account exists with a host name portion\nthat matches the user's host, then the user will log in as the anonymous account if\nthere is no more specific account match for the user name that the user entered.\n\nFor example, here are some anonymous accounts:\nCREATE USER ''@'localhost';\nCREATE USER ''@'192.168.0.3';\n\nFixing a Legacy Default Anonymous Account\nOn some systems, the mysql.db table has some entries for the ''@'%' anonymous account\nby default. Unfortunately, there is no matching entry in the\nmysql.user/mysql.global_priv_table table, which means that this anonymous account\ndoesn't exactly exist, but it does have privileges--usually on the default test\ndatabase created by mysql_install_db. These account-less privileges are a legacy that\nis leftover from a time when MySQL's privilege system was less advanced.\n\nThis situation means that you will run into errors if you try to create a ''@'%'\naccount. For example:\nCREATE USER ''@'%';\nERROR 1396 (HY000): Operation CREATE USER failed for ''@'%'\n\nThe fix is to DELETE the row in the mysql.db table and then execute FLUSH PRIVILEGES:\nDELETE FROM mysql.db WHERE User='' AND Host='%';\nFLUSH PRIVILEGES;\n\nAnd then the account can be created:\nCREATE USER ''@'%';\nQuery OK, 0 rows affected (0.01 sec)\n\nSee MDEV-13486 for more information.\n\nPassword Expiry\n---------------\n\nAccount Locking\n---------------\nFrom MariaDB 10.4.7 and MariaDB 10.5.8, the lock_option and password_option clauses\ncan occur in either order.\n','','https://mariadb.com/kb/en/library/create-user/');
update help_topic set description = CONCAT(description, ' for more details.\n \n\n\nURL: https://mariadb.com/kb/en/library/create-user/') WHERE help_topic_id = 118;
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (119,10,'ALTER USER','Syntax\n------\nALTER USER [IF EXISTS] \n user_specification [,user_specification] ...\n [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n [WITH resource_option [resource_option] ...]\n [lock_option] [password_option]\n\nuser_specification:\n username [authentication_option]\n\nauthentication_option:\n IDENTIFIED BY 'password'\n | IDENTIFIED BY PASSWORD 'password_hash'\n | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule] ...\n\nauthentication_rule:\n authentication_plugin\n | authentication_plugin {USING|AS} 'authentication_string'\n | authentication_plugin {USING|AS} PASSWORD('password')\n\ntls_option\n SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n\nresource_option\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n\npassword_option:\n PASSWORD EXPIRE\n | PASSWORD EXPIRE DEFAULT\n | PASSWORD EXPIRE NEVER\n | PASSWORD EXPIRE INTERVAL N DAY\n\nlock_option:\n  ACCOUNT LOCK\n | ACCOUNT UNLOCK\n}\n\nDescription\n-----------\nThe ALTER USER statement modifies existing MariaDB accounts. To use it, you must have\nthe global CREATE USER privilege or the UPDATE privilege for the mysql database. The\nglobal SUPER privilege is also required if the read_only system variable is enabled.\n\nIf any of the specified user accounts do not yet exist, an error results. If an error\noccurs, ALTER USER will still modify the accounts that do not result in an error.\n\nOnly one error is produced for all users which have not been modified.\n\nIF EXISTS\n---------\nWhen the IF EXISTS clause is used, MariaDB will return a warning instead of an error\nfor each specified user that does not exist.\n\nAccount Names\n-------------\nFor ALTER USER statements, account names are specified as the username argument in\nthe same way as they are for CREATE USER statements. See account names from the\nCREATE USER page for details on how account names are specified.\n\nCURRENT_USER or CURRENT_USER() can also be used to alter the account logged into the\ncurrent session. For example, to change the current user's password to mariadb:\nALTER USER CURRENT_USER() IDENTIFIED BY 'mariadb';\n\nAuthentication Options\n----------------------\n\nIDENTIFIED BY 'password'\n\nThe optional IDENTIFIED BY clause can be used to provide an account with a password.\n\nThe password should be specified in plain text. It will be hashed by the PASSWORD\nfunction prior to being stored to the mysql.user table.\n\nFor example, if our password is mariadb, then we can set the account's password with:\nALTER USER foo2@test IDENTIFIED BY 'mariadb';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED BY PASSWORD 'password_hash'\n\nThe optional IDENTIFIED BY PASSWORD clause can be used to provide an account with a\npassword that has already been hashed. The password should be specified as a hash\nthat was provided by the PASSWORD#function. It will be stored to the mysql.user\ntable as-is.\n\nFor example, if our password is mariadb, then we can find the hash with:\nSELECT PASSWORD('mariadb');\n+-------------------------------------------+\n| PASSWORD('mariadb')                       |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n\nAnd then we can set an account's password with the hash:\nALTER USER foo2@test \n IDENTIFIED BY PASSWORD '*54958E764CE10E50764C2EECBB71D01F08549980';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED {VIA|WITH} authentication_plugin\n\nThe optional IDENTIFIED VIA authentication_plugin allows you to specify that the\naccount should be authenticated by a specific authentication plugin. The plugin name\nmust be an active authentication plugin as per SHOW PLUGINS. If it doesn't show up in\nthat output, then you will need to install it with INSTALL PLUGIN or INSTALL SONAME.\n\nFor example, this could be used with the PAM authentication plugin:\nALTER USER foo2@test IDENTIFIED VIA pam;\n\nSome authentication plugins allow additional arguments to be specified after a USING\nor AS keyword. For example, the PAM authentication plugin accepts a service name:\nALTER USER foo2@test IDENTIFIED VIA pam USING 'mariadb';\n\nThe exact meaning of the additional argument would depend on the specific\nauthentication plugin.\n\nIn MariaDB 10.4 and later, the USING or AS keyword can also be used to provide a\nplain-text password to a plugin if it's provided as an argument to the PASSWORD()\nfunction. This is only valid for authentication plugins that have implemented a hook\nfor the PASSWORD() function. For example, the ed25519 authentication plugin\nsupports this:\nALTER USER safe@'%' IDENTIFIED VIA ed25519 USING PASSWORD('secret');\n\nTLS Options\n-----------\nBy default, MariaDB transmits data between the server and clients without encrypting\nit. This is generally acceptable when the server and client run on the same host or\nin networks where security is guaranteed through other means. However, in cases where\nthe server and client exist on separate networks or they are in a high-risk network,\nthe lack of encryption does introduce security concerns as a malicious actor could\npotentially eavesdrop on the traffic as it is sent over the network between them.\n\nTo mitigate this concern, MariaDB allows you to encrypt data in transit between the\nserver and clients using the Transport Layer Security (TLS) protocol. TLS was\nformerly known as Secure Socket Layer (SSL), but strictly speaking the SSL protocol\nis a predecessor to TLS and, that version of the protocol is now considered insecure.\n\nThe documentation still uses the term SSL often and for compatibility reasons\nTLS-related server system and status variables still use the prefix ssl_, but\ninternally, MariaDB only supports its secure successors.\n\nSee Secure Connections Overview for more information about how to determine whether\nyour MariaDB server has TLS support.\n\nYou can set certain TLS-related restrictions for specific user accounts. For\ninstance, you might use this with user accounts that require access to sensitive data\nwhile sending it across networks that you do not control. These restrictions can be\nenabled for a user account with the CREATE USER, ALTER USER, or GRANT statements. The\nfollowing options are available:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\n|Option\n\n|Description\n\n|\n|REQUIRE NONE\n\n|TLS is not required for this account, but can\nstill be used.\n\n|\n|REQUIRE SSL\n\n|The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with other TLS options.\n\n|\n|REQUIRE X509\n\n|The account must use TLS and must have a valid\nX509 certificate. This option implies REQUIRE SSL. This option cannot be combined\nwith other TLS options.\n\n|\n|REQUIRE ISSUER 'issuer'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the Certificate Authority must be the one specified via the\nstring issuer. This option implies REQUIRE X509. This option can be combined with the\nSUBJECT, and CIPHER options in any order.                                 |\n|REQUIRE SUBJECT 'subject'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the certificate's Subject must be the one specified via the\nstring subject. This option implies REQUIRE X509. This option can be combined with\nthe ISSUER, and CIPHER options in any order.                                 |\n|REQUIRE CIPHER 'cipher'\n\n|The account must use TLS, but no valid X509\ncertificate is required. Also, the encryption used for the connection must use a\nspecific cipher method specified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and SUBJECT options in any order.|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\nThe REQUIRE keyword must be used only once for all specified options, and the AND\nkeyword can be used to separate individual options, but it is not required.\n\nFor example, you can alter a user account to require these TLS options with\nthe following:\nALTER USER 'alice'@'%'\n REQUIRE SUBJECT '/CN=alice/O=My Dom, Inc./C=US/ST=Oregon/L=Portland' AND\n ISSUER '/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com'\n AND CIPHER 'SHA-DES-CBC3-EDH-RSA';\n\nIf any of these options are set for a specific user account, then any client who\ntries to connect with that user account will have to be configured to connect\nwith TLS.\n\nSee Securing Connections for Client and Server for information on how to enable TLS\non the client and server.\n\nResource Limit Options\n----------------------\nIt is possible to set per-account limits for certain server resources. The following\ntable shows the values that can be set per account:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\n|Limit Type\n\n|Decription\n\n|\n|MAX_QUERIES_PER_HOUR\n\n|Number of statements that the account\ncan issue per hour (including updates)\n\n|\n|MAX_UPDATES_PER_HOUR\n\n|Number of updates (not queries) that\nthe account can issue per hour\n\n|\n|MAX_CONNECTIONS_PER_HOUR\n\n|Number of connections that the account\ncan start per hour\n\n|\n|MAX_USER_CONNECTIONS\n\n|Number of simultaneous connections that\ncan be accepted from the same account; if it is 0, max_connections will be used\ninstead; if max_connections is 0, there is no limit for this account's\nsimultaneous connections.|\n|MAX_STATEMENT_TIME\n\n|Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that Exceed a Certain Time to\nExecute.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\nIf any of these limits are set to 0, then there is no limit for that resource for\nthat user.\n\nHere is an example showing how to set an account's resource limits:\nALTER USER 'someone'@'localhost' WITH\n  MAX_USER_CONNECTIONS 10\n  MAX_QUERIES_PER_HOUR 200;\n\nThe resources are tracked per account, which means 'user'@'server'; not per user name\nor per connection.\n\nThe count can be reset for all users using FLUSH USER_RESOURCES, FLUSH PRIVILEGES or\nmysqladmin reload.\n\nPer account resource limits are stored in the user table, in the mysql database.\n\nColumns used for resources limits are named max_questions, max_updates,\nmax_connections (for MAX_CONNECTIONS_PER_HOUR), and max_user_connections\n(for MAX_USER_CONNECTIONS).\n\nPassword Expiry\n---------------\n\nAccount Locking\n---------------\nFrom MariaDB 10.4.7 and MariaDB 10.5.8, the lock_option and password_option clauses\ncan occur in either order.\n','','https://mariadb.com/kb/en/library/alter-user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (120,10,'DROP USER','Syntax\n------\nDROP USER [IF EXISTS] user_name [, user_name] ...\n\nDescription\n-----------\nThe DROP USER statement removes one or more MariaDB accounts. It removes\nprivilege rows for the account from all grant tables. To use this statement,\nyou must have the global CREATE USER privilege\nor the DELETE privilege for the mysql database.\n\nEach account is named using the same format as for the CREATE USER\nstatement; for example, 'jeffrey'@'localhost'.  If you specify\nonly the user name part of the account name, a host name part of '%' is\nused. For additional information about specifying account names, see\nCREATE USER.\n\nNote that, if you specify an account that is currently connected, it will not\nbe deleted until the connection is closed. The connection will not be\nautomatically closed.\n\nIf any of the specified user accounts do not exist, ERROR 1396 (HY000)\nresults. If an error occurs, DROP USER will still drop the accounts that do\nnot result in an error. Only one error is produced for all users which have not\nbeen dropped:\nERROR 1396 (HY000): Operation DROP USER failed for 'u1'@'%','u2'@'%'\n\nFailed CREATE or DROP operations, for both users and roles, produce the\nsame error code.\n\nIF EXISTS\nIf the IF EXISTS clause is used, MariaDB will return a note instead of an error if\nthe user does not exist.\n\nExamples\n--------\nDROP USER bob;\n\nIF EXISTS:\nDROP USER bob;\nERROR 1396 (HY000): Operation DROP USER failed for 'bob'@'%'\n\nDROP USER IF EXISTS bob;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+---------------------------------------------+\n| Level | Code | Message                                     |\n+-------+------+---------------------------------------------+\n| Note  | 1974 | Can't drop user 'bob'@'%'; it doesn't exist |\n+-------+------+---------------------------------------------+\n','','https://mariadb.com/kb/en/library/drop-user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (121,10,'GRANT','Syntax\n------\nGRANT\n  priv_type [(column_list)]\n   [, priv_type [(column_list)]] ...\n  ON [object_type] priv_level\n  TO user_specification [ user_options ...]\n\nuser_specification:\n username [authentication_option]\n\nauthentication_option:\n IDENTIFIED BY 'password'\n | IDENTIFIED BY PASSWORD 'password_hash'\n | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule  ...]\n\nauthentication_rule:\n  authentication_plugin\n | authentication_plugin {USING|AS} 'authentication_string'\n | authentication_plugin {USING|AS} PASSWORD('password')\n\nGRANT PROXY ON username\n  TO user_specification [, user_specification ...]\n  [WITH GRANT OPTION]\n\nGRANT rolename TO grantee [, grantee ...]\n  [WITH ADMIN OPTION]\n\ngrantee:\n  rolename\n  username [authentication_option]\n\nuser_options:\n  [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n  [WITH with_option [with_option] ...]\n\nobject_type:\n  TABLE\n | FUNCTION\n | PROCEDURE\n | PACKAGE\n\npriv_level:\n  *\n | *.*\n | db_name.*\n | db_name.tbl_name\n | tbl_name\n | db_name.routine_name\n\nwith_option:\n  GRANT OPTION\n | resource_option\n\nresource_option:\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n\ntls_option:\n SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n\nDescription\n-----------\nThe GRANT statement allows you to grant privileges or roles to accounts. To use\nGRANT, you must have the GRANT OPTION privilege, and you must have the privileges\nthat you are granting.\n\nUse the REVOKE statement to revoke privileges granted with the GRANT statement.\n\nUse the SHOW GRANTS statement to determine what privileges an account has.\n\nAccount Names\n-------------\nFor GRANT statements, account names are specified as the username argument in the\nsame way as they are for CREATE USER statements. See account names from the CREATE\nUSER page for details on how account names are specified.\n\nImplicit Account Creation\n-------------------------\nThe GRANT statement also allows you to implicitly create accounts in some cases.\n\nIf the account does not yet exist, then GRANT can implicitly create it. To implicitly\ncreate an account with GRANT, a user is required to have the same privileges that\nwould be required to explicitly create the account with the CREATE USER statement.\n\nIf the NO_AUTO_CREATE_USER SQL_MODE is set, then accounts can only be created if\nauthentication information is specified, or with a CREATE USER statement. If no\nauthentication information is provided, GRANT will produce an error when the\nspecified account does not exist, for example:\nshow variables like '%sql_mode%' ;\n+---------------+--------------------------------------------+\n| Variable_name | Value                                      |\n+---------------+--------------------------------------------+\n| sql_mode      | NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+---------------+--------------------------------------------+\n\nGRANT USAGE ON *.* TO 'user123'@'%' IDENTIFIED BY '';\nERROR 1133 (28000): Can't find any matching row in the user table\n\nGRANT USAGE ON *.* TO 'user123'@'%' \n IDENTIFIED VIA PAM using 'mariadb' require ssl ;\nQuery OK, 0 rows affected (0.00 sec)\n\nselect host, user from mysql.user where user='user123' ;\n\n+------+----------+\n| host | user     |\n+------+----------+\n| %    | user123 |\n+------+----------+\n\nPrivilege Levels\n----------------\nPrivileges can be set globally, for an entire database, for a table or routine,\nor for individual columns in a table. Certain privileges can only be set at\ncertain levels.\n\nThe USAGE Privilege\n\nThe USAGE privilege grants no real privileges. The SHOW GRANTS\nstatement will show a global USAGE privilege for a newly-created user. You\ncan use USAGE with the GRANT statement to change options like GRANT OPTION\nand MAX_USER_CONNECTIONS without changing any account privileges.\n\nThe ALL PRIVILEGES Privilege\n\nThe ALL PRIVILEGES privilege grants all available privileges. Granting all\nprivileges only affects the given privilege level. For example, granting all\nprivileges on a table does not grant any privileges on the database or globally.\n\nUsing ALL PRIVILEGES does not grant the special GRANT OPTION privilege.\n\nYou can use ALL instead of ALL PRIVILEGES.\n\nThe GRANT OPTION Privilege\n\nUse the WITH GRANT OPTION clause to give users the ability to grant privileges\nto other users at the given privilege level. Users with the GRANT OPTION\nprivilege can\nonly grant privileges they have. They cannot grant privileges at a higher privilege\nlevel than\nthey have the GRANT OPTION privilege.\n\nThe GRANT OPTION privilege cannot be set for individual columns.\n\nIf you use WITH GRANT OPTION when specifying column privileges,\nthe GRANT OPTION privilege will be granted for the entire table.\n\nUsing the WITH GRANT OPTION clause is equivalent to listing GRANT OPTION\nas a privilege.\n\nGlobal Privileges\n\nThe following table lists the privileges that can be granted globally. You can\nalso grant all database, table, and function privileges globally. When granted\nglobally, these privileges apply to all databases, tables, or functions,\nincluding those created later.\n\nTo set a global privilege, use *.* for priv_level.\n\nBINLOG ADMIN\nEnables administration of the binary log, including the PURGE BINARY LOGS statement\nand setting the system variables:\n\nAdded in MariaDB 10.5.2.\n\nBINLOG MONITOR\nNew name for REPLICATION CLIENT from MariaDB 10.5.2, (REPLICATION CLIENT still\nsupported as an alias for compatibility purposes). Permits running SHOW commands\nrelated to the binary log, in particular the SHOW BINLOG STATUS and SHOW BINARY LOGS\nstatements. Unlike REPLICATION CLIENT prior to MariaDB 10.5, SHOW REPLICA STATUS\nisn't included in this privilege, and  REPLICA MONITOR is required.\n\nBINLOG REPLAY\nEnables replaying the binary log with the BINLOG statement (generated by\nmariadb-binlog), executing SET timestamp when secure_timestamp is set to replication,\nand setting the session values of system variables usually included in BINLOG output,\nin particular:\n\nAdded in MariaDB 10.5.2\nCONNECTION ADMIN\nEnables administering connection resource limit options. This includes ignoring the\nlimits specified by:\n\nThe statements specified in init_connect are not executed, killing connections and\nqueries owned by other users is permitted. The following connection-related system\nvariables can be changed:\n\nAdded in MariaDB 10.5.2.\n\nCREATE USER\nCreate a user using the CREATE USER statement, or implicitly create a user with the\nGRANT statement.\n\nFEDERATED ADMIN\nExecute CREATE SERVER, ALTER SERVER, and DROP SERVER statements. Added in\nMariaDB 10.5.2.\n\nFILE\nRead and write files on the server, using statements like LOAD DATA INFILE or\nfunctions like LOAD_FILE(). Also needed to create CONNECT outward tables. MariaDB\nserver must have the permissions to access those files.\n\nGRANT OPTION\nGrant global privileges. You can only grant privileges that you have.\n\nPROCESS\nShow information about the active processes, for example via SHOW PROCESSLIST or\nmysqladmin processlist. If you have the PROCESS privilege, you can see all threads.\n\nOtherwise, you can see only your own threads (that is, threads associated with the\nMariaDB account that you are using).\n\nREAD_ONLY ADMIN\nUser can set the read_only system variable and allows the user to perform write\noperations, even when the read_only option is active. Added in MariaDB 10.5.2.\n\nRELOAD\nExecute FLUSH statements or equivalent mariadb-admin/mysqladmin commands.\n\nREPLICATION CLIENT\nExecute SHOW MASTER STATUS and SHOW BINARY LOGS informative statements. Renamed to\nBINLOG MONITOR in MariaDB 10.5.2 (but still supported as an alias for compatibility\nreasons). SHOW SLAVE STATUS was part of REPLICATION CLIENT prior to MariaDB 10.5.\n\nREPLICATION MASTER ADMIN\nPermits administration of primary servers, including the SHOW REPLICA HOSTS\nstatement, and setting the gtid_binlog_state, gtid_domain_id, master_verify_checksum\nand server_id system variables. Added in MariaDB 10.5.2.\n\nREPLICA MONITOR\nPermit SHOW REPLICA STATUS and SHOW RELAYLOG EVENTS. From MariaDB 10.5.9.\n\nWhen a user would upgrade from an older major release to a MariaDB 10.5 minor release\nprior to MariaDB 10.5.9, certain user accounts would lose capabilities. For example,\na user account that had the REPLICATION CLIENT privilege in older major releases\ncould run SHOW REPLICA STATUS, but after upgrading to a MariaDB 10.5 minor release\nprior to MariaDB 10.5.9, they could no longer run SHOW REPLICA STATUS, because that\nstatement was changed to require the REPLICATION REPLICA ADMIN privilege.\n\nThis issue is fixed in MariaDB 10.5.9 with this new privilege, which now grants the\nuser the ability to execute SHOW [ALL] (SLAVE | REPLICA) STATUS.\n\nWhen a database is upgraded from an older major release to MariaDB Server 10.5.9 or\nlater, any user accounts with the REPLICATION CLIENT or REPLICATION SLAVE privileges\nwill automatically be granted the new REPLICA MONITOR privilege. The privilege fix\noccurs when the server is started up, not when mariadb-upgrade is performed.\n\nHowever, when a database is upgraded from an early 10.5 minor release to 10.5.9 and\nlater, the user will have to fix any user account privileges manually.\n\nREPLICATION REPLICA\nSynonym for REPLICATION SLAVE. From MariaDB 10.5.1.\n\nREPLICATION SLAVE\nAccounts used by replica servers on the primary need this privilege. This is needed\nto get the updates made on the master. From MariaDB 10.5.1, REPLICATION REPLICA is an\nalias for REPLICATION SLAVE.\n\nREPLICATION SLAVE ADMIN\nPermits administering replica servers, including START REPLICA/SLAVE, STOP\nREPLICA/SLAVE, CHANGE MASTER, SHOW REPLICA/SLAVE STATUS, SHOW RELAYLOG EVENTS\nstatements, replaying the binary log with the BINLOG statement (generated by\nmariadb-binlog), and setting the system variables:\n\nAdded in MariaDB 10.5.2.\n\nSET USER\nEnables setting the DEFINER when creating triggers, views, stored functions and\nstored procedures. Added in MariaDB 10.5.2.\n\nSHOW DATABASES\nList all databases using the SHOW DATABASES statement. Without the SHOW DATABASES\nprivilege, you can still issue the SHOW DATABASES statement, but it will only list\ndatabases containing tables on which you have privileges.\n\nSHUTDOWN\nShut down the server using SHUTDOWN or the mysqladmin shutdown command.\n\nSUPER\nExecute superuser statements: CHANGE MASTER TO, KILL (users who do not have this\nprivilege can only KILL their own threads), PURGE LOGS, SET global system variables,\nor the mysqladmin debug command. Also, this permission allows the user to write data\neven if the read_only startup option is set, enable or disable logging, enable or\ndisable replication on replica, specify a DEFINER for statements that support that\nclause, connect once reaching the MAX_CONNECTIONS. If a statement has been specified\nfor the init-connect mysqld option, that command will not be executed when a user\nwith SUPER privileges connects to the server.\n\nThe SUPER privilege has been split into multiple smaller privileges from MariaDB\n10.5.2 to allow for more fine-grained privileges, although it remains an alias for\nthese smaller privileges.\n\nDatabase Privileges\n\nThe following table lists the privileges that can be granted at the database\nlevel. You can also grant all table and function privileges at the database\nlevel. Table and function privileges on a database apply to all tables or\nfunctions in that database, including those created later.\n\nTo set a privilege for a database, specify the database using\ndb_name.* for priv_level, or just use *\nto specify the default database.\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------------------------------+---------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------+\n|Privilege\n\n|Description\n\n|\n|CREATE\n\n|Create a\ndatabase using the CREATE DATABASE statement, when the privilege is granted for a\ndatabase. You can grant the CREATE privilege on databases that do not yet exist. This\nalso grants the CREATE privilege on all tables in the database.|\n|CREATE ROUTINE\n\n|Create Stored\nPrograms using the CREATE PROCEDURE and CREATE FUNCTION statements.\n\n|\n|CREATE TEMPORARY TABLES\n\n|Create\ntemporary tables with the CREATE TEMPORARY TABLE statement. This privilege enable\nwriting and dropping those temporary tables                                          \n                                |\n|DROP\n\n|Drop a database\nusing the DROP DATABASE statement, when the privilege is granted for a database. This\nalso grants the DROP privilege on all tables in the database.\n\n|\n|EVENT\n\n|Create, drop\nand alter EVENTs.\n\n|\n|GRANT OPTION\n\n|Grant database\nprivileges. You can only grant privileges that you have.\n\n|\n|LOCK TABLES\n\n|Acquire\nexplicit locks using the LOCK TABLES statement; you also need to have the SELECT\nprivilege on a table, in order to lock it.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------------------------------+---------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------+\n\nTable Privileges\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------+------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+\n|Privilege\n\n|Description\n\n|\n|ALTER\n\n|Change the structure of an existing table using the ALTER\nTABLE statement.\n\n|\n|CREATE\n\n|Create a table using the CREATE TABLE statement.  You can\ngrant the CREATE privilege on tables that do not yet exist.\n\n|\n|CREATE VIEW\n\n|Create a view using the CREATE_VIEW statement.\n\n|\n|DELETE\n\n|Remove rows from a table using the DELETE statement.\n\n|\n|DELETE HISTORY\n\n|Remove historical rows from a table using the DELETE HISTORY\nstatement. Displays as DELETE VERSIONING ROWS when running SHOW GRANTS until MariaDB\n10.3.15 and until MariaDB 10.4.5 (MDEV-17655), or when running SHOW PRIVILEGES until\nMariaDB 10.5.2, MariaDB 10.4.13 and MariaDB 10.3.23 (MDEV-20382). From MariaDB\n10.3.4. From MariaDB 10.3.5, if a user has the SUPER privilege but not this\nprivilege, running mysql_upgrade will grant this privilege as well.|\n|DROP\n\n|Drop a table using the DROP TABLE statement or a view using\nthe DROP VIEW statement. Also required to execute the TRUNCATE TABLE statement.\n\n|\n|GRANT OPTION\n\n|Grant table privileges. You can only grant privileges that\nyou have.\n\n|\n|INDEX\n\n|Create an index on a table using the CREATE INDEX statement.\n\nWithout the INDEX privilege, you can still create indexes when creating a table using\nthe CREATE TABLE statement if the you have the CREATE privilege, and you can create\nindexes using the ALTER TABLE statement if you have the ALTER privilege.\n\n|\n|INSERT\n\n|Add rows to a table using the INSERT statement.  The INSERT\nprivilege can also be set on individual columns; see Column Privileges below for\ndetails.\n\n|\n|REFERENCES\n\n|Unused.\n\n|\n|SELECT\n\n|Read data from a table using the SELECT statement. The\nSELECT privilege can also be set on individual columns; see Column Privileges below\nfor details.\n\n|\n|SHOW VIEW\n\n|Show the CREATE VIEW statement to create a view using the\nSHOW CREATE VIEW statement.\n\n|\n|TRIGGER\n\n|Execute triggers associated to tables you update, execute\nthe CREATE TRIGGER and DROP TRIGGER statements. You will still be able to see\ntriggers.\n\n|\n|UPDATE\n\n|Update existing rows in a table using the UPDATE statement.\n\nUPDATE statements usually include a WHERE clause to update only certain rows. You\nmust have SELECT privileges on the table or the appropriate columns for the WHERE\nclause. The UPDATE privilege can also be set on individual columns; see Column\nPrivileges below for details.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------+------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+\n\nColumn Privileges\n\nSome table privileges can be set for individual columns of a table. To use\ncolumn privileges, specify the table explicitly and provide a list of column\nnames after the privilege type. For example, the following statement would allow\nthe user to read the names and positions of employees, but not other information\nfrom the same table, such as salaries.\n\nGRANT SELECT (name, position) on Employee to 'jeffrey'@'localhost';\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------+-------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\n|Privilege\n\n|Description\n\n|\n|INSERT (column_list)\n\n|Add\nrows specifying values in columns using the INSERT statement. If you only have\ncolumn-level INSERT privileges, you must specify the columns you are setting in the\nINSERT statement. All other columns will be set to their default values, or NULL.|\n|REFERENCES (column_list)\n\n|Unused.\n\n|\n|SELECT (column_list)\n\n|Read\nvalues in columns using the SELECT statement. You cannot access or query any columns\nfor which you do not have SELECT privileges, including in WHERE, ON, GROUP BY, and\nORDER BY clauses.                                                          |\n|UPDATE (column_list)\n\n|Update\nvalues in columns of existing rows using the UPDATE statement. UPDATE statements\nusually include a WHERE clause to update only certain rows. You must have SELECT\nprivileges on the table or the appropriate columns for the WHERE clause.       |\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------+-------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\n\nFunction Privileges\n\n+------------------------------------------------------------------------------------\n----------------+--------------------------------------------------------------------\n--------------------------------+\n|Privilege                                                                           \n        |Description\n                |\n|ALTER ROUTINE                                                                       \n        |Change the characteristics of a stored function using the ALTER\nFUNCTION statement.                  |\n|EXECUTE                                                                             \n        |Use a stored function. You need SELECT privileges for any tables or\ncolumns accessed by the function.|\n|GRANT OPTION                                                                        \n        |Grant function privileges. You can only grant privileges that you\nhave.                              |\n+------------------------------------------------------------------------------------\n----------------+--------------------------------------------------------------------\n--------------------------------+\n\nProcedure Privileges\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------+----------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------+\n|Privilege\n\n|Description\n\n|\n|ALTER ROUTINE\n\n|Change the characteristics of a stored procedure using the ALTER\nPROCEDURE statement.\n\n|\n|EXECUTE\n\n|Execute a stored procedure using the CALL statement. The\nprivilege to call a procedure may allow you to perform actions you wouldn't otherwise\nbe able to do, such as insert rows into a table.|\n|GRANT OPTION\n\n|Grant procedure privileges. You can only grant privileges that\nyou have.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------+----------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------+\n\nProxy Privileges\n\n+-------------------------------------------+----------------------------------------\n--+\n|Privilege                                  |Description                             \n |\n|PROXY                                      |Permits one user to be a proxy\nfor another.|\n+-------------------------------------------+----------------------------------------\n--+\nThe PROXY privilege allows one user to proxy as another user, which means their\nprivileges change to that of the proxy user, and the CURRENT_USER() function returns\nthe user name of the proxy user.\n\nThe PROXY privilege only works with authentication plugins that support it. The\ndefault mysql_native_password authentication plugin does not support proxy users.\n\nThe pam authentication plugin is the only plugin included with MariaDB that currently\nsupports proxy users. The PROXY privilege is commonly used with the pam\nauthentication plugin to enable user and group mapping with PAM.\n\nFor example, to grant the PROXY privilege to an anonymous account that authenticates\nwith the pam authentication plugin, you could execute the following:\nCREATE USER 'dba'@'%' IDENTIFIED BY 'strongpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'dba'@'%' ;\n\nCREATE USER ''@'%' IDENTIFIED VIA pam USING 'mariadb';\nGRANT PROXY ON 'dba'@'%' TO ''@'%';\n\nA user account can only grant the PROXY privilege for a specific user account if the\ngranter also has the PROXY privilege for that specific user account, and if that\nprivilege is defined WITH GRANT OPTION. For example, the following example fails\nbecause the granter does not have the PROXY privilege for that specific user account\nat all:\nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+------------------------------------------------------------------------------------\n----------------------------------+\n| Grants for alice@localhost                                                         \n                 |\n+------------------------------------------------------------------------------------\n----------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD\n'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' |\n+------------------------------------------------------------------------------------\n----------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\nERROR 1698 (28000): Access denied for user 'alice'@'localhost'\n\nAnd the following example fails because the granter does have the PROXY privilege for\nthat specific user account, but it is not defined WITH GRANT OPTION:\nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+------------------------------------------------------------------------------------\n----------------------------------+\n| Grants for alice@localhost                                                         \n                 |\n+------------------------------------------------------------------------------------\n----------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD\n'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' |\n| GRANT PROXY ON 'dba'@'localhost' TO 'alice'@'localhost'                            \n                 |\n+------------------------------------------------------------------------------------\n----------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\nERROR 1698 (28000): Access denied for user 'alice'@'localhost'\n\nBut the following example succeeds because the granter does have the PROXY privilege\nfor that specific user account, and it is defined WITH GRANT OPTION:\nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n| Grants for alice@localhost                                                         \n                          |\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD\n'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' WITH GRANT OPTION |\n| GRANT PROXY ON 'dba'@'localhost' TO 'alice'@'localhost' WITH GRANT OPTION          \n                          |\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\n\nA user account can grant the PROXY privilege for any other user account if the\ngranter has the PROXY privilege for the ''@'%' anonymous user account, like this:\nGRANT PROXY ON ''@'%' TO 'dba'@'localhost' WITH GRANT OPTION;\n\nFor example, the following example succeeds because the user can grant the PROXY\nprivilege for any other user account:\nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n| Grants for alice@localhost                                                         \n                          |\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD\n'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' WITH GRANT OPTION |\n| GRANT PROXY ON ''@'%' TO 'alice'@'localhost' WITH GRANT OPTION                     \n                          |\n+------------------------------------------------------------------------------------\n----------------------------------------------------+\n\nGRANT PROXY ON 'app1_dba'@'localhost' TO 'bob'@'localhost';\nQuery OK, 0 rows affected (0.004 sec)\n\nGRANT PROXY ON 'app2_dba'@'localhost' TO 'carol'@'localhost';\nQuery OK, 0 rows affected (0.004 sec)\n\nThe default root user accounts created by mysql_install_db have this privilege.\n\nFor example:\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\nGRANT PROXY ON ''@'%' TO 'root'@'localhost' WITH GRANT OPTION;\n\nThis allows the default root user accounts to grant the PROXY privilege for any other\nuser account, and it also allows the default root user accounts to grant others the\nprivilege to do the same.\n\nAuthentication Options\n----------------------\nThe authentication options for the GRANT statement are the same as those for the\nCREATE USER statement.\n\nIDENTIFIED BY 'password'\n\nThe optional IDENTIFIED BY clause can be used to provide an account with a password.\n\nThe password should be specified in plain text. It will be hashed by the PASSWORD\nfunction prior to being stored to the mysql.user table.\n\nFor example, if our password is mariadb, then we can create the user with:\nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY 'mariadb';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nIf the user account already exists and if you provide the IDENTIFIED BY clause, then\nthe user's password will be changed. You must have the privileges needed for the\nSET PASSWORD\nstatement to change a user's password with GRANT.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED BY PASSWORD 'password_hash'\n\nThe optional IDENTIFIED BY PASSWORD clause can be used to provide an account with a\npassword that has already been hashed. The password should be specified as a hash\nthat was provided by the PASSWORD function. It will be stored to the mysql.user\ntable as-is.\n\nFor example, if our password is mariadb, then we can find the hash with:\nSELECT PASSWORD('mariadb');\n+-------------------------------------------+\n| PASSWORD('mariadb')                       |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nAnd then we can create a user with the hash:\nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY \n PASSWORD '*54958E764CE10E50764C2EECBB71D01F08549980';\n\nIf you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.\n\nIf the user account already exists and if you provide the IDENTIFIED BY clause, then\nthe user's password will be changed. You must have the privileges needed for the\nSET PASSWORD\nstatement to change a user's password with GRANT.\n\nThe only authentication plugins that this clause supports are mysql_native_password\nand mysql_old_password.\n\nIDENTIFIED {VIA|WITH} authentication_plugin\n\nThe optional IDENTIFIED VIA authentication_plugin allows you to specify that the\naccount should be authenticated by a specific authentication plugin. The plugin name\nmust be an active authentication plugin as per SHOW PLUGINS. If it doesn't show up in\nthat output, then you will need to install it with INSTALL PLUGIN or INSTALL SONAME.\n\nFor example, this could be used with the PAM authentication plugin:\nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam;\n\nSome authentication plugins allow additional arguments to be specified after a USING\nor AS keyword. For example, the PAM authentication plugin accepts a service name:\nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam USING 'mariadb';\n\nThe exact meaning of the additional argument would depend on the specific\nauthentication plugin.\n\nBy default, when you create a user without specifying an authentication plugin,\nMariaDB uses the mysql_native_password plugin.\n\nResource Limit Options\n----------------------\nIt is possible to set per-account limits for certain server resources. The following\ntable shows the values that can be set per account:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\n|Limit Type\n\n|Decription\n\n|\n|MAX_QUERIES_PER_HOUR\n\n|Number of statements that the account\ncan issue per hour (including updates)\n\n|\n|MAX_UPDATES_PER_HOUR\n\n|Number of updates (not queries) that\nthe account can issue per hour\n\n|\n|MAX_CONNECTIONS_PER_HOUR\n\n|Number of connections that the account\ncan start per hour\n\n|\n|MAX_USER_CONNECTIONS\n\n|Number of simultaneous connections that\ncan be accepted from the same account; if it is 0, max_connections will be used\ninstead; if max_connections is 0, there is no limit for this account's\nsimultaneous connections.|\n|MAX_STATEMENT_TIME\n\n|Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that Exceed a Certain Time to\nExecute.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------+---------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----+\nIf any of these limits are set to 0, then there is no limit for that resource for\nthat user.\n\nTo set resource limits for an account, if you do not want to change that account's\nprivileges, you can issue a GRANT statement with the USAGE privilege, which has no\nmeaning. The statement can name some or all limit types, in any order.\n\nHere is an example showing how to set resource limits:\nGRANT USAGE ON *.* TO 'someone'@'localhost' WITH\n  MAX_USER_CONNECTIONS 0\n  MAX_QUERIES_PER_HOUR 200;\n\nThe resources are tracked per account, which means 'user'@'server'; not per user name\nor per connection.\n\nThe count can be reset for all users using FLUSH USER_RESOURCES, FLUSH PRIVILEGES or\nmysqladmin reload.\n\nUsers with the CONNECTION ADMIN privilege (in MariaDB 10.5.2 and later) or the SUPER\nprivilege are not restricted by max_user_connections, max_connections,\nor max_password_errors.\n\nPer account resource limits are stored in the user table, in the mysql database.\n\nColumns used for resources limits are named max_questions, max_updates,\nmax_connections (for MAX_CONNECTIONS_PER_HOUR), and max_user_connections\n(for MAX_USER_CONNECTIONS).\n\nTLS Options\n-----------\nBy default, MariaDB transmits data between the server and clients without encrypting\nit. This is generally acceptable when the server and client run on the same host or\nin networks where security is guaranteed through other means. However, in cases where\nthe server and client exist on separate networks or they are in a high-risk network,\nthe lack of encryption does introduce security concerns as a malicious actor could\npotentially eavesdrop on the traffic as it is sent over the network between them.\n\nTo mitigate this concern, MariaDB allows you to encrypt data in transit between the\nserver and clients using the Transport Layer Security (TLS) protocol. TLS was\nformerly known as Secure Socket Layer (SSL), but strictly speaking the SSL protocol\nis a predecessor to TLS and, that version of the protocol is now considered insecure.\n\nThe documentation still uses the term SSL often and for compatibility reasons\nTLS-related server system and status variables still use the prefix ssl_, but\ninternally, MariaDB only supports its secure successors.\n\nSee Secure Connections Overview for more information about how to determine whether\nyour MariaDB server has TLS support.\n\nYou can set certain TLS-related restrictions for specific user accounts. For\ninstance, you might use this with user accounts that require access to sensitive data\nwhile sending it across networks that you do not control. These restrictions can be\nenabled for a user account with the CREATE USER, ALTER USER, or GRANT statements. The\nfollowing options are available:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\n|Option\n\n|Description\n\n|\n|REQUIRE NONE\n\n|TLS is not required for this account, but can\nstill be used.\n\n|\n|REQUIRE SSL\n\n|The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with other TLS options.\n\n|\n|REQUIRE X509\n\n|The account must use TLS and must have a valid\nX509 certificate. This option implies REQUIRE SSL. This option cannot be combined\nwith other TLS options.\n\n|\n|REQUIRE ISSUER 'issuer'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the Certificate Authority must be the one specified via the\nstring issuer. This option implies REQUIRE X509. This option can be combined with the\nSUBJECT, and CIPHER options in any order.                                 |\n|REQUIRE SUBJECT 'subject'\n\n|The account must use TLS and must have a valid\nX509 certificate. Also, the certificate's Subject must be the one specified via the\nstring subject. This option implies REQUIRE X509. This option can be combined with\nthe ISSUER, and CIPHER options in any order.                                 |\n|REQUIRE CIPHER 'cipher'\n\n|The account must use TLS, but no valid X509\ncertificate is required. Also, the encryption used for the connection must use a\nspecific cipher method specified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and SUBJECT options in any order.|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------------+\nThe REQUIRE keyword must be used only once for all specified options, and the AND\nkeyword can be used to separate individual options, but it is not required.\n\nFor example, you can create a user account that requires these TLS options with\nthe following:\nGRANT USAGE ON *.* TO 'alice'@'%'\n REQUIRE SUBJECT '/CN=alice/O=My Dom, Inc./C=US/ST=Oregon/L=Portland'\n AND ISSUER '/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com'\n AND CIPHER 'SHA-DES-CBC3-EDH-RSA';\n\nIf any of these options are set for a specific user account, then any client who\ntries to connect with that user account will have to be configured to connect\nwith TLS.\n\nSee Securing Connections for Client and Server for information on how to enable TLS\non the client and server.\n\nRoles\n-----\n\nSyntax\n\nGRANT role TO grantee [, grantee ... ]\n[ WITH ADMIN OPTION ]\n\ngrantee:\n  rolename\n  username [authentication_option]\n\nThe GRANT statement is also used to grant the use a role to one or more users or\nother roles. In order to be able to grant a role, the grantor doing so must have\npermission to do so (see WITH ADMIN in the CREATE ROLE article).\n\nSpecifying the WITH ADMIN OPTION permits the grantee to in turn grant the role\nto another.\n\nFor example, the following commands show how to grant the same role to a couple\ndifferent users.\n\nGRANT journalist TO hulda;\n\nGRANT journalist TO berengar WITH ADMIN OPTION;\n\nIf a user has been granted a role, they do not automatically obtain all permissions\nassociated with that role. These permissions are only in use when the user activates\nthe role with the SET ROLE statement.\n\nGrant Examples\n--------------\n\nGranting Root-like Privileges\n\nYou can create a user that has privileges similar to the default root accounts by\nexecuting the following:\nCREATE USER 'alexander'@'localhost';\nGRANT ALL PRIVILEGES ON  *.* to 'alexander'@'localhost' WITH GRANT OPTION;\n','','https://mariadb.com/kb/en/library/grant/');
update help_topic set description = CONCAT(description, 'ANT PROXY ON \'\'@\'%\' TO \'dba\'@\'localhost\' WITH\nGRANT OPTION;\n \nFor example, the following example succeeds because the user\ncan grant the PROXY privilege for any other user account:\n \nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER() | CURRENT_USER() |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n \nSHOW GRANTS;\n \n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'alice\'@\'localhost\'\nIDENTIFIED BY PASSWORD\n\'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\' WITH GRANT\nOPTION |\n| GRANT PROXY ON \'\'@\'%\' TO \'alice\'@\'localhost\' WITH\nGRANT OPTION |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n \nGRANT PROXY ON \'app1_dba\'@\'localhost\' TO\n\'bob\'@\'localhost\';\n \nQuery OK, 0 rows affected (0.004 sec)\n \nGRANT PROXY ON \'app2_dba\'@\'localhost\' TO\n\'carol\'@\'localhost\';\n \nQuery OK, 0 rows affected (0.004 sec)\n \nThe default root user accounts created by mysql_install_db\nhave this privilege. For example:\n \nGRANT ALL PRIVILEGES ON *.* TO \'root\'@\'localhost\' WITH\nGRANT OPTION;\n \nGRANT PROXY ON \'\'@\'%\' TO \'root\'@\'localhost\' WITH\nGRANT OPTION;\n \nThis allows the default root user accounts to grant the\nPROXY privilege for any other user account, and it also\nallows the default root user accounts to grant others the\nprivilege to do the same.\n \nAuthentication Options\n \nThe authentication options for the GRANT statement are the\nsame as those for the CREATE USER statement.\n \nIDENTIFIED BY \'password\'\n \nThe optional IDENTIFIED BY clause can be used to provide an\naccount with a password. The password should be specified in\nplain text. It will be hashed by the PASSWORD function prior\nto being stored to the mysql.user table.\n \nFor example, if our password is mariadb, then we can create\nthe user with:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY \'mariadb\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nIf the user account already exists and if you provide the\nIDENTIFIED BY clause, then the user\'s password will be\nchanged. You must have the privileges needed for the SET\nPASSWORD\nstatement to change a user\'s password with GRANT.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED BY PASSWORD \'password_hash\'\n \nThe optional IDENTIFIED BY PASSWORD clause can be used to\nprovide an account with a password that has already been\nhashed. The password should be specified as a hash that was\nprovided by the PASSWORD function. It will be stored to the\nmysql.user table as-is.\n \nFor example, if our password is mariadb, then we can find\nthe hash with:\n \nSELECT PASSWORD(\'mariadb\');\n+-------------------------------------------+\n| PASSWORD(\'mariadb\') |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n \nAnd then we can create a user with the hash:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY PASSWORD\n\'*54958E764CE10E50764C2EECBB71D01F08549980\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nIf the user account already exists and if you provide the\nIDENTIFIED BY clause, then the user\'s password will be\nchanged. You must have the privileges needed for the SET\nPASSWORD\nstatement to change a user\'s password with GRANT.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED {VIA|WITH} authentication_plugin\n \nThe optional IDENTIFIED VIA authentication_plugin allows you\nto specify that the account should be authenticated by a\nspecific authentication plugin. The plugin name must be an\nactive authentication plugin as per SHOW PLUGINS. If it\ndoesn\'t show up in that output, then you will need to\ninstall it with INSTALL PLUGIN or INSTALL SONAME.\n \nFor example, this could be used with the PAM authentication\nplugin:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam;\n \nSome authentication plugins allow additional arguments to be\nspecified after a USING or AS keyword. For example, the PAM\nauthentication plugin accepts a service name:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam USING\n\'mariadb\';\n \nThe exact meaning of the additional argument would depend on\nthe specific authentication plugin.\n \nThe USING or AS keyword can also be used to provide a\nplain-text password to a plugin if it\'s provided as an\nargument to the PASSWORD() function. This is only valid for\nauthentication plugins that have implemented a hook for the\nPASSWORD() function. For example, the ed25519 authentication\nplugin supports this:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\');\n \nOne can specify many authentication plugins, they all works\nas alternatives ways of authenticating a user:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\') OR unix_socket;\n \nResource Limit Options\n \nMariaDB 10.2.0 introduced a number of resource limit\noptions.\n \nIt is possible to set per-account limits for certain server\nresources. The following table shows the values that can be\nset per account:\n \nLimit Type | Decription | \n \nMAX_QUERIES_PER_HOUR | Number of statements that the account\ncan issue per hour (including updates) | \n \nMAX_UPDATES_PER_HOUR | Number of updates (not queries) that\nthe account can issue per hour | \n \nMAX_CONNECTIONS_PER_HOUR | Number of connections that the\naccount can start per hour | \n \nMAX_USER_CONNECTIONS | Number of simultaneous connections\nthat can be accepted from the same account; if it is 0,\nmax_connections will be used instead; if max_connections is\n0, there is no limit for this account\'s simultaneous\nconnections. | \n \nMAX_STATEMENT_TIME | Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that\nExceed a Certain Time to Execute. | \n \nIf any of these limits are set to 0, then there is no limit\nfor that resource for that user.\n \nTo set resource limits for an account, if you do not want to\nchange that account\'s privileges, you can issue a GRANT\nstatement with the USAGE privilege, which has no meaning.\nThe statement can name some or all limit types, in any\norder.\n \nHere is an example showing how to set resource limits:\n \nGRANT USAGE ON *.* TO \'someone\'@\'localhost\' WITH\n MAX_USER_CONNECTIONS 0\n MAX_QUERIES_PER_HOUR 200;\n \nThe resources are tracked per account, which means\n\'user\'@\'server\'; not per user name or per connection.\n \nThe count can be reset for all users using FLUSH\nUSER_RESOURCES, FLUSH PRIVILEGES or mysqladmin reload.\n \nPer account resource limits are stored in the user table, in\nthe mysql database. Columns used for resources limits are\nnamed max_questions, max_updates, max_connections (for\nMAX_CONNECTIONS_PER_HOUR), and max_user_connections (for\nMAX_USER_CONNECTIONS).\n \nTLS Options\n \nBy default, MariaDB transmits data between the server and\nclients without encrypting it. This is generally acceptable\nwhen the server and client run on the same host or in\nnetworks where security is guaranteed through other means.\nHowever, in cases where the server and client exist on\nseparate networks or they are in a high-risk network, the\nlack of encryption does introduce security concerns as a\nmalicious actor could potentially eavesdrop on the traffic\nas it is sent over the network between them.\n \nTo mitigate this concern, MariaDB allows you to encrypt data\nin transit between the server and clients using the\nTransport Layer Security (TLS) protocol. TLS was formerly\nknown as Secure Socket Layer (SSL), but strictly speaking\nthe SSL protocol is a predecessor to TLS and, that version\nof the protocol is now considered insecure. The\ndocumentation still uses the term SSL often and for\ncompatibility reasons TLS-related server system and status\nvariables still use the prefix ssl_, but internally, MariaDB\nonly supports its secure successors.\n \nSee Secure Connections Overview for more information about\nhow to determine whether your MariaDB server has TLS\nsupport.\n \nYou can set certain TLS-related restrictions for specific\nuser accounts. For instance, you might use this with user\naccounts that require access to sensitive data while sending\nit across networks that you do not control. These\nrestrictions can be enabled for a user account with the\nCREATE USER, ALTER USER, or GRANT statements. The following\noptions are available:\n \nOption | Description | \n \nREQUIRE NONE | TLS is not required for this account, but can\nstill be used. | \n \nREQUIRE SSL | The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with\nother TLS options. | \n \nREQUIRE X509 | The account must use TLS and must have a\nvalid X509 certificate. This option implies REQUIRE SSL.\nThis option cannot be combined with other TLS options. | \n \nREQUIRE ISSUER \'issuer\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the Certificate\nAuthority must be the one specified via the string issuer.\nThis option implies REQUIRE X509. This option can be\ncombined with the SUBJECT, and CIPHER options in any order.\n| \n \nREQUIRE SUBJECT \'subject\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the certificate\'s\nSubject must be the one specified via the string subject.\nThis option implies REQUIRE X509. This option can be\ncombined with the ISSUER, and CIPHER options in any order. |\n\n \nREQUIRE CIPHER \'cipher\' | The account must use TLS, but no\nvalid X509 certificate is required. Also, the encryption\nused for the connection must use one of the methods\nspecified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and\nSUBJECT options in any order. | \n \nThe REQUIRE keyword must be used only once for all specified\noptions, and the AND keyword can be used to separate\nindividual options, but it is not required.\n \nFor example, you can create a user account that requires\nthese TLS options with the following:\n \nGRANT USAGE ON *.* TO \'alice\'@\'%\'\n REQUIRE SUBJECT \'/CN=alice/O=My Dom,\nInc./C=US/ST=Oregon/L=Portland\'\n AND ISSUER \'/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com\'\n AND CIPHER \'TLSv1.2\';\n \nIf any of these options are set for a specific user account,\nthen any client who tries to connect with that user account\nwill have to be configured to connect with TLS.\n \nSee Securing Connections for Client and Server for\ninformation on how to enable TLS on the client and server.\n \nRoles\n \nRoles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nGRANT role TO grantee [, grantee2 ... ]\n[ WITH ADMIN OPTION ]\n \nThe GRANT statement is also used to grant the use a role to\none or more users or other roles. In order to be able to\ngrant a role, the grantor doing so must have permission to\ndo so (see WITH ADMIN in the CREATE ROLE article).\n \nSpecifying the WITH ADMIN OPTION permits the grantee to in\nturn grant the role to another.\n \nFor example, the following commands show how to grant the\nsame role to a couple different users.\n \nGRANT journalist TO hulda;\n \nGRANT journalist TO berengar WITH ADMIN OPTION;\n \nIf a user has been granted a role, they do not automatically\nobtain all permissions associated with that role. These\npermissions are only in use when the user activates the role\nwith the SET ROLE statement.\n \nGrant Examples\n \nGranting Root-like Privileges\n \nYou can create a user that has privileges similar to the\ndefault root accounts by executing the following:\n \nCREATE USER \'alexander\'@\'localhost\';\n \nGRANT ALL PRIVILEGES ON *.* to \'alexander\'@\'localhost\'\nWITH GRANT OPTION;\n \n\n\nURL: https://mariadb.com/kb/en/library/grant/') WHERE help_topic_id = 121;
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (122,10,'User Password Expiry','Password expiry permits administrators to expire user passwords, either manually or\nautomatically.\n\nSystem Variables\n----------------\nThere are two system variables which affect password expiry:\ndefault_password_lifetime, which determines the amount of time between requiring the\nuser to change their password. 0, the default, means automatic password expiry is\nnot active.\n\nThe second variable, disconnect_on_expired_password determines whether a client is\npermitted to connect if their password has expired, or whether they are permitted to\nconnect in sandbox mode, able to perform a limited subset of queries related to\nresetting the password, in particular SET PASSWORD and SET.\n\nSetting a Password Expiry Limit for a User\n------------------------------------------\nBesides automatic password expiry, as determined by default_password_lifetime,\npassword expiry times can be set on an individual user basis, overriding the global\nusing the CREATE USER or ALTER USER statements, for example:\nCREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY;\n\nALTER USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY;\n\nLimits can be disabled by use of the NEVER keyword, for example:\nCREATE USER 'monty'@'localhost' PASSWORD EXPIRE NEVER;\n\nALTER USER 'monty'@'localhost' PASSWORD EXPIRE NEVER;\n\nA manually set limit can be restored the system default by use of DEFAULT,\nfor example:\nCREATE USER 'monty'@'localhost' PASSWORD EXPIRE DEFAULT;\n\nALTER USER 'monty'@'localhost' PASSWORD EXPIRE DEFAULT;\n\nSHOW CREATE USER\n----------------\nThe SHOW CREATE USER statement will display information about the password expiry\nstatus of the user. Unlike MySQL, it will not display if the user is unlocked, or if\nthe password expiry is set to default.\n\nCREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY;\nCREATE USER 'konstantin'@'localhost' PASSWORD EXPIRE NEVER;\nCREATE USER 'amse'@'localhost' PASSWORD EXPIRE DEFAULT;\n\nSHOW CREATE USER 'monty'@'localhost';\n+------------------------------------------------------------------+\n| CREATE USER for monty@localhost                                  |\n+------------------------------------------------------------------+\n| CREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY |\n+------------------------------------------------------------------+\n\nSHOW CREATE USER 'konstantin'@'localhost';\n+------------------------------------------------------------+\n| CREATE USER for konstantin@localhost                       |\n+------------------------------------------------------------+\n| CREATE USER 'konstantin'@'localhost' PASSWORD EXPIRE NEVER |\n+------------------------------------------------------------+\n\nSHOW CREATE USER 'amse'@'localhost';\n+--------------------------------+\n| CREATE USER for amse@localhost |\n+--------------------------------+\n| CREATE USER 'amse'@'localhost' |\n+--------------------------------+\n\nChecking When Passwords Expire\n------------------------------\nThe following query can be used to check when the current passwords expire for\nall users:\nWITH password_expiration_info AS (\n SELECT User, Host,\n IF(\n IFNULL(JSON_EXTRACT(Priv, '$.password_lifetime'), -1) = -1,\n @@global.default_password_lifetime,\n JSON_EXTRACT(Priv, '$.password_lifetime')\n ) AS password_lifetime,\n JSON_EXTRACT(Priv, '$.password_last_changed') AS password_last_changed\n FROM mysql.global_priv\n)\nSELECT pei.User, pei.Host,\n pei.password_lifetime,\n FROM_UNIXTIME(pei.password_last_changed) AS password_last_changed_datetime,\n FROM_UNIXTIME(\n pei.password_last_changed +\n (pei.password_lifetime * 60 * 60 * 24)\n ) AS password_expiration_datetime\n FROM password_expiration_info pei\n WHERE pei.password_lifetime != 0\n AND pei.password_last_changed IS NOT NULL\nUNION\nSELECT pei.User, pei.Host,\n pei.password_lifetime,\n FROM_UNIXTIME(pei.password_last_changed) AS password_last_changed_datetime,\n 0 AS password_expiration_datetime\n FROM password_expiration_info pei\n WHERE pei.password_lifetime = 0\n OR pei.password_last_changed IS NULL;\n\n--connect-expired-password Client Option\n----------------------------------------\nThe mysql client --connect-expired-password option notifies the server that the\nclient is prepared to handle expired password sandbox mode (even if the --batch\noption was specified).\n','','https://mariadb.com/kb/en/library/user-password-expiry/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (123,10,'RENAME USER','Syntax\n------\nRENAME USER old_user TO new_user\n  [, old_user TO new_user] ...\n\nDescription\n-----------\nThe RENAME USER statement renames existing MariaDB accounts. To use it,\nyou must have the global CREATE USER privilege\nor the UPDATE privilege for the mysql database.\n\nEach account is named using the same format as for the CREATE USER\nstatement; for example, 'jeffrey'@'localhost'.\n\nIf you specify only the user name part of the account name, a host\nname part of '%' is used.\n\nIf any of the old user accounts do not exist or any of the new user accounts already\nexist, ERROR 1396 (HY000) results. If an error occurs, RENAME USER\nwill still rename the accounts that do not result in an error.\n\nExamples\n--------\nCREATE USER 'donald', 'mickey';\nRENAME USER 'donald' TO 'duck'@'localhost', 'mickey' TO 'mouse'@'localhost';\n','','https://mariadb.com/kb/en/library/rename-user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (124,10,'REVOKE','Privileges\n----------\n\nSyntax\n\nREVOKE \n  priv_type [(column_list)]\n   [, priv_type [(column_list)]] ...\n  ON [object_type] priv_level\n  FROM user [, user] ...\n\nREVOKE ALL PRIVILEGES, GRANT OPTION\n  FROM user [, user] ...\n\nDescription\n\nThe REVOKE statement enables system administrators to revoke\nprivileges (or roles - see section below) from MariaDB accounts. Each account is\nnamed using the same format\nas for the GRANT statement; for example,\n'jeffrey'@'localhost'. If you specify only the user name part\nof the account name, a host name part of '%' is used. For\ndetails on the levels at which privileges exist, the allowable\npriv_type and priv_level values, and the\nsyntax for specifying users and passwords, see GRANT.\n\nTo use the first REVOKE syntax, you must have the\nGRANT OPTION privilege, and you must have the privileges that\nyou are revoking.\n\nTo revoke all privileges, use the second syntax, which drops all\nglobal, database, table, column, and routine privileges for the named\nuser or users:\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM user [, user] ...\n\nTo use this REVOKE syntax, you must have the global\nCREATE USER privilege or the\nUPDATE privilege for the mysql database. See\nGRANT.\n\nExamples\n\nREVOKE SUPER ON *.* FROM 'alexander'@'localhost';\n\nRoles\n-----\n\nSyntax\n\nREVOKE role  [, role ...]\n  FROM grantee [, grantee2 ... ]\n\nREVOKE ADMIN OPTION FOR role FROM grantee [, grantee2]\n\nDescription\n\nREVOKE is also used to remove a role from a user or another role that it's previously\nbeen assigned to. If a role has previously been set as a default role, REVOKE does\nnot remove the record of the default role from the mysql.user table. If the role is\nsubsequently granted again, it will again be the user's default. Use SET DEFAULT ROLE\nNONE to explicitly remove this.\n\nBefore MariaDB 10.1.13, the REVOKE role statement was not permitted in\nprepared statements.\n\nExample\n\nREVOKE journalist FROM hulda\n','','https://mariadb.com/kb/en/library/revoke/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (125,10,'SET PASSWORD','Syntax\n------\nSET PASSWORD [FOR user] =\n  {\n    PASSWORD('some password')\n   | OLD_PASSWORD('some password')\n   | 'encrypted password'\n  }\n\nDescription\n-----------\nThe SET PASSWORD statement assigns a password to an existing MariaDB user\naccount.\n\nIf the password is specified using the PASSWORD() or OLD_PASSWORD()\nfunction, the literal text of the password should be given. If the\npassword is specified without using either function, the password\nshould be the already-encrypted password value as returned by\nPASSWORD().\n\nOLD_PASSWORD() should only be used if your MariaDB/MySQL clients are very old\n(< 4.0.0).\n\nWith no FOR clause, this statement sets the password for the current\nuser. Any client that has connected to the server using a non-anonymous\naccount can change the password for that account.\n\nWith a FOR clause, this statement sets the password for a specific\naccount on the current server host. Only clients that have the UPDATE\nprivilege for the mysql database can do this. The user value should be\ngiven in user_name@host_name format, where user_name and host_name are\nexactly as they are listed in the User and Host columns of the\nmysql.user table entry.\n\nThe argument to PASSWORD() and the password given to MariaDB clients can be of\narbitrary length.\n\nAuthentication Plugin Support\n-----------------------------\n\nPasswordless User Accounts\n--------------------------\nUser accounts do not always require passwords to login.\n\nThe unix_socket ,  named_pipe and gssapi authentication plugins do not require a\npassword to authenticate the user.\n\nThe pam authentication plugin may or may not require a password to authenticate the\nuser, depending on the specific configuration.\n\nThe mysql_native_password and mysql_old_password authentication plugins require\npasswords for authentication, but the password can be blank. In that case, no\npassword is required.\n\nIf you provide a password while attempting to log into the server as an account that\ndoesn't require a password, then MariaDB server will simply ignore the password.\n\nExample\n-------\nFor example, if you had an entry with User and\nHost column values of 'bob' and \n'%.loc.gov', you would write the\nstatement like this:\nSET PASSWORD FOR 'bob'@'%.loc.gov' = PASSWORD('newpass');\n\nIf you want to delete a password for a user, you would do:\nSET PASSWORD FOR 'bob'@localhost = PASSWORD("");\n','','https://mariadb.com/kb/en/library/set-password/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (126,10,'Roles Overview','Description\n-----------\nA role bundles a number of privileges together. It assists larger organizations\nwhere, typically, a number of users would have the same privileges, and, previously,\nthe only way to change the privileges for a group of users was by changing each\nuser's privileges individually.\n\nAlternatively, multiple external users could have been assigned the same user, and\nthere would have been no way to see which actual user was responsible for\nwhich action.\n\nWith roles, managing this is easy. For example, there could be a number of users\nassigned to a journalist role, with identical privileges. Changing the privileges for\nall the journalists is a matter of simply changing the role's privileges, while the\nindividual user is still linked with any changes that take place.\n\nRoles are created with the CREATE ROLE statement, and dropped with the DROP ROLE\nstatement. Roles are then assigned to a user with an extension to the GRANT\nstatement, while privileges are assigned to a role in the regular way with GRANT.\n\nSimilarly, the REVOKE statement can be used to both revoke a role from a user, or\nrevoke a privilege from a role.\n\nOnce a user has connected, he can obtain all  privileges associated with a role by\nsetting a role with the SET ROLE statement. The CURRENT_ROLE function returns the\ncurrently set role for the session, if any.\n\nOnly roles granted directly to a user can be set, roles granted to other roles\ncannot. Instead the privileges granted to a role, which is, in turn, granted to\nanother role (grantee), will be immediately available to any user who sets this\nsecond grantee role.\n\nThe SET DEFAULT ROLE statement allows one to set a default role for a user. A default\nrole is automatically enabled when a user connects (an implicit SET ROLE statement is\nexecuted immediately after a connection is established).\n\nRoles were implemented as a GSoC 2013 project by Vicentiu Ciorbaru.\n\nSystem Tables\n-------------\nInformation about roles and who they've been granted to can be found in the\nInformation Schema APPLICABLE_ROLES table as well as the mysql.ROLES_MAPPING table.\n\nThe Information Schema ENABLED_ROLES table shows the enabled roles for the\ncurrent session.\n\nExamples\n--------\nCreating a role and granting a privilege:\nCREATE ROLE journalist;\n\nGRANT SHOW DATABASES ON *.* TO journalist;\n\nGRANT journalist to hulda;\n\nNote, that hulda has no SHOW DATABASES privilege, even though she was granted the\njournalist role. She needs to set the role first:\nSHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n+--------------------+\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE journalist;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| journalist   |\n+--------------+\n\nSHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| ...                |\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n| ...                |\n+--------------------+\n\nSET ROLE NONE;\n\nRoles can be granted to roles:\nCREATE ROLE writer;\n\nGRANT SELECT ON data.* TO writer;\n\nGRANT writer TO journalist;\n\nBut one does not need to set a role granted to a role. For example, hulda will\nautomatically get all writer privileges when she sets the journalist role:\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSHOW TABLES FROM data;\nEmpty set (0.01 sec)\n\nSET ROLE journalist;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| journalist   |\n+--------------+\n\nSHOW TABLES FROM data;\n+------------------------------+\n| Tables_in_data               |\n+------------------------------+\n| set1                         |\n| ...                          |\n+------------------------------+\n\nRoles and Views (and Stored Routines)\n-------------------------------------\nWhen a user sets a role, he, in a sense, has two identities with two associated sets\nof privileges.\n\nBut a view (or a stored routine) can have only one definer. So, when a view (or a\nstored routine) is created with the SQL SECURITY DEFINER, one can specify whether the\ndefiner should be CURRENT_USER (and the view will have none of the privileges of the\nuser's role) or CURRENT_ROLE (in this case, the view will use role's privileges, but\nnone of the user's privileges). As a result, sometimes one can create a view that is\nimpossible to use.\n\nCREATE ROLE r1;\n\nGRANT ALL ON db1.* TO r1;\n\nGRANT r1 TO foo@localhost;\n\nGRANT ALL ON db.* TO foo@localhost;\n\nSELECT CURRENT_USER\n+---------------+\n| current_user  |\n+---------------+\n| foo@localhost |\n+---------------+\n\nSET ROLE r1;\n\nCREATE TABLE db1.t1 (i int);\n\nCREATE VIEW db.v1 AS SELECT * FROM db1.t1;\n\nSHOW CREATE VIEW db.v1;\n+------+-----------------------------------------------------------------------------\n------------------------------------------------------------+----------------------+-\n--------------------+\n| View | Create View                                                                 \n                              | character_set_client |\ncollation_connection |\n+------+-----------------------------------------------------------------------------\n------------------------------------------------------------+----------------------+-\n--------------------+\n| v1   | CREATE ALGORITHM=UNDEFINED DEFINER=`foo`@`localhost` SQL SECURITY DEFINER\nVIEW `db`.`v1` AS SELECT `db1`.`t1`.`i` AS `i` from `db1`.`t1` | utf8                \n| utf8_general_ci      |\n+------+-----------------------------------------------------------------------------\n------------------------------------------------------------+----------------------+-\n--------------------+\n\nCREATE DEFINER=CURRENT_ROLE VIEW db.v2 AS SELECT * FROM db1.t1;\n\nSHOW CREATE VIEW db.b2;\n+------+-----------------------------------------------------------------------------\n-----------------------------------------------+----------------------+--------------\n-------+\n| View | Create View                                                                 \n                       | character_set_client |\ncollation_connection |\n+------+-----------------------------------------------------------------------------\n-----------------------------------------------+----------------------+--------------\n-------+\n| v2   | CREATE ALGORITHM=UNDEFINED DEFINER=`r1` SQL SECURITY DEFINER VIEW `db`.`v2`\nAS select `db1`.`t1`.`a` AS `a` from `db1`.`t1` | utf8                 |\nutf8_general_ci      |\n+------+-----------------------------------------------------------------------------\n-----------------------------------------------+----------------------+--------------\n-------+\n\nOther Resources\n---------------\n','','https://mariadb.com/kb/en/library/roles_overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (127,10,'CREATE ROLE','Syntax\n------\nCREATE [OR REPLACE] ROLE [IF NOT EXISTS] role \n [WITH ADMIN\n  {CURRENT_USER | CURRENT_ROLE | user | role}]\n\nDescription\n-----------\nThe CREATE ROLE statement creates one or more MariaDB roles. To\nuse it, you must have the global CREATE USER\nprivilege or the INSERT privilege for the mysql\ndatabase. For each account, CREATE ROLE creates a new row in the\nmysql.user table that has no privileges, and with the\ncorresponding is_role field set to Y. It also creates a record in the\nmysql.roles_mapping table.\n\nIf any of the specified roles already exist, ERROR 1396 (HY000) results. If\nan error occurs, CREATE ROLE will still create the roles that do not result\nin an error. The maximum length for a role is 128 characters. Role names can be\nquoted, as explained in the Identifier names page. Only\none error is produced for all roles which have not been created:\nERROR 1396 (HY000): Operation CREATE ROLE failed for 'a','b','c'\n\nFailed CREATE or DROP operations, for both users and roles, produce the\nsame error code.\n\nPUBLIC and NONE are reserved, and cannot be used as role names. NONE is used to unset\na role and PUBLIC has a special use in other systems, such as Oracle, so is reserved\nfor compatibility purposes.\n\nFor valid identifiers to use as role names, see Identifier Names.\n\nWITH ADMIN\nThe optional WITH ADMIN clause determines whether the current user, the\ncurrent role or another user or role has use of the newly created role. If the\nclause is omitted, WITH ADMIN CURRENT_USER is treated as the default, which\nmeans that the current user will be able to GRANT this role to\nusers.\n\nOR REPLACE\nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP ROLE IF EXISTS name;\nCREATE ROLE name ...;\n\nIF NOT EXISTS\nWhen the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the specified role already exists. Cannot be used together with the OR\nREPLACE clause.\n\nExamples\n--------\nCREATE ROLE journalist;\n\nCREATE ROLE developer WITH ADMIN lorinda@localhost;\n\nGranting the role to another user. Only user lorinda@localhost has permission to\ngrant the developer role:\n SELECT USER();\n+-------------------+\n| USER()            |\n+-------------------+\n| henning@localhost |\n+-------------------+\n...\nGRANT developer TO ian@localhost;\nAccess denied for user 'henning'@'localhost'\n\nSELECT USER();\n+-------------------+\n| USER()            |\n+-------------------+\n| lorinda@localhost |\n+-------------------+\n\nGRANT m_role TO ian@localhost;\n\nThe OR REPLACE and IF NOT EXISTS clauses. The journalist role already exists:\nCREATE ROLE journalist;\nERROR 1396 (HY000): Operation CREATE ROLE failed for 'journalist'\n\nCREATE OR REPLACE ROLE journalist;\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE ROLE IF NOT EXISTS journalist;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+---------------------------------------------------+\n| Level | Code | Message                                           |\n+-------+------+---------------------------------------------------+\n| Note  | 1975 | Can't create role 'journalist'; it already exists |\n+-------+------+---------------------------------------------------+\n','','https://mariadb.com/kb/en/library/create-role/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (128,10,'DROP ROLE','Syntax\n------\nDROP ROLE [IF EXISTS] role_name [,role_name ...]\n\nDescription\n-----------\nThe DROP ROLE statement removes one or more MariaDB roles. To use this\nstatement, you must have the global CREATE USER privilege or\nthe DELETE privilege for the mysql database.\n\nDROP ROLE does not disable roles for connections which selected them with SET ROLE.\n\nIf a role has previously been set as a default role, DROP ROLE does not remove the\nrecord of the default role from the mysql.user table. If the role is subsequently\nrecreated and granted, it will again be the user's default. Use SET DEFAULT ROLE NONE\nto explicitly remove this.\n\nIf any of the specified user accounts do not exist, ERROR 1396 (HY000)\nresults. If an error occurs, DROP ROLE will still drop the roles that\ndo not result in an error. Only one error is produced for all roles which have not\nbeen dropped:\nERROR 1396 (HY000): Operation DROP ROLE failed for 'a','b','c'\n\nFailed CREATE or DROP operations, for both users and roles, produce the same\nerror code.\n\nIF EXISTS\nIf the IF EXISTS clause is used, MariaDB will return a warning instead of an error if\nthe role does not exist.\n\nExamples\n--------\nDROP ROLE journalist;\n\nThe same thing using the optional IF EXISTS clause:\nDROP ROLE journalist;\nERROR 1396 (HY000): Operation DROP ROLE failed for 'journalist'\n\nDROP ROLE IF EXISTS journalist;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nNote (Code 1975): Can't drop role 'journalist'; it doesn't exist\n','','https://mariadb.com/kb/en/library/drop-role/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (129,10,'SET ROLE','Syntax\n------\nSET ROLE { role | NONE }\n\nDescription\n-----------\nThe SET ROLE statement enables a role, along with all of its associated permissions,\nfor the current session. To unset a role, use NONE .\n\nIf a role that doesn't exist, or to which the user has not been assigned, is\nspecified, an ERROR 1959 (OP000): Invalid role specification error occurs.\n\nAn automatic SET ROLE is implicitly performed when a user connects if that user has\nbeen assigned a default role. See SET DEFAULT ROLE.\n\nExample\n-------\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE staff;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff        |\n+--------------+\n\nSET ROLE NONE;\n\nSELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| NULL           |\n+----------------+\n','','https://mariadb.com/kb/en/library/set-role/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (130,10,'SET DEFAULT ROLE','Syntax\n------\nSET DEFAULT ROLE { role | NONE } [ FOR user@host ]\n\nDescription\n-----------\nThe SET DEFAULT ROLE statement sets a default role for a specified (or current) user.\n\nA default role is automatically enabled when a user connects (an implicit SET ROLE\nstatement is executed immediately after a connection is established).\n\nTo be able to set a role as a default, the role must already have been granted to\nthat user, and one needs the privileges to enable this role (if you cannot do SET\nROLE X, you won't be able to do SET DEFAULT ROLE X). To set a default role for\nanother user one needs to have write access to the mysql database.\n\nTo remove a user's default role, use SET DEFAULT ROLE NONE [ FOR user@host ]. The\nrecord of the default role is not removed if the role is dropped or revoked, so if\nthe role is subsequently re-created or granted, it will again be the user's\ndefault role.\n\nThe default role is stored in the default_role column in the mysql.user table/view,\nas well as in the Information Schema APPLICABLE_ROLES table, so these can be viewed\nto see which role has been assigned to a user as the default.\n\nExamples\n--------\nSetting a default role for the current user:\nSET DEFAULT ROLE journalist;\n\nRemoving a default role from the current user:\nSET DEFAULT ROLE NONE;\n\nSetting a default role for another user. The role has to have been granted to the\nuser before it can be set as default:\nCREATE ROLE journalist;\nCREATE USER taniel;\n\nSET DEFAULT ROLE journalist FOR taniel;\nERROR 1959 (OP000): Invalid role specification `journalist`\n\nGRANT journalist TO taniel;\nSET DEFAULT ROLE journalist FOR taniel;\n\nViewing mysql.user:\nselect * from mysql.user where user='taniel'\G\n*************************** 1. row ***************************\n         Host: %\n         User: taniel\n...\n       is_role: N\n     default_role: journalist\n...\n\nRemoving a default role for another user\nSET DEFAULT ROLE NONE FOR taniel;\n','','https://mariadb.com/kb/en/library/set-default-role/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (131,11,'ST_X','Syntax\n------\nST_X(p)\nX(p)\n\nDescription\n-----------\nReturns the X-coordinate value for the point p as a double-precision number.\n\nST_X() and X() are synonyms.\n\nExamples\n--------\nSET @pt = 'Point(56.7 53.34)';\n\nSELECT X(GeomFromText(@pt));\n+----------------------+\n| X(GeomFromText(@pt)) |\n+----------------------+\n|                 56.7 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/st_x/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (132,11,'ST_Y','Syntax\n------\nST_Y(p)\nY(p)\n\nDescription\n-----------\nReturns the Y-coordinate value for the point p as a double-precision number.\n\nST_Y() and Y() are synonyms.\n\nExamples\n--------\nSET @pt = 'Point(56.7 53.34)';\n\nSELECT Y(GeomFromText(@pt));\n+----------------------+\n| Y(GeomFromText(@pt)) |\n+----------------------+\n|                53.34 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/st_y/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (133,11,'X','A synonym for ST_X.\n','','https://mariadb.com/kb/en/library/point-properties-x/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (134,11,'Y','A synonym for ST_Y.\n','','https://mariadb.com/kb/en/library/point-properties-y/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (135,12,'AES_DECRYPT','Syntax\n------\nAES_DECRYPT(crypt_str,key_str)\n\nDescription\n-----------\nThis function allows decryption of data using the official AES\n(Advanced Encryption Standard) algorithm. For more information, see\nthe description of AES_ENCRYPT().\n','','https://mariadb.com/kb/en/library/aes_decrypt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (136,12,'AES_ENCRYPT','Syntax\n------\nAES_ENCRYPT(str,key_str)\n\nDescription\n-----------\nAES_ENCRYPT() and AES_DECRYPT() allow encryption and decryption of\ndata using the official AES (Advanced Encryption Standard) algorithm,\npreviously known as "Rijndael." Encoding with a 128-bit key length is\nused, but you can extend it up to 256 bits by modifying the source. We\nchose 128 bits because it is much faster and it is secure enough for\nmost purposes.\n\nAES_ENCRYPT() encrypts a string str using the key key_str, and returns a\nbinary string.\n\nAES_DECRYPT() decrypts the encrypted string and returns the original\nstring.\n\nThe input arguments may be any length. If either argument is NULL, the result of this\nfunction is also NULL.\n\nBecause AES is a block-level algorithm, padding is used to encode\nuneven length strings and so the result string length may be\ncalculated using this formula:\n16 x (trunc(string_length / 16) + 1)\n\nIf AES_DECRYPT() detects invalid data or incorrect padding, it returns\nNULL. However, it is possible for AES_DECRYPT() to return a non-NULL\nvalue (possibly garbage) if the input data or the key is invalid.\n\nExamples\n--------\nINSERT INTO t VALUES (AES_ENCRYPT('text',SHA2('password',512)));\n','','https://mariadb.com/kb/en/library/aes_encrypt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (137,12,'COMPRESS','Syntax\n------\nCOMPRESS(string_to_compress)\n\nDescription\n-----------\nCompresses a string and returns the result as a binary string. This\nfunction requires MariaDB to have been compiled with a compression\nlibrary such as zlib. Otherwise, the return value is always NULL. The\ncompressed string can be uncompressed with UNCOMPRESS().\n\nThe have_compress server system variable indicates whether a compression library is\npresent.\n\nExamples\n--------\nSELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n+------------------------------------+\n| LENGTH(COMPRESS(REPEAT('a',1000))) |\n+------------------------------------+\n|                                 21 |\n+------------------------------------+\n\nSELECT LENGTH(COMPRESS(''));\n+----------------------+\n| LENGTH(COMPRESS('')) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSELECT LENGTH(COMPRESS('a'));\n+-----------------------+\n| LENGTH(COMPRESS('a')) |\n+-----------------------+\n|                    13 |\n+-----------------------+\n\nSELECT LENGTH(COMPRESS(REPEAT('a',16)));\n+----------------------------------+\n| LENGTH(COMPRESS(REPEAT('a',16))) |\n+----------------------------------+\n|                               15 |\n+----------------------------------+\n','','https://mariadb.com/kb/en/library/compress/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (138,12,'DECODE','Syntax\n------\nDECODE(crypt_str,pass_str)\n\nIn Oracle mode from MariaDB 10.3.2:\nDECODE(expr, search_expr, result_expr [, search_expr2, result_expr2\n...] [default_expr])\n\nIn all modes from MariaDB 10.3.2:\nDECODE_ORACLE(expr, search_expr, result_expr [, search_expr2, result_expr2\n...] [default_expr])\n\nDescription\n-----------\nIn the default mode, DECODE decrypts the encrypted string crypt_str using pass_str\nas the\npassword. crypt_str should be a string returned from ENCODE(). The resulting string\nwill be the original string only if pass_str is the same.\n\nIn Oracle mode from MariaDB 10.3.2, DECODE compares expr to the search expressions,\nin order. If it finds a match, the corresponding result expression is returned. If no\nmatches are found, the default expression is returned, or NULL if no default\nis provided.\n\nNULLs are treated as equivalent.\n\nDECODE_ORACLE is a synonym for the Oracle-mode version of the function, and is\navailable in all modes.\n\nExamples\n--------\nFrom MariaDB 10.3.2:\nSELECT DECODE_ORACLE(2+1,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+1,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| found1                                                 |\n+--------------------------------------------------------+\n\nSELECT DECODE_ORACLE(2+4,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+4,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| found2                                                 |\n+--------------------------------------------------------+\n\nSELECT DECODE_ORACLE(2+2,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+2,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| default                                                |\n+--------------------------------------------------------+\n\nNulls are treated as equivalent:\nSELECT DECODE_ORACLE(NULL,NULL,'Nulls are equivalent','Nulls are not equivalent');\n+----------------------------------------------------------------------------+\n| DECODE_ORACLE(NULL,NULL,'Nulls are equivalent','Nulls are not equivalent') |\n+----------------------------------------------------------------------------+\n| Nulls are equivalent                                                       |\n+----------------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/decode/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (139,12,'DES_DECRYPT','Syntax\n------\nDES_DECRYPT(crypt_str[,key_str])\n\nDescription\n-----------\nDecrypts a string encrypted with DES_ENCRYPT(). If an error occurs,\nthis function returns NULL.\n\nThis function works only if MariaDB has been configured with TLS\nsupport.\n\nIf no key_str argument is given, DES_DECRYPT() examines the first byte\nof the encrypted string to determine the DES key number that was used\nto encrypt the original string, and then reads the key from the DES\nkey file to decrypt the message. For this to work, the user must have\nthe SUPER privilege. The key file can be specified with the\n--des-key-file server option.\n\nIf you pass this function a key_str argument, that string is used as\nthe key for decrypting the message.\n\nIf the crypt_str argument does not appear to be an encrypted string,\nMariaDB returns the given crypt_str.\n','','https://mariadb.com/kb/en/library/des_decrypt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (140,12,'DES_ENCRYPT','Syntax\n------\nDES_ENCRYPT(str[,{key_num|key_str}])\n\nDescription\n-----------\nEncrypts the string with the given key using the Triple-DES algorithm.\n\nThis function works only if MariaDB has been configured with TLS support.\n\nThe encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key \nnumber (0-9) from the DES key file is used. With a key_str argument,\nthe given key string is used to encrypt str.\n\nThe key file can be specified with the --des-key-file server option.\n\nThe return string is a binary string where the first character is \nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.\n\nThe 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.\n\nThe string length for the result is given by this formula:\nnew_len = orig_len + (8 - (orig_len % 8)) + 1\n\nEach line in the DES key file has the following format:\nkey_num des_key_str\n\nEach key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used\nto encrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().\n\nYou can tell MariaDB to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.\n\nOne benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values.\n\nExamples\n--------\nSELECT customer_address FROM customer_table \n WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');\n','','https://mariadb.com/kb/en/library/des_encrypt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (141,12,'ENCODE','Syntax\n------\nENCODE(str,pass_str)\n\nDescription\n-----------\nENCODE is not considered cryptographically secure, and should not be used for\npassword encryption.\n\nEncrypt str using pass_str as the password. To decrypt the result, use\nDECODE().\n\nThe result is a binary string of the same length as str.\n\nThe strength of the encryption is based on how good the random generator is.\n\nIt is not recommended to rely on the encryption performed by the ENCODE function.\n\nUsing a salt value (changed when a password is updated) will improve matters\nsomewhat, but for storing passwords, consider a more cryptographically secure\nfunction, such as SHA2().\n\nExamples\n--------\nENCODE('not so secret text', CONCAT('random_salt','password'))\n','','https://mariadb.com/kb/en/library/encode/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (142,12,'ENCRYPT','Syntax\n------\nENCRYPT(str[,salt])\n\nDescription\n-----------\nEncrypts a string using the Unix crypt() system call, returning an encrypted binary\nstring. The salt argument should be a string with at least two characters or the\nreturned result will be NULL. If no salt argument is given, a random value of\nsufficient length is used.\n\nIt is not recommended to use ENCRYPT() with utf16, utf32 or ucs2 multi-byte character\nsets because the crypt() system call expects a string terminated with a zero byte.\n\nNote that the underlying crypt() system call may have some limitations, such as\nignoring all but the first eight characters.\n\nIf the have_crypt system variable is set to NO (because the crypt() system call is\nnot available), the ENCRYPT function will always return NULL.\n\nExamples\n--------\nSELECT ENCRYPT('encrypt me');\n+-----------------------+\n| ENCRYPT('encrypt me') |\n+-----------------------+\n| 4I5BsEx0lqTDk         |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/encrypt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (143,12,'MD5','Syntax\n------\nMD5(str)\n\nDescription\n-----------\nCalculates an MD5 128-bit checksum for the string.\n\nThe return value is a 32-hex digit string, and as of MariaDB 5.5, is a nonbinary\nstring in the connection character set and collation, determined by the values of the\ncharacter_set_connection and collation_connection system variables. Before 5.5, the\nreturn value was a binary string.\n\nNULL is returned if the argument was NULL.\n\nExamples\n--------\nSELECT MD5('testing');\n+----------------------------------+\n| MD5('testing')                   |\n+----------------------------------+\n| ae2b1fca515949e5d54fb22b8ed95575 |\n+----------------------------------+\n','','https://mariadb.com/kb/en/library/md5/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (144,12,'OLD_PASSWORD','Syntax\n------\nOLD_PASSWORD(str)\n\nDescription\n-----------\nOLD_PASSWORD() was added to MySQL when the implementation of \nPASSWORD() was changed to improve security. OLD_PASSWORD() returns the\nvalue of the old (pre-MySQL 4.1) implementation of PASSWORD() as a\nstring, and is intended to permit you to reset passwords for any\npre-4.1 clients that need to connect to a more recent MySQL server version, or any\nversion of MariaDB,\nwithout locking them out.\n\nAs of MariaDB 5.5, the return value is a nonbinary string in the connection character\nset and collation, determined by the values of the character_set_connection and\ncollation_connection system variables. Before 5.5, the return value was a\nbinary string.\n\nThe return value is 16 bytes in length, or NULL if the argument was NULL.\n','','https://mariadb.com/kb/en/library/old_password/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (145,12,'PASSWORD','Syntax\n------\nPASSWORD(str)\n\nDescription\n-----------\nThe PASSWORD() function is used for hashing passwords for use in authentication by\nthe MariaDB server. It is not intended for use in other applications.\n\nCalculates and returns a hashed password string from the plaintext password str.\n\nReturns an empty string (>= MariaDB 10.0.4) if the argument was NULL.\n\nThe return value is a nonbinary string in the connection character set and collation,\ndetermined by the values of the character_set_connection and collation_connection\nsystem variables.\n\nThis is the function that is used for hashing MariaDB passwords for storage in the\nPassword column of the user table (see privileges), usually used with the SET\nPASSWORD statement. It is not intended for use in other applications.\n\nUntil MariaDB 10.3, the return value is 41-bytes in length, and the first character\nis always '*'. From MariaDB 10.4, the function takes into account the authentication\nplugin where applicable (A CREATE USER or SET PASSWORD statement). For example, when\nused in conjunction with a user authenticated by the ed25519 plugin, the statement\nwill create a longer hash:\nCREATE USER edtest@localhost IDENTIFIED VIA ed25519 USING PASSWORD('secret');\n\nCREATE USER edtest2@localhost IDENTIFIED BY 'secret';\n\nSELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv\n WHERE user LIKE 'edtest%'\G\n*************************** 1. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest@localhost => {\n...\n  "plugin": "ed25519",\n  "authentication_string": "ZIgUREUg5PVgQ6LskhXmO+eZLS0nC8be6HPjYWR4YJY",\n...\n}\n*************************** 2. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest2@localhost => {\n...\n  "plugin": "mysql_native_password",\n  "authentication_string": "*14E65567ABDB5135D0CFD9A70B3032C179A49EE7",\n...\n}\n\nThe behavior of this function is affected by the value of the old_passwords system\nvariable. If this is set to 1 (0 is default), MariaDB reverts to using the\nmysql_old_password authentication plugin by default for newly created users and\npasswords.\n\nExamples\n--------\nSELECT PASSWORD('notagoodpwd');\n+-------------------------------------------+\n| PASSWORD('notagoodpwd')                   |\n+-------------------------------------------+\n| *3A70EE9FC6594F88CE9E959CD51C5A1C002DC937 |\n+-------------------------------------------+\n\nSET PASSWORD FOR 'bob'@'%.loc.gov' = PASSWORD('newpass');\n','','https://mariadb.com/kb/en/library/password/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (146,12,'SHA1','Syntax\n------\nSHA1(str), SHA(str)\n\nDescription\n-----------\nCalculates an SHA-1 160-bit checksum for the string str, as described in\nRFC 3174 (Secure Hash Algorithm).\n\nThe value is returned as a string of 40 hex digits, or NULL if the argument was NULL.\n\nAs of MariaDB 5.5, the return value is a nonbinary string in the connection character\nset and collation, determined by the values of the character_set_connection and\ncollation_connection system variables. Before 5.5, the return value was a\nbinary string.\n\nExamples\n--------\nSELECT SHA1('some boring text');\n+------------------------------------------+\n| SHA1('some boring text')                 |\n+------------------------------------------+\n| af969fc2085b1bb6d31e517d5c456def5cdd7093 |\n+------------------------------------------+\n','','https://mariadb.com/kb/en/library/sha1/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (147,12,'SHA2','Syntax\n------\nSHA2(str,hash_len)\n\nDescription\n-----------\nGiven a string str, calculates an SHA-2 checksum, which is considered more\ncryptographically secure than its SHA-1 equivalent. The SHA-2 family includes\nSHA-224, SHA-256, SHA-384, and SHA-512, and the hash_len must correspond to one of\nthese, i.e. 224, 256, 384 or 512. 0 is equivalent to 256.\n\nThe return value is a nonbinary string in the connection character set and collation,\ndetermined by the values of the character_set_connection and collation_connection\nsystem variables.\n\nNULL is returned if the hash length is not valid, or the string str is NULL.\n\nSHA2 will only work if MariaDB was has been configured with TLS support.\n\nExamples\n--------\nSELECT SHA2('Maria',224);\n+----------------------------------------------------------+\n| SHA2('Maria',224)                                        |\n+----------------------------------------------------------+\n| 6cc67add32286412efcab9d0e1675a43a5c2ef3cec8879f81516ff83 |\n+----------------------------------------------------------+\n\nSELECT SHA2('Maria',256);\n+------------------------------------------------------------------+\n| SHA2('Maria',256)                                                |\n+------------------------------------------------------------------+\n| 9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16 |\n+------------------------------------------------------------------+\n\nSELECT SHA2('Maria',0);\n+------------------------------------------------------------------+\n| SHA2('Maria',0)                                                  |\n+------------------------------------------------------------------+\n| 9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16 |\n+------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/sha2/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (148,12,'UNCOMPRESS','Syntax\n------\nUNCOMPRESS(string_to_uncompress)\n\nDescription\n-----------\nUncompresses a string compressed by the COMPRESS() function. If the\nargument is not a compressed value, the result is NULL. This function\nrequires MariaDB to have been compiled with a compression library such\nas zlib. Otherwise, the return value is always NULL. The have_compress server system\nvariable indicates whether a compression library is present.\n\nExamples\n--------\nSELECT UNCOMPRESS(COMPRESS('a string'));\n+----------------------------------+\n| UNCOMPRESS(COMPRESS('a string')) |\n+----------------------------------+\n| a string                         |\n+----------------------------------+\n\nSELECT UNCOMPRESS('a string');\n+------------------------+\n| UNCOMPRESS('a string') |\n+------------------------+\n| NULL                   |\n+------------------------+\n','','https://mariadb.com/kb/en/library/uncompress/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (149,12,'UNCOMPRESSED_LENGTH','Syntax\n------\nUNCOMPRESSED_LENGTH(compressed_string)\n\nDescription\n-----------\nReturns the length that the compressed string had before being\ncompressed with COMPRESS().\n\nUNCOMPRESSED_LENGTH() returns NULL or an incorrect result if the string is\nnot compressed.\n\nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10), in all cases. From\nMariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n\nExamples\n--------\nSELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n+-----------------------------------------------+\n| UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30))) |\n+-----------------------------------------------+\n|                                            30 |\n+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/uncompressed_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (150,13,'ENDPOINT','A synonym for ST_ENDPOINT.\n','','https://mariadb.com/kb/en/library/linestring-properties-endpoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (151,13,'GLENGTH','Syntax\n------\nGLength(ls)\n\nDescription\n-----------\nReturns as a double-precision number the length of the\nLineString value ls in its associated spatial reference.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT GLength(GeomFromText(@ls));\n+----------------------------+\n| GLength(GeomFromText(@ls)) |\n+----------------------------+\n|           2.82842712474619 |\n+----------------------------+\n','','https://mariadb.com/kb/en/library/glength/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (152,13,'NumPoints','A synonym for ST_NumPoints.\n','','https://mariadb.com/kb/en/library/linestring-properties-numpoints/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (153,13,'PointN','A synonym for ST_PointN.\n','','https://mariadb.com/kb/en/library/linestring-properties-pointn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (154,13,'STARTPOINT','A synonym for ST_STARTPOINT.\n','','https://mariadb.com/kb/en/library/linestring-properties-startpoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (155,13,'ST_ENDPOINT','Syntax\n------\nST_EndPoint(ls)\nEndPoint(ls)\n\nDescription\n-----------\nReturns the Point that is the endpoint of the\nLineString value ls.\n\nST_EndPoint() and EndPoint() are synonyms.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n','','https://mariadb.com/kb/en/library/st_endpoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (156,13,'ST_NUMPOINTS','Syntax\n------\nST_NumPoints(ls)\nNumPoints(ls)\n\nDescription\n-----------\nReturns the number of Point objects in the LineString\nvalue ls.\n\nST_NumPoints() and NumPoints() are synonyms.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT NumPoints(GeomFromText(@ls));\n+------------------------------+\n| NumPoints(GeomFromText(@ls)) |\n+------------------------------+\n|                            3 |\n+------------------------------+\n','','https://mariadb.com/kb/en/library/st_numpoints/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (157,13,'ST_POINTN','Syntax\n------\nST_PointN(ls,N)\nPointN(ls,N)\n\nDescription\n-----------\nReturns the N-th Point in the LineString value ls.\n\nPoints are numbered beginning with 1.\n\nST_PointN() and PointN() are synonyms.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(PointN(GeomFromText(@ls),2));\n+-------------------------------------+\n| AsText(PointN(GeomFromText(@ls),2)) |\n+-------------------------------------+\n| POINT(2 2)                          |\n+-------------------------------------+\n','','https://mariadb.com/kb/en/library/st_pointn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (158,14,'GET_LOCK','Syntax\n------\nGET_LOCK(str,timeout)\n\nDescription\n-----------\nTries to obtain a lock with a name given by the string str, using a timeout of\ntimeout seconds. Returns 1 if the lock was obtained successfully, 0 if the attempt\ntimed out (for example, because another client has previously locked the name), or \nNULL if an error occurred (such as running out of memory or the thread was killed\nwith mysqladmin kill).\n\nA lock is released with RELEASE_LOCK(), when the connection terminates (either\nnormally or abnormally). A connection can hold multiple locks at the same time, so a\nlock that is no longer needed needs to be explicitly released.\n\nThe IS_FREE_LOCK function returns whether a specified lock a free or not, and the\nIS_USED_LOCK whether the function is in use or not.\n\nLocks obtained with GET_LOCK() do not interact with transactions. That is, committing\na transaction does not release any such locks obtained during the transaction.\n\nIt is also possible to recursively set the same lock. If a lock with the same name is\nset n times, it needs to be released n times as well.\n\nstr is case insensitive for GET_LOCK() and related functions. If str is an empty\nstring or NULL, GET_LOCK() returns NULL and does nothing. From MariaDB 10.2.2,\ntimeout supports microseconds. Before then, it was rounded to the closest integer.\n\nIf the metadata_lock_info plugin is installed, locks acquired with this function are\nvisible in the Information Schema METADATA_LOCK_INFO table.\n\nThis function can be used to implement application locks or to simulate record locks.\n\nNames are locked on a server-wide basis. If a name has been locked by one client,\nGET_LOCK() blocks any request by another client for a lock with the same name. This\nallows clients that agree on a given lock name to use the name to perform cooperative\nadvisory locking. But be aware that it also allows a client that is not among the set\nof cooperating clients to lock a name, either inadvertently or deliberately, and thus\nprevent any of the cooperating clients from locking that name. One way to reduce the\nlikelihood of this is to use lock names that are database-specific or\napplication-specific. For example, use lock names of the form db_name.str\nor app_name.str.\n\nStatements using the GET_LOCK function are not safe for statement-based replication.\n\nThe patch to permit multiple locks was contributed by Konstantin "Kostja"\nOsipov (MDEV-3917).\n\nExamples\n--------\nSELECT GET_LOCK('lock1',10);\n+----------------------+\n| GET_LOCK('lock1',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT IS_FREE_LOCK('lock1'), IS_USED_LOCK('lock1');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock1') | IS_USED_LOCK('lock1') |\n+-----------------------+-----------------------+\n|                     0 |                    46 |\n+-----------------------+-----------------------+\n\nSELECT IS_FREE_LOCK('lock2'), IS_USED_LOCK('lock2');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock2') | IS_USED_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     1 |                  NULL |\n+-----------------------+-----------------------+\n\nMultiple locks can be held:\nSELECT GET_LOCK('lock2',10);\n+----------------------+\n| GET_LOCK('lock2',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT IS_FREE_LOCK('lock1'), IS_FREE_LOCK('lock2');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock1') | IS_FREE_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     0 |                     0 |\n+-----------------------+-----------------------+\n\nSELECT RELEASE_LOCK('lock1'), RELEASE_LOCK('lock2');\n+-----------------------+-----------------------+\n| RELEASE_LOCK('lock1') | RELEASE_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     1 |                     1 |\n+-----------------------+-----------------------+\n\nIt is possible to hold the same lock recursively. This example is viewed using the\nmetadata_lock_info plugin:\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA |\nTABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |       \n  |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA |\nTABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |       \n  |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\nEmpty set (0.000 sec)\n\nTimeout example: Connection 1:\nSELECT GET_LOCK('lock4',10);\n+----------------------+\n| GET_LOCK('lock4',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nConnection 2:\nSELECT GET_LOCK('lock4',10);\n\nAfter 10 seconds...\n+----------------------+\n| GET_LOCK('lock4',10) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nDeadlocks are automatically detected and resolved. Connection 1:\nSELECT GET_LOCK('lock5',10); \n+----------------------+\n| GET_LOCK('lock5',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nConnection 2:\nSELECT GET_LOCK('lock6',10);\n+----------------------+\n| GET_LOCK('lock6',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nConnection 1:\nSELECT GET_LOCK('lock6',10); \n+----------------------+\n| GET_LOCK('lock6',10) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nConnection 2:\nSELECT GET_LOCK('lock5',10);\nERROR 1213 (40001): Deadlock found when trying to get lock; try\nrestarting transaction\n','','https://mariadb.com/kb/en/library/get_lock/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (159,14,'INET6_ATON','Syntax\n------\nINET6_ATON(expr)\n\nDescription\n-----------\nGiven an IPv6 or IPv4 network address as a string, returns a binary string that\nrepresents the numeric value of the address.\n\nNo trailing zone ID's or traling network masks are permitted. For IPv4 addresses, or\nIPv6 addresses with IPv4 address parts, no classful addresses or trailing port\nnumbers are permitted and octal numbers are not supported.\n\nThe returned binary string will be VARBINARY(16) or VARBINARY(4) for IPv6 and IPv4\naddresses respectively.\n\nReturns NULL if the argument is not understood.\n\nExamples\n--------\nSELECT HEX(INET6_ATON('10.0.1.1'));\n+-----------------------------+\n| HEX(INET6_ATON('10.0.1.1')) |\n+-----------------------------+\n| 0A000101                    |\n+-----------------------------+\n\nSELECT HEX(INET6_ATON('48f3::d432:1431:ba23:846f'));\n+----------------------------------------------+\n| HEX(INET6_ATON('48f3::d432:1431:ba23:846f')) |\n+----------------------------------------------+\n| 48F3000000000000D4321431BA23846F             |\n+----------------------------------------------+\n','','https://mariadb.com/kb/en/library/inet6_aton/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (160,14,'INET6_NTOA','Syntax\n------\nINET6_NTOA(expr)\n\nDescription\n-----------\nGiven an IPv6 or IPv4 network address as a numeric binary string, returns the address\nas a nonbinary string in the connection character set.\n\nThe return string is lowercase, and is platform independent, since it does not use\nfunctions specific to the operating system. It has a maximum length of 39 characters.\n\nReturns NULL if the argument is not understood.\n\nExamples\n--------\nSELECT INET6_NTOA(UNHEX('0A000101'));\n+-------------------------------+\n| INET6_NTOA(UNHEX('0A000101')) |\n+-------------------------------+\n| 10.0.1.1                      |\n+-------------------------------+\n\nSELECT INET6_NTOA(UNHEX('48F3000000000000D4321431BA23846F'));\n+-------------------------------------------------------+\n| INET6_NTOA(UNHEX('48F3000000000000D4321431BA23846F')) |\n+-------------------------------------------------------+\n| 48f3::d432:1431:ba23:846f                             |\n+-------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/inet6_ntoa/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (161,14,'INET_ATON','Syntax\n------\nINET_ATON(expr)\n\nDescription\n-----------\nGiven the dotted-quad representation of an IPv4 network address as a string,\nreturns an integer that represents the numeric value of the address.\n\nAddresses may be 4- or 8-byte addresses.\n\nReturns NULL if the argument is not understood.\n\nExamples\n--------\nSELECT INET_ATON('192.168.1.1');\n+--------------------------+\n| INET_ATON('192.168.1.1') |\n+--------------------------+\n|               3232235777 |\n+--------------------------+\n\nThis is calculated as follows: 192 x 2563 + 168 x 256 2 + 1 x 256 + 1\n','','https://mariadb.com/kb/en/library/inet_aton/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (162,14,'INET_NTOA','Syntax\n------\nINET_NTOA(expr)\n\nDescription\n-----------\nGiven a numeric IPv4 network address in network byte order (4 or 8 byte),\nreturns the dotted-quad representation of the address as a string.\n\nExamples\n--------\nSELECT INET_NTOA(3232235777);\n+-----------------------+\n| INET_NTOA(3232235777) |\n+-----------------------+\n| 192.168.1.1           |\n+-----------------------+\n\n192.168.1.1 corresponds to 3232235777 since 192 x 2563 + 168 x 256 2 + 1 x 256 + 1\n= 3232235777\n','','https://mariadb.com/kb/en/library/inet_ntoa/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (163,14,'IS_FREE_LOCK','Syntax\n------\nIS_FREE_LOCK(str)\n\nDescription\n-----------\nChecks whether the lock named str is free to use (that is, not locked).\n\nReturns 1 if the lock is free (no one is using the lock),\n 0 if the lock is in use, and NULL if an\nerror occurs (such as an incorrect argument, like an empty string or NULL). str is\ncase insensitive.\n\nIf the metadata_lock_info plugin is installed, the Information Schema\nmetadata_lock_info table contains information about locks of this kind (as well as\nmetadata locks).\n\nStatements using the IS_FREE_LOCK function are not safe for\nstatement-based replication.\n','','https://mariadb.com/kb/en/library/is_free_lock/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (164,14,'IS_IPV4','Syntax\n------\nIS_IPV4(expr)\n\nDescription\n-----------\nIf the expression is a valid IPv4 address, returns 1, otherwise returns 0.\n\nIS_IPV4() is stricter than INET_ATON(), but as strict as INET6_ATON(), in determining\nthe validity of an IPv4 address. This implies that if IS_IPV4 returns 1, the same\nexpression will always return a non-NULL result when passed to INET_ATON(), but that\nthe reverse may not apply.\n\nExamples\n--------\nSELECT IS_IPV4('1110.0.1.1');\n+-----------------------+\n| IS_IPV4('1110.0.1.1') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT IS_IPV4('48f3::d432:1431:ba23:846f');\n+--------------------------------------+\n| IS_IPV4('48f3::d432:1431:ba23:846f') |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n','','https://mariadb.com/kb/en/library/is_ipv4/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (165,14,'IS_IPV4_COMPAT','Syntax\n------\nIS_IPV4_COMPAT(expr)\n\nDescription\n-----------\nReturns 1 if a given numeric binary string IPv6 address, such as returned by\nINET6_ATON(), is IPv4-compatible, otherwise returns 0.\n\nExamples\n--------\nSELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.1.1'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::10.0.1.1')) |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n\nSELECT IS_IPV4_COMPAT(INET6_ATON('::48f3::d432:1431:ba23:846f'));\n+-----------------------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::48f3::d432:1431:ba23:846f')) |\n+-----------------------------------------------------------+\n|                                                         0 |\n+-----------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/is_ipv4_compat/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (166,14,'IS_IPV4_MAPPED','Syntax\n------\nIS_IPV4_MAPPED(expr)\n\nDescription\n-----------\nReturns 1 if a given a numeric binary string IPv6 address, such as returned by\nINET6_ATON(), is a valid IPv4-mapped address, otherwise returns 0.\n\nExamples\n--------\nSELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.1.1'));\n+------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON('::10.0.1.1')) |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n\nSELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.1.1'));\n+-----------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.1.1')) |\n+-----------------------------------------------+\n|                                             1 |\n+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/is_ipv4_mapped/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (167,14,'IS_IPV6','Syntax\n------\nIS_IPV6(expr)\n\nDescription\n-----------\nReturns 1 if the expression is a valid IPv6 address specified as a string, otherwise\nreturns 0. Does not consider IPv4 addresses to be valid IPv6 addresses.\n\nExamples\n--------\n SELECT IS_IPV6('48f3::d432:1431:ba23:846f');\n+--------------------------------------+\n| IS_IPV6('48f3::d432:1431:ba23:846f') |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+\n1 row in set (0.02 sec)\n\nSELECT IS_IPV6('10.0.1.1');\n+---------------------+\n| IS_IPV6('10.0.1.1') |\n+---------------------+\n|                   0 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/is_ipv6/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (168,14,'IS_USED_LOCK','Syntax\n------\nIS_USED_LOCK(str)\n\nDescription\n-----------\nChecks whether the lock named str is in use (that is, locked). If so,\nit returns the connection identifier of the client that holds the\nlock. Otherwise, it returns NULL. str is case insensitive.\n\nIf the metadata_lock_info plugin is installed, the Information Schema\nmetadata_lock_info table contains information about locks of this kind (as well as\nmetadata locks).\n\nStatements using the IS_USED_LOCK function are not safe for\nstatement-based replication.\n','','https://mariadb.com/kb/en/library/is_used_lock/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (169,14,'MASTER_GTID_WAIT','Syntax\n------\nMASTER_GTID_WAIT(gtid-list[, timeout)\n\nDescription\n-----------\nThis function takes a string containing a comma-separated list of global\ntransaction id's\n(similar to the value of, for example, gtid_binlog_pos). It waits until the value of\ngtid_slave_pos has the same or higher seq_no within all replication domains specified\nin the gtid-list; in other words, it waits until the slave has\nreached the specified GTID position.\n\nAn optional second argument gives a timeout in seconds. If the timeout\nexpires before the specified GTID position is reached, then the function\nreturns -1. Passing NULL or a negative number for the timeout means no timeout, and\nthe function will wait indefinitely.\n\nIf the wait completes without a timeout, 0 is returned. Passing NULL for the\n gtid-list makes the function return NULL immediately, without waiting.\n\nThe gtid-list may be the empty string, in which case MASTER_GTID_WAIT()\nreturns immediately. If the gtid-list contains fewer domains than\ngtid_slave_pos, then only those domains are waited upon. If gtid-list\ncontains a domain that is not present in @@gtid_slave_pos, then\nMASTER_GTID_WAIT() will wait until an event containing such domain_id arrives\non the slave (or until timed out or killed).\n\nMASTER_GTID_WAIT() can be useful to ensure that a slave has caught up to\na master. Simply take the value of gtid_binlog_pos on the master, and use it in a\nMASTER_GTID_WAIT() call on the slave; when the call completes, the slave\nwill have caught up with that master position.\n\nMASTER_GTID_WAIT() can also be used in client applications together with the\nlast_gtid session variable. This is useful in a read-scaleout replication setup,\nwhere the application writes to a single master but divides the\nreads out to a number of slaves to distribute the load. In such a setup, there\nis a risk that an application could first do an update on the master, and then\na bit later do a read on a slave, and if the slave is not fast enough, the\ndata read from the slave might not include the update just made, possibly\nconfusing the application and/or the end-user. One way to avoid this is to\nrequest the value of last_gtid on the master just after the update. Then\nbefore doing the read on the slave, do a MASTER_GTID_WAIT() on the value\nobtained from the master; this will ensure that the read is not performed\nuntil the slave has replicated sufficiently far for the update to have become\nvisible.\n\nNote that MASTER_GTID_WAIT() can be used even if the slave is configured not\nto use GTID for connections (CHANGE MASTER TO master_use_gtid=no). This is\nbecause from MariaDB 10, GTIDs are always logged on the master server, and\nalways recorded on the slave servers.\n\nDifferences to MASTER_POS_WAIT()\n--------------------------------\n\nSince MASTER_GTID_WAIT() looks only at the seq_no part of the GTIDs, not the\nserver_id, care is needed if a slave becomes diverged from another server so\nthat two different GTIDs with the same seq_no (in the same domain) arrive at\nthe same server. This situation is in any case best avoided; setting\ngtid_strict_mode is recommended, as this will prevent any such out-of-order sequence\nnumbers from ever being replicated on a slave.\n','','https://mariadb.com/kb/en/library/master_gtid_wait/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (170,14,'MASTER_POS_WAIT','Syntax\n------\nMASTER_POS_WAIT(log_name,log_pos[,timeout,["connection_name"]])\n\nDescription\n-----------\nThis function is useful in replication for controlling primary/replica\nsynchronization.  It blocks until the replica has read and applied all updates up to\nthe specified position (log_name,log_pos) in the primary log. The return value is the\nnumber of log events the replica had to wait for to advance to the specified\nposition. The function returns NULL if\nthe replica SQL thread is not started, the replica's primary information is not\ninitialized, the arguments are incorrect, or an error occurs. It returns -1 if\nthe timeout has been exceeded. If the replica SQL thread stops while\n MASTER_POS_WAIT() is waiting, the function returns NULL. If\nthe replica is past the specified position, the function returns immediately.\n\nIf a timeout value is specified, MASTER_POS_WAIT() stops\nwaiting when timeout seconds have elapsed. timeout must be greater than 0; a\nzero or negative timeout means no timeout.\n\nThe connection_name is used when you are using multi-source-replication.  If you\ndon't specify it, it's set to the value of the default_master_connection\nsystem variable.\n\nStatements using the MASTER_POS_WAIT() function are not safe for replication.\n','','https://mariadb.com/kb/en/library/master_pos_wait/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (171,14,'NAME_CONST','Syntax\n------\nNAME_CONST(name,value)\n\nDescription\n-----------\nReturns the given value. When used to produce a result set column,\n NAME_CONST() causes the column to have the given name. The\narguments should be constants.\n\nThis function is used internally when replicating stored procedures. It makes little\nsense to use it explicitly in SQL statements, and it was not supposed to be used\nlike that.\n\nSELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n','','https://mariadb.com/kb/en/library/name_const/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (172,14,'RELEASE_LOCK','Syntax\n------\nRELEASE_LOCK(str)\n\nDescription\n-----------\nReleases the lock named by the string str that was obtained with GET_LOCK(). Returns\n1 if the lock was released, 0 if the lock was not established by this thread (in\nwhich case the lock is not\nreleased), and NULL if the named lock did not exist. The lock does not exist if it\nwas never obtained by a call to GET_LOCK() or if it has previously been released.\n\nstr is case insensitive. If str is an empty string or NULL, RELEASE_LOCK() returns\nNULL and does nothing.\n\nStatements using the RELEASE_LOCK() function are not safe for replication.\n\nThe DO statement is convenient to use with RELEASE_LOCK().\n\nExamples\n--------\nConnection1:\nSELECT GET_LOCK('lock1',10);\n+----------------------+\n| GET_LOCK('lock1',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nConnection 2:\nSELECT GET_LOCK('lock2',10);\n+----------------------+\n| GET_LOCK('lock2',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nConnection 1:\nSELECT RELEASE_LOCK('lock1'), RELEASE_LOCK('lock2'), RELEASE_LOCK('lock3');\n+-----------------------+-----------------------+-----------------------+\n| RELEASE_LOCK('lock1') | RELEASE_LOCK('lock2') | RELEASE_LOCK('lock3') |\n+-----------------------+-----------------------+-----------------------+\n|                     1 |                     0 |                  NULL |\n+-----------------------+-----------------------+-----------------------+\n\nFrom MariaDB 10.0.2, it is possible to hold the same lock recursively. This example\nis viewed using the metadata_lock_info plugin:\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA |\nTABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |       \n  |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA |\nTABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |       \n  |\n+-----------+---------------------+---------------+-----------+--------------+-------\n----+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\nEmpty set (0.000 sec)\n','','https://mariadb.com/kb/en/library/release_lock/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (173,14,'SLEEP','Syntax\n------\nSLEEP(duration)\n\nDescription\n-----------\nSleeps (pauses) for the number of seconds given by the duration argument, then\nreturns 0. If SLEEP() is interrupted, it\nreturns 1. The duration may have a fractional part given in\nmicroseconds.\n\nStatements using the SLEEP() function are not safe for replication.\n\nExample\n-------\nSELECT SLEEP(5.5);\n+------------+\n| SLEEP(5.5) |\n+------------+\n|          0 |\n+------------+\n1 row in set (5.50 sec)\n','','https://mariadb.com/kb/en/library/sleep/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (174,14,'UUID','Syntax\n------\nUUID()\n\nDescription\n-----------\nReturns a Universally Unique Identifier (UUID).\n\nA UUID is designed as a number that is globally unique in space and time. Two\ncalls to UUID() are expected to generate two different\nvalues, even if these calls are performed on two separate computers that are\nnot connected to each other.\n\nUUID() results are intended to be unique, but cannot always be relied upon to\nunpredictable and unguessable, so should not be relied upon for these purposes.\n\nA UUID is a 128-bit number represented by a utf8 string of five\nhexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nformat:\n\nCurrently, the MAC address of an interface is taken into account only on FreeBSD and\nLinux. On other operating systems, MariaDB uses a randomly generated 48-bit number.\n\nStatements using the UUID() function are not safe for replication.\n\nThe results are generated according to the "DCE 1.1:Remote Procedure Call" (Appendix\nA) CAE (Common Applications Environment) Specifications published by The Open Group\nin October\n1997 (Document Number C706).\n\nExamples\n--------\nSELECT UUID();\n+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| cd41294a-afb0-11df-bc9b-00241dd75637 |\n+--------------------------------------+\n','','https://mariadb.com/kb/en/library/uuid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (175,14,'UUID_SHORT','Syntax\n------\nUUID_SHORT()\n\nDescription\n-----------\nReturns a "short" universally unique identifier as a 64-bit unsigned integer (rather\nthan a string-form 128-bit identifier as returned by the UUID() function).\n\nThe value of UUID_SHORT() is guaranteed to be unique if the\nfollowing conditions hold:\n\nThe UUID_SHORT() return value is constructed this way:\n (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n\nStatements using the UUID_SHORT() function are not safe for\nstatement-based replication.\n\nExamples\n--------\nSELECT UUID_SHORT();\n+-------------------+\n| UUID_SHORT()      |\n+-------------------+\n| 21517162376069120 |\n+-------------------+\n\ncreate table t1 (a bigint unsigned default(uuid_short()) primary key);\ninsert into t1 values(),();\nselect * from t1;\n+-------------------+\n| a                 |\n+-------------------+\n| 98113699159474176 |\n| 98113699159474177 |\n+-------------------+\n','','https://mariadb.com/kb/en/library/uuid_short/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (176,14,'VALUES / VALUE','Syntax\n------\n\nDescription\n-----------\nIn an INSERT ... ON DUPLICATE KEY UPDATE statement, you can use the VALUES(col_name)\nfunction in the  UPDATE clause to refer to column values from the  INSERT portion of\nthe statement. In other words,  VALUES(col_name) in the UPDATE clause refers to the\nvalue of col_name that would be inserted, had no duplicate-key conflict occurred.\n\nThis function is especially useful in multiple-row inserts.\n\nThe VALUES() function is meaningful only in INSERT ... ON DUPLICATE KEY UPDATE\nstatements and returns NULL otherwise.\n\nIn MariaDB 10.3.3 this function was renamed to VALUE(), because it's incompatible\nwith the standard Table Value Constructors syntax, implemented in MariaDB 10.3.3.\n\nThe VALUES() function can still be used even from MariaDB 10.3.3, but only in INSERT\n... ON DUPLICATE KEY UPDATE statements; it's a syntax error otherwise.\n\nExamples\n--------\n','','https://mariadb.com/kb/en/library/values-value/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (177,15,'!','Syntax\n------\nNOT, !\n\nDescription\n-----------\nLogical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand\nis non-zero, and NOT NULL returns NULL.\n\nBy default, the ! operator has a higher precedence. If the HIGH_NOT_PRECEDENCE\nSQL_MODE flag is set, NOT and ! have the same precedence.\n\nExamples\n--------\nSELECT NOT 10;\n+--------+\n| NOT 10 |\n+--------+\n|      0 |\n+--------+\n\nSELECT NOT 0;\n+-------+\n| NOT 0 |\n+-------+\n|     1 |\n+-------+\n\nSELECT NOT NULL;\n+----------+\n| NOT NULL |\n+----------+\n|     NULL |\n+----------+\n\nSELECT ! (1+1);\n+---------+\n| ! (1+1) |\n+---------+\n|       0 |\n+---------+\n\nSELECT ! 1+1;\n+-------+\n| ! 1+1 |\n+-------+\n|     1 |\n+-------+\n','','https://mariadb.com/kb/en/library/not/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (178,15,'&amp;&amp;','Syntax\n------\nAND, &&\n\nDescription\n-----------\nLogical AND. Evaluates to 1 if all operands are non-zero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.\n\nFor this operator, short-circuit evaluation can be used.\n\nExamples\n--------\nSELECT 1 && 1;\n+--------+\n| 1 && 1 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 1 && 0;\n+--------+\n| 1 && 0 |\n+--------+\n|      0 |\n+--------+\n\nSELECT 1 && NULL;\n+-----------+\n| 1 && NULL |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 0 && NULL;\n+-----------+\n| 0 && NULL |\n+-----------+\n|         0 |\n+-----------+\n\nSELECT NULL && 0;\n+-----------+\n| NULL && 0 |\n+-----------+\n|         0 |\n+-----------+\n','','https://mariadb.com/kb/en/library/and/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (179,15,'||','Syntax\n------\nOR, ||\n\nDescription\n-----------\nLogical OR. When both operands are non-NULL, the result is 1 if any\noperand is non-zero, and 0 otherwise. With a NULL operand, the result\nis 1 if the other operand is non-zero, and NULL otherwise. If both\noperands are NULL, the result is NULL.\n\nFor this operator, short-circuit evaluation can be used.\n\nNote that, if the PIPES_AS_CONCAT SQL_MODE is set, || is used as a string\nconcatenation operator. This means that a || b is the same as CONCAT(a,b). See\nCONCAT() for details.\n\nOracle Mode\n\nExamples\n--------\nSELECT 1 || 1;\n+--------+\n| 1 || 1 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 1 || 0;\n+--------+\n| 1 || 0 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 0 || 0;\n+--------+\n| 0 || 0 |\n+--------+\n|      0 |\n+--------+\n\nSELECT 0 || NULL;\n+-----------+\n| 0 || NULL |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 1 || NULL;\n+-----------+\n| 1 || NULL |\n+-----------+\n|         1 |\n+-----------+\n\nIn Oracle mode, from MariaDB 10.3:\nSELECT 0 || NULL;\n+-----------+\n| 0 || NULL |\n+-----------+\n| 0         |\n+-----------+\n','','https://mariadb.com/kb/en/library/or/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (180,15,'XOR','Syntax\n------\nXOR\n\nDescription\n-----------\nXOR stands for eXclusive OR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is non-zero,\notherwise 0 is returned.\n\nExamples\n--------\nSELECT 1 XOR 1;\n+---------+\n| 1 XOR 1 |\n+---------+\n|       0 |\n+---------+\n\nSELECT 1 XOR 0;\n+---------+\n| 1 XOR 0 |\n+---------+\n|       1 |\n+---------+\n\nSELECT 1 XOR NULL;\n+------------+\n| 1 XOR NULL |\n+------------+\n|       NULL |\n+------------+\n\nIn the following example, the right 1 XOR 1 is evaluated first, and returns 0. Then,\n1 XOR 0 is evaluated, and 1 is returned.\n\nSELECT 1 XOR 1 XOR 1;\n+---------------+\n| 1 XOR 1 XOR 1 |\n+---------------+\n|             1 |\n+---------------+\n','','https://mariadb.com/kb/en/library/xor/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (181,15,'Assignment Operator (=)','Syntax\n------\nidentifier = expr\n\nDescription\n-----------\nThe equal sign is used as both an assignment operator in certain contexts, and as a\ncomparison operator. When used as assignment operator, the value on the right is\nassigned to the variable (or column, in some contexts) on the left.\n\nSince its use can be ambiguous, unlike the := assignment operator, the = assignment\noperator cannot be used in all contexts, and is only valid as part of a SET\nstatement, or the SET clause of an UPDATE statement\nThis operator works with both user-defined variables and local variables.\n\nExamples\n--------\nUPDATE table_name SET x = 2 WHERE x > 100;\n\nSET @x = 1, @y := 2;\n','','https://mariadb.com/kb/en/library/assignment-operators-assignment-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (182,15,'Assignment Operator (:=)','Syntax\n------\nvar_name := expr\n\nDescription\n-----------\nAssignment operator for assigning a value. The value on the right is assigned to the\nvariable on left.\n\nUnlike the = operator, := can always be used to assign a value to a variable.\n\nThis operator works with both user-defined variables and local variables.\n\nWhen assigning the same value to several variables, LAST_VALUE() can be useful.\n\nExamples\n--------\n SELECT @x := 10;\n+----------+\n| @x := 10 |\n+----------+\n|       10 |\n+----------+\n\nSELECT @x, @y := @x;\n+------+----------+\n| @x   | @y := @x |\n+------+----------+\n|   10 |       10 |\n+------+----------+\n','','https://mariadb.com/kb/en/library/assignment-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (183,16,'Stored Aggregate Functions','Aggregate functions are functions that are computed over a sequence of rows and\nreturn one result for the sequence of rows.\n\nCreating a custom aggregate function is done using the CREATE FUNCTION statement with\ntwo main differences:\n\nStandard Syntax\n---------------\nCREATE AGGREGATE FUNCTION function_name (parameters) RETURNS return_type\nBEGIN\n   All types of declarations\n   DECLARE CONTINUE HANDLER FOR NOT FOUND RETURN return_val;\n   LOOP\n     FETCH GROUP NEXT ROW; // fetches next row from table\n     other instructions\n   END LOOP;\nEND\n\nStored aggregate functions were a 2016 Google Summer of Code project by Varun Gupta.\n\nUsing SQL/PL\n\nSET sql_mode=Oracle;\nDELIMITER //\n\nCREATE AGGREGATE FUNCTION function_name (parameters) RETURN return_type\n declarations\nBEGIN\n LOOP\n   FETCH GROUP NEXT ROW; -- fetches next row from table\n   -- other instructions\n\nEND LOOP;\nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n   RETURN return_val;\nEND //\n\nDELIMITER ;\n\nExamples\n--------\nFirst a simplified example:\nCREATE TABLE marks(stud_id INT, grade_count INT);\n\nINSERT INTO marks VALUES (1,6), (2,4), (3,7), (4,5), (5,8);\n\nSELECT * FROM marks;\n+---------+-------------+\n| stud_id | grade_count |\n+---------+-------------+\n|       1 |           6 |\n|       2 |           4 |\n|       3 |           7 |\n|       4 |           5 |\n|       5 |           8 |\n+---------+-------------+\n\nDELIMITER //\nCREATE AGGREGATE FUNCTION IF NOT EXISTS aggregate_count(x INT) RETURNS INT\nBEGIN\n DECLARE count_students INT DEFAULT 0;\n DECLARE CONTINUE HANDLER FOR NOT FOUND\n RETURN count_students;\n   LOOP\n     FETCH GROUP NEXT ROW;\n     IF x  THEN\n      SET count_students = count_students+1;\n     END IF;\n   END LOOP;\nEND //\nDELIMITER ;\n\nA non-trivial example that cannot easily be rewritten using existing functions:\nDELIMITER //\nCREATE AGGREGATE FUNCTION medi_int(x INT) RETURNS DOUBLE\nBEGIN\n DECLARE CONTINUE HANDLER FOR NOT FOUND\n  BEGIN\n   DECLARE res DOUBLE;\n   DECLARE cnt INT DEFAULT (SELECT COUNT(*) FROM tt);\n   DECLARE lim INT DEFAULT (cnt-1) DIV 2;\n   IF cnt % 2 = 0 THEN\n    SET res = (SELECT AVG(a) FROM (SELECT a FROM tt ORDER BY a LIMIT lim,2) ttt);\n   ELSE\n    SET res = (SELECT a FROM tt ORDER BY a LIMIT lim,1);\n   END IF;\n   DROP TEMPORARY TABLE tt;\n   RETURN res;\n  END;\n CREATE TEMPORARY TABLE tt (a INT);\n LOOP\n  FETCH GROUP NEXT ROW;\n  INSERT INTO tt VALUES (x);\n END LOOP;\nEND //\nDELIMITER ;\n\nSQL/PL Example\n\nThis uses the same marks table as created above.\n\nSET sql_mode=Oracle;\nDELIMITER //\n\nCREATE AGGREGATE FUNCTION aggregate_count(x INT) RETURN INT AS count_students INT\nDEFAULT 0;\nBEGIN\n LOOP\n   FETCH GROUP NEXT ROW;\n   IF x  THEN\n    SET count_students := count_students+1;\n   END IF;\n END LOOP;\nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n   RETURN count_students;\nEND aggregate_count //\nDELIMITER ;\n\nSELECT aggregate_count(stud_id) FROM marks;\n','','https://mariadb.com/kb/en/library/stored-aggregate-functions/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (184,16,'AVG','Syntax\n------\nAVG([DISTINCT] expr)\n\nDescription\n-----------\nReturns the average value of expr. The DISTINCT option can be used to return the\naverage of the distinct values of expr. NULL values are ignored. It is an aggregate\nfunction, and so can be used with the GROUP BY clause.\n\nAVG() returns NULL if there were no matching rows.\n\nFrom MariaDB 10.2.0, AVG() can be used as a window function.\n\nExamples\n--------\nCREATE TABLE sales (sales_value INT);\n\nINSERT INTO sales VALUES(10),(20),(20),(40);\n\nSELECT AVG(sales_value) FROM sales;\n+------------------+\n| AVG(sales_value) |\n+------------------+\n|          22.5000 |\n+------------------+\n\nSELECT AVG(DISTINCT(sales_value)) FROM sales;\n+----------------------------+\n| AVG(DISTINCT(sales_value)) |\n+----------------------------+\n|                    23.3333 |\n+----------------------------+\n\nCommonly, AVG() is used with a GROUP BY clause:\nCREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student VALUES \n ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, AVG(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | AVG(score) |\n+---------+------------+\n| Chun    |    74.0000 |\n| Esben   |    37.0000 |\n| Kaolin  |    72.0000 |\n| Tatiana |    85.0000 |\n+---------+------------+\n\nBe careful to avoid this common mistake, not grouping correctly and returning\nmismatched data: \nSELECT name,test,AVG(score) FROM student;\n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL  |         31 |\n+------+------+------------+\n\nAs a window function:\nCREATE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, test, score, AVG(score) OVER (PARTITION BY test) \n  AS average_by_test FROM student_test;\n+---------+--------+-------+-----------------+\n| name    | test   | score | average_by_test |\n+---------+--------+-------+-----------------+\n| Chun    | SQL    |    75 |         65.2500 |\n| Chun    | Tuning |    73 |         68.7500 |\n| Esben   | SQL    |    43 |         65.2500 |\n| Esben   | Tuning |    31 |         68.7500 |\n| Kaolin  | SQL    |    56 |         65.2500 |\n| Kaolin  | Tuning |    88 |         68.7500 |\n| Tatiana | SQL    |    87 |         65.2500 |\n| Tatiana | Tuning |    83 |         68.7500 |\n+---------+--------+-------+-----------------+\n','','https://mariadb.com/kb/en/library/avg/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (185,16,'BIT_AND','Syntax\n------\nBIT_AND(expr) [over_clause]\n\nDescription\n-----------\nReturns the bitwise AND of all bits in expr. The calculation is performed with 64-bit\n(BIGINT) precision. It is an aggregate function, and so can be used with the GROUP\nBY clause.\n\nIf no rows match, BIT_AND will return a value with all bits set to 1. NULL values\nhave no effect on the result unless all results are NULL, which is treated as\nno match.\n\nFrom MariaDB 10.2.0, BIT_AND can be used as a window function with the addition of\nthe over_clause.\n\nExamples\n--------\nCREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n\nAs an aggregate function:\nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n ('a',111),('a',110),('a',100),\n ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n\nNo match:\nSELECT BIT_AND(NULL);\n+----------------------+\n| BIT_AND(NULL)        |\n+----------------------+\n| 18446744073709551615 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/bit_and/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (186,16,'BIT_OR','Syntax\n------\nBIT_OR(expr) [over_clause]\n\nDescription\n-----------\nReturns the bitwise OR of all bits in expr. The calculation is performed with 64-bit\n(BIGINT) precision. It is an aggregate function, and so can be used with the GROUP\nBY clause.\n\nIf no rows match, BIT_OR will return a value with all bits set to 0. NULL values have\nno effect on the result unless all results are NULL, which is treated as no match.\n\nFrom MariaDB 10.2.0, BIT_OR can be used as a window function with the addition of\nthe over_clause.\n\nExamples\n--------\nCREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n\nAs an aggregate function:\nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n ('a',111),('a',110),('a',100),\n ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n\nNo match:\nSELECT BIT_OR(NULL);\n+--------------+\n| BIT_OR(NULL) |\n+--------------+\n|            0 |\n+--------------+\n','','https://mariadb.com/kb/en/library/bit_or/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (187,16,'BIT_XOR','Syntax\n------\nBIT_XOR(expr) [over_clause]\n\nDescription\n-----------\nReturns the bitwise XOR of all bits in expr. The calculation is performed with 64-bit\n(BIGINT) precision. It is an aggregate function, and so can be used with the GROUP\nBY clause.\n\nIf no rows match, BIT_XOR will return a value with all bits set to 0. NULL values\nhave no effect on the result unless all results are NULL, which is treated as\nno match.\n\nFrom MariaDB 10.2.0, BIT_XOR can be used as a window function with the addition of\nthe over_clause.\n\nExamples\n--------\nCREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n\nAs an aggregate function:\nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n ('a',111),('a',110),('a',100),\n ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n\nNo match:\nSELECT BIT_XOR(NULL);\n+---------------+\n| BIT_XOR(NULL) |\n+---------------+\n|             0 |\n+---------------+\n','','https://mariadb.com/kb/en/library/bit_xor/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (188,16,'COUNT','Syntax\n------\nCOUNT(expr)\n\nDescription\n-----------\nReturns a count of the number of non-NULL values of expr in the rows retrieved by a\nSELECT statement. The result is a BIGINT value. It is an aggregate function, and so\ncan be used with the GROUP BY clause.\n\nCOUNT(*) counts the total number of rows in a table.\n\nCOUNT() returns 0 if there were no matching rows.\n\nFrom MariaDB 10.2.0, COUNT() can be used as a window function.\n\nExamples\n--------\nCREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student VALUES \n ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT COUNT(*) FROM student;\n+----------+\n| COUNT(*) |\n+----------+\n|        8 |\n+----------+\n\nCOUNT(DISTINCT) example:\nSELECT COUNT(DISTINCT (name)) FROM student;\n+------------------------+\n| COUNT(DISTINCT (name)) |\n+------------------------+\n|                      4 |\n+------------------------+\n\nAs a window function\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, COUNT(score) OVER (PARTITION BY name) \n  AS tests_written FROM student_test;\n+---------+--------+-------+---------------+\n| name    | test   | score | tests_written |\n+---------+--------+-------+---------------+\n| Chun    | SQL    |    75 |             2 |\n| Chun    | Tuning |    73 |             2 |\n| Esben   | SQL    |    43 |             2 |\n| Esben   | Tuning |    31 |             2 |\n| Kaolin  | SQL    |    56 |             2 |\n| Kaolin  | Tuning |    88 |             2 |\n| Tatiana | SQL    |    87 |             1 |\n+---------+--------+-------+---------------+\n','','https://mariadb.com/kb/en/library/count/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (189,16,'GROUP_CONCAT','Syntax\n------\nGROUP_CONCAT(expr)\n\nDescription\n-----------\nThis function returns a string result with the concatenated non-NULL\nvalues from a group. It returns NULL if there are no non-NULL values.\n\nThe maximum returned length in bytes is determined by the group_concat_max_len server\nsystem variable, which defaults to 1M (>= MariaDB 10.2.4) or 1K (<= MariaDB 10.2.3).\n\nIf group_concat_max_len <= 512, the return type is VARBINARY or VARCHAR; otherwise,\nthe return type is BLOB or TEXT. The choice between binary or non-binary types\ndepends from the input.\n\nThe full syntax is as follows:\nGROUP_CONCAT([DISTINCT] expr [,expr ...]\n      [ORDER BY {unsigned_integer | col_name | expr}\n        [ASC | DESC] [,col_name ...]]\n      [SEPARATOR str_val]\n      [LIMIT {[offset,] row_count | row_count OFFSET offset}])\n\nDISTINCT eliminates duplicate values from the output string.\n\nORDER BY determines the order of returned values.\n\nSEPARATOR specifies a separator between the values. The default separator is a comma\n(,). It is possible to avoid using a separator by specifying an empty string.\n\nLIMIT\n\nExamples\n--------\nSELECT student_name,\n   GROUP_CONCAT(test_score)\n   FROM student\n   GROUP BY student_name;\n\nGet a readable list of MariaDB users from the mysql.user table:\nSELECT GROUP_CONCAT(DISTINCT User ORDER BY User SEPARATOR '\n')\n FROM mysql.user;\n\nIn the former example, DISTINCT is used because the same user may occur more than\nonce. The new line (\n) used as a SEPARATOR makes the results easier to read.\n\nGet a readable list of hosts from which each user can connect:\nSELECT User, GROUP_CONCAT(Host ORDER BY Host SEPARATOR ', ') \n FROM mysql.user GROUP BY User ORDER BY User;\n\nThe former example shows the difference between the GROUP_CONCAT's ORDER BY (which\nsorts the concatenated hosts), and the SELECT's ORDER BY (which sorts the rows).\n\nFrom MariaDB 10.3.3, LIMIT can be used with GROUP_CONCAT, so, for example, given the\nfollowing table:\nCREATE TABLE d (dd DATE, cc INT);\n\nINSERT INTO d VALUES ('2017-01-01',1);\nINSERT INTO d VALUES ('2017-01-02',2);\nINSERT INTO d VALUES ('2017-01-04',3);\n\nthe following query:\nSELECT SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC),",",1)\nFROM d;\n+----------------------------------------------------------------------------+\n| SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC),",",1) |\n+----------------------------------------------------------------------------+\n| 2017-01-04:3                                                               |\n+----------------------------------------------------------------------------+\n\ncan be more simply rewritten as:\nSELECT GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC LIMIT 1) FROM d;\n+-------------------------------------------------------------+\n| GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC LIMIT 1) |\n+-------------------------------------------------------------+\n| 2017-01-04:3                                                |\n+-------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/group_concat/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (190,16,'MAX','Syntax\n------\nMAX([DISTINCT] expr)\n\nDescription\n-----------\nReturns the largest, or maximum, value of expr. MAX() can also take a string\nargument in which case it returns the maximum string value. The DISTINCT\nkeyword can be used to find the maximum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.\n\nNote that SET and ENUM fields are currently compared by their string value rather\nthan their relative position in the set, so MAX() may produce a different highest\nresult than ORDER BY DESC.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, MAX() can be used as a window function.\n\nMAX() returns NULL if there were no matching rows.\n\nExamples\n--------\nCREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student VALUES \n ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, MAX(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | MAX(score) |\n+---------+------------+\n| Chun    |         75 |\n| Esben   |         43 |\n| Kaolin  |         88 |\n| Tatiana |         87 |\n+---------+------------+\n\nMAX string:\nSELECT MAX(name) FROM student;\n+-----------+\n| MAX(name) |\n+-----------+\n| Tatiana   |\n+-----------+\n\nBe careful to avoid this common mistake, not grouping correctly and returning\nmismatched data: \nSELECT name,test,MAX(SCORE) FROM student;\n+------+------+------------+\n| name | test | MAX(SCORE) |\n+------+------+------------+\n| Chun | SQL  |         88 |\n+------+------+------------+\n\nDifference between ORDER BY DESC and MAX():\nCREATE TABLE student2(name CHAR(10),grade ENUM('b','c','a'));\n\nINSERT INTO student2 VALUES('Chun','b'),('Esben','c'),('Kaolin','a');\n\nSELECT MAX(grade) FROM student2;\n+------------+\n| MAX(grade) |\n+------------+\n| c          |\n+------------+\n\nSELECT grade FROM student2 ORDER BY grade DESC LIMIT 1;\n+-------+\n| grade |\n+-------+\n| a     |\n+-------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, MAX(score) \n OVER (PARTITION BY name) AS highest_score FROM student_test;\n+---------+--------+-------+---------------+\n| name    | test   | score | highest_score |\n+---------+--------+-------+---------------+\n| Chun    | SQL    |    75 |            75 |\n| Chun    | Tuning |    73 |            75 |\n| Esben   | SQL    |    43 |            43 |\n| Esben   | Tuning |    31 |            43 |\n| Kaolin  | SQL    |    56 |            88 |\n| Kaolin  | Tuning |    88 |            88 |\n| Tatiana | SQL    |    87 |            87 |\n+---------+--------+-------+---------------+\n','','https://mariadb.com/kb/en/library/max/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (191,16,'MIN','Syntax\n------\nMIN([DISTINCT] expr)\n\nDescription\n-----------\nReturns the minimum value of expr. MIN() may take a string\nargument, in which case it returns the minimum string value. The DISTINCT\nkeyword can be used to find the minimum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.\n\nNote that SET and ENUM fields are currently compared by their string value rather\nthan their relative position in the set, so MIN() may produce a different lowest\nresult than ORDER BY ASC.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, MIN() can be used as a window function.\n\nMIN() returns NULL if there were no matching rows.\n\nExamples\n--------\nCREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student VALUES \n ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, MIN(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | MIN(score) |\n+---------+------------+\n| Chun    |         73 |\n| Esben   |         31 |\n| Kaolin  |         56 |\n| Tatiana |         83 |\n+---------+------------+\n\nMIN() with a string:\nSELECT MIN(name) FROM student;\n+-----------+\n| MIN(name) |\n+-----------+\n| Chun      |\n+-----------+\n\nBe careful to avoid this common mistake, not grouping correctly and returning\nmismatched data: \nSELECT name,test,MIN(score) FROM student;\n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL  |         31 |\n+------+------+------------+\n\nDifference between ORDER BY ASC and MIN():\nCREATE TABLE student2(name CHAR(10),grade ENUM('b','c','a'));\n\nINSERT INTO student2 VALUES('Chun','b'),('Esben','c'),('Kaolin','a');\n\nSELECT MIN(grade) FROM student2;\n+------------+\n| MIN(grade) |\n+------------+\n| a          |\n+------------+\n\nSELECT grade FROM student2 ORDER BY grade ASC LIMIT 1;\n+-------+\n| grade |\n+-------+\n| b     |\n+-------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, MIN(score) \n OVER (PARTITION BY name) AS lowest_score FROM student_test;\n+---------+--------+-------+--------------+\n| name    | test   | score | lowest_score |\n+---------+--------+-------+--------------+\n| Chun    | SQL    |    75 |           73 |\n| Chun    | Tuning |    73 |           73 |\n| Esben   | SQL    |    43 |           31 |\n| Esben   | Tuning |    31 |           31 |\n| Kaolin  | SQL    |    56 |           56 |\n| Kaolin  | Tuning |    88 |           56 |\n| Tatiana | SQL    |    87 |           87 |\n+---------+--------+-------+--------------+\n','','https://mariadb.com/kb/en/library/min/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (192,16,'STD','Syntax\n------\nSTD(expr)\n\nDescription\n-----------\nReturns the population standard deviation of expr. This is an extension\nto standard SQL. The standard SQL function STDDEV_POP() can\nbe used instead.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, STD() can be used as a window function.\n\nThis function returns NULL if there were no matching rows.\n\nExamples\n--------\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n','','https://mariadb.com/kb/en/library/std/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (193,16,'STDDEV','Syntax\n------\nSTDDEV(expr)\n\nDescription\n-----------\nReturns the population standard deviation of expr. This function is\nprovided for compatibility with Oracle. The standard SQL function\nSTDDEV_POP() can be used instead.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, STDDEV() can be used as a window function.\n\nThis function returns NULL if there were no matching rows.\n\nExamples\n--------\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n','','https://mariadb.com/kb/en/library/stddev/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (194,16,'STDDEV_POP','Syntax\n------\nSTDDEV_POP(expr)\n\nDescription\n-----------\nReturns the population standard deviation of expr (the square root of\nVAR_POP()). You can also use STD() or\nSTDDEV(), which are equivalent but not standard SQL.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, STDDEV_POP() can be used as a window function.\n\nSTDDEV_POP() returns NULL if there were no matching rows.\n\nExamples\n--------\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n','','https://mariadb.com/kb/en/library/stddev_pop/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (195,16,'STDDEV_SAMP','Syntax\n------\nSTDDEV_SAMP(expr)\n\nDescription\n-----------\nReturns the sample standard deviation of expr (the square root of VAR_SAMP()).\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, STDDEV_SAMP() can be used as a window function.\n\nSTDDEV_SAMP() returns NULL if there were no matching rows.\n','','https://mariadb.com/kb/en/library/stddev_samp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (196,16,'SUM','Syntax\n------\nSUM([DISTINCT] expr)\n\nDescription\n-----------\nReturns the sum of expr. If the return set has no rows, SUM() returns\nNULL. The DISTINCT keyword can be used to sum only the distinct values\nof expr.\n\nFrom MariaDB 10.2.0, SUM() can be used as a window function, although not with the\nDISTINCT specifier.\n\nExamples\n--------\nCREATE TABLE sales (sales_value INT);\nINSERT INTO sales VALUES(10),(20),(20),(40);\n\nSELECT SUM(sales_value) FROM sales;\n+------------------+\n| SUM(sales_value) |\n+------------------+\n|               90 |\n+------------------+\n\nSELECT SUM(DISTINCT(sales_value)) FROM sales;\n+----------------------------+\n| SUM(DISTINCT(sales_value)) |\n+----------------------------+\n|                         70 |\n+----------------------------+\n\nCommonly, SUM is used with a GROUP BY clause:\nCREATE TABLE sales (name CHAR(10), month CHAR(10), units INT);\n\nINSERT INTO sales VALUES \n ('Chun', 'Jan', 75), ('Chun', 'Feb', 73),\n ('Esben', 'Jan', 43), ('Esben', 'Feb', 31),\n ('Kaolin', 'Jan', 56), ('Kaolin', 'Feb', 88),\n ('Tatiana', 'Jan', 87), ('Tatiana', 'Feb', 83);\n\nSELECT name, SUM(units) FROM sales GROUP BY name;\n+---------+------------+\n| name    | SUM(units) |\n+---------+------------+\n| Chun    |        148 |\n| Esben   |         74 |\n| Kaolin  |        144 |\n| Tatiana |        170 |\n+---------+------------+\n\nThe GROUP BY clause is required when using an aggregate function along with regular\ncolumn data, otherwise the result will be a mismatch, as in the following common type\nof mistake:\nSELECT name,SUM(units) FROM sales\n;+------+------------+\n| name | SUM(units) |\n+------+------------+\n| Chun |        536 |\n+------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, SUM(score) OVER (PARTITION BY name) AS total_score\nFROM student_test;\n+---------+--------+-------+-------------+\n| name    | test   | score | total_score |\n+---------+--------+-------+-------------+\n| Chun    | SQL    |    75 |         148 |\n| Chun    | Tuning |    73 |         148 |\n| Esben   | SQL    |    43 |          74 |\n| Esben   | Tuning |    31 |          74 |\n| Kaolin  | SQL    |    56 |         144 |\n| Kaolin  | Tuning |    88 |         144 |\n| Tatiana | SQL    |    87 |          87 |\n+---------+--------+-------+-------------+\n','','https://mariadb.com/kb/en/library/sum/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (197,16,'VARIANCE','Syntax\n------\nVARIANCE(expr)\n\nDescription\n-----------\nReturns the population standard variance of expr. This is an extension to\nstandard SQL. The standard SQL function VAR_POP() can be used\ninstead.\n\nVariance is calculated by\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, VARIANCE() can be used as a window function.\n\nVARIANCE() returns NULL if there were no matching rows.\n\nExamples\n--------\nCREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|      1.0000 |\n+-------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|    200.5000 |\n+-------------+\n\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n| Tatiana | SQL    |    87 |         287.1875 |\n+---------+--------+-------+------------------+\n','','https://mariadb.com/kb/en/library/variance/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (198,16,'VAR_POP','Syntax\n------\nVAR_POP(expr)\n\nDescription\n-----------\nReturns the population standard variance of expr. It considers rows as\nthe whole population, not as a sample, so it has the number of rows as\nthe denominator. You can also use VARIANCE(), which is equivalent but\nis not standard SQL.\n\nVariance is calculated by\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, VAR_POP() can be used as a window function.\n\nVAR_POP() returns NULL if there were no matching rows.\n\nExamples\n--------\nCREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|     1.0000 |\n+------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|   200.5000 |\n+------------+\n\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Tatiana | SQL    |    87 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n+---------+--------+-------+------------------+\n','','https://mariadb.com/kb/en/library/var_pop/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (199,16,'VAR_SAMP','Syntax\n------\nVAR_SAMP(expr)\n\nDescription\n-----------\nReturns the sample variance of expr. That is, the denominator is the number of rows\nminus one.\n\nIt is an aggregate function, and so can be used with the GROUP BY clause.\n\nFrom MariaDB 10.2.2, VAR_SAMP() can be used as a window function.\n\nVAR_SAMP() returns NULL if there were no matching rows.\n\nExamples\n--------\nAs an aggregate function:\nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n ('a',1),('a',2),('a',3),\n ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n\nAs a window function:\nCREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73),\n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31),\n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88),\n  ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_SAMP(score) \n OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         382.9167 |\n| Chun    | Tuning |    73 |         873.0000 |\n| Esben   | SQL    |    43 |         382.9167 |\n| Esben   | Tuning |    31 |         873.0000 |\n| Kaolin  | SQL    |    56 |         382.9167 |\n| Kaolin  | Tuning |    88 |         873.0000 |\n| Tatiana | SQL    |    87 |         382.9167 |\n+---------+--------+-------+------------------+\n','','https://mariadb.com/kb/en/library/var_samp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (200,17,'BENCHMARK','Syntax\n------\nBENCHMARK(count,expr)\n\nDescription\n-----------\nThe BENCHMARK() function executes the expression expr repeatedly count\ntimes. It may be used to time how quickly MariaDB processes the\nexpression. The result value is always 0. The intended use is from\nwithin the mysql client, which reports query execution times.\n\nExamples\n--------\nSELECT BENCHMARK(1000000,ENCODE('hello','goodbye'));\n+----------------------------------------------+\n| BENCHMARK(1000000,ENCODE('hello','goodbye')) |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\n1 row in set (0.21 sec)\n','','https://mariadb.com/kb/en/library/benchmark/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (201,17,'BINLOG_GTID_POS','Syntax\n------\nBINLOG_GTID_POS(binlog_filename,binlog_offset)\n\nDescription\n-----------\nThe BINLOG_GTID_POS() function takes as input an old-style binary log position in the\nform of a file name and a file offset. It looks up the position in the current\nbinlog, and returns a string representation of the corresponding GTID position. If\nthe position is not found in the current binlog, NULL is returned.\n\nExamples\n--------\nSELECT BINLOG_GTID_POS("master-bin.000001", 600);\n','','https://mariadb.com/kb/en/library/binlog_gtid_pos/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (202,17,'CHARSET','Syntax\n------\nCHARSET(str)\n\nDescription\n-----------\nReturns the character set of the string argument. If str is not a string, it is\nconsidered as a binary string (so the function returns 'binary'). This applies to\nNULL, too.  The return value is a string in the utf8 character set.\n\nExamples\n--------\nSELECT CHARSET('abc');\n+----------------+\n| CHARSET('abc') |\n+----------------+\n| latin1         |\n+----------------+\n\nSELECT CHARSET(CONVERT('abc' USING utf8));\n+------------------------------------+\n| CHARSET(CONVERT('abc' USING utf8)) |\n+------------------------------------+\n| utf8                               |\n+------------------------------------+\n\nSELECT CHARSET(USER());\n+-----------------+\n| CHARSET(USER()) |\n+-----------------+\n| utf8            |\n+-----------------+\n','','https://mariadb.com/kb/en/library/charset/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (203,17,'COERCIBILITY','Syntax\n------\nCOERCIBILITY(str)\n\nDescription\n-----------\nReturns the collation coercibility value of the string argument. Coercibility defines\nwhat will be converted to what in case of collation conflict, with an expression with\nhigher coercibility being converted to the collation of an expression with\nlower coercibility.\n\n+-----------------------------------------------+------------------------------------\n----------+-----------------------------------------------+\n|Coercibility                                   |Description                         \n     |Example                                        |\n|0                                              |Explicit                            \n     |Value using a COLLATE clause                   |\n|1                                              |No collation                        \n     |Concatenated strings using different collations|\n|2                                              |Implicit                            \n     |Column value                                   |\n|3                                              |Constant                            \n     |USER() return value                            |\n|4                                              |Coercible                           \n     |Literal string                                 |\n|5                                              |Ignorable                           \n     |NULL or derived from NULL                      |\n+-----------------------------------------------+------------------------------------\n----------+-----------------------------------------------+\n\nExamples\n--------\nSELECT COERCIBILITY('abc' COLLATE latin1_swedish_ci);\n+-----------------------------------------------+\n| COERCIBILITY('abc' COLLATE latin1_swedish_ci) |\n+-----------------------------------------------+\n|                                             0 |\n+-----------------------------------------------+\n\nSELECT COERCIBILITY(USER());\n+----------------------+\n| COERCIBILITY(USER()) |\n+----------------------+\n|                    3 |\n+----------------------+\n\nSELECT COERCIBILITY('abc');\n+---------------------+\n| COERCIBILITY('abc') |\n+---------------------+\n|                   4 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/coercibility/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (204,17,'COLLATION','Syntax\n------\nCOLLATION(str)\n\nDescription\n-----------\nReturns the collation of the string argument. If str is not a string, it is\nconsidered as a binary string (so the function returns 'binary'). This applies to\nNULL, too.  The return value is a string in the utf8 character set.\n\nSee Character Sets and Collations.\n\nExamples\n--------\nSELECT COLLATION('abc');\n+-------------------+\n| COLLATION('abc')  |\n+-------------------+\n| latin1_swedish_ci |\n+-------------------+\n\nSELECT COLLATION(_utf8'abc');\n+-----------------------+\n| COLLATION(_utf8'abc') |\n+-----------------------+\n| utf8_general_ci       |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/collation/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (205,17,'CONNECTION_ID','Syntax\n------\nCONNECTION_ID()\n\nDescription\n-----------\nReturns the connection ID (thread ID) for the connection. Every\nthread (including events) has an ID that is unique among the set of currently\nconnected clients.\n\nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10), in all cases. From\nMariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n\nExamples\n--------\nSELECT CONNECTION_ID();\n+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n|               3 |\n+-----------------+\n','','https://mariadb.com/kb/en/library/connection_id/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (206,17,'CURRENT_ROLE','Syntax\n------\nCURRENT_ROLE, CURRENT_ROLE()\n\nDescription\n-----------\nReturns the current role name. This determines your access privileges. The return\nvalue is a string in the\nutf8 character set.\n\nIf there is no current role, NULL is returned.\n\nThe output of SELECT CURRENT_ROLE is equivalent to the contents of the ENABLED_ROLES\nInformation Schema table.\n\nUSER() returns the combination of user and host used to login. CURRENT_USER() returns\nthe account used to determine current connection's privileges.\n\nExamples\n--------\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE staff;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff        |\n+--------------+\n','','https://mariadb.com/kb/en/library/current_role/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (207,17,'CURRENT_USER','Syntax\n------\nCURRENT_USER, CURRENT_USER()\n\nDescription\n-----------\nReturns the user name and host name combination for the MariaDB account\nthat the server used to authenticate the current client. This account\ndetermines your access privileges. The return value is a string in the\nutf8 character set.\n\nThe value of CURRENT_USER() can differ from the value of USER(). CURRENT_ROLE()\nreturns the current active role.\n\nExamples\n--------\nshell> mysql --user="anonymous"\n\nselect user(),current_user();\n+---------------------+----------------+\n| user()              | current_user() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n\nWhen calling CURRENT_USER() in a stored procedure, it returns the owner of the stored\nprocedure, as defined with DEFINER.\n','','https://mariadb.com/kb/en/library/current_user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (208,17,'DATABASE','Syntax\n------\nDATABASE()\n\nDescription\n-----------\nReturns the default (current) database name as a string in the utf8 character set. If\nthere is no default database, DATABASE() returns NULL. Within a stored routine, the\ndefault database is the database that the routine is associated with, which is not\nnecessarily the same as the database that is the default in the calling context.\n\nSCHEMA() is a synonym for DATABASE().\n\nTo select a default database, the USE statement can be run. Another way to set the\ndefault database is specifying its name at mysql command line client startup.\n\nExamples\n--------\nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| NULL       |\n+------------+\n\nUSE test;\nDatabase changed\n\nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| test       |\n+------------+\n','','https://mariadb.com/kb/en/library/database/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (209,17,'DECODE_HISTOGRAM','Syntax\n------\nDECODE_HISTOGRAM(hist_type,histogram)\n\nDescription\n-----------\nReturns a string of comma separated numeric values corresponding to a probability\ndistribution represented by the histogram of type hist_type (SINGLE_PREC_HB or\nDOUBLE_PREC_HB). The hist_type and histogram would be commonly used from the\nmysql.column_stats table.\n\nSee Histogram Based Statistics for details.\n\nExamples\n--------\nCREATE TABLE origin (\n i INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n v INT UNSIGNED NOT NULL\n);\n\nINSERT INTO origin(v) VALUES \n (1),(2),(3),(4),(5),(10),(20),\n (30),(40),(50),(60),(70),(80),\n (90),(100),(200),(400),(800);\n\nSET histogram_size=10,histogram_type=SINGLE_PREC_HB;\n\nANALYZE TABLE origin PERSISTENT FOR ALL;\n+-------------+---------+----------+-----------------------------------------+\n| Table       | Op      | Msg_type | Msg_text                                |\n+-------------+---------+----------+-----------------------------------------+\n| test.origin | analyze | status   | Engine-independent statistics collected |\n| test.origin | analyze | status   | OK                                      |\n+-------------+---------+----------+-----------------------------------------+\n\nSELECT db_name,table_name,column_name,hist_type,\n hex(histogram),decode_histogram(hist_type,histogram)\n FROM mysql.column_stats WHERE db_name='test' and table_name='origin';\n+---------+------------+-------------+----------------+----------------------+-------\n-----------------------------------------------------------+\n| db_name | table_name | column_name | hist_type      | hex(histogram)       |\ndecode_histogram(hist_type,histogram)                             |\n+---------+------------+-------------+----------------+----------------------+-------\n-----------------------------------------------------------+\n| test    | origin     | i           | SINGLE_PREC_HB | 0F2D3C5A7887A5C3D2F0 |\n0.059,0.118,0.059,0.118,0.118,0.059,0.118,0.118,0.059,0.118,0.059 |\n| test    | origin     | v           | SINGLE_PREC_HB | 000001060C0F161C1F7F |\n0.000,0.000,0.004,0.020,0.024,0.012,0.027,0.024,0.012,0.376,0.502 |\n+---------+------------+-------------+----------------+----------------------+-------\n-----------------------------------------------------------+\n\nSET histogram_size=20,histogram_type=DOUBLE_PREC_HB;\n\nANALYZE TABLE origin PERSISTENT FOR ALL;\n+-------------+---------+----------+-----------------------------------------+\n| Table       | Op      | Msg_type | Msg_text                                |\n+-------------+---------+----------+-----------------------------------------+\n| test.origin | analyze | status   | Engine-independent statistics collected |\n| test.origin | analyze | status   | OK                                      |\n+-------------+---------+----------+-----------------------------------------+\n\nSELECT db_name,table_name,column_name,\n hist_type,hex(histogram),decode_histogram(hist_type,histogram)\n FROM mysql.column_stats WHERE db_name='test' and table_name='origin';\n+---------+------------+-------------+----------------+------------------------------\n-----------+-------------------------------------------------------------------------\n---------------+\n| db_name | table_name | column_name | hist_type      | hex(histogram)               \n     | decode_histogram(hist_type,histogram)\n       |\n+---------+------------+-------------+----------------+------------------------------\n-----------+-------------------------------------------------------------------------\n---------------+\n| test    | origin     | i           | DOUBLE_PREC_HB |\n0F0F2D2D3C3C5A5A78788787A5A5C3C3D2D2F0F0 |\n\n882,0.11765,0.05882,0.11765,0.11765,0.05882,0.11765,0.11765,0.05882,0.11765,0.05882 |\n| test    | origin     | v           | DOUBLE_PREC_HB |\n5200F600480116067E0CB30F1B16831CB81FD67F |\n\n125,0.00250,0.00125,0.01877,0.02502,0.01253,0.02502,0.02502,0.01253,0.37546,0.50063 |\n','','https://mariadb.com/kb/en/library/decode_histogram/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (210,17,'DEFAULT','Syntax\n------\nDEFAULT(col_name)\n\nDescription\n-----------\nReturns the default value for a table column. If the column has no default value (and\nis not NULLABLE - NULLABLE fields have a NULL default), an error is returned.\n\nFor integer columns using AUTO_INCREMENT, 0 is returned.\n\nWhen using DEFAULT as a value to set in an INSERT or UPDATE\nstatement, you can use the bare keyword DEFAULT without the parentheses and\nargument to\nrefer to the column in context. You can only use DEFAULT as a bare keyword if you are\nusing it\nalone without a surrounding expression or function.\n\nExamples\n--------\nSelect only non-default values for a column:\nSELECT i FROM t WHERE i != DEFAULT(i);\n\nUpdate values to be one greater than the default value:\nUPDATE t SET i = DEFAULT(i)+1 WHERE i < 100;\n\nWhen referring to the default value exactly in UPDATE or INSERT,\nyou can omit the argument:\nINSERT INTO t (i) VALUES (DEFAULT);\nUPDATE t SET i = DEFAULT WHERE i < 100;\n\nCREATE OR REPLACE TABLE t (\n i INT NOT NULL AUTO_INCREMENT,\n j INT NOT NULL,\n k INT DEFAULT 3,\n l INT NOT NULL DEFAULT 4,\n m INT,\n PRIMARY KEY (i)\n);\n\nDESC t;\n+-------+---------+------+-----+---------+----------------+\n| Field | Type    | Null | Key | Default | Extra          |\n+-------+---------+------+-----+---------+----------------+\n| i     | int(11) | NO   | PRI | NULL    | auto_increment |\n| j     | int(11) | NO   |     | NULL    |                |\n| k     | int(11) | YES  |     | 3       |                |\n| l     | int(11) | NO   |     | 4       |                |\n| m     | int(11) | YES  |     | NULL    |                |\n+-------+---------+------+-----+---------+----------------+\n\nINSERT INTO t (j) VALUES (1);\nINSERT INTO t (j,m) VALUES (2,2);\nINSERT INTO t (j,l,m) VALUES (3,3,3);\n\nSELECT * FROM t;\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m) FROM t;\n+------------+------------+-------------+------------+\n| DEFAULT(i) | DEFAULT(k) | DEFAULT (l) | DEFAULT(m) |\n+------------+------------+-------------+------------+\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n+------------+------------+-------------+------------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m), DEFAULT(j)  FROM t;\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE i = DEFAULT(i);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE j = DEFAULT(j);\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE k = DEFAULT(k);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE l = DEFAULT(l);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE m = DEFAULT(m);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE m <=> DEFAULT(m);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n+---+---+------+---+------+\n','','https://mariadb.com/kb/en/library/default/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (211,17,'FOUND_ROWS','Syntax\n------\nFOUND_ROWS()\n\nDescription\n-----------\nA SELECT statement may include a LIMIT clause to restrict the number\nof rows the server returns to the client. In some cases, it is\ndesirable to know how many rows the statement would have returned\nwithout the LIMIT, but without running the statement again. To obtain\nthis row count, include a SQL_CALC_FOUND_ROWS option in the SELECT\nstatement, and then invoke FOUND_ROWS() afterwards.\n\nYou can also use FOUND_ROWS() to obtain the number of rows returned by a SELECT which\ndoes not contain a LIMIT clause. In this case you don't need to use the\nSQL_CALC_FOUND_ROWS option. This can be useful for example in a stored procedure.\n\nAlso, this function works with some other statements which return a resultset,\nincluding SHOW, DESC and HELP. For DELETE ... RETURNING you should use ROW_COUNT().\n\nIt also works as a prepared statement, or after executing a prepared statement.\n\nStatements which don't return any results don't affect FOUND_ROWS() - the previous\nvalue will still be returned.\n\nWarning: When used after a CALL statement, this function returns the number of rows\nselected by the last query in the procedure, not by the whole procedure.\n\nStatements using the FOUND_ROWS() function are not safe for replication.\n\nExamples\n--------\nSHOW ENGINES;\n+--------------------+---------+-----------------------------------------------------\n----------+--------------+------+------------+\n| Engine             | Support | Comment                                             \n     | Transactions | XA   | Savepoints |\n+--------------------+---------+-----------------------------------------------------\n----------+--------------+------+------------+\n| InnoDB             | DEFAULT | Supports transactions, row-level locking, and\nforeign keys     | YES          | YES  | YES        |\n...\n| SPHINX             | YES     | Sphinx storage engine                               \n     | NO           | NO   | NO         |\n+--------------------+---------+-----------------------------------------------------\n----------+--------------+------+------------+\n11 rows in set (0.01 sec)\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           11 |\n+--------------+\n\nSELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           23 |\n+--------------+\n','','https://mariadb.com/kb/en/library/found_rows/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (212,17,'LAST_INSERT_ID','Syntax\n------\nLAST_INSERT_ID(), LAST_INSERT_ID(expr)\n\nDescription\n-----------\nLAST_INSERT_ID() (no arguments) returns\nthe first automatically generated value successfully inserted for an\nAUTO_INCREMENT column as a result of the most recently executed INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged if no rows\nare successfully inserted.\n\nIf one gives an argument to LAST_INSERT_ID(), then it will return the value of the\nexpression and\nthe next call to LAST_INSERT_ID() will return the same value. The value will also be\nsent to the client\nand can be accessed by the mysql_insert_id function.\n\nFor example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                9 |\n+------------------+\n\nYou can also use LAST_INSERT_ID() to delete the last inserted row:\nDELETE FROM product WHERE id = LAST_INSERT_ID();\n\nIf no rows were successfully inserted, LAST_INSERT_ID() returns 0.\n\nThe value of LAST_INSERT_ID() will be consistent across all versions\nif all rows in the INSERT or UPDATE statement were successful.\n\nThe currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() will remain\nstable in the second statement; its value for the second and later\nrows is not affected by the earlier row insertions. (However, if you\nmix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the\neffect is undefined.)\nIf the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of\nLAST_INSERT_ID() is left undefined. For manual ROLLBACK, the value of\nLAST_INSERT_ID() is not restored to that before the transaction; it\nremains as it was at the point of the ROLLBACK.\n\nWithin the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:\n\nExamples\n--------\nCREATE TABLE t (\n id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n f VARCHAR(1))\nENGINE = InnoDB;\n\nINSERT INTO t(f) VALUES('a');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nINSERT INTO t(f) VALUES('b');\n\nINSERT INTO t(f) VALUES('c');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n\nINSERT INTO t(f) VALUES('d'),('e');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                4 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|               12 |\n+------------------+\n\nINSERT INTO t(f) VALUES('f');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                6 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nINSERT INTO t(f) VALUES('g');\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n|  7 | g    |\n+----+------+\n','','https://mariadb.com/kb/en/library/last_insert_id/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (213,17,'LAST_VALUE','Syntax\n------\nLAST_VALUE(expr,[expr,...])\n\nLAST_VALUE(expr) OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nLAST_VALUE() evaluates all expressions and returns the last.\n\nThis is useful together with setting user variables to a value with @var:=expr, for\nexample when you want to get data of rows updated/deleted without having to do two\nqueries against the table.\n\nSince MariaDB 10.2.2, LAST_VALUE can be used as a window function.\n\nReturns NULL if no last value exists.\n\nExamples\n--------\nCREATE TABLE t1 (a int, b int);\nINSERT INTO t1 VALUES(1,10),(2,20);\nDELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);\nSELECT @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |   10 |\n+------+------+\n\nAs a window function:\nCREATE TABLE t1 (\n pk int primary key,\n a int,\n b int,\n c char(10),\n d decimal(10, 3),\n e real\n);\n\nINSERT INTO t1 VALUES\n( 1, 0, 1,    'one',    0.1,  0.001),\n( 2, 0, 2,    'two',    0.2,  0.002),\n( 3, 0, 3,    'three',  0.3,  0.003),\n( 4, 1, 2,    'three',  0.4,  0.004),\n( 5, 1, 1,    'two',    0.5,  0.005),\n( 6, 1, 1,    'one',    0.6,  0.006),\n( 7, 2, NULL, 'n_one',  0.5,  0.007),\n( 8, 2, 1,    'n_two',  NULL, 0.008),\n( 9, 2, 2,    NULL,     0.7,  0.009),\n(10, 2, 0,    'n_four', 0.8,  0.010),\n(11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n     LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n     FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n     LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n\n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 |         1 |       11 |         11 |        11 |\n| 10 |         1 |       10 |         11 |        10 |\n|  9 |         1 |        9 |         11 |         9 |\n|  8 |         1 |        8 |         11 |         8 |\n|  7 |         1 |        7 |         11 |         7 |\n|  6 |         1 |        6 |         11 |         6 |\n|  5 |         1 |        5 |         11 |         5 |\n|  4 |         1 |        4 |         11 |         4 |\n|  3 |         1 |        3 |         11 |         3 |\n|  2 |         1 |        2 |         11 |         2 |\n|  1 |         1 |        1 |         11 |         1 |\n+----+-----------+----------+------------+-----------+\n\nCREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n\nSELECT i,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)\nAS f_1p1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING)\nAS f_2p1p,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)\nAS f_1f2f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f\nFROM t1;\n\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i    | f_1f | l_1f | f_1p1f | f_1p1f | f_2p1p | f_2p1p | f_1f2f | f_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n|    1 |    1 |    2 |      1 |      2 |   NULL |   NULL |      2 |      3 |\n|    2 |    2 |    3 |      1 |      3 |      1 |      1 |      3 |      4 |\n|    3 |    3 |    4 |      2 |      4 |      1 |      2 |      4 |      5 |\n|    4 |    4 |    5 |      3 |      5 |      2 |      3 |      5 |      6 |\n|    5 |    5 |    6 |      4 |      6 |      3 |      4 |      6 |      7 |\n|    6 |    6 |    7 |      5 |      7 |      4 |      5 |      7 |      8 |\n|    7 |    7 |    8 |      6 |      8 |      5 |      6 |      8 |      9 |\n|    8 |    8 |    9 |      7 |      9 |      6 |      7 |      9 |     10 |\n|    9 |    9 |   10 |      8 |     10 |      7 |      8 |     10 |     10 |\n|   10 |   10 |   10 |      9 |     10 |      8 |      9 |   NULL |   NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n','','https://mariadb.com/kb/en/library/last_value/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (214,17,'PROCEDURE ANALYSE','Syntax\n------\nanalyse([max_elements[,max_memory]])\n\nDescription\n-----------\nThis procedure is defined in the sql/sql_analyse.cc file. It examines\nthe result from a query and returns an analysis of the results that\nsuggests optimal data types for each column. To obtain this analysis,\nappend PROCEDURE ANALYSE to the end of a SELECT statement:\nSELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max_elements,[max_memory]])\n\nFor example:\nSELECT col1, col2 FROM table1 PROCEDURE ANALYSE(10, 2000);\n\nThe results show some statistics for the values returned by the query,\nand propose an optimal data type for the columns. This can be helpful\nfor checking your existing tables, or after importing new data. You\nmay need to try different settings for the arguments so that PROCEDURE\nANALYSE() does not suggest the ENUM data type when it is not\nappropriate.\n\nThe arguments are optional and are used as follows:\n','','https://mariadb.com/kb/en/library/procedure-analyse/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (215,17,'ROW_COUNT','Syntax\n------\nROW_COUNT()\n\nDescription\n-----------\nROW_COUNT() returns the number of rows updated, inserted or deleted\nby the preceding statement. This is the same as the row count that the\nmysql client displays and the value from the mysql_affected_rows() C\nAPI function.\n\nGenerally:\n\nFor UPDATE, affected rows is by default the number of rows that were actually\nchanged. If the CLIENT_FOUND_ROWS flag to mysql_real_connect() is specified when\nconnecting to mysqld, affected rows is instead the number of rows matched by the\nWHERE clause.\n\nFor REPLACE, deleted rows are also counted. So, if REPLACE deletes a row and adds a\nnew row, ROW_COUNT() returns 2.\n\nFor INSERT ... ON DUPLICATE KEY, updated rows are counted twice. So, if INSERT adds a\nnew rows and modifies another row, ROW_COUNT() returns 3.\n\nROW_COUNT() does not take into account rows that are not directly deleted/updated by\nthe last statement. This means that rows deleted by foreign keys or triggers are\nnot counted.\n\nWarning: You can use ROW_COUNT() with prepared statements, but you need to call it\nafter EXECUTE, not after DEALLOCATE PREPARE, because the row count for allocate\nprepare is always 0.\n\nWarning: When used after a CALL statement, this function returns the number of rows\naffected by the last statement in the procedure, not by the whole procedure.\n\nWarning: After INSERT DELAYED, ROW_COUNT() returns the number of the rows you tried\nto insert, not the number of the successful writes.\n\nThis information can also be found in the diagnostics area.\n\nStatements using the ROW_COUNT() function are not safe for replication.\n\nExamples\n--------\nCREATE TABLE t (A INT);\n\nINSERT INTO t VALUES(1),(2),(3);\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n\nDELETE FROM t WHERE A IN(1,2);\n\nSELECT ROW_COUNT(); \n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n\nExample with prepared statements:\nSET @q = 'INSERT INTO t VALUES(1),(2),(3);';\n\nPREPARE stmt FROM @q;\n\nEXECUTE stmt;\nQuery OK, 3 rows affected (0.39 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n','','https://mariadb.com/kb/en/library/row_count/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (216,17,'SCHEMA','Syntax\n------\nSCHEMA()\n\nDescription\n-----------\nThis function is a synonym for DATABASE().\n','','https://mariadb.com/kb/en/library/schema/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (217,17,'SESSION_USER','Syntax\n------\nSESSION_USER()\n\nDescription\n-----------\nSESSION_USER() is a synonym for USER().\n','','https://mariadb.com/kb/en/library/session_user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (218,17,'SYSTEM_USER','Syntax\n------\nSYSTEM_USER()\n\nDescription\n-----------\nSYSTEM_USER() is a synonym for USER().\n','','https://mariadb.com/kb/en/library/system_user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (219,17,'USER','Syntax\n------\nUSER()\n\nDescription\n-----------\nReturns the current MariaDB user name and host name, given when authenticating to\nMariaDB,  as a string in the utf8 character set.\n\nNote that the value of USER() may differ from the value of CURRENT_USER(), which is\nthe user used to authenticate the current client.\n\nCURRENT_ROLE() returns the current active role.\n\nSYSTEM_USER() and SESSION_USER are synonyms for USER().\n\nStatements using the USER() function or one of its synonyms are not safe for\nstatement level replication.\n\nExamples\n--------\nshell> mysql --user="anonymous"\n\nSELECT USER(),CURRENT_USER();\n+---------------------+----------------+\n| USER()              | CURRENT_USER() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n\nTo select only the IP address, use SUBSTRING_INDEX(),\nSELECT SUBSTRING_INDEX(USER(), '@', -1);\n+----------------------------------+\n| SUBSTRING_INDEX(USER(), '@', -1) |\n+----------------------------------+\n| 192.168.0.101                    |\n+----------------------------------+\n','','https://mariadb.com/kb/en/library/user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (220,17,'VERSION','Syntax\n------\nVERSION()\n\nDescription\n-----------\nReturns a string that indicates the MariaDB server version. The string\nuses the utf8 character set.\n\nExamples\n--------\nSELECT VERSION();\n+----------------+\n| VERSION()      |\n+----------------+\n| 10.4.7-MariaDB |\n+----------------+\n\nThe VERSION() string may have one or more of the following suffixes:\n+-------------------------------------------------------------------------+----------\n--------------------------------------------------------------+\n|Suffix                                                                  \n|Description                                                              |\n|-embedded                                                                |The server\nis an embedded server (libmysqld).                            |\n|-log                                                                     |General\nlogging, slow logging or binary (replication) logging is enabled.|\n|-debug                                                                   |The server\nis compiled for debugging.                                    |\n|-valgrind                                                                | The\nserver is compiled to be instrumented with valgrind.                |\n+-------------------------------------------------------------------------+----------\n--------------------------------------------------------------+\n\nChanging the Version String\n---------------------------\nSome old legacy code may break because they are parsing the\nVERSION string and expecting a MySQL string or a simple version\nstring like Joomla til API17, see MDEV-7780.\n\nFrom MariaDB 10.2, one can fool these applications by setting the version string from\nthe command line or the my.cnf files with --version=....\n','','https://mariadb.com/kb/en/library/version/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (221,18,'!=','Syntax\n------\n<>, !=\n\nDescription\n-----------\nNot equal operator.  Evaluates both SQL expressions and returns 1 if they are not\nequal and 0 if they are equal, or NULL if either expression is NULL.  If the\nexpressions return different data types, (for instance, a number and a string),\nperforms type conversion.\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) != (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a != t2.x) OR (t1.b != t2.y)\nFROM t1 INNER JOIN t2;\n\nExamples\n--------\nSELECT '.01' <> '0.01';\n+-----------------+\n| '.01' <> '0.01' |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT .01 <> '0.01';\n+---------------+\n| .01 <> '0.01' |\n+---------------+\n|             0 |\n+---------------+\n\nSELECT 'zapp' <> 'zappp';\n+-------------------+\n| 'zapp' <> 'zappp' |\n+-------------------+\n|                 1 |\n+-------------------+\n','','https://mariadb.com/kb/en/library/not-equal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (222,18,'&lt;','Syntax\n------\n<\n\nDescription\n-----------\nLess than operator. Evaluates both SQL expressions and returns 1 if the left value is\nless than the right value and 0 if it is not, or NULL if either expression is NULL.\n\nIf the expressions return different data types, (for instance, a number and a\nstring), performs type conversion.\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) < (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b < t2.y))\nFROM t1 INNER JOIN t2;\n\nExamples\n--------\nSELECT 2 < 2;\n+-------+\n| 2 < 2 |\n+-------+\n|     0 |\n+-------+\n\nType conversion:\nSELECT 3<'4';\n+-------+\n| 3<'4' |\n+-------+\n|     1 |\n+-------+\n\nCase insensitivity - see Character Sets and Collations:\nSELECT 'a'<'A';\n+---------+\n| 'a'<'A' |\n+---------+\n|       0 |\n+---------+\n','','https://mariadb.com/kb/en/library/less-than/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (223,18,'&lt;=','Syntax\n------\n<=\n\nDescription\n-----------\nLess than or equal operator. Evaluates both SQL expressions and returns 1 if the left\nvalue is less than or equal to the right value and 0 if it is not, or NULL if either\nexpression is NULL. If the expressions return different data types, (for instance, a\nnumber and a string), performs type conversion.\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) <= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b <= t2.y))\nFROM t1 INNER JOIN t2;\n\nExamples\n--------\nSELECT 0.1 <= 2;\n+----------+\n| 0.1 <= 2 |\n+----------+\n|        1 |\n+----------+\n\nSELECT 'a'<='A';\n+----------+\n| 'a'<='A' |\n+----------+\n|        1 |\n+----------+\n','','https://mariadb.com/kb/en/library/less-than-or-equal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (224,18,'&lt;=&gt;','Syntax\n------\n<=>\n\nDescription\n-----------\nNULL-safe equal operator. It performs an equality comparison like\nthe = operator, but returns 1 rather than NULL if both operands are\nNULL, and 0 rather than NULL if one operand is NULL.\n\na <=> b is equivalent to a = b OR (a IS NULL AND b IS NULL).\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) <=> (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a <=> t2.x) AND (t1.b <=> t2.y)\nFROM t1 INNER JOIN t2;\n\nSee also NULL Values in MariaDB.\n\nExamples\n--------\nSELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n+---------+---------------+------------+\n| 1 <=> 1 | NULL <=> NULL | 1 <=> NULL |\n+---------+---------------+------------+\n|       1 |             1 |          0 |\n+---------+---------------+------------+\n\nSELECT 1 = 1, NULL = NULL, 1 = NULL;\n+-------+-------------+----------+\n| 1 = 1 | NULL = NULL | 1 = NULL |\n+-------+-------------+----------+\n|     1 |        NULL |     NULL |\n+-------+-------------+----------+\n','','https://mariadb.com/kb/en/library/null-safe-equal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (225,18,'=','Syntax\n------\nleft_expr = right_expr\n\nDescription\n-----------\nEqual operator. Evaluates both SQL expressions and returns 1 if they are equal, 0 if\nthey are not equal, or NULL if either expression is NULL. If the expressions return\ndifferent data types (for example, a number and a string), a type conversion\nis performed.\n\nWhen used in row comparisons these two queries are synonymous and return the\nsame results:\nSELECT (t1.a, t1.b) = (t2.x, t2.y) FROM t1 INNER JOIN t2;\n\nSELECT (t1.a = t2.x) AND (t1.b = t2.y) FROM t1 INNER JOIN t2;\n\nTo perform a NULL-safe comparison, use the <=> operator.\n\n= can also be used as an assignment operator.\n\nExamples\n--------\nSELECT 1 = 0;\n+-------+\n| 1 = 0 |\n+-------+\n|     0 |\n+-------+\n\nSELECT '0' = 0;\n+---------+\n| '0' = 0 |\n+---------+\n|       1 |\n+---------+\n\nSELECT '0.0' = 0;\n+-----------+\n| '0.0' = 0 |\n+-----------+\n|         1 |\n+-----------+\n\nSELECT '0.01' = 0;\n+------------+\n| '0.01' = 0 |\n+------------+\n|          0 |\n+------------+\n\nSELECT '.01' = 0.01;\n+--------------+\n| '.01' = 0.01 |\n+--------------+\n|            1 |\n+--------------+\n\nSELECT (5 * 2) = CONCAT('1', '0');\n+----------------------------+\n| (5 * 2) = CONCAT('1', '0') |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nSELECT 1 = NULL;\n+----------+\n| 1 = NULL |\n+----------+\n|     NULL |\n+----------+\n\nSELECT NULL = NULL;\n+-------------+\n| NULL = NULL |\n+-------------+\n|        NULL |\n+-------------+\n','','https://mariadb.com/kb/en/library/equal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (226,18,'&gt;','Syntax\n------\n>\n\nDescription\n-----------\nGreater than operator. Evaluates both SQL expressions and returns 1 if the left value\nis greater than the right value and 0 if it is not, or NULL if either expression is\nNULL. If the expressions return different data types, (for instance, a number and a\nstring), performs type conversion.\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) > (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b > t2.y))\nFROM t1 INNER JOIN t2;\n\nExamples\n--------\nSELECT 2 > 2;\n+-------+\n| 2 > 2 |\n+-------+\n|     0 |\n+-------+\n\nSELECT 'b' > 'a';\n+-----------+\n| 'b' > 'a' |\n+-----------+\n|         1 |\n+-----------+\n','','https://mariadb.com/kb/en/library/greater-than/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (227,18,'&gt;=','Syntax\n------\n>=\n\nDescription\n-----------\nGreater than or equal operator. Evaluates both SQL expressions and returns 1 if the\nleft value is greater than or equal to the right value and 0 if it is not, or NULL if\neither expression is NULL. If the expressions return different data types, (for\ninstance, a number and a string), performs type conversion.\n\nWhen used in row comparisons these two queries return the same results:\nSELECT (t1.a, t1.b) >= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b >= t2.y))\nFROM t1 INNER JOIN t2;\n\nExamples\n--------\nSELECT 2 >= 2;\n+--------+\n| 2 >= 2 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 'A' >= 'a';\n+------------+\n| 'A' >= 'a' |\n+------------+\n|          1 |\n+------------+\n','','https://mariadb.com/kb/en/library/greater-than-or-equal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (228,18,'BETWEEN AND','Syntax\n------\nexpr BETWEEN min AND max\n\nDescription\n-----------\nIf expr is greater than or equal to min and expr is less than or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is equivalent\nto the expression (min <= expr AND expr <= max) if all the arguments\nare of the same type. Otherwise type conversion takes place according\nto the rules described at Type Conversion, but\napplied to all the three arguments.\n\nExamples\n--------\nSELECT 1 BETWEEN 2 AND 3;\n+-------------------+\n| 1 BETWEEN 2 AND 3 |\n+-------------------+\n|                 0 |\n+-------------------+\n\nSELECT 'b' BETWEEN 'a' AND 'c';\n+-------------------------+\n| 'b' BETWEEN 'a' AND 'c' |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSELECT 2 BETWEEN 2 AND '3';\n+---------------------+\n| 2 BETWEEN 2 AND '3' |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSELECT 2 BETWEEN 2 AND 'x-3';\n+-----------------------+\n| 2 BETWEEN 2 AND 'x-3' |\n+-----------------------+\n|                     0 |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect DOUBLE value: 'x-3'\n\nNULL:\nSELECT 1 BETWEEN 1 AND NULL;\n+----------------------+\n| 1 BETWEEN 1 AND NULL |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nDATE, DATETIME and TIMESTAMP examples. Omitting the time component compares against\n00:00, so later times on the same date are not returned:\nCREATE TABLE `x` (\n a date ,\n b datetime,\n c timestamp\n)\n\nINSERT INTO x VALUES \n ('2018-11-11', '2018-11-11 05:15', '2018-11-11 05:15'), \n ('2018-11-12', '2018-11-12 05:15', '2018-11-12 05:15');\n\nSELECT * FROM x WHERE a BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n| 2018-11-12 | 2018-11-12 05:15:00 | 2018-11-12 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE b BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE c BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n','','https://mariadb.com/kb/en/library/between-and/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (229,18,'COALESCE','Syntax\n------\nCOALESCE(value,...)\n\nDescription\n-----------\nReturns the first non-NULL value in the list, or NULL if there are no\nnon-NULL values. At least one parameter must be passed.\n\nThe function is useful when substituting a default value for null values when\ndisplaying data.\n\nSee also NULL Values in MariaDB.\n\nExamples\n--------\nSELECT COALESCE(NULL,1);\n+------------------+\n| COALESCE(NULL,1) |\n+------------------+\n|                1 |\n+------------------+\n\nSELECT COALESCE(NULL,NULL,NULL);\n+--------------------------+\n| COALESCE(NULL,NULL,NULL) |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n\nWhen two arguments are given, COALESCE() is the same as IFNULL():\nSET @a=NULL, @b=1;\n\nSELECT COALESCE(@a, @b), IFNULL(@a, @b);\n+------------------+----------------+\n| COALESCE(@a, @b) | IFNULL(@a, @b) |\n+------------------+----------------+\n|                1 |              1 |\n+------------------+----------------+\n\nHex type confusion:\nCREATE TABLE t1 (a INT, b VARCHAR(10));\nINSERT INTO t1 VALUES (0x31, 0x61),(COALESCE(0x31), COALESCE(0x61));\n\nSELECT * FROM t1;\n+------+------+\n| a    | b    |\n+------+------+\n|   49 | a    |\n|    1 | a    |\n+------+------+\n\nThe reason for the differing results above is that when 0x31 is inserted directly to\nthe column, it's treated as a number (see Hexadecimal Literals), while when 0x31 is\npassed to COALESCE(), it's treated as a string, because:\n\nSubstituting zero for NULL (in this case when the aggregate function returns NULL\nafter finding no rows):\nSELECT SUM(score) FROM student;\n+------------+\n| SUM(score) |\n+------------+\n|       NULL |\n+------------+\n\nSELECT COALESCE(SUM(score),0) FROM student;\n+------------------------+\n| COALESCE(SUM(score),0) |\n+------------------------+\n|                      0 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/coalesce/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (230,18,'GREATEST','Syntax\n------\nGREATEST(value1,value2,...)\n\nDescription\n-----------\nWith two or more arguments, returns the largest (maximum-valued)\nargument. The arguments are compared using the same rules as for\nLEAST().\n\nExamples\n--------\nSELECT GREATEST(2,0);\n+---------------+\n| GREATEST(2,0) |\n+---------------+\n|             2 |\n+---------------+\n\nSELECT GREATEST(34.0,3.0,5.0,767.0);\n+------------------------------+\n| GREATEST(34.0,3.0,5.0,767.0) |\n+------------------------------+\n|                        767.0 |\n+------------------------------+\n\nSELECT GREATEST('B','A','C');\n+-----------------------+\n| GREATEST('B','A','C') |\n+-----------------------+\n| C                     |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/greatest/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (231,18,'IN','Syntax\n------\nexpr IN (value,...)\n\nDescription\n-----------\nReturns 1 if expr is equal to any of the values in the IN list, else\nreturns 0. If all values are constants, they are evaluated according\nto the type of expr and sorted. The search for the item then is done\nusing a binary search. This means IN is very quick if the IN value\nlist consists entirely of constants. Otherwise, type conversion takes\nplace according to the rules described at Type Conversion, but\napplied to all the arguments.\n\nIf expr is NULL, IN always returns NULL. If at least one of the values in the list is\nNULL, and one of the comparisons is true, the result is 1. If at least one of the\nvalues in the list is NULL and none of the comparisons is true, the result is NULL.\n\nExamples\n--------\nSELECT 2 IN (0,3,5,7);\n+----------------+\n| 2 IN (0,3,5,7) |\n+----------------+\n|              0 |\n+----------------+\n\nSELECT 'wefwf' IN ('wee','wefwf','weg');\n+----------------------------------+\n| 'wefwf' IN ('wee','wefwf','weg') |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nType conversion:\nSELECT 1 IN ('1', '2', '3');\n+----------------------+\n| 1 IN ('1', '2', '3') |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT NULL IN (1, 2, 3);\n+-------------------+\n| NULL IN (1, 2, 3) |\n+-------------------+\n|              NULL |\n+-------------------+\n\nSELECT 1 IN (1, 2, NULL);\n+-------------------+\n| 1 IN (1, 2, NULL) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSELECT 5 IN (1, 2, NULL);\n+-------------------+\n| 5 IN (1, 2, NULL) |\n+-------------------+\n|              NULL |\n+-------------------+\n','','https://mariadb.com/kb/en/library/in/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (232,18,'INTERVAL','Syntax\n------\nINTERVAL(N,N1,N2,N3,...)\n\nDescription\n-----------\nReturns the index of the last argument that is less than the first argument or is\nNULL.\n\nReturns 0 if N < N1, 1 if N < N2, 2 if N < N3 and so on or -1 if N is NULL. All\narguments are treated as integers. It is required that N1 < N2 < N3 <\n... < Nn for this function to work correctly. This is because a fast binary\nsearch is used.\n\nExamples\n--------\nSELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 44, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n\nSELECT INTERVAL(10, 1, 10, 100, 1000);\n+--------------------------------+\n| INTERVAL(10, 1, 10, 100, 1000) |\n+--------------------------------+\n|                              2 |\n+--------------------------------+\n\nSELECT INTERVAL(22, 23, 30, 44, 200);\n+-------------------------------+\n| INTERVAL(22, 23, 30, 44, 200) |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nSELECT INTERVAL(10, 2, NULL);\n+-----------------------+\n| INTERVAL(10, 2, NULL) |\n+-----------------------+\n|                     2 |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/interval/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (233,18,'IS','Syntax\n------\nIS boolean_value\n\nDescription\n-----------\nTests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN.\n\nThere is an important difference between using IS TRUE or comparing a value with TRUE\nusing =. When using =, only 1 equals to TRUE. But when using IS TRUE, all values\nwhich are logically true (like a number > 1) return TRUE.\n\nExamples\n--------\nSELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n+-----------+------------+-----------------+\n| 1 IS TRUE | 0 IS FALSE | NULL IS UNKNOWN |\n+-----------+------------+-----------------+\n|         1 |          1 |               1 |\n+-----------+------------+-----------------+\n\nDifference between = and IS TRUE:\nSELECT 2 = TRUE, 2 IS TRUE;\n+----------+-----------+\n| 2 = TRUE | 2 IS TRUE |\n+----------+-----------+\n|        0 |         1 |\n+----------+-----------+\n','','https://mariadb.com/kb/en/library/is/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (234,18,'IS NOT','Syntax\n------\nIS NOT boolean_value\n\nDescription\n-----------\nTests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN.\n\nExamples\n--------\nSELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n+------------------+------------------+---------------------+\n| 1 IS NOT UNKNOWN | 0 IS NOT UNKNOWN | NULL IS NOT UNKNOWN |\n+------------------+------------------+---------------------+\n|                1 |                1 |                   0 |\n+------------------+------------------+---------------------+\n\nSELECT NULL IS NOT TRUE, NULL IS NOT FALSE;\n+------------------+-------------------+\n| NULL IS NOT TRUE | NULL IS NOT FALSE |\n+------------------+-------------------+\n|                1 |                 1 |\n+------------------+-------------------+\n','','https://mariadb.com/kb/en/library/is-not/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (235,18,'IS NOT NULL','Syntax\n------\nIS NOT NULL\n\nDescription\n-----------\nTests whether a value is not NULL. See also NULL Values in MariaDB.\n\nExamples\n--------\nSELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n+---------------+---------------+------------------+\n| 1 IS NOT NULL | 0 IS NOT NULL | NULL IS NOT NULL |\n+---------------+---------------+------------------+\n|             1 |             1 |                0 |\n+---------------+---------------+------------------+\n','','https://mariadb.com/kb/en/library/is-not-null/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (236,18,'IS NULL','Syntax\n------\nIS NULL\n\nDescription\n-----------\nTests whether a value is NULL. See also NULL Values in MariaDB.\n\nExamples\n--------\nSELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n+-----------+-----------+--------------+\n| 1 IS NULL | 0 IS NULL | NULL IS NULL |\n+-----------+-----------+--------------+\n|         0 |         0 |            1 |\n+-----------+-----------+--------------+\n\nCompatibility\n-------------\nSome ODBC applications use the syntax auto_increment_field IS NOT NULL to find the\nlatest row that was inserted with an autogenerated key value. If your applications\nneed this, you can set the sql_auto_is_null variable to 1.\n\nSET @@sql_auto_is_null=1;\nCREATE TABLE t1 (auto_increment_column INT NOT NULL AUTO_INCREMENT PRIMARY KEY);\nINSERT INTO t1 VALUES (NULL);\nSELECT * FROM t1 WHERE auto_increment_column IS NULL;\n\n+-----------------------+\n| auto_increment_column |\n+-----------------------+\n|                     1 |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/is-null/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (237,18,'ISNULL','Syntax\n------\nISNULL(expr)\n\nDescription\n-----------\nIf expr is NULL, ISNULL() returns 1, otherwise it returns 0.\n\nSee also NULL Values in MariaDB.\n\nExamples\n--------\nSELECT ISNULL(1+1);\n+-------------+\n| ISNULL(1+1) |\n+-------------+\n|           0 |\n+-------------+\n\nSELECT ISNULL(1/0);\n+-------------+\n| ISNULL(1/0) |\n+-------------+\n|           1 |\n+-------------+\n','','https://mariadb.com/kb/en/library/isnull/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (238,18,'LEAST','Syntax\n------\nLEAST(value1,value2,...)\n\nDescription\n-----------\nWith two or more arguments, returns the smallest (minimum-valued)\nargument. The arguments are compared using the following rules:\n\nLEAST() returns NULL if any argument is NULL.\n\nExamples\n--------\nSELECT LEAST(2,0);\n+------------+\n| LEAST(2,0) |\n+------------+\n|          0 |\n+------------+\n\nSELECT LEAST(34.0,3.0,5.0,767.0);\n+---------------------------+\n| LEAST(34.0,3.0,5.0,767.0) |\n+---------------------------+\n|                       3.0 |\n+---------------------------+\n\nSELECT LEAST('B','A','C');\n+--------------------+\n| LEAST('B','A','C') |\n+--------------------+\n| A                  |\n+--------------------+\n','','https://mariadb.com/kb/en/library/least/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (239,18,'NOT BETWEEN','Syntax\n------\nexpr NOT BETWEEN min AND max\n\nDescription\n-----------\nThis is the same as NOT (expr BETWEEN min AND max).\n\nNote that the meaning of the alternative form NOT expr BETWEEN min AND max is\naffected by the HIGH_NOT_PRECEDENCE SQL_MODE flag.\n\nExamples\n--------\nSELECT 1 NOT BETWEEN 2 AND 3;\n+-----------------------+\n| 1 NOT BETWEEN 2 AND 3 |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT 'b' NOT BETWEEN 'a' AND 'c';\n+-----------------------------+\n| 'b' NOT BETWEEN 'a' AND 'c' |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n\nNULL:\nSELECT 1 NOT BETWEEN 1 AND NULL;\n+--------------------------+\n| 1 NOT BETWEEN 1 AND NULL |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n','','https://mariadb.com/kb/en/library/not-between/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (240,18,'NOT IN','Syntax\n------\nexpr NOT IN (value,...)\n\nDescription\n-----------\nThis is the same as NOT (expr IN (value,...)).\n\nExamples\n--------\nSELECT 2 NOT IN (0,3,5,7);\n+--------------------+\n| 2 NOT IN (0,3,5,7) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSELECT 'wefwf' NOT IN ('wee','wefwf','weg');\n+--------------------------------------+\n| 'wefwf' NOT IN ('wee','wefwf','weg') |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n\nSELECT 1 NOT IN ('1', '2', '3');\n+--------------------------+\n| 1 NOT IN ('1', '2', '3') |\n+--------------------------+\n|                        0 |\n+--------------------------+\n\nNULL:\nSELECT NULL NOT IN (1, 2, 3);\n+-----------------------+\n| NULL NOT IN (1, 2, 3) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n\nSELECT 1 NOT IN (1, 2, NULL);\n+-----------------------+\n| 1 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT 5 NOT IN (1, 2, NULL);\n+-----------------------+\n| 5 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/not-in/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (241,19,'Operator Precedence','The precedence is the order in which the SQL operators are evaluated.\n\nThe following list shows the SQL operator precedence. Operators that appear first in\nthe list have a higher precedence. Operators which are listed together have the\nsame precedence.\n\nFunctions precedence is always higher than operators precedence.\n\nIn this page CASE refers to the CASE operator, not to the CASE statement.\n\nIf the HIGH_NOT_PRECEDENCE SQL_MODE is set, NOT has the same precedence as !.\n\nThe || operator's precedence, as well as its meaning, depends on the PIPES_AS_CONCAT\nSQL_MODE flag: if it is on, || can be used to concatenate strings (like the CONCAT()\nfunction) and has a higher precedence.\n\nThe = operator's precedence depends on the context - it is higher when = is used as a\ncomparison operator.\n\nParenthesis can be used to modify the operators precedence in an expression.\n\nShort-circuit evaluation\n------------------------\nThe AND, OR, && and || operators support short-circuit evaluation. This means that,\nin some cases, the expression on the right of those operators is not evaluated,\nbecause its result cannot affect the result. In the following cases, short-circuit\nevaluation is used and x() is not evaluated:\n\nNote however that the short-circuit evaluation does not apply to NULL AND x(). Also,\nBETWEEN's right operands are not evaluated if the left operand is NULL, but in all\nother cases all the operands are evaluated.\n\nThis is a speed optimization. Also, since functions can have side-effects, this\nbehavior can be used to choose whether execute them or not using a concise syntax:\nSELECT some_function() OR log_error();\n','','https://mariadb.com/kb/en/library/operator-precedence/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (242,19,'&amp;','Syntax\n------\n&\n\nDescription\n-----------\nBitwise AND. Converts the values to binary and compares bits. Only if both the\ncorresponding bits are 1 is the resulting bit also 1.\n\nSee also bitwise OR.\n\nExamples\n--------\nSELECT 2&1;\n+-----+\n| 2&1 |\n+-----+\n|   0 |\n+-----+\n\nSELECT 3&1;\n+-----+\n| 3&1 |\n+-----+\n|   1 |\n+-----+\n\nSELECT 29 & 15;\n+---------+\n| 29 & 15 |\n+---------+\n|      13 |\n+---------+\n','','https://mariadb.com/kb/en/library/bitwise_and/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (243,19,'&lt;&lt;','Syntax\n------\nvalue1 << value2\n\nDescription\n-----------\nConverts a longlong (BIGINT) number (value1) to binary and shifts value2 units to\nthe left.\n\nExamples\n--------\nSELECT 1 << 2;\n+--------+\n| 1 << 2 |\n+--------+\n|      4 |\n+--------+\n','','https://mariadb.com/kb/en/library/shift-left/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (244,19,'&gt;&gt;','Syntax\n------\nvalue1 >> value2\n\nDescription\n-----------\nConverts a longlong (BIGINT) number (value1) to binary and shifts value2 units to\nthe right.\n\nExamples\n--------\nSELECT 4 >> 2;\n+--------+\n| 4 >> 2 |\n+--------+\n|      1 |\n+--------+\n','','https://mariadb.com/kb/en/library/shift-right/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (245,19,'BIT_COUNT','Syntax\n------\nBIT_COUNT(N)\n\nDescription\n-----------\nReturns the number of bits that are set in the argument N.\n\nExamples\n--------\nSELECT BIT_COUNT(29), BIT_COUNT(b'101010');\n+---------------+----------------------+\n| BIT_COUNT(29) | BIT_COUNT(b'101010') |\n+---------------+----------------------+\n|             4 |                    3 |\n+---------------+----------------------+\n','','https://mariadb.com/kb/en/library/bit_count/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (246,19,'^','Syntax\n------\n^\n\nDescription\n-----------\nBitwise XOR. Converts the values to binary and compares bits. If one (and only one)\nof the corresponding bits is 1 is the resulting bit also 1.\n\nExamples\n--------\nSELECT 1 ^ 1;\n+-------+\n| 1 ^ 1 |\n+-------+\n|     0 |\n+-------+\n\nSELECT 1 ^ 0;\n+-------+\n| 1 ^ 0 |\n+-------+\n|     1 |\n+-------+\n\nSELECT 11 ^ 3;\n+--------+\n| 11 ^ 3 |\n+--------+\n|      8 |\n+--------+\n','','https://mariadb.com/kb/en/library/bitwise-xor/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (247,19,'|','Syntax\n------\n|\n\nDescription\n-----------\nBitwise OR. Converts the values to binary and compares bits. If either of the\ncorresponding bits has a value of 1, the resulting bit is also 1.\n\nSee also bitwise AND.\n\nExamples\n--------\nSELECT 2|1;\n+-----+\n| 2|1 |\n+-----+\n|   3 |\n+-----+\n\nSELECT 29 | 15;\n+---------+\n| 29 | 15 |\n+---------+\n|      31 |\n+---------+\n','','https://mariadb.com/kb/en/library/bitwise-or/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (248,19,'~','Syntax\n------\n~\n\nDescription\n-----------\nBitwise NOT. Converts the value to 4 bytes binary and inverts all bits.\n\nExamples\n--------\nSELECT 3 & ~1;\n+--------+\n| 3 & ~1 |\n+--------+\n|      2 |\n+--------+\n\nSELECT 5 & ~1;\n+--------+\n| 5 & ~1 |\n+--------+\n|      4 |\n+--------+\n','','https://mariadb.com/kb/en/library/bitwise-not/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (249,19,'Parentheses','Parentheses are sometimes called precedence operators - this means that they\ncan be used to change the other operator's precedence in an expression. The\nexpressions that are written between parentheses are computed before the expressions\nthat are written outside. Parentheses must always contain an expression (that is,\nthey cannot be empty), and can be nested.\n\nFor example, the following expressions could return different results:\n\nIn the first case, NOT applies to a, so if a is FALSE or b is TRUE, the expression\nreturns TRUE. In the second case, NOT applies to the result of a OR b, so if at least\none of a or b is TRUE, the expression is TRUE.\n\nWhen the precedence of operators is not intuitive, you can use parentheses to make it\nimmediately clear for whoever reads the statement.\n\nThe precedence of the NOT operator can also be affected by the HIGH_NOT_PRECEDENCE\nSQL_MODE flag.\n\nOther uses\n----------\nParentheses must always be used to enclose subqueries.\n\nParentheses can also be used in a JOIN statement between multiple tables to determine\nwhich tables must be joined first.\n\nAlso, parentheses are used to enclose the list of parameters to be passed to built-in\nfunctions, user-defined functions and stored routines. However, when no parameter is\npassed to a stored procedure, parentheses are optional. For builtin functions and\nuser-defined functions, spaces are not allowed between the function name and the open\nparenthesis, unless the IGNORE_SPACE SQL_MODE is set. For stored routines (and for\nfunctions if IGNORE_SPACE is set) spaces are allowed before the open parenthesis,\nincluding tab characters and new line characters.\n\nSyntax errors\n-------------\nIf there are more open parentheses than closed parentheses, the error usually looks\nlike this:\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that\ncorresponds to your MariaDB server version for the right syntax to use near '' a\nt line 1\n\nNote the empty string.\n\nIf there are more closed parentheses than open parentheses, the error usually looks\nlike this:\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that\ncorresponds to your MariaDB server version for the right syntax to use near ')'\nat line 1\n\nNote the quoted closed parenthesis.\n','','https://mariadb.com/kb/en/library/parentheses/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (250,19,'TRUE FALSE','Description\n-----------\nThe constants TRUE and FALSE evaluate to 1 and 0, respectively. The\nconstant names can be written in any lettercase.\n\nExamples\n--------\nSELECT TRUE, true, FALSE, false;\n+------+------+-------+-------+\n| TRUE | TRUE | FALSE | FALSE |\n+------+------+-------+-------+\n|    1 |    1 |     0 |     0 |\n+------+------+-------+-------+\n','','https://mariadb.com/kb/en/library/true-false/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (251,20,'ANALYZE TABLE','Syntax\n------\nANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE tbl_name [,tbl_name ...] \n [PERSISTENT FOR [ALL|COLUMNS ([col_name [,col_name ...]])]\n  [INDEXES ([index_name [,index_name ...]])]]\n\nDescription\n-----------\nANALYZE TABLE analyzes and stores the key distribution for a\ntable (index statistics). This statement works with MyISAM, Aria and InnoDB tables.\n\nDuring the analysis, InnoDB will allow reads/writes, and MyISAM/Aria reads/inserts.\n\nFor MyISAM tables, this statement is equivalent to using myisamchk --analyze.\n\nFor more information on how the analysis works within InnoDB, see\nInnoDB Limitations.\n\nMariaDB uses the stored key distribution to decide the order in which\ntables should be joined when you perform a join on something other than\na constant. In addition, key distributions can be used when deciding\nwhich indexes to use for a specific table within a query.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nBy default, ANALYZE TABLE statements are written to the binary log and will be\nreplicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the\nstatement is not written to the binary log.\n\nFrom MariaDB 10.3.19, ANALYZE TABLE statements are not logged to the binary log if\nread_only is set. See also Read-Only Replicas.\n\nANALYZE TABLE is also supported for partitioned tables. You\ncan use ALTER TABLE ... ANALYZE PARTITION to analyze one or\nmore partitions.\n\nThe Aria storage engine supports progress reporting for the ANALYZE TABLE statement.\n\nEngine-Independent Statistics\n-----------------------------\nANALYZE TABLE supports engine-independent statistics. See Engine-Independent Table\nStatistics: Collecting Statistics with the ANALYZE TABLE Statement for\nmore information.\n','','https://mariadb.com/kb/en/library/analyze-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (252,20,'CHECK TABLE','Syntax\n------\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\n\noption = {FOR UPGRADE | QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n\nDescription\n-----------\nCHECK TABLE checks a table or tables for errors. CHECK TABLE works for\nArchive, Aria, CSV, InnoDB, and MyISAM tables. For Aria and MyISAM tables, the\nkey statistics are updated as well. For CSV, see also Checking and Repairing\nCSV Tables.\n\nAs an alternative, myisamchk is a commandline tool for checking MyISAM tables when\nthe tables are not being accessed.\n\nFor checking dynamic columns integrity, COLUMN_CHECK() can be used.\n\nCHECK TABLE can also check views for problems, such as tables\nthat are referenced in the view definition that no longer exist.\n\nCHECK TABLE is also supported for partitioned tables. You can\nuse ALTER TABLE ... CHECK PARTITION \nto check one or more partitions.\n\nThe meaning of the different options are as follows - note that this can vary a\nbit between\nstorage engines:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------+-----------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------+\n|FOR UPGRADE\n\n|Do a very quick check\nif the storage format for the table has changed so that one needs to do a REPAIR.\n\nThis is only needed when one upgrades between major versions of MariaDB or MySQL.\n\nThis is usually done by running mysql_upgrade.|\n|FAST\n\n|Only check tables that\nhas not been closed properly or are marked as corrupt. Only supported by the MyISAM\nand Aria engines. For other  engines the table is checked normally                   \n                   |\n|CHANGED\n\n|Check only tables that\nhas changed since last REPAIR / CHECK. Only supported by the MyISAM and Aria engines.\n\nFor other  engines the table is checked normally.\n\n|\n|QUICK\n\n|Do a fast check. For\nMyISAM and Aria engine this means we skip checking the delete link chain which may\ntake some time.\n\n|\n|MEDIUM\n\n|Scan also the data\nfiles. Checks integrity between data and index files with checksums. In most cases\nthis should find all possible errors.\n\n|\n|EXTENDED\n\n|Does a full check to\nverify every possible error. For MyISAM and Aria we verify for each row that all it\nkeys exists and points to the row. This may take a long time on big tables!          \n                    |\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------+-----------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------+\nFor most cases running CHECK TABLE without options or MEDIUM should be\ngood enough.\n\nThe Aria storage engine supports progress reporting for this statement.\n\nIf you want to know if two tables are identical, take a look\nat CHECKSUM TABLE.\n\nInnoDB\n------\nIf CHECK TABLE finds an error in an InnoDB table, MariaDB might shutdown to prevent\nthe error propagation. In this case, the problem will be reported in the error log.\n\nOtherwise the table or an index might be marked as corrupted, to prevent use. This\ndoes not happen with some minor problems, like a wrong number of entries in a\nsecondary index. Those problems are reported in the output of CHECK TABLE.\n\nEach tablespace contains a header with metadata. This header is not checked by\nthis statement.\n\nDuring the execution of CHECK TABLE, other threads may be blocked.\n','','https://mariadb.com/kb/en/library/sql-commands-check-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (253,20,'CHECK VIEW','Syntax\n------\nCHECK VIEW view_name\n\nDescription\n-----------\nThe CHECK VIEW statement was introduced in MariaDB 10.0.18 to assist with fixing\nMDEV-6916, an issue introduced in MariaDB 5.2 where the view algorithms were swapped.\n\nIt checks whether the view algorithm is correct. It is run as part of mysql_upgrade,\nand should not normally be required in regular use.\n','','https://mariadb.com/kb/en/library/check-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (254,20,'CHECKSUM TABLE','Syntax\n------\nCHECKSUM TABLE tbl_name [, tbl_name] ... [ QUICK | EXTENDED ]\n\nDescription\n-----------\nCHECKSUM TABLE reports a table checksum.  This is very\nuseful if you want to know if two tables are the same (for example on a master\nand slave).\n\nWith QUICK, the live table checksum is reported if it is\navailable, or NULL otherwise. This is very fast. A live\nchecksum is enabled by specifying the CHECKSUM=1 table\noption when you create the table; currently, this is supported\nonly for Aria and MyISAM tables.\n\nWith EXTENDED, the entire table is read row by row and the\nchecksum is calculated. This can be very slow for large tables.\n\nIf neither QUICK nor EXTENDED is\nspecified, MariaDB returns a live checksum if the table storage engine supports\nit and scans the table otherwise.\n\nCHECKSUM TABLE requires the SELECT privilege for the table.\n\nFor a nonexistent table, CHECKSUM TABLE returns\nNULL and generates a warning.\n\nThe table row format affects the checksum value. If the row format changes, the\nchecksum will change. This means that when a table created with a MariaDB/MySQL\nversion is upgraded to another version, the checksum value will probably change.\n\nTwo identical tables should always match to the same checksum value; however, also\nfor non-identical tables there is a very slight chance that they will return the same\nvalue as the hashing algorithm is not completely collision-free.\n\nDifferences Between MariaDB and MySQL\n-------------------------------------\nCHECKSUM TABLE may give a different result as MariaDB doesn't\nignore NULLs in the columns as MySQL 5.1 does (Later MySQL\nversions should calculate checksums the same way as MariaDB). You can get the\n'old style' checksum in MariaDB by starting mysqld with the\n--old option. Note however that that the MyISAM and Aria\nstorage engines in MariaDB are using the new checksum internally, so if you are\nusing --old, the CHECKSUM command will be\nslower as it needs to calculate the checksum row by row. Starting from MariaDB Server\n10.9, --old is deprecated and will be removed in a future release. Set --old-mode or\nOLD_MODE to COMPAT_5_1_CHECKSUM to get 'old style' checksum.\n','','https://mariadb.com/kb/en/library/checksum-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (255,20,'OPTIMIZE TABLE','Syntax\n------\nOPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE\n  tbl_name [, tbl_name] ...\n  [WAIT n | NOWAIT]\n\nDescription\n-----------\nOPTIMIZE TABLE has two main functions. It can either be used to defragment tables, or\nto update the InnoDB fulltext index.\n\nDefragmenting\n\nOPTIMIZE TABLE works for InnoDB (before MariaDB 10.1.1, only if the\ninnodb_file_per_table server system variable is set), Aria, MyISAM and ARCHIVE\ntables, and should be used if you have deleted a large part of a table or if you have\nmade many changes to a table with variable-length\nrows (tables that have VARCHAR, VARBINARY, BLOB, or TEXT columns).  Deleted rows are\nmaintained in a\nlinked list and subsequent INSERT operations reuse old row positions.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nBy default, OPTIMIZE TABLE statements are written to the binary log and will be\nreplicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the\nstatement is not written to the binary log.\n\nFrom MariaDB 10.3.19, OPTIMIZE TABLE statements are not logged to the binary log if\nread_only is set. See also Read-Only Replicas.\n\nOPTIMIZE TABLE is also supported for partitioned tables. You\ncan use \nALTER TABLE ... OPTIMIZE PARTITION \nto optimize one or more partitions.\n\nYou can use OPTIMIZE TABLE to reclaim the unused\nspace and to defragment the data file. With other storage engines, OPTIMIZE TABLE\ndoes nothing by default, and returns this message: " The storage engine for the table\ndoesn't support optimize". However, if the server has been started with the\n--skip-new option, OPTIMIZE TABLE is linked to ALTER TABLE, and recreates the table.\n\nThis operation frees the unused space and updates index statistics.\n\nThe Aria storage engine supports progress reporting for this statement.\n\nIf a MyISAM table is fragmented, concurrent inserts will not be performed until an\nOPTIMIZE TABLE statement is executed on that table, unless the concurrent_insert\nserver system variable is set to ALWAYS.\n\nUpdating an InnoDB fulltext index\n\nWhen rows are added or deleted to an InnoDB fulltext index, the index is not\nimmediately re-organized, as this can be an expensive operation. Change statistics\nare stored in a separate location . The  fulltext index is only fully re-organized\nwhen an OPTIMIZE TABLE statement is run.\n\nBy default, an OPTIMIZE TABLE will defragment a table. In order to use it to update\nfulltext index statistics, the innodb_optimize_fulltext_only system variable must be\nset to 1. This is intended to be a temporary setting, and should be reset to 0 once\nthe fulltext index has been re-organized.\n\nSince fulltext re-organization can take a long time, the innodb_ft_num_word_optimize\nvariable limits the re-organization to a number of words (2000 by default).  You can\nrun multiple OPTIMIZE statements to fully re-organize the index.\n\nDefragmenting InnoDB tablespaces\n\nMariaDB 10.1.1 merged the Facebook/Kakao defragmentation patch, allowing one to use\nOPTIMIZE TABLE to defragment InnoDB tablespaces. For this functionality to be\nenabled, the innodb_defragment system variable must be enabled. No new tables are\ncreated and there is no need to copy data from old tables to new tables. Instead,\nthis feature loads n pages (determined by innodb-defragment-n-pages) and tries to\nmove records so that pages would be full of records and then frees pages that are\nfully empty after the operation. Note that tablespace files (including ibdata1) will\nnot shrink as the result of defragmentation, but one will get better memory\nutilization in the InnoDB buffer pool as there are fewer data pages in use.\n\nSee Defragmenting InnoDB Tablespaces for more details.\n','','https://mariadb.com/kb/en/library/optimize-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (256,20,'REPAIR TABLE','Syntax\n------\nREPAIR [NO_WRITE_TO_BINLOG | LOCAL] TABLE\n  tbl_name [, tbl_name] ...\n  [QUICK] [EXTENDED] [USE_FRM]\n\nDescription\n-----------\nREPAIR TABLE repairs a possibly corrupted table. By default,\nit has the same effect as\nmyisamchk --recover tbl_name\n\nor\naria_chk --recover tbl_name\n\nSee aria_chk and myisamchk for more.\n\nREPAIR TABLE works for Archive, Aria, CSV and MyISAM tables. For InnoDB, see recovery\nmodes. For CSV, see also Checking and Repairing CSV Tables. For Archive, this\nstatement also improves compression. If the storage engine does not support this\nstatement, a warning is issued.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nBy default, REPAIR TABLE statements are written to the binary log and will be\nreplicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the\nstatement is not written to the binary log.\n\nFrom MariaDB 10.3.19, REPAIR TABLE statements are not logged to the binary log if\nread_only is set. See also Read-Only Replicas.\n\nWhen an index is recreated, the storage engine may use a configurable buffer in the\nprocess. Incrementing the buffer speeds up the index creation. Aria and MyISAM\nallocate a buffer whose size is defined by aria_sort_buffer_size or\nmyisam_sort_buffer_size, also used for ALTER TABLE.\n\nREPAIR TABLE is also supported for partitioned tables.\n\nHowever, the USE_FRM option cannot be used with this statement\non a partitioned table.\n\nALTER TABLE ... REPAIR PARTITION can be used\nto repair one or more partitions.\n\nThe Aria storage engine supports progress reporting for this statement.\n','','https://mariadb.com/kb/en/library/repair-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (257,20,'REPAIR VIEW','Syntax\n------\nREPAIR [NO_WRITE_TO_BINLOG | LOCAL] VIEW  view_name[, view_name] ... [FROM MYSQL]\n\nDescription\n-----------\nThe REPAIR VIEW statement was introduced to assist with fixing MDEV-6916, an issue\nintroduced in MariaDB 5.2 where the view algorithms were swapped compared to their\nMySQL on disk representation. It checks whether the view algorithm is correct. It is\nrun as part of mysql_upgrade, and should not normally be required in regular use.\n\nBy default it corrects the checksum and if necessary adds the mariadb-version field.\n\nIf the optional FROM MYSQL clause is used, and no mariadb-version field is present,\nthe MERGE and TEMPTABLE algorithms are toggled.\n\nBy default, REPAIR VIEW statements are written to the binary log and will be\nreplicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the\nstatement is not written to the binary log.\n','','https://mariadb.com/kb/en/library/repair-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (258,21,'CREATE FUNCTION UDF','Syntax\n------\nCREATE [OR REPLACE] [AGGREGATE] FUNCTION [IF NOT EXISTS] function_name\n  RETURNS {STRING|INTEGER|REAL|DECIMAL}\n  SONAME shared_library_name\n\nDescription\n-----------\nA user-defined function (UDF) is a way to extend MariaDB with a new function\nthat works like a native (built-in) MariaDB function such as ABS() or\nCONCAT().\n\nfunction_name is the name that should be used in SQL statements to invoke\nthe function.\n\nTo create a function, you must have the INSERT privilege for the\nmysql database. This is necessary becauseCREATE FUNCTION adds a row to the\nmysql.func system table that records the function's name,\ntype, and shared library name. If you do not have this table, you should run\nthe mysql_upgrade command to create it.\n\nUDFs need to be written in C, C++ or another language that uses C calling\nconventions, MariaDB needs to have been dynamically compiled, and your\noperating system must support dynamic loading.\n\nFor an example, see sql/udf_example.cc in the source tree. For a collection of\nexisting UDFs see http://www.mysqludf.org/.\n\nStatements making use of user-defined functions are not\nsafe for replication.\n\nFor creating a stored function as opposed to a user-defined function, see\nCREATE FUNCTION.\n\nFor valid identifiers to use as function names, see Identifier Names.\n\nRETURNS\nThe RETURNS clause indicates the type of the function's\nreturn value, and can be one of STRING, INTEGER, REAL or DECIMAL. DECIMAL functions\ncurrently return string values and should be written like STRING functions.\n\nshared_library_name\nshared_library_name is the basename of the shared object file that contains\nthe code that implements the function. The file must be located in the plugin\ndirectory. This directory is given by the value of the\nplugin_dir system variable. Note that\nbefore MariaDB/MySQL 5.1, the shared object could be located in any directory\nthat was searched by your system's dynamic linker.\n\nAGGREGATE\nAggregate functions are summary functions such as SUM() and\nAVG().\n\nOR REPLACE\nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP FUNCTION IF EXISTS function_name;\nCREATE FUNCTION name ...;\n\nIF NOT EXISTS\nWhen the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the specified function already exists. Cannot be used together with\nOR REPLACE.\n\nUpgrading a UDF\n\nTo upgrade the UDF's shared library, first run a\nDROP FUNCTION statement, then upgrade the shared library and\nfinally run the CREATE FUNCTION statement. If you upgrade without following\nthis process, you may crash the server.\n\nExamples\n\nCREATE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nQuery OK, 0 rows affected (0.00 sec)\n\nOR REPLACE and IF NOT EXISTS:\nCREATE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nERROR 1125 (HY000): Function 'jsoncontains_path' already exists\n\nCREATE OR REPLACE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE FUNCTION IF NOT EXISTS jsoncontains_path RETURNS integer\nSONAME 'ha_connect.so';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+---------------------------------------------+\n| Level | Code | Message                                     |\n+-------+------+---------------------------------------------+\n| Note  | 1125 | Function 'jsoncontains_path' already exists |\n+-------+------+---------------------------------------------+\n','','https://mariadb.com/kb/en/library/create-function-udf/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (259,21,'DROP FUNCTION UDF','Syntax\n------\nDROP FUNCTION [IF EXISTS] function_name\n\nDescription\n-----------\nThis statement drops the user-defined function (UDF) named function_name.\n\nTo drop a function, you must have the DELETE privilege for the mysql database. This\nis because DROP FUNCTION removes the row from the mysql.func system table that\nrecords the function's name, type and shared library name.\n\nFor dropping a stored function, see DROP FUNCTION.\n\nUpgrading a UDF\n\nTo upgrade the UDF's shared library, first run a DROP FUNCTION statement, then\nupgrade the shared library and finally run the CREATE FUNCTION statement. If you\nupgrade without following this process, you may crash the server.\n\nExamples\n--------\nDROP FUNCTION jsoncontains_path;\n\nIF EXISTS:\nDROP FUNCTION jsoncontains_path;\nERROR 1305 (42000): FUNCTION test.jsoncontains_path does not exist\n\nDROP FUNCTION IF EXISTS jsoncontains_path;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------------------+\n| Level | Code | Message                                        |\n+-------+------+------------------------------------------------+\n| Note  | 1305 | FUNCTION test.jsoncontains_path does not exist |\n+-------+------+------------------------------------------------+\n','','https://mariadb.com/kb/en/library/drop-function-udf/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (260,21,'Creating User-Defined Functions','User-defined functions allow MariaDB to be extended with a new function that works\nlike a native (built-in) MariaDB function such as ABS() or CONCAT(). There are\nalternative ways to add a new function: writing a native function (which requires\nmodifying and compiling the server source code), or writing a stored function.\n\nStatements making use of user-defined functions are not safe for replication.\n\nFunctions are written in C or C++, and to make use of them, the operating system must\nsupport dynamic loading.\n\nEach new SQL function requires corresponding functions written in C/C++. In the list\nbelow, at least the main function - x() - and one other, are required. x should be\nreplaced by the name of the function you are creating.\n\nAll functions need to be thread-safe, so not global or static variables that change\ncan be allocated. Memory is allocated in x_init()/ and freed in x_deinit().\n\nSimple Functions\n----------------\n\nx()\n\nRequired for all UDFs; this is where the results are calculated.\n\n+----------+----------+\n|C/C++ type|SQL type  |\n|char *    |STRING    |\n|long long |INTEGER   |\n|double    |REAL      |\n+----------+----------+\n\nDECIMAL functions return string values, and so should be written accordingly. It is\nnot possible to create ROW functions.\n\nx_init()\n\nInitialization function for x(). Can be used for the following:\n\nx_deinit()\n\nDe-initialization function for x(). Used to de-allocate memory that was allocated\nin x_init().\n\nDescription\n\nEach time the SQL function X() is called:\n\nAggregate Functions\n-------------------\nThe following functions are required for aggregate functions, such as AVG() and\nSUM(). When using CREATE FUNCTION, the  AGGREGATE keyword is required.\n\nx_clear()\n\nUsed to reset the current aggregate, but without inserting the argument as the\ninitial aggregate value for the new group.\n\nx_add()\n\nUsed to add the argument to the current aggregate.\n\nx_remove()\n\nStarting from MariaDB 10.4, improves the support of window functions (so it is not\nobligatory to add it) and should remove the argument from the current aggregate.\n\nDescription\n\nEach time the aggregate SQL function X() is called:\n\nExamples\n--------\nFor an example, see sql/udf_example.cc in the source tree. For a collection of\nexisting UDFs see https://github.com/mysqludf.\n','','https://mariadb.com/kb/en/library/creating-user-defined-functions/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (261,21,'User-Defined Functions Calling Sequences','The functions described in Creating User-defined Functions are expanded on this page.\n\nThey are declared as follows:\n\nSimple Functions\n----------------\n\nx()\n\nIf x() returns an integer, it is declared as follows:\nlong long x(UDF_INIT *initid, UDF_ARGS *args,\n       char *is_null, char *error);\n\nIf x() returns a string (DECIMAL functions also return string values), it is declared\nas follows:\nchar *x(UDF_INIT *initid, UDF_ARGS *args,\n     char *result, unsigned long *length,\n     char *is_null, char *error);\n\nIf x() returns a real, it is declared as follows:\ndouble x(UDF_INIT *initid, UDF_ARGS *args,\n       char *is_null, char *error);\n\nx_init()\n\nmy_bool x_init(UDF_INIT *initid, UDF_ARGS *args, char *message);\n\nx_deinit()\n\nvoid x_deinit(UDF_INIT *initid);\n\nDescription\n\ninitid is a parameter passed to all three functions that points to a UDF_INIT\nstructure, used for communicating information between the functions. Its structure\nmembers are:\n\nAggregate Functions\n-------------------\n\nx_clear()\n\nx_clear() is a required function for aggregate functions, and is declared as follows:\nvoid x_clear(UDF_INIT *initid, char *is_null, char *error);\n\nIt is called when the summary results need to be reset, that is at the beginning of\neach new group. but also to reset the values when there were no matching rows.\n\nis_null is set to point to CHAR(0) before calling x_clear().\n\nIn the case of an error, you can store the value to which the error argument points\n(a single-byte variable, not a string string buffer) in the variable.\n\nx_reset()\n\nx_reset() is declared as follows:\nvoid x_reset(UDF_INIT *initid, UDF_ARGS *args,\n       char *is_null, char *error);\n\nIt is called on finding the first row in a new group. Should reset the summary\nvariables, and then use UDF_ARGS as the first value in the group's internal summary\nvalue. The function is not required if the UDF interface uses x_clear().\n\nx_add()\n\nx_add() is declared as follows:\nvoid x_add(UDF_INIT *initid, UDF_ARGS *args,\n      char *is_null, char *error);\n\nIt is called for all rows belonging to the same group, and should be used to add the\nvalue in UDF_ARGS to the internal summary variable.\n\nx_remove()\n\nx_remove() was added in MariaDB 10.4 and is declared as follows (same as x_add()):\nvoid x_remove(UDF_INIT* initid, UDF_ARGS* args,\n       char* is_null, char *error );\n\nIt adds more efficient support of aggregate UDFs as window functions. x_remove()\nshould "subtract" the row (reverse x_add()). In MariaDB 10.4 aggregate UDFs will work\nas WINDOW functions without x_remove() but it will not be so efficient.\n\nIf x_remove() supported (defined) detected automatically.\n','','https://mariadb.com/kb/en/library/user-defined-functions-calling-sequences/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (262,21,'User-Defined Functions Security','The MariaDB server imposes a number of limitations on user-defined functions\nfor security purposes.\n','','https://mariadb.com/kb/en/library/user-defined-functions-security/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (263,21,'mysql.func Table','The mysql.func table stores information about user-defined functions (UDFs)\ncreated with the CREATE FUNCTION UDF statement.\n\nThe mysql.func table contains the following fields:\n+------------------------------------------------------------------------------------\n-----------------+-------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n---------------------------------------------------+---------------------------------\n--------------------------------------------------------------------+----------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------+\n|Field                                                                               \n        |Type\n                 |Null\n                         |Key\n                                  |Default\n\n|Description                                                                         \n        |\n|name                                                                                \n        |char(64)\n                 |NO\n                         |PRI\n                                  |\n\n|UDF name                                                                            \n        |\n|ret                                                                                 \n        |tinyint(1)\n                 |NO\n                         |\n                                  |0\n\n|                                                                                    \n        |\n|dl                                                                                  \n        |char(128)\n                 |NO\n                         |\n                                  |\n\n|Shared library name                                                                 \n        |\n|type                                                                                \n        |enum('function','aggregate')\n                 |NO\n                         |\n                                  |NULL\n\n|Type, either function or aggregate. Aggregate functions are summary functions such\nas SUM() and AVG().|\n+------------------------------------------------------------------------------------\n-----------------+-------------------------------------------------------------------\n----------------------------------+--------------------------------------------------\n---------------------------------------------------+---------------------------------\n--------------------------------------------------------------------+----------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------+\n\nExample\n-------\nSELECT * FROM mysql.func;\n+------------------------------+-----+--------------+-----------+\n| name                         | ret | dl           | type      |\n+------------------------------+-----+--------------+-----------+\n| spider_direct_sql            |   2 | ha_spider.so | function  |\n| spider_bg_direct_sql         |   2 | ha_spider.so | aggregate |\n| spider_ping_table            |   2 | ha_spider.so | function  |\n| spider_copy_tables           |   2 | ha_spider.so | function  |\n| spider_flush_table_mon_cache |   2 | ha_spider.so | function  |\n+------------------------------+-----+--------------+-----------+\n','','https://mariadb.com/kb/en/library/mysqlfunc-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (264,22,'AUTO_INCREMENT','Description\n-----------\nThe AUTO_INCREMENT attribute can be used to generate a unique identity for new rows.\n\nWhen you insert a new record to the table (or upon adding an AUTO_INCREMENT attribute\nwith the ALTER TABLE statement), and the auto_increment field is NULL or DEFAULT (in\nthe case of an INSERT), the value will automatically be incremented. This also\napplies to 0, unless the NO_AUTO_VALUE_ON_ZERO SQL_MODE is enabled.\n\nAUTO_INCREMENT columns start from 1 by default. The automatically generated value can\nnever be lower than 0.\n\nEach table can have only one AUTO_INCREMENT column. It must defined as a key (not\nnecessarily the PRIMARY KEY or UNIQUE key). In some storage engines (including the\ndefault InnoDB), if the key consists of multiple columns, the AUTO_INCREMENT column\nmust be the first column. Storage engines that permit the column to be placed\nelsewhere are Aria, MyISAM, MERGE, Spider, TokuDB, BLACKHOLE, FederatedX\nand Federated.\n\nCREATE TABLE animals (\n  id MEDIUMINT NOT NULL AUTO_INCREMENT,\n  name CHAR(30) NOT NULL,\n  PRIMARY KEY (id)\n );\n\nINSERT INTO animals (name) VALUES\n  ('dog'),('cat'),('penguin'),\n  ('fox'),('whale'),('ostrich');\n\nSELECT * FROM animals;\n+----+---------+\n| id | name    |\n+----+---------+\n|  1 | dog     |\n|  2 | cat     |\n|  3 | penguin |\n|  4 | fox     |\n|  5 | whale   |\n|  6 | ostrich |\n+----+---------+\n\nSERIAL is an alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\n\nCREATE TABLE t (id SERIAL, c CHAR(1)) ENGINE=InnoDB;\n\nSHOW CREATE TABLE t \G\n*************************** 1. row ***************************\n   Table: t\nCreate Table: CREATE TABLE `t` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n `c` char(1) DEFAULT NULL,\n UNIQUE KEY `id` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nSetting or Changing the Auto_Increment Value\n--------------------------------------------\nYou can use an ALTER TABLE statement to assign a new value to the auto_increment\ntable option, or set the insert_id server system variable to change the next\nAUTO_INCREMENT value inserted by the current session.\n\nLAST_INSERT_ID() can be used to see the last AUTO_INCREMENT value inserted by the\ncurrent session.\n\nALTER TABLE animals AUTO_INCREMENT=8;\n\nINSERT INTO animals (name) VALUES ('aardvark');\n\nSELECT * FROM animals;\n+----+-----------+\n| id | name      |\n+----+-----------+\n|  1 | dog       |\n|  2 | cat       |\n|  3 | penguin   |\n|  4 | fox       |\n|  5 | whale     |\n|  6 | ostrich   |\n|  8 | aardvark  |\n+----+-----------+\n\nSET insert_id=12;\n\nINSERT INTO animals (name) VALUES ('gorilla');\n\nSELECT * FROM animals;\n+----+-----------+\n| id | name      |\n+----+-----------+\n|  1 | dog       |\n|  2 | cat       |\n|  3 | penguin   |\n|  4 | fox       |\n|  5 | whale     |\n|  6 | ostrich   |\n|  8 | aardvark  |\n| 12 | gorilla   |\n+----+-----------+\n\nInnoDB\n------\nUntil MariaDB 10.2.3, InnoDB used an auto-increment counter that is stored in memory.\n\nWhen the server restarts, the counter is re-initialized to the highest value used in\nthe table, which cancels the effects of any AUTO_INCREMENT = N option in the\ntable statements.\n\nFrom MariaDB 10.2.4, this restriction has been lifted and AUTO_INCREMENT\nis persistent.\n\nSee also AUTO_INCREMENT Handling in InnoDB.\n\nSetting Explicit Values\n-----------------------\nIt is possible to specify a value for an AUTO_INCREMENT column. If the key is primary\nor unique, the value must not already exist in the key.\n\nIf the new value is higher than the current maximum value, the AUTO_INCREMENT value\nis updated, so the next value will be higher. If the new value is lower than the\ncurrent maximum value,  the AUTO_INCREMENT value remains unchanged.\n\nThe following example demonstrates these behaviors:\nCREATE TABLE t (id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY) ENGINE = InnoDB;\n\nINSERT INTO t VALUES (NULL);\nSELECT id FROM t;\n+----+\n| id |\n+----+\n|  1 |\n+----+\n\nINSERT INTO t VALUES (10); -- higher value\nSELECT id FROM t;\n+----+\n| id |\n+----+\n|  1 |\n| 10 |\n+----+\n\nINSERT INTO t VALUES (2); -- lower value\nINSERT INTO t VALUES (NULL); -- auto value\nSELECT id FROM t;\n+----+\n| id |\n+----+\n|  1 |\n|  2 |\n| 10 |\n| 11 |\n+----+\n\nThe ARCHIVE storage engine does not allow to insert a value that is lower than the\ncurrent maximum.\n\nMissing Values\n--------------\nAn AUTO_INCREMENT column normally has missing values. This happens because if a row\nis deleted, or an AUTO_INCREMENT value is explicitly updated, old values are never\nre-used. The REPLACE statement also deletes a row, and its value is wasted. With\nInnoDB, values can be reserved by a transaction; but if the transaction fails (for\nexample, because of a ROLLBACK) the reserved value will be lost.\n\nThus AUTO_INCREMENT values can be used to sort results in a chronological order, but\nnot to create a numeric sequence.\n\nReplication\n-----------\nTo make master-master or Galera safe to use AUTO_INCREMENT one should use the system\nvariables \n auto_increment_increment and auto_increment_offset to generate unique values for\neach server.\n\nCHECK Constraints, DEFAULT Values and Virtual Columns\n-----------------------------------------------------\n\nGenerating Auto_Increment Values When Adding the Attribute\n----------------------------------------------------------\nCREATE OR REPLACE TABLE t1 (a INT);\nINSERT t1 VALUES (0),(0),(0);\nALTER TABLE t1 MODIFY a INT NOT NULL AUTO_INCREMENT PRIMARY KEY;\nSELECT * FROM t1;\n+---+\n| a |\n+---+\n| 1 |\n| 2 |\n| 3 |\n+---+\n\nCREATE OR REPLACE TABLE t1 (a INT);\nINSERT t1 VALUES (5),(0),(8),(0);\nALTER TABLE t1 MODIFY a INT NOT NULL AUTO_INCREMENT PRIMARY KEY;\nSELECT * FROM t1;\n+---+\n| a |\n+---+\n| 5 |\n| 6 |\n| 8 |\n| 9 |\n+---+\n\nIf the NO_AUTO_VALUE_ON_ZERO SQL_MODE  is set, zero values will not be automatically\nincremented: \nSET SQL_MODE='no_auto_value_on_zero';\nCREATE OR REPLACE TABLE t1 (a INT);\nINSERT t1 VALUES (3), (0);\nALTER TABLE t1 MODIFY a INT NOT NULL AUTO_INCREMENT PRIMARY KEY;\nSELECT * FROM t1;\n+---+\n| a |\n+---+\n| 0 |\n| 3 |\n+---+\n','','https://mariadb.com/kb/en/library/auto_increment/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (265,22,'BIGINT','Syntax\n------\nBIGINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to\n18446744073709551615.\n\nIf a column has been set to ZEROFILL, all values will be prepended by zeros so that\nthe BIGINT value contains a number of M digits.\n\nNote: If the ZEROFILL attribute has been specified, the column will automatically\nbecome UNSIGNED.\n\nFor more details on the attributes, see Numeric Data Type Overview.\n\nSERIAL is an alias for:\nBIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE\n\nINT8 is a synonym for BIGINT.\n\nExamples\n--------\nCREATE TABLE bigints (a BIGINT,b BIGINT UNSIGNED,c BIGINT ZEROFILL);\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO bigints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO bigints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,10);\n\nINSERT INTO bigints\nVALUES (9223372036854775808,9223372036854775808,9223372036854775808);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO bigints\nVALUES (9223372036854775807,9223372036854775808,9223372036854775808);\n\nSELECT * FROM bigints;\n+---------------------+---------------------+----------------------+\n| a                   | b                   | c                    |\n+---------------------+---------------------+----------------------+\n|                 -10 |                  10 | 00000000000000000010 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n+---------------------+---------------------+----------------------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO bigints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,10);\n\nINSERT INTO bigints\nVALUES (9223372036854775808,9223372036854775808,9223372036854775808);\nQuery OK, 1 row affected, 1 warning (0.07 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO bigints\nVALUES (9223372036854775807,9223372036854775808,9223372036854775808);\n\nSELECT * FROM bigints;\n+---------------------+---------------------+----------------------+\n| a                   | b                   | c                    |\n+---------------------+---------------------+----------------------+\n|                 -10 |                   0 | 00000000000000000000 |\n|                 -10 |                  10 | 00000000000000000000 |\n|                 -10 |                  10 | 00000000000000000010 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n+---------------------+---------------------+----------------------+\n','','https://mariadb.com/kb/en/library/bigint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (266,22,'BINARY','This page describes the BINARY data type. For details about the operator, see\nBinary Operator.\n\nSyntax\n------\nBINARY(M)\n\nDescription\n-----------\nThe BINARY type is similar to the CHAR type, but stores binary\nbyte strings rather than non-binary character strings. M represents the\ncolumn length in bytes.\n\nIt contains no character set, and comparison and sorting are based on the numeric\nvalue of the bytes.\n\nIf the maximum length is exceeded, and SQL strict mode is not enabled , the extra\ncharacters will be dropped with a warning. If strict mode is enabled, an error\nwill occur.\n\nBINARY values are right-padded with 0x00 (the zero byte) to the specified length when\ninserted. The padding is not removed on select, so this needs to be taken into\naccount when sorting and comparing, where all bytes are significant. The zero byte,\n0x00 is less than a space for comparison purposes.\n\nExamples\n--------\nInserting too many characters, first with strict mode off, then with it on:\nCREATE TABLE bins (a BINARY(10));\n\nINSERT INTO bins VALUES('12345678901');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSELECT * FROM bins;\n+------------+\n| a          |\n+------------+\n| 1234567890 |\n+------------+\n\nSET sql_mode='STRICT_ALL_TABLES';\n\nINSERT INTO bins VALUES('12345678901');\nERROR 1406 (22001): Data too long for column 'a' at row 1\n\nSorting is performed with the byte value:\nTRUNCATE bins;\n\nINSERT INTO bins VALUES('A'),('B'),('a'),('b');\n\nSELECT * FROM bins ORDER BY a;\n+------+\n| a    |\n+------+\n| A    |\n| B    |\n| a    |\n| b    |\n+------+\n\nUsing CAST to sort as a CHAR instead:\nSELECT * FROM bins ORDER BY CAST(a AS CHAR);\n+------+\n| a    |\n+------+\n| a    |\n| A    |\n| b    |\n| B    |\n+------+\n\nThe field is a BINARY(10), so padding of two '\0's are inserted, causing comparisons\nthat don't take this into account to fail:\nTRUNCATE bins;\n\nINSERT INTO bins VALUES('12345678');\n\nSELECT a = '12345678', a = '12345678\0\0' from bins;\n+----------------+--------------------+\n| a = '12345678' | a = '12345678\0\0' |\n+----------------+--------------------+\n|              0 |                  1 |\n+----------------+--------------------+\n','','https://mariadb.com/kb/en/library/binary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (267,22,'BIT','Syntax\n------\nBIT[(M)]\n\nDescription\n-----------\nA bit-field type. M indicates the number of bits per value, from 1 to\n64. The default is 1 if M is omitted.\n\nBit values can be inserted with b'value' notation, where value is the bit value in\n0's and 1's.\n\nBit fields are automatically zero-padded from the left to the full length of the bit,\nso for example in a BIT(4) field, '10' is equivalent to '0010'.\n\nBits are returned as binary, so to display them, either add 0, or use a function such\nas HEX, OCT or BIN to convert them.\n\nExamples\n--------\nCREATE TABLE b ( b1 BIT(8) );\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO b VALUES (b'11111111');\n\nINSERT INTO b VALUES (b'01010101');\n\nINSERT INTO b VALUES (b'1111111111111');\nERROR 1406 (22001): Data too long for column 'b1' at row 1\n\nSELECT b1+0, HEX(b1), OCT(b1), BIN(b1) FROM b;\n+------+---------+---------+----------+\n| b1+0 | HEX(b1) | OCT(b1) | BIN(b1)  |\n+------+---------+---------+----------+\n|  255 | FF      | 377     | 11111111 |\n|   85 | 55      | 125     | 1010101  |\n+------+---------+---------+----------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO b VALUES (b'11111111'),(b'01010101'),(b'1111111111111');\nQuery OK, 3 rows affected, 1 warning (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 1\n\nSHOW WARNINGS;\n+---------+------+---------------------------------------------+\n| Level   | Code | Message                                     |\n+---------+------+---------------------------------------------+\n| Warning | 1264 | Out of range value for column 'b1' at row 3 |\n+---------+------+---------------------------------------------+\n\nSELECT b1+0, HEX(b1), OCT(b1), BIN(b1) FROM b;\n+------+---------+---------+----------+\n| b1+0 | HEX(b1) | OCT(b1) | BIN(b1)  |\n+------+---------+---------+----------+\n|  255 | FF      | 377     | 11111111 |\n|   85 | 55      | 125     | 1010101  |\n|  255 | FF      | 377     | 11111111 |\n+------+---------+---------+----------+\n','','https://mariadb.com/kb/en/library/bit/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (268,22,'BLOB','Syntax\n------\nBLOB[(M)]\n\nDescription\n-----------\nA BLOB column with a maximum length of 65,535 (216 - 1) bytes. Each\nBLOB value is stored using a two-byte length prefix that indicates the\nnumber of bytes in the value.\n\nAn optional length M can be given for this type. If this is done,\nMariaDB creates the column as the smallest BLOB type large enough to\nhold values M bytes long.\n\nBLOBS can also be used to store dynamic columns.\n\nBefore MariaDB 10.2.1, BLOB and TEXT columns could not be assigned a DEFAULT value.\n\nThis restriction was lifted in MariaDB 10.2.1.\n\nIndexing\n\nOracle Mode\n','','https://mariadb.com/kb/en/library/blob/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (269,22,'BLOB and TEXT Data Types','Description\n-----------\nA BLOB is a binary large object that can hold a variable amount of\ndata. The four BLOB types are\n\nThese differ only in the maximum length of the values they can hold.\n\nThe TEXT types are\n\nThese correspond to the four BLOB types and have the same\nmaximum lengths and storage requirements.\n','','https://mariadb.com/kb/en/library/blob-and-text-data-types/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (270,22,'BOOLEAN','Syntax\n------\nBOOL, BOOLEAN\n\nDescription\n-----------\nThese types are synonyms for TINYINT(1).\n\nA value of zero is considered false. Non-zero values are considered true.\n\nHowever, the values TRUE and FALSE are merely aliases for 1 and 0. See Boolean\nLiterals, as well as the IS operator for testing values against a boolean.\n\nExamples\n--------\nCREATE TABLE boo (i BOOLEAN);\n\nDESC boo;\n+-------+------------+------+-----+---------+-------+\n| Field | Type       | Null | Key | Default | Extra |\n+-------+------------+------+-----+---------+-------+\n| i     | tinyint(1) | YES  |     | NULL    |       |\n+-------+------------+------+-----+---------+-------+\n\nSELECT IF(0, 'true', 'false');\n+------------------------+\n| IF(0, 'true', 'false') |\n+------------------------+\n| false                  |\n+------------------------+\n\nSELECT IF(1, 'true', 'false');\n+------------------------+\n| IF(1, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+\n\nSELECT IF(2, 'true', 'false');\n+------------------------+\n| IF(2, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+\n\nTRUE and FALSE as aliases for 1 and 0:\nSELECT IF(0 = FALSE, 'true', 'false');\n\n+--------------------------------+\n| IF(0 = FALSE, 'true', 'false') |\n+--------------------------------+\n| true                           |\n+--------------------------------+\n\nSELECT IF(1 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(1 = TRUE, 'true', 'false') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nSELECT IF(2 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(2 = TRUE, 'true', 'false') |\n+-------------------------------+\n| false                         |\n+-------------------------------+\n\nSELECT IF(2 = FALSE, 'true', 'false');\n+--------------------------------+\n| IF(2 = FALSE, 'true', 'false') |\n+--------------------------------+\n| false                          |\n+--------------------------------+\n\nThe last two statements display the results shown because 2 is equal\nto neither 1 nor 0.\n','','https://mariadb.com/kb/en/library/boolean/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (271,22,'CHAR','This article covers the CHAR data type. See CHAR Function for the function.\n\nSyntax\n------\n[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA fixed-length string that is always right-padded with spaces to the specified\nlength when stored. M represents the column length in characters. The range\nof M is 0 to 255. If M is omitted, the length is 1.\n\nCHAR(0) columns can contain 2 values: an empty string or NULL. Such columns cannot be\npart of an index. The CONNECT storage engine does not support CHAR(0).\n\nNote: Trailing spaces are removed when CHAR values are retrieved\nunless the PAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.\n\nBefore MariaDB 10.2, all collations were of type PADSPACE, meaning that CHAR (as well\nas VARCHAR and TEXT) values are compared without regard for trailing spaces. This\ndoes not apply to the LIKE pattern-matching operator, which takes into account\ntrailing spaces.\n\nIf a unique index consists of a column where trailing pad characters are stripped or\nignored, inserts into that column where values differ only by the number of trailing\npad characters will result in a duplicate-key error.\n\nExamples\n--------\nTrailing spaces:\nCREATE TABLE strtest (c CHAR(10));\nINSERT INTO strtest VALUES('Maria   ');\n\nSELECT c='Maria',c='Maria   ' FROM strtest;\n+-----------+--------------+\n| c='Maria' | c='Maria   ' |\n+-----------+--------------+\n|         1 |            1 |\n+-----------+--------------+\n\nSELECT c LIKE 'Maria',c LIKE 'Maria   ' FROM strtest;\n+----------------+-------------------+\n| c LIKE 'Maria' | c LIKE 'Maria   ' |\n+----------------+-------------------+\n|              1 |                 0 |\n+----------------+-------------------+\n\nNO PAD Collations\n-----------------\n','','https://mariadb.com/kb/en/library/char/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (272,22,'CHAR BYTE','Description\n-----------\nThe CHAR BYTE data type is an alias for the \nBINARY data type. This is a\ncompatibility feature.\n','','https://mariadb.com/kb/en/library/char-byte/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (273,22,'DATE','Syntax\n------\nDATE\n\nDescription\n-----------\nA date. The supported range is '1000-01-01' to '9999-12-31'. MariaDB\ndisplays DATE values in 'YYYY-MM-DD' format, but can be assigned dates in looser\nformats, including strings or numbers, as long as they make sense. These include a\nshort year, YY-MM-DD, no delimiters, YYMMDD, or any other acceptable delimiter, for\nexample YYYY/MM/DD. For details, see date and time literals.\n\n'0000-00-00' is a permitted special value (zero-date), unless the NO_ZERO_DATE\nSQL_MODE is used. Also, individual components of a date can be set to 0 (for example:\n'2015-00-12'), unless the NO_ZERO_IN_DATE SQL_MODE is used. In many cases, the result\nof en expression involving a zero-date, or a date with zero-parts, is NULL. If the\nALLOW_INVALID_DATES SQL_MODE is enabled, if the day part is in the range between 1\nand 31, the date does not produce any error, even for months that have less than\n31 days.\n\nOracle Mode\n\nExamples\n--------\nCREATE TABLE t1 (d DATE);\n\nINSERT INTO t1 VALUES ("2010-01-12"), ("2011-2-28"), ('120314'),('13*04*21');\n\nSELECT * FROM t1;\n+------------+\n| d          |\n+------------+\n| 2010-01-12 |\n| 2011-02-28 |\n| 2012-03-14 |\n| 2013-04-21 |\n+------------+\n','','https://mariadb.com/kb/en/library/date/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (274,22,'DATETIME','Syntax\n------\nDATETIME [(microsecond precision)]\n\nDescription\n-----------\nA date and time combination.\n\nMariaDB displays DATETIME values in 'YYYY-MM-DD HH:MM:SS.ffffff' format, but\nallows assignment of values to DATETIME columns using either strings or\nnumbers. For details, see date and time literals.\n\nDATETIME columns also accept CURRENT_TIMESTAMP as the default value.\n\nMariaDB 10.1.2 introduced the --mysql56-temporal-format option, on by default, which\nallows MariaDB to store DATETMEs using the same low-level format MySQL 5.6 uses.  For\nmore information, see Internal Format, below.\n\nFor storage requirements, see Data Type Storage Requirements.\n\nSupported Values\n----------------\nMariaDB stores values that use the DATETIME data type in a format that supports\nvalues between 1000-01-01 00:00:00.000000 and 9999-12-31 23:59:59.999999.\n\nMariaDB can also store microseconds with a precision between 0 and 6. If no\nmicrosecond precision is specified, then 0 is used by default.\n\nMariaDB also supports '0000-00-00' as a special zero-date value, unless NO_ZERO_DATE\nis specified in the SQL_MODE. Similarly, individual components of a date can be set\nto 0 (for example: '2015-00-12'), unless NO_ZERO_DATE is specified in the SQL_MODE.\n\nIn many cases, the result of en expression involving a zero-date, or a date with\nzero-parts, is NULL. If the ALLOW_INVALID_DATES SQL_MODE is enabled, if the day part\nis in the range between 1 and 31, the date does not produce any error, even for\nmonths that have less than 31 days.\n\nTime Zones\n----------\nIf a column uses the DATETIME data type, then any inserted values are stored as-is,\nso no automatic time zone conversions are performed.\n\nMariaDB also does not currently support time zone literals that contain time zone\nidentifiers. See MDEV-11829 for more information.\n\nMariaDB validates DATETIME literals against the session's time zone. For example, if\na specific time range never occurred in a specific time zone due to daylight savings\ntime, then DATETIME values within that range would be invalid for that time zone.\n\nFor example, daylight savings time started on March 10, 2019 in the US, so the time\nrange between 02:00:00 and 02:59:59 is invalid for that day in US time zones:\nSET time_zone = 'America/New_York';\nQuery OK, 0 rows affected (0.000 sec)\n\nINSERT INTO timestamp_test VALUES ('2019-03-10 02:55:05');\nERROR 1292 (22007): Incorrect datetime value: '2019-03-10 02:55:05' for column\n`db1`.`timestamp_test`.`timestamp_test` at row 1\n\nBut that same time range is fine in other time zones, such as Coordinated Universal\nTime (UTC). For example:\nSET time_zone = 'UTC';\nQuery OK, 0 rows affected (0.000 sec)\n\nINSERT INTO timestamp_test VALUES ('2019-03-10 02:55:05');\nQuery OK, 1 row affected (0.002 sec)\n\nOracle Mode\n-----------\n\nInternal Format\n---------------\nIn MariaDB 10.1.2 a new temporal format was introduced from MySQL 5.6 that alters how\nthe TIME, DATETIME and TIMESTAMP columns operate at lower levels.  These changes\nallow these temporal data types to have fractional parts and negative values.  You\ncan disable this feature using the mysql56_temporal_format system variable.\n\nTables that include TIMESTAMP values that were created on an older version of MariaDB\nor that were created while the mysql56_temporal_format system variable was disabled\ncontinue to store data using the older data type format.\n\nIn order to update table columns from the older format to the newer format, execute\nan ALTER TABLE... MODIFY COLUMN statement that changes the column to the *same* data\ntype. This change may be needed if you want to export the table's tablespace and\nimport it onto a server that has mysql56_temporal_format=ON set (see MDEV-15225).\n\nFor instance, if you have a DATETIME column in your table: \nSHOW VARIABLES LIKE 'mysql56_temporal_format';\n\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON    |\n+-------------------------+-------+\n\nALTER TABLE example_table MODIFY ts_col DATETIME;\n\nWhen MariaDB executes the ALTER TABLE statement, it converts the data from the older\ntemporal format to the newer one.\n\nIn the event that you have several tables and columns using temporal data types that\nyou want to switch over to the new format, make sure the system variable is enabled,\nthen perform a dump and restore using mysqldump.  The columns using relevant temporal\ndata types are restored using the new temporal format.\n\nStarting from MariaDB 10.5.1 columns with old temporal formats are marked with a /*\nmariadb-5.3 */  comment in the output of SHOW CREATE TABLE, SHOW COLUMNS, DESCRIBE\nstatements, as well as in the COLUMN_TYPE column of the\nINFORMATION_SCHEMA.COLUMNS Table.\n\nSHOW CREATE TABLE mariadb5312_datetime\G\n*************************** 1. row ***************************\n   Table: mariadb5312_datetime\nCreate Table: CREATE TABLE `mariadb5312_datetime` (\n `dt0` datetime /* mariadb-5.3 */ DEFAULT NULL,\n `dt6` datetime(6) /* mariadb-5.3 */ DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n\nExamples\n--------\nCREATE TABLE t1 (d DATETIME);\n\nINSERT INTO t1 VALUES ("2011-03-11"), ("2012-04-19 13:08:22"),\n ("2013-07-18 13:44:22.123456");\n\nSELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-03-11 00:00:00 |\n| 2012-04-19 13:08:22 |\n| 2013-07-18 13:44:22 |\n+---------------------+\n\nCREATE TABLE t2 (d DATETIME(6));\n\nINSERT INTO t2 VALUES ("2011-03-11"), ("2012-04-19 13:08:22"),\n ("2013-07-18 13:44:22.123456");\n\nSELECT * FROM t2;\n+----------------------------+\n| d                          |\n+----------------------------+\n| 2011-03-11 00:00:00.000000 |\n| 2012-04-19 13:08:22.000000 |\n| 2013-07-18 13:44:22.123456 |\n+----------------------------++\n\nStrings used in datetime context are automatically converted to datetime(6). If you\nwant to have a datetime without seconds, you should use CONVERT(..,datetime).\n\nSELECT CONVERT('2007-11-30 10:30:19',datetime);\n+-----------------------------------------+\n| CONVERT('2007-11-30 10:30:19',datetime) |\n+-----------------------------------------+\n| 2007-11-30 10:30:19                     |\n+-----------------------------------------+\n\nSELECT CONVERT('2007-11-30 10:30:19',datetime(6));\n+--------------------------------------------+\n| CONVERT('2007-11-30 10:30:19',datetime(6)) |\n+--------------------------------------------+\n| 2007-11-30 10:30:19.000000                 |\n+--------------------------------------------+\n','','https://mariadb.com/kb/en/library/datetime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (275,22,'DECIMAL','Syntax\n------\nDECIMAL[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA packed "exact" fixed-point number. M is the total number of digits (the\nprecision) and D is the number of digits after the decimal point (the\nscale).\n\nUNSIGNED, if specified, disallows negative values.\n\nZEROFILL, if specified, pads the number with zeros, up to the total number\nof digits specified by M.\n\nAll basic calculations (+, -, *, /) with DECIMAL columns are done with\na precision of 65 digits.\n\nFor more details on the attributes, see Numeric Data Type Overview.\n\nDEC, NUMERIC and FIXED are synonyms, as well as NUMBER in Oracle mode from\nMariaDB 10.3.\n\nExamples\n--------\nCREATE TABLE t1 (d DECIMAL UNSIGNED ZEROFILL);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4.0),(5.2),(5.7);\nQuery OK, 6 rows affected, 2 warnings (0.16 sec)\nRecords: 6  Duplicates: 0  Warnings: 2\n\nNote (Code 1265): Data truncated for column 'd' at row 5\nNote (Code 1265): Data truncated for column 'd' at row 6\n\nSELECT * FROM t1;\n+------------+\n| d          |\n+------------+\n| 0000000001 |\n| 0000000002 |\n| 0000000003 |\n| 0000000004 |\n| 0000000005 |\n| 0000000006 |\n+------------+\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO t1 VALUES (-7);\nERROR 1264 (22003): Out of range value for column 'd' at row 1\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO t1 VALUES (-7);\nQuery OK, 1 row affected, 1 warning (0.02 sec)\nWarning (Code 1264): Out of range value for column 'd' at row 1\n\nSELECT * FROM t1;\n+------------+\n| d          |\n+------------+\n| 0000000001 |\n| 0000000002 |\n| 0000000003 |\n| 0000000004 |\n| 0000000005 |\n| 0000000006 |\n| 0000000000 |\n+------------+\n','','https://mariadb.com/kb/en/library/decimal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (276,22,'ENUM','Syntax\n------\nENUM('value1','value2',...) [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nAn enumeration. A string object that can have only one value, chosen\nfrom the list of values 'value1', 'value2', ..., NULL or the special \n'' error value. In theory, an ENUM column can have a maximum of 65,535 distinct\nvalues; in practice, the real maximum depends on many factors. ENUM values are\nrepresented internally as integers.\n\nTrailing spaces are automatically stripped from ENUM values on table creation.\n\nENUMs require relatively little storage space compared to strings, either one or two\nbytes depending on the number of enumeration values.\n\nNULL and empty values\n\nAn ENUM can also contain NULL and empty values. If the ENUM column is declared to\npermit NULL values, NULL becomes a valid value, as well as the default value (see\nbelow). If strict SQL Mode is not enabled, and an invalid value is inserted into an\nENUM, a special empty string, with an index value of zero (see Numeric index, below),\nis inserted, with a warning. This may be confusing, because the empty string is also\na possible value, and the only difference if that is this case its index is not 0.\n\nInserting will fail with an error if strict mode is active.\n\nIf a DEFAULT clause is missing, the default value will be:\n\nNumeric index\n\nENUM values are indexed numerically in the order they are defined, and sorting will\nbe performed in this numeric order. We suggest not using ENUM to store numerals, as\nthere is little to no storage space benefit, and it is easy to confuse the enum\ninteger with the enum numeral value by leaving out the quotes.\n\nAn ENUM defined as ENUM('apple','orange','pear') would have the following\nindex values:\n+--------+--------+\n|Index   |Value   |\n|NULL    |NULL    |\n|0       |''      |\n|1       |'apple' |\n|2       |'orange'|\n|3       |'pear'  |\n+--------+--------+\n\nExamples\n--------\nCREATE TABLE fruits (\n id INT NOT NULL auto_increment PRIMARY KEY,\n fruit ENUM('apple','orange','pear'),\n bushels INT);\n\nDESCRIBE fruits;\n+---------+-------------------------------+------+-----+---------+----------------+\n| Field   | Type                          | Null | Key | Default | Extra          |\n+---------+-------------------------------+------+-----+---------+----------------+\n| id      | int(11)                       | NO   | PRI | NULL    | auto_increment |\n| fruit   | enum('apple','orange','pear') | YES  |     | NULL    |                |\n| bushels | int(11)                       | YES  |     | NULL    |                |\n+---------+-------------------------------+------+-----+---------+----------------+\n\nINSERT INTO fruits\n  (fruit,bushels) VALUES\n  ('pear',20),\n  ('apple',100),\n  ('orange',25);\n\nINSERT INTO fruits\n  (fruit,bushels) VALUES\n  ('avocado',10);\nERROR 1265 (01000): Data truncated for column 'fruit' at row 1\n\nSELECT * FROM fruits;\n+----+--------+---------+\n| id | fruit  | bushels |\n+----+--------+---------+\n|  1 | pear   |      20 |\n|  2 | apple  |     100 |\n|  3 | orange |      25 |\n+----+--------+---------+\n\nSelecting by numeric index:\nSELECT * FROM fruits WHERE fruit=2;\n+----+--------+---------+\n| id | fruit  | bushels |\n+----+--------+---------+\n|  3 | orange |      25 |\n+----+--------+---------+\n\nSorting is according to the index value:\nCREATE TABLE enums (a ENUM('2','1'));\n\nINSERT INTO enums VALUES ('1'),('2');\n\nSELECT * FROM enums ORDER BY a ASC;\n+------+\n| a    |\n+------+\n| 2    |\n| 1    |\n+------+\n\nIt's easy to get confused between returning the enum integer with the stored value,\nso we don't suggest using ENUM to store numerals. The first example returns the 1st\nindexed field ('2' has an index value of 1, as it's defined first), while the second\nexample returns the string value '1'.\n\nSELECT * FROM enums WHERE a=1;\n+------+\n| a    |\n+------+\n| 2    |\n+------+\n\nSELECT * FROM enums WHERE a='1';\n+------+\n| a    |\n+------+\n| 1    |\n+------+\n','','https://mariadb.com/kb/en/library/enum/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (277,22,'DOUBLE','Syntax\n------\nDOUBLE[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nDOUBLE PRECISION[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nREAL[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA normal-size (double-precision) floating-point number (see FLOAT for a\nsingle-precision floating-point number).\n\nAllowable values are:\n\nThese are the theoretical limits, based on the IEEE standard. The actual range\nmight be slightly smaller depending on your hardware or operating system.\n\nM is the total number of digits and D is the number of digits\nfollowing the decimal point. If M and D are omitted, values are stored\nto the limits allowed by the hardware. A double-precision\nfloating-point number is accurate to approximately 15 decimal places.\n\nUNSIGNED, if specified, disallows negative values.\n\nZEROFILL, if specified, pads the number with zeros, up to the total number\nof digits specified by M.\n\nREAL and DOUBLE PRECISION are synonyms, unless the REAL_AS_FLOAT SQL mode is enabled,\nin which case REAL is a synonym for FLOAT rather than DOUBLE.\n\nSee Floating Point Accuracy for issues when using floating-point numbers.\n\nFor more details on the attributes, see Numeric Data Type Overview.\n\nExamples\n--------\nCREATE TABLE t1 (d DOUBLE(5,0) zerofill);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4);\n\nSELECT * FROM t1;\n+-------+\n| d     |\n+-------+\n| 00001 |\n| 00002 |\n| 00003 |\n| 00004 |\n+-------+\n','','https://mariadb.com/kb/en/library/double/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (278,22,'FLOAT','Syntax\n------\nFLOAT[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA small (single-precision) floating-point number (see DOUBLE for a regular-size\nfloating point number). Allowable values are:\n\nThese are the theoretical limits, based on the IEEE \nstandard. The actual range might be slightly smaller depending on your\nhardware or operating system.\n\nM is the total number of digits and D is the number of digits\nfollowing the decimal point. If M and D are omitted, values are stored\nto the limits allowed by the hardware. A single-precision\nfloating-point number is accurate to approximately 7 decimal places.\n\nUNSIGNED, if specified, disallows negative values.\n\nUsing FLOAT might give you some unexpected problems because all\ncalculations in MariaDB are done with double precision. See Floating Point Accuracy.\n\nFor more details on the attributes, see Numeric Data Type Overview.\n','','https://mariadb.com/kb/en/library/float/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (279,22,'Geometry Types','Description\n-----------\nMariaDB provides a standard way of creating spatial columns for geometry types,\nfor example, with CREATE TABLE or ALTER TABLE.\n\nCurrently, spatial columns are supported for MyISAM, InnoDB, NDB, and ARCHIVE\ntables. See also SPATIAL INDEX.\n\nThe basic geometry type is GEOMETRY. But the type can be more specific. The following\ntypes are supported:\n+------------------+\n|Geometry Types    |\n|POINT             |\n|LINESTRING        |\n|POLYGON           |\n|MULTIPOINT        |\n|MULTILINESTRING   |\n|MULTIPOLYGON      |\n|GEOMETRYCOLLECTION|\n|GEOMETRY          |\n+------------------+\n\nExamples\n--------\nNote: For clarity, only one type is listed per table in the examples below, but\na table\nrow can contain multiple types. For example:\nCREATE TABLE object (shapeA POLYGON, shapeB LINESTRING);\n\nPOINT\n\nCREATE TABLE gis_point  (g POINT);\nSHOW FIELDS FROM gis_point;\nINSERT INTO gis_point VALUES\n  (PointFromText('POINT(10 10)')),\n  (PointFromText('POINT(20 10)')),\n  (PointFromText('POINT(20 20)')),\n  (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n\nLINESTRING\n\nCREATE TABLE gis_line  (g LINESTRING);\nSHOW FIELDS FROM gis_line;\nINSERT INTO gis_line VALUES\n  (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n  (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n  (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n\nPOLYGON\n\nCREATE TABLE gis_polygon   (g POLYGON);\nSHOW FIELDS FROM gis_polygon;\nINSERT INTO gis_polygon VALUES\n  (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n  (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10\n20,10 10))')),\n  (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0), Point(30, 0), Point(30, 30),\nPoint(0, 0))))));\n\nMULTIPOINT\n\nCREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\nINSERT INTO gis_multi_point VALUES\n  (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n  (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n  (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n\nMULTILINESTRING\n\nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\nINSERT INTO gis_multi_line VALUES\n  (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16\n23,16 48))')),\n  (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n  (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)),\nLineString(Point(2, 5), Point(5, 8), Point(21, 7))))));\n\nMULTIPOLYGON\n\nCREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\nINSERT INTO gis_multi_polygon VALUES\n  (MultiPolygonFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66\n23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48\n6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0, 3), Point(3, 3),\nPoint(3, 0), Point(0, 3)))))));\n\nGEOMETRYCOLLECTION\n\nCREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n  (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n  (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6),\nPoint(7, 9)))))),\n  (GeomFromText('GeometryCollection()')),\n  (GeomFromText('GeometryCollection EMPTY'));\n\nGEOMETRY\n\nCREATE TABLE gis_geometry (g GEOMETRY);\nSHOW FIELDS FROM gis_geometry;\nINSERT into gis_geometry SELECT * FROM gis_point;\nINSERT into gis_geometry SELECT * FROM gis_line;\nINSERT into gis_geometry SELECT * FROM gis_polygon;\nINSERT into gis_geometry SELECT * FROM gis_multi_point;\nINSERT into gis_geometry SELECT * FROM gis_multi_line;\nINSERT into gis_geometry SELECT * FROM gis_multi_polygon;\nINSERT into gis_geometry SELECT * FROM gis_geometrycollection;\n','','https://mariadb.com/kb/en/library/geometry-types/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (280,22,'JSON Data Type','JSON is an alias for LONGTEXT introduced for compatibility reasons with MySQL's JSON\ndata type. MariaDB implements this as a LONGTEXT rather, as the JSON data type\ncontradicts the SQL standard, and MariaDB's benchmarks indicate that performance is\nat least equivalent.\n\nIn order to ensure that a a valid json document is inserted, the JSON_VALID function\ncan be used as a CHECK constraint. This constraint is automatically included for\ntypes using the JSON alias from MariaDB 10.4.3.\n\nExamples\n--------\nCREATE TABLE t (j JSON);\n\nDESC t;\n+-------+----------+------+-----+---------+-------+\n| Field | Type     | Null | Key | Default | Extra |\n+-------+----------+------+-----+---------+-------+\n| j     | longtext | YES  |     | NULL    |       |\n+-------+----------+------+-----+---------+-------+\n\nWith validation:\nCREATE TABLE t2 (\n j JSON\n CHECK (JSON_VALID(j))\n);\n\nINSERT INTO t2 VALUES ('invalid');\nERROR 4025 (23000): CONSTRAINT `j` failed for `test`.`t2`\n\nINSERT INTO t2 VALUES ('{"id": 1, "name": "Monty"}');\nQuery OK, 1 row affected (0.13 sec)\n\nReplicating JSON Data Between MySQL and MariaDB\n-----------------------------------------------\nThe JSON type in MySQL stores the JSON object in a compact form, not as LONGTEXT as\nin MariaDB.\n\nThis means that row based replication will not work for JSON types from MySQL\nto MariaDB.\n\nThere are a a few different ways to solve this:\n\nConverting a MySQL TABLE with JSON Fields to MariaDB\n----------------------------------------------------\nMariaDB can't directly access MySQL's JSON format.\n\nThere are a a few different ways to move the table to MariaDB:\n\nDifferences Between MySQL JSON Strings and MariaDB JSON Strings\n---------------------------------------------------------------\n','','https://mariadb.com/kb/en/library/json-data-type/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (281,22,'LONGBLOB','Syntax\n------\nLONGBLOB\n\nDescription\n-----------\nA BLOB column with a \nmaximum length of 4,294,967,295 bytes or 4GB (232 - 1). The effective maximum length\nof LONGBLOB columns depends on the\nconfigured maximum packet size in the client/server protocol and\navailable memory. Each LONGBLOB value is stored using a four-byte\nlength prefix that indicates the number of bytes in the value.\n\nOracle Mode\n','','https://mariadb.com/kb/en/library/longblob/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (282,22,'LONGTEXT','Syntax\n------\nLONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA TEXT column with a maximum length of 4,294,967,295 or 4GB (232 - 1) characters. The\neffective maximum length is less if the value contains multi-byte characters. The\neffective maximum length of LONGTEXT columns also depends on the configured maximum\npacket size in the client/server protocol and available memory. Each LONGTEXT value\nis stored using a four-byte length prefix that indicates the number of bytes in\nthe value.\n\nFrom MariaDB 10.2.7, JSON is an alias for LONGTEXT. See JSON Data Type for details.\n\nOracle Mode\n-----------\n','','https://mariadb.com/kb/en/library/longtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (283,22,'MEDIUMBLOB','Syntax\n------\nMEDIUMBLOB\n\nDescription\n-----------\nA BLOB column with a maximum\nlength of 16,777,215 (224 - 1) bytes.\n\nEach MEDIUMBLOB value is stored using a three-byte length prefix that\nindicates the number of bytes in the value.\n','','https://mariadb.com/kb/en/library/mediumblob/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (284,22,'MEDIUMINT','Syntax\n------\nMEDIUMINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA medium-sized integer. The signed range is -8388608 to 8388607. The\nunsigned range is 0 to 16777215.\n\nZEROFILL pads the integer with zeroes and assumes UNSIGNED (even if UNSIGNED is\nnot specified).\n\nINT3 is a synonym for MEDIUMINT.\n\nFor details on the attributes, see Numeric Data Type Overview.\n\nExamples\n--------\nCREATE TABLE mediumints (a MEDIUMINT,b MEDIUMINT UNSIGNED,c MEDIUMINT ZEROFILL);\n\nDESCRIBE mediumints;\n+-------+--------------------------------+------+-----+---------+-------+\n| Field | Type                           | Null | Key | Default | Extra |\n+-------+--------------------------------+------+-----+---------+-------+\n| a     | mediumint(9)                   | YES  |     | NULL    |       |\n| b     | mediumint(8) unsigned          | YES  |     | NULL    |       |\n| c     | mediumint(8) unsigned zerofill | YES  |     | NULL    |       |\n+-------+--------------------------------+------+-----+---------+-------+\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO mediumints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,10);\n\nINSERT INTO mediumints VALUES (8388608,8388608,8388608);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO mediumints VALUES (8388607,8388608,8388608);\n\nSELECT * FROM mediumints;\n+---------+---------+----------+\n| a       | b       | c        |\n+---------+---------+----------+\n|     -10 |      10 | 00000010 |\n| 8388607 | 8388608 | 08388608 |\n+---------+---------+----------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO mediumints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.05 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,10);\n\nINSERT INTO mediumints VALUES (8388608,8388608,8388608);\nQuery OK, 1 row affected, 1 warning (0.05 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO mediumints VALUES (8388607,8388608,8388608);\n\nSELECT * FROM mediumints;\n+---------+---------+----------+\n| a       | b       | c        |\n+---------+---------+----------+\n|     -10 |       0 | 00000000 |\n|     -10 |       0 | 00000000 |\n|     -10 |      10 | 00000000 |\n|     -10 |      10 | 00000010 |\n| 8388607 | 8388608 | 08388608 |\n| 8388607 | 8388608 | 08388608 |\n+---------+---------+----------+\n','','https://mariadb.com/kb/en/library/mediumint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (285,22,'MEDIUMTEXT','Syntax\n------\nMEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA TEXT column with a \nmaximum length of 16,777,215 (224 - 1)\ncharacters.  The effective maximum length is less if the value\ncontains multi-byte characters. Each MEDIUMTEXT value is stored using\na three-byte length prefix that indicates the number of bytes in the\nvalue.\n','','https://mariadb.com/kb/en/library/mediumtext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (286,22,'Numeric Data Type Overview','There are a number of numeric data types:\n\nSee the specific articles for detailed information on each.\n\nSIGNED, UNSIGNED and ZEROFILL\n-----------------------------\nMost numeric types can be defined as SIGNED, UNSIGNED or ZEROFILL, for example:\nTINYINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n\nIf SIGNED, or no attribute, is specified, a portion of the numeric type will be\nreserved for the sign (plus or minus). For example, a TINYINT SIGNED can range from\n-128 to 127.\n\nIf UNSIGNED is specified, no portion of the numeric type is reserved for the sign, so\nfor integer types range can be larger. For example, a TINYINT UNSIGNED can range from\n0 to 255. Floating point and fixed-point types also can be UNSIGNED, but this only\nprevents negative values from being stored and doesn't alter the range.\n\nIf ZEROFILL is specified, the column will be set to UNSIGNED and the spaces used by\ndefault to pad the field are replaced with zeros. ZEROFILL is ignored in expressions\nor as part of a UNION. ZEROFILL is a non-standard MySQL and MariaDB enhancement.\n\nNote that although the preferred syntax indicates that the attributes are exclusive,\nmore than one attribute can be specified.\n\nUntil MariaDB 10.2.7 (MDEV-8659), any combination of the attributes could be used in\nany order, with duplicates. In this case:\n\nFrom MariaDB 10.2.8, only the following combinations are supported:\n\nThe latter two should be replaced with simply ZEROFILL, but are still accepted by\nthe parser.\n\nExamples\n\nCREATE TABLE zf (\n i1 TINYINT SIGNED,\n i2 TINYINT UNSIGNED,\n i3 TINYINT ZEROFILL\n);\n\nINSERT INTO zf VALUES (2,2,2);\n\nSELECT * FROM zf;\n+------+------+------+\n| i1   | i2   | i3   |\n+------+------+------+\n|    2 |    2 |  002 |\n+------+------+------+\n\nRange\n-----\nWhen attempting to add a value that is out of the valid range for the numeric type,\nMariaDB will react depending on the strict SQL_MODE setting.\n\nIf strict_mode has been set (the default from MariaDB 10.2.4), MariaDB will return\nan error.\n\nIf strict_mode has not been set (the default until MariaDB 10.2.3), MariaDB will\nadjust the number to fit in the field, returning a warning.\n\nExamples\n\nWith strict_mode set:\nSHOW VARIABLES LIKE 'sql_mode';\n+---------------+--------------------------------------------------------------------\n----------------------+\n| Variable_name | Value                                                              \n           |\n+---------------+--------------------------------------------------------------------\n----------------------+\n| sql_mode      |\n\n_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+---------------+--------------------------------------------------------------------\n----------------------+\n\nCREATE TABLE ranges (i1 TINYINT, i2 SMALLINT, i3 TINYINT UNSIGNED);\n\nINSERT INTO ranges VALUES (257,257,257);\nERROR 1264 (22003): Out of range value for column 'i1' at row 1\n\nSELECT * FROM ranges;\nEmpty set (0.10 sec)\n\nWith strict_mode unset:\nSHOW VARIABLES LIKE 'sql_mode%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| sql_mode      |       |\n+---------------+-------+\n\nCREATE TABLE ranges (i1 TINYINT, i2 SMALLINT, i3 TINYINT UNSIGNED);\n\nINSERT INTO ranges VALUES (257,257,257);\nQuery OK, 1 row affected, 2 warnings (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+---------------------------------------------+\n| Level   | Code | Message                                     |\n+---------+------+---------------------------------------------+\n| Warning | 1264 | Out of range value for column 'i1' at row 1 |\n| Warning | 1264 | Out of range value for column 'i3' at row 1 |\n+---------+------+---------------------------------------------+\n2 rows in set (0.00 sec)\n\nSELECT * FROM ranges;\n+------+------+------+\n| i1   | i2   | i3   |\n+------+------+------+\n|  127 |  257 |  255 |\n+------+------+------+\n\nAuto_increment\n--------------\nThe AUTO_INCREMENT attribute can be used to generate a unique identity for new rows.\n\nFor more details, see auto_increment.\n','','https://mariadb.com/kb/en/library/numeric-data-type-overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (287,22,'ROW','Syntax\n------\nROW (<field name> <data type> [{, <field name> <data type>}... ])\n\nDescription\n-----------\nROW is a data type for stored procedure variables.\n\nFeatures\n--------\n\nROW fields as normal variables\n\nROW fields (members) act as normal variables, and are able to appear in all\nquery parts where a stored procedure variable is allowed:\n\na.x:= 10;\na.x:= b.x;\nSET a.x= 10, a.y=20, a.z= b.z;\n\nSELECT f1(rec.a), rec.a<10;\n\nSELECT var.a, t1.b FROM t1 WHERE t1.b=var.b LIMIT var.c;\n\nINSERT INTO t1 VALUES (rec.a, rec.b, rec.c);\n\nSELECT a,b INTO rec.a, rec.b FROM t1 WHERE t1.id=10;\n\nEXECUTE IMMEDIATE 'CALL proc_with_out_param(?)' USING rec.a;\n\nROW type variables as FETCH targets\n\nROW type variables are allowed as FETCH targets:\nFETCH cur INTO rec;\n\nwhere cur is a CURSOR and rec is a ROW type stored procedure variable.\n\nNote, currently an attempt to use FETCH for a ROW type variable returns this error:\nERROR 1328 (HY000): Incorrect number of FETCH variables\n\nFETCH from a cursor cur into a ROW variable rec works as follows:\n\nSee FETCH Examples (below) for examples of using this with\nsql_mode=ORACLE and sql_mode=DEFAULT.\n\nROW type variables as SELECT...INTO targets\n\nROW type variables are allowed as SELECT..INTO targets with some\ndifferences depending on which sql_mode is in use.\n\nSee SELECT...INTO Examples (below) for examples of\nusing this with sql_mode=ORACLE and sql_mode=DEFAULT.\n\nFeatures not implemented\n------------------------\nThe following features are planned, but not implemented yet:\n\nSELECT f1().x FROM DUAL;\n\nExamples\n--------\n\nDeclaring a ROW in a stored procedure\n\nDELIMITER $$\nCREATE PROCEDURE p1()\nBEGIN\n DECLARE r ROW (c1 INT, c2 VARCHAR(10));\n SET r.c1= 10;\n SET r.c2= 'test';\n INSERT INTO t1 VALUES (r.c1, r.c2);\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nFETCH Examples\n\nA complete FETCH example for sql_mode=ORACLE:\nDROP TABLE IF EXISTS t1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nINSERT INTO t1 VALUES (20,'b20');\nINSERT INTO t1 VALUES (30,'b30');\n\nSET sql_mode=oracle;\nDROP PROCEDURE IF EXISTS p1;\nDELIMITER $$\nCREATE PROCEDURE p1 AS\n rec ROW(a INT, b VARCHAR(32));\n CURSOR c IS SELECT a,b FROM t1;\nBEGIN\n OPEN c;\n LOOP\n  FETCH c INTO rec;\n  EXIT WHEN c%NOTFOUND;\n  SELECT ('rec=(' || rec.a ||','|| rec.b||')');\n END LOOP;\n CLOSE c;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nA complete FETCH example for sql_mode=DEFAULT:\nDROP TABLE IF EXISTS t1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nINSERT INTO t1 VALUES (20,'b20');\nINSERT INTO t1 VALUES (30,'b30');\n\nSET sql_mode=DEFAULT;\nDROP PROCEDURE IF EXISTS p1;\nDELIMITER $$\nCREATE PROCEDURE p1()\nBEGIN\n DECLARE done INT DEFAULT FALSE;\n DECLARE rec ROW(a INT, b VARCHAR(32));\n DECLARE c CURSOR FOR SELECT a,b FROM t1;\n DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\n OPEN c;\nread_loop:\n LOOP\n  FETCH c INTO rec;\n  IF done THEN\n   LEAVE read_loop;\n  END IF;\n  SELECT CONCAT('rec=(',rec.a,',',rec.b,')');\n END LOOP;\n CLOSE c;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nSELECT...INTO Examples\n\nA SELECT...INTO example for sql_mode=DEFAULT:\nSET sql_mode=DEFAULT;\nDROP TABLE IF EXISTS t1;\nDROP PROCEDURE IF EXISTS p1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nDELIMITER $$\nCREATE PROCEDURE p1()\nBEGIN\n DECLARE rec1 ROW(a INT, b VARCHAR(32));\n SELECT * FROM t1 INTO rec1;\n SELECT rec1.a, rec1.b;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nThe above example returns:\n+--------+--------+\n| rec1.a | rec1.b |\n+--------+--------+\n|     10 | b10    |\n+--------+--------+\n\nA SELECT...INTO example for sql_mode=ORACLE:\nSET sql_mode=ORACLE;\nDROP TABLE IF EXISTS t1;\nDROP PROCEDURE IF EXISTS p1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nDELIMITER $$\nCREATE PROCEDURE p1 AS\n rec1 ROW(a INT, b VARCHAR(32));\nBEGIN\n SELECT * FROM t1 INTO rec1;\n SELECT rec1.a, rec1.b;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nThe above example returns:\n+--------+--------+\n| rec1.a | rec1.b |\n+--------+--------+\n|     10 | b10    |\n+--------+--------+\n\nAn example for sql_mode=ORACLE using table%ROWTYPE variables as SELECT..INTO targets:\nSET sql_mode=ORACLE;\nDROP TABLE IF EXISTS t1;\nDROP PROCEDURE IF EXISTS p1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nDELIMITER $$\nCREATE PROCEDURE p1 AS\n rec1 t1%ROWTYPE;\nBEGIN\n SELECT * FROM t1 INTO rec1;\n SELECT rec1.a, rec1.b;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nThe above example returns:\n+--------+--------+\n| rec1.a | rec1.b |\n+--------+--------+\n|     10 | b10    |\n+--------+--------+\n\nAn example for sql_mode=ORACLE using cursor%ROWTYPE variables as\nSELECT..INTO targets:\nSET sql_mode=ORACLE;\nDROP TABLE IF EXISTS t1;\nDROP PROCEDURE IF EXISTS p1;\nCREATE TABLE t1 (a INT, b VARCHAR(32));\nINSERT INTO t1 VALUES (10,'b10');\nDELIMITER $$\nCREATE PROCEDURE p1 AS\n CURSOR cur1 IS SELECT * FROM t1;\n rec1 cur1%ROWTYPE;\nBEGIN\n SELECT * FROM t1 INTO rec1;\n SELECT rec1.a, rec1.b;\nEND;\n$$\nDELIMITER ;\nCALL p1();\n\nThe above example returns:\n+--------+--------+\n| rec1.a | rec1.b |\n+--------+--------+\n|     10 | b10    |\n+--------+--------+\n','','https://mariadb.com/kb/en/library/row/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (288,22,'SET Data Type','Syntax\n------\nSET('value1','value2',...) [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA set. A string object that can have zero or more values, each of\nwhich must be chosen from the list of values 'value1', 'value2', ... A\nSET column can have a maximum of 64 members. SET values are\nrepresented internally as integers.\n\nSET values cannot contain commas.\n\nIf a SET contains duplicate values, an error will be returned if strict mode is\nenabled, or a warning if strict mode is not enabled.\n','','https://mariadb.com/kb/en/library/set-data-type/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (289,22,'SMALLINT','Syntax\n------\nSMALLINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA small integer. The signed range is -32768 to 32767. The unsigned range is 0\nto 65535.\n\nIf a column has been set to ZEROFILL, all values will be prepended by zeros so that\nthe SMALLINT value contains a number of M digits.\n\nNote: If the ZEROFILL attribute has been specified, the column will automatically\nbecome UNSIGNED.\n\nINT2 is a synonym for SMALLINT.\n\nFor more details on the attributes, see Numeric Data Type Overview.\n\nExamples\n--------\nCREATE TABLE smallints (a SMALLINT,b SMALLINT UNSIGNED,c SMALLINT ZEROFILL);\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO smallints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO smallints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,10);\n\nINSERT INTO smallints VALUES (32768,32768,32768);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO smallints VALUES (32767,32768,32768);\n\nSELECT * FROM smallints;\n+-------+-------+-------+\n| a     | b     | c     |\n+-------+-------+-------+\n|   -10 |    10 | 00010 |\n| 32767 | 32768 | 32768 |\n+-------+-------+-------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO smallints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.09 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,10);\n\nINSERT INTO smallints VALUES (32768,32768,32768);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO smallints VALUES (32767,32768,32768);\n\nSELECT * FROM smallints;\n+-------+-------+-------+\n| a     | b     | c     |\n+-------+-------+-------+\n|   -10 |     0 | 00000 |\n|   -10 |    10 | 00000 |\n|   -10 |    10 | 00010 |\n| 32767 | 32768 | 32768 |\n| 32767 | 32768 | 32768 |\n+-------+-------+-------+\n','','https://mariadb.com/kb/en/library/smallint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (290,22,'String Literals','Strings are sequences of characters and are enclosed with quotes.\n\nThe syntax is:\n[_charset_name]'string' [COLLATE collation_name]\n\nFor example:\n'The MariaDB Foundation'\n_utf8 'Foundation' COLLATE utf8_unicode_ci;\n\nStrings can either be enclosed in single quotes or in double quotes (the same\ncharacter must be used to both open and close the string).\n\nThe ANSI SQL-standard does not permit double quotes for enclosing strings, and\nalthough MariaDB does by default, if the MariaDB server has enabled the\nANSI_QUOTES_SQL SQL_MODE, double quotes will be treated as being used for identifiers\ninstead of strings.\n\nStrings that are next to each other are automatically concatenated. For example:\n'The ' 'MariaDB ' 'Foundation'\n\nand\n'The MariaDB Foundation'\n\nare equivalent.\n\nThe \ (backslash character) is used to escape characters (unless the SQL_MODE hasn't\nbeen set to NO_BACKSLASH_ESCAPES). For example:\n'MariaDB's new features'\n\nis not a valid string because of the single quote in the middle of the string, which\nis treated as if it closes the string, but is actually meant as part of the string,\nan apostrophe. The backslash character helps in situations like this:\n'MariaDB\'s new features'\n\nis now a valid string, and if displayed, will appear without the backslash.\n\nSELECT 'MariaDB\'s new features';\n+------------------------+\n| MariaDB's new features |\n+------------------------+\n| MariaDB's new features |\n+------------------------+\n\nAnother way to escape the quoting character is repeating it twice:\nSELECT 'I''m here', """Double""";\n+----------+----------+\n| I'm here | "Double" |\n+----------+----------+\n| I'm here | "Double" |\n+----------+----------+\n\nEscape Sequences\n----------------\nThere are other escape sequences also. Here is a full list:\n+---------------------------------------------------+--------------------------------\n------------------+\n|Escape sequence                                    |Character                       \n         |\n|\0                                                 |ASCII NUL (0x00).\n\n|\n|\'                                                 |Single quote (“'”).\n\n|\n|\"                                                 |Double quote (“"”).\n\n|\n|\b                                                 |Backspace.\n\n|\n|\n                                                 |Newline, or linefeed,.\n\n|\n|\r                                                 |Carriage return.\n\n|\n|\t                                                 |Tab.\n\n|\n|\Z                                                 |ASCII 26 (Control+Z). See note\nfollowing the table.|\n|\\                                                 |Backslash (“\”).\n\n|\n|\%                                                 |“%” character. See note\nfollowing the table.       |\n|\_                                                 |A “_” character. See note\nfollowing the table.     |\n+---------------------------------------------------+--------------------------------\n------------------+\nEscaping the % and _ characters can be necessary when using the LIKE operator, which\ntreats them as special characters.\n\nThe ASCII 26 character (\Z) needs to be escaped when included in a batch file which\nneeds to be executed in Windows. The reason is that ASCII 26, in Windows, is the end\nof file (EOF).\n\nBackslash (\), if not used as an escape character, must always be escaped. When\nfollowed by a character that is not in the above table, backslashes will simply\nbe ignored.\n','','https://mariadb.com/kb/en/library/string-literals/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (291,22,'TEXT','Syntax\n------\nTEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA TEXT column with a maximum length of 65,535 (216 - 1)\ncharacters. The effective maximum length is less if the value contains\nmulti-byte characters. Each TEXT value is stored using a two-byte length\nprefix that indicates the number of bytes in the value.  If you need a bigger\nstorage, consider using MEDIUMTEXT instead.\n\nAn optional length M can be given for this type. If this is done, MariaDB\ncreates the column as the smallest TEXT type large enough to hold values\nM characters long.\n\nBefore MariaDB 10.2, all MariaDB collations were of type PADSPACE, meaning that TEXT\n(as well as VARCHAR and CHAR values) are compared without regard for trailing spaces.\n\nThis does not apply to the LIKE pattern-matching operator, which takes into account\ntrailing spaces.\n\nBefore MariaDB 10.2.1, BLOB and TEXT columns could not be assigned a DEFAULT value.\n\nThis restriction was lifted in MariaDB 10.2.1.\n\nExamples\n--------\nTrailing spaces:\nCREATE TABLE strtest (d TEXT(10));\nINSERT INTO strtest VALUES('Maria   ');\n\nSELECT d='Maria',d='Maria   ' FROM strtest;\n+-----------+--------------+\n| d='Maria' | d='Maria   ' |\n+-----------+--------------+\n|         1 |            1 |\n+-----------+--------------+\n\nSELECT d LIKE 'Maria',d LIKE 'Maria   ' FROM strtest;\n+----------------+-------------------+\n| d LIKE 'Maria' | d LIKE 'Maria   ' |\n+----------------+-------------------+\n|              0 |                 1 |\n+----------------+-------------------+\n\nIndexing\n--------\nTEXT columns can only be indexed over a specified length. This means that they cannot\nbe used as the primary key of a table norm until MariaDB 10.4, can a unique index be\ncreated on them.\n\nDifference between VARCHAR and TEXT\n-----------------------------------\n\nFor Storage Engine Developers\n','','https://mariadb.com/kb/en/library/text/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (292,22,'TIME','Syntax\n------\nTIME [(<microsecond precision>)]\n\nDescription\n-----------\nA time. The range is '-838:59:59.999999' to '838:59:59.999999'. Microsecond precision\ncan be from 0-6; if not specified 0 is used. Microseconds have been available since\nMariaDB 5.3.\n\nMariaDB displays TIME values in 'HH:MM:SS.ssssss' format, but allows assignment of\ntimes in looser formats, including 'D HH:MM:SS', 'HH:MM:SS', 'HH:MM', 'D HH:MM', 'D\nHH', 'SS', or 'HHMMSS', as well as permitting dropping of any leading zeros when a\ndelimiter is provided, for example '3:9:10'. For details, see date and time literals.\n\nInternal Format\n\nIn MariaDB 10.1.2 a new temporal format was introduced from MySQL 5.6 that alters how\nthe TIME, DATETIME and TIMESTAMP columns operate at lower levels.  These changes\nallow these temporal data types to have fractional parts and negative values.  You\ncan disable this feature using the mysql56_temporal_format system variable.\n\nTables that include TIMESTAMP values that were created on an older version of MariaDB\nor that were created while the mysql56_temporal_format system variable was disabled\ncontinue to store data using the older data type format.\n\nIn order to update table columns from the older format to the newer format, execute\nan ALTER TABLE... MODIFY COLUMN statement that changes the column to the *same* data\ntype. This change may be needed if you want to export the table's tablespace and\nimport it onto a server that has mysql56_temporal_format=ON set (see MDEV-15225).\n\nFor instance, if you have a TIME column in your table: \nSHOW VARIABLES LIKE 'mysql56_temporal_format';\n\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON    |\n+-------------------------+-------+\n\nALTER TABLE example_table MODIFY ts_col TIME;\n\nWhen MariaDB executes the ALTER TABLE statement, it converts the data from the older\ntemporal format to the newer one.\n\nIn the event that you have several tables and columns using temporal data types that\nyou want to switch over to the new format, make sure the system variable is enabled,\nthen perform a dump and restore using mysqldump.  The columns using relevant temporal\ndata types are restored using the new temporal format.\n\nStarting from MariaDB 10.5.1 columns with old temporal formats are marked with a /*\nmariadb-5.3 */ comment in the output of SHOW CREATE TABLE, SHOW COLUMNS, DESCRIBE\nstatements, as well as in the COLUMN_TYPE column of the\nINFORMATION_SCHEMA.COLUMNS Table.\n\nSHOW CREATE TABLE mariadb5312_time\G\n*************************** 1. row ***************************\n   Table: mariadb5312_time\nCreate Table: CREATE TABLE `mariadb5312_time` (\n `t0` time /* mariadb-5.3 */ DEFAULT NULL,\n `t6` time(6) /* mariadb-5.3 */ DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n\nNote, columns with the current format are not marked with a comment.\n\nExamples\n--------\nINSERT INTO time VALUES ('90:00:00'), ('800:00:00'), (800), (22), (151413),\n('9:6:3'), ('12 09');\n\nSELECT * FROM time;\n+-----------+\n| t         |\n+-----------+\n| 90:00:00  |\n| 800:00:00 |\n| 00:08:00  |\n| 00:00:22  |\n| 15:14:13  |\n| 09:06:03  |\n| 297:00:00 |\n+-----------+\n','','https://mariadb.com/kb/en/library/time/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (293,22,'TIMESTAMP','Syntax\n------\nTIMESTAMP [(<microsecond precision)]\n\nDescription\n-----------\nA timestamp in the format YYYY-MM-DD HH:MM:SS.ffffff.\n\nThe timestamp field is generally used to define at which moment in time a row was\nadded or updated and by default will automatically be assigned the current datetime\nwhen a record is inserted or updated. The automatic properties only apply to the\nfirst TIMESTAMP in the record; subsequent TIMESTAMP columns will not be changed.\n\nSupported Values\n----------------\nMariaDB stores values that use the TIMESTAMP data type as the number of seconds since\n'1970-01-01 00:00:00' (UTC). This means that the TIMESTAMP data type can hold values\nbetween '1970-01-01 00:00:01' (UTC) and '2038-01-19 03:14:07' (UTC).\n\nMariaDB can also store microseconds with a precision between 0 and 6. If no\nmicrosecond precision is specified, then 0 is used by default.\n\nAutomatic Values\n----------------\nMariaDB has special behavior for the first column that uses the TIMESTAMP data type\nin a specific table.  For the first column that uses the TIMESTAMP data type in a\nspecific table, MariaDB automatically assigns the following properties to the column:\n\nThis means that if the column is not explicitly assigned a value in an INSERT or\nUPDATE query, then MariaDB will automatically initialize the column's value with the\ncurrent date and time.\n\nThis automatic initialization for INSERT and UPDATE queries can also be explicitly\nenabled for a column that uses the TIMESTAMP data type by specifying the DEFAULT\nCURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP clauses for the column. In these\nclauses, any synonym of CURRENT_TIMESTAMP is accepted, including CURRENT_TIMESTAMP(),\nNOW(), LOCALTIME, LOCALTIME(), LOCALTIMESTAMP, and LOCALTIMESTAMP().\n\nThis automatic initialization for INSERT queries can also be explicitly disabled for\na column that uses the TIMESTAMP data type by specifying a constant DEFAULT value.\n\nFor example, DEFAULT 0.\n\nThis automatic initialization for UPDATE queries can also be explicitly disabled for\na column that uses the TIMESTAMP data type by specifying a DEFAULT clause for the\ncolumn, but no ON UPDATE clause. If a DEFAULT clause is explicitly specified for a\ncolumn that uses the TIMESTAMP data type, but an ON UPDATE clause is not specified\nfor the column, then the timestamp value will not automatically change when an UPDATE\nstatement is executed.\n\nMariaDB also has special behavior if NULL is assigned to column that uses the\nTIMESTAMP data type. If the column is assigned the NULL value in an INSERT or UPDATE\nquery, then MariaDB will automatically initialize the column's value with the current\ndate and time. For details, see NULL values in MariaDB.\n\nThis automatic initialization for NULL values can also be explicitly disabled for a\ncolumn that uses the TIMESTAMP data type by specifying the NULL attribute for the\ncolumn. In this case, if the column's value is set to NULL, then the column's value\nwill actually be set to NULL.\n\nTime Zones\n----------\nIf a column uses the TIMESTAMP data type, then any inserted values are converted from\nthe session's time zone to Coordinated Universal Time (UTC) when stored, and\nconverted back to the session's time zone when retrieved.\n\nMariaDB does not currently store any time zone identifier with the value of the\nTIMESTAMP data type. See MDEV-10018 for more information.\n\nMariaDB does not currently support time zone literals that contain time zone\nidentifiers. See MDEV-11829 for more information.\n\nLimitations\n-----------\n\nSQL_MODE=MAXDB\n--------------\nIf the SQL_MODE is set to MAXDB, TIMESTAMP fields will be silently converted\nto DATETIME.\n\nInternal Format\n---------------\nIn MariaDB 10.1.2 a new temporal format was introduced from MySQL 5.6 that alters how\nthe TIME, DATETIME and TIMESTAMP columns operate at lower levels.  These changes\nallow these temporal data types to have fractional parts and negative values.  You\ncan disable this feature using the mysql56_temporal_format system variable.\n\nTables that include TIMESTAMP values that were created on an older version of MariaDB\nor that were created while the mysql56_temporal_format system variable was disabled\ncontinue to store data using the older data type format.\n\nIn order to update table columns from the older format to the newer format, execute\nan ALTER TABLE... MODIFY COLUMN statement that changes the column to the *same* data\ntype. This change may be needed if you want to export the table's tablespace and\nimport it onto a server that has mysql56_temporal_format=ON set (see MDEV-15225).\n\nFor instance, if you have a TIMESTAMP column in your table: \nSHOW VARIABLES LIKE 'mysql56_temporal_format';\n\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON    |\n+-------------------------+-------+\n\nALTER TABLE example_table MODIFY ts_col TIMESTAMP;\n\nWhen MariaDB executes the ALTER TABLE statement, it converts the data from the older\ntemporal format to the newer one.\n\nIn the event that you have several tables and columns using temporal data types that\nyou want to switch over to the new format, make sure the system variable is enabled,\nthen perform a dump and restore using mysqldump.  The columns using relevant temporal\ndata types are restored using the new temporal format.\n\nStarting from MariaDB 10.5.1 columns with old temporal formats are marked with a /*\nmariadb-5.3 */  comment in the output of SHOW CREATE TABLE, SHOW COLUMNS, DESCRIBE\nstatements, as well as in the COLUMN_TYPE column of the\nINFORMATION_SCHEMA.COLUMNS Table.\n\nSHOW CREATE TABLE mariadb5312_timestamp\G\n*************************** 1. row ***************************\n   Table: mariadb5312_timestamp\nCreate Table: CREATE TABLE `mariadb5312_timestamp` (\n `ts0` timestamp /* mariadb-5.3 */ NOT NULL DEFAULT current_timestamp() ON\nUPDATE current_timestamp(),\n `ts6` timestamp(6) /* mariadb-5.3 */ NOT NULL DEFAULT '0000-00-00 00:00:00.000000'\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n\nNote:  Prior to MySQL 4.1 a different format for the TIMESTAMP datatype was used.\n\nThis format is unsupported in MariaDB 5.1 and upwards.\n\nExamples\n--------\nCREATE TABLE t (id INT, ts TIMESTAMP);\n\nDESC t;\n+-------+-----------+------+-----+-------------------+-----------------------------+\n| Field | Type      | Null | Key | Default           | Extra                       |\n+-------+-----------+------+-----+-------------------+-----------------------------+\n| id    | int(11)   | YES  |     | NULL              |                             |\n| ts    | timestamp | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |\n+-------+-----------+------+-----+-------------------+-----------------------------+\n\nINSERT INTO t(id)  VALUES (1),(2);\n\nSELECT * FROM t;\n+------+---------------------+\n| id   | ts                  |\n+------+---------------------+\n|    1 | 2013-07-22 12:50:05 |\n|    2 | 2013-07-22 12:50:05 |\n+------+---------------------+\n\nINSERT INTO t  VALUES (3,NULL),(4,'2001-07-22 12:12:12');\n\nSELECT * FROM t;\n+------+---------------------+\n| id   | ts                  |\n+------+---------------------+\n|    1 | 2013-07-22 12:50:05 |\n|    2 | 2013-07-22 12:50:05 |\n|    3 | 2013-07-22 12:51:56 |\n|    4 | 2001-07-22 12:12:12 |\n+------+---------------------+\n\nConverting to Unix epoch:\nSELECT ts, UNIX_TIMESTAMP(ts) FROM t;\n+---------------------+--------------------+\n| ts                  | UNIX_TIMESTAMP(ts) |\n+---------------------+--------------------+\n| 2013-07-22 12:50:05 |         1374490205 |\n| 2013-07-22 12:50:05 |         1374490205 |\n| 2013-07-22 12:51:56 |         1374490316 |\n| 2001-07-22 12:12:12 |          995796732 |\n+---------------------+--------------------+\n\nUpdate also changes the timestamp:\nUPDATE t set id=5 WHERE id=1;\n\nSELECT * FROM t;\n+------+---------------------+\n| id   | ts                  |\n+------+---------------------+\n|    5 | 2013-07-22 14:52:33 |\n|    2 | 2013-07-22 12:50:05 |\n|    3 | 2013-07-22 12:51:56 |\n|    4 | 2001-07-22 12:12:12 |\n+------+---------------------+\n\nDefault NULL:\nCREATE TABLE t2 (id INT, ts TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP);\n\nINSERT INTO t(id)  VALUES (1),(2);\n\nSELECT * FROM t2;\n\nINSERT INTO t2(id)  VALUES (1),(2);\n\nSELECT * FROM t2;\n+------+------+\n| id   | ts   |\n+------+------+\n|    1 | NULL |\n|    2 | NULL |\n+------+------+\n\nUPDATE t2 SET id=3 WHERE id=1;\n\nSELECT * FROM t2;\n+------+---------------------+\n| id   | ts                  |\n+------+---------------------+\n|    3 | 2013-07-22 15:32:22 |\n|    2 | NULL                |\n+------+---------------------+\n\nOnly the first timestamp is automatically inserted and updated:\nCREATE TABLE t3 (id INT, ts1 TIMESTAMP, ts2 TIMESTAMP);\n\nINSERT INTO t3(id)  VALUES (1),(2);\n\nSELECT * FROM t3;\n+------+---------------------+---------------------+\n| id   | ts1                 | ts2                 |\n+------+---------------------+---------------------+\n|    1 | 2013-07-22 15:35:07 | 0000-00-00 00:00:00 |\n|    2 | 2013-07-22 15:35:07 | 0000-00-00 00:00:00 |\n+------+---------------------+---------------------+\n\nDESC t3;\n+-------+-----------+------+-----+---------------------+-----------------------------\n\n| Field | Type      | Null | Key | Default             | Extra                     \n |\n+-------+-----------+------+-----+---------------------+-----------------------------\n\n| id    | int(11)   | YES  |     | NULL                |                           \n |\n| ts1   | timestamp | NO   |     | CURRENT_TIMESTAMP   | on update\nCURRENT_TIMESTAMP |\n| ts2   | timestamp | NO   |     | 0000-00-00 00:00:00 |                           \n |\n+-------+-----------+------+-----+---------------------+-----------------------------\n\nExplicitly setting a timestamp with the CURRENT_TIMESTAMP function:\nINSERT INTO t3(id,ts2)  VALUES (3,CURRENT_TIMESTAMP());\n\nSELECT * FROM t3;\n+------+---------------------+---------------------+\n| id   | ts1                 | ts2                 |\n+------+---------------------+---------------------+\n|    1 | 2013-07-22 15:35:07 | 0000-00-00 00:00:00 |\n|    2 | 2013-07-22 15:35:07 | 0000-00-00 00:00:00 |\n|    3 | 2013-07-22 15:38:52 | 2013-07-22 15:38:52 |\n+------+---------------------+---------------------+\n\nSpecifying the timestamp as NOT NULL:\nCREATE TABLE t4 (id INT, ts TIMESTAMP NOT NULL);\n\nINSERT INTO t4(id)  VALUES (1);\nSELECT SLEEP(1);\nINSERT INTO t4(id,ts) VALUES (2,NULL);\n\nSELECT * FROM t4;\n','','https://mariadb.com/kb/en/library/timestamp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (294,22,'TINYBLOB','Syntax\n------\nTINYBLOB\n\nDescription\n-----------\nA BLOB column with a maximum length of \n255 (28 - 1) bytes. Each\nTINYBLOB value is stored using a one-byte length prefix that indicates\nthe number of bytes in the value.\n','','https://mariadb.com/kb/en/library/tinyblob/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (295,22,'TINYINT','Syntax\n------\nTINYINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n\nDescription\n-----------\nA very small integer. The signed range is -128 to 127. The unsigned range is 0 to\n255. For details on the attributes, see Numeric Data Type Overview.\n\nINT1 is a synonym for TINYINT. BOOL and BOOLEAN are synonyms for TINYINT(1).\n\nExamples\n--------\nCREATE TABLE tinyints (a TINYINT,b TINYINT UNSIGNED,c TINYINT ZEROFILL);\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nINSERT INTO tinyints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,10);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |   10 |  010 |\n+------+------+------+\n\nINSERT INTO tinyints VALUES (128,128,128);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO tinyints VALUES (127,128,128);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |   10 |  010 |\n|  127 |  128 |  128 |\n+------+------+------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nINSERT INTO tinyints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.11 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,10);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |    0 |  000 |\n|  -10 |   10 |  000 |\n|  -10 |   10 |  010 |\n+------+------+------+\n\nINSERT INTO tinyints VALUES (128,128,128);\nQuery OK, 1 row affected, 1 warning (0.19 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO tinyints VALUES (127,128,128);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |    0 |  000 |\n|  -10 |   10 |  000 |\n|  -10 |   10 |  010 |\n|  127 |  128 |  128 |\n|  127 |  128 |  128 |\n+------+------+------+\n','','https://mariadb.com/kb/en/library/tinyint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (296,22,'TINYTEXT','Syntax\n------\nTINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA TEXT column with a maximum length of 255 (28 - 1) characters. The effective maximum\nlength is less if the value contains multi-byte characters. Each TINYTEXT value is\nstored using a one-byte length prefix that indicates the number of bytes in\nthe value.\n','','https://mariadb.com/kb/en/library/tinytext/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (297,22,'VARBINARY','Syntax\n------\nVARBINARY(M)\n\nDescription\n-----------\nThe VARBINARY type is similar to the VARCHAR type, but stores binary byte strings\nrather than non-binary character strings. M represents the maximum column length in\nbytes.\n\nIt contains no character set, and comparison and sorting are based on the numeric\nvalue of the bytes.\n\nIf the maximum length is exceeded, and SQL strict mode is not enabled , the extra\ncharacters will be dropped with a warning. If strict mode is enabled, an error\nwill occur.\n\nUnlike BINARY values, VARBINARYs are not right-padded when inserting.\n\nOracle Mode\n\nExamples\n--------\nInserting too many characters, first with strict mode off, then with it on:\nCREATE TABLE varbins (a VARBINARY(10));\n\nINSERT INTO varbins VALUES('12345678901');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSELECT * FROM varbins;\n+------------+\n| a          |\n+------------+\n| 1234567890 |\n+------------+\n\nSET sql_mode='STRICT_ALL_TABLES';\n\nINSERT INTO varbins VALUES('12345678901');\nERROR 1406 (22001): Data too long for column 'a' at row 1\n\nSorting is performed with the byte value:\nTRUNCATE varbins;\n\nINSERT INTO varbins VALUES('A'),('B'),('a'),('b');\n\nSELECT * FROM varbins ORDER BY a;\n+------+\n| a    |\n+------+\n| A    |\n| B    |\n| a    |\n| b    |\n+------+\n\nUsing CAST to sort as a CHAR instead:\nSELECT * FROM varbins ORDER BY CAST(a AS CHAR);\n+------+\n| a    |\n+------+\n| a    |\n| A    |\n| b    |\n| B    |\n+------+\n','','https://mariadb.com/kb/en/library/varbinary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (298,22,'VARCHAR','Syntax\n------\n[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE collation_name]\n\nDescription\n-----------\nA variable-length string. M represents the maximum column length in\ncharacters. The range of M is 0 to 65,532. The effective maximum\nlength of a VARCHAR is subject to the maximum row size and the character set\nused. For\nexample, utf8 characters can require up to three bytes per character,\nso a VARCHAR column that uses the utf8 character set can be declared\nto be a maximum of 21,844 characters.\n\nNote: For the ColumnStore engine, M represents the maximum column length in\nbytes.\n\nMariaDB stores VARCHAR values as a one-byte or two-byte length prefix\nplus data. The length prefix indicates the number of bytes in the\nvalue. A VARCHAR column uses one length byte if values require no more\nthan 255 bytes, two length bytes if values may require more than 255\nbytes.\n\nMariaDB follows the standard SQL specification, and does not remove trailing spaces\nfrom VARCHAR values.\n\nVARCHAR(0) columns can contain 2 values: an empty string or NULL. Such columns cannot\nbe part of an index. The CONNECT storage engine does not support VARCHAR(0).\n\nVARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the\nstandard SQL way to define that a VARCHAR column should use some\npredefined character set. MariaDB uses utf8 as this\npredefined character set, as does MySQL 4.1 and up.\n\nNVARCHAR is shorthand for NATIONAL VARCHAR.\n\nBefore MariaDB 10.2, all MariaDB collations were of type PADSPACE, meaning that\nVARCHAR (as well as CHAR and TEXT values) are compared without regard for trailing\nspaces. This does not apply to the LIKE pattern-matching operator, which takes into\naccount trailing spaces. From MariaDB 10.2, a number of NO PAD collations\nare available.\n\nIf a unique index consists of a column where trailing pad characters are stripped or\nignored, inserts into that column where values differ only by the number of trailing\npad characters will result in a duplicate-key error.\n\nExamples\n--------\nThe following are equivalent:\nVARCHAR(30) CHARACTER SET utf8\nNATIONAL VARCHAR(30)\nNVARCHAR(30)\nNCHAR VARCHAR(30)\nNATIONAL CHARACTER VARYING(30)\nNATIONAL CHAR VARYING(30)\n\nTrailing spaces:\nCREATE TABLE strtest (v VARCHAR(10));\nINSERT INTO strtest VALUES('Maria   ');\n\nSELECT v='Maria',v='Maria   ' FROM strtest;\n+-----------+--------------+\n| v='Maria' | v='Maria   ' |\n+-----------+--------------+\n|         1 |            1 |\n+-----------+--------------+\n\nSELECT v LIKE 'Maria',v LIKE 'Maria   ' FROM strtest;\n+----------------+-------------------+\n| v LIKE 'Maria' | v LIKE 'Maria   ' |\n+----------------+-------------------+\n|              0 |                 1 |\n+----------------+-------------------+\n\nTruncation\n----------\n\nDifference Between VARCHAR and TEXT\n-----------------------------------\n\nOracle Mode\n-----------\n\nFor Storage Engine Developers\n','','https://mariadb.com/kb/en/library/varchar/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (299,22,'YEAR Data Type','Syntax\n------\nYEAR[(4)]\n\nDescription\n-----------\nA year in two-digit or four-digit format. The default is four-digit format. Note that\nthe two-digit format has been deprecated since MariaDB 5.5.27.\n\nIn four-digit format, the allowable values are 1901 to 2155,\nand 0000. In two-digit format, the allowable values are 70 to 69,\nrepresenting years from 1970 to 2069. MariaDB displays YEAR values in\nYYYY format, but allows you to assign values to YEAR columns using\neither strings or numbers.\n\nInserting numeric zero has a different result for YEAR(4) and YEAR(2). For YEAR(2),\nthe value 00 reflects the year 2000. For YEAR(4), the value 0000 reflects the year\nzero. This only applies to numeric zero. String zero always reflects the year 2000.\n\nExamples\n--------\nAccepting a string or a number:\nCREATE TABLE y(y YEAR);\n\nINSERT INTO y VALUES (1990),('2012');\n\nSELECT * FROM y;\n+------+\n| y    |\n+------+\n| 1990 |\n| 2012 |\n+------+\n\nWith strict_mode set, the default from MariaDB 10.2.4:\nOut of range:\nINSERT INTO y VALUES (1005),('3080');\nERROR 1264 (22003): Out of range value for column 'y' at row 1\n\nINSERT INTO y VALUES ('2013-12-12');\nERROR 1265 (01000): Data truncated for column 'y' at row 1\n\nSELECT * FROM y;\n+------+\n| y    |\n+------+\n| 1990 |\n| 2012 |\n+------+\n\nWith strict_mode unset, the default until MariaDB 10.2.3:\nOut of range:\nINSERT INTO y VALUES (1005),('3080');\nQuery OK, 2 rows affected, 2 warnings (0.05 sec)\nRecords: 2  Duplicates: 0  Warnings: 2\n\nSHOW WARNINGS;\n+---------+------+--------------------------------------------+\n| Level   | Code | Message                                    |\n+---------+------+--------------------------------------------+\n| Warning | 1264 | Out of range value for column 'y' at row 1 |\n| Warning | 1264 | Out of range value for column 'y' at row 2 |\n+---------+------+--------------------------------------------+\n\nSELECT * FROM y;\n+------+\n| y    |\n+------+\n| 1990 |\n| 2012 |\n| 0000 |\n| 0000 |\n+------+\n\nTruncating:\nINSERT INTO y VALUES ('2013-12-12');\nQuery OK, 1 row affected, 1 warning (0.05 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1265 | Data truncated for column 'y' at row 1 |\n+---------+------+----------------------------------------+\n\nSELECT * FROM y;\n+------+\n| y    |\n+------+\n| 1990 |\n| 2012 |\n| 0000 |\n| 0000 |\n| 2013 |\n+------+\n\nDifference between YEAR(2) and YEAR(4), and string and numeric zero:\nCREATE TABLE y2(y YEAR(4), y2 YEAR(2));\nQuery OK, 0 rows affected, 1 warning (0.40 sec)\n\nNote (Code 1287): 'YEAR(2)' is deprecated and will be removed in a future release.\n\nPlease use YEAR(4) instead\n\nINSERT INTO y2 VALUES(0,0),('0','0');\n\nSELECT YEAR(y),YEAR(y2) FROM y2;\n+---------+----------+\n| YEAR(y) | YEAR(y2) |\n+---------+----------+\n|       0 |     2000 |\n|    2000 |     2000 |\n+---------+----------+\n','','https://mariadb.com/kb/en/library/year-data-type/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (300,23,'BEGIN END','Syntax\n------\n[begin_label:] BEGIN [NOT ATOMIC]\n  [statement_list]\nEND [end_label]\n\nNOT ATOMIC is required when used outside of a stored procedure. Inside stored\nprocedures or within an anonymous block, BEGIN alone starts a new anonymous block.\n\nDescription\n-----------\nBEGIN ... END syntax is used for writing compound statements. A compound statement\ncan contain multiple statements, enclosed by the BEGIN and END keywords.\n\nstatement_list represents a list of one or more statements, each\nterminated by a semicolon (i.e., ;) statement delimiter. statement_list is\noptional, which means that the empty compound statement (BEGIN END) is\nlegal.\n\nNote that END will perform a commit. If you are running in autocommit mode, every\nstatement will be committed separately. If you are not running in autocommit mode,\nyou must execute a COMMIT or ROLLBACK after END to get the database up to date.\n\nUse of multiple statements requires that a client is able to send statement strings\ncontaining the ; statement delimiter. This is handled in the mysql  command-line\nclient with the DELIMITER command.\n\nChanging the ; end-of-statement delimiter (for example, to\n//) allows ; to be used in a program body.\n\nA compound statement within a stored program can be\nlabeled. end_label cannot be given unless begin_label also is present. If both are\npresent, they must be the same.\n\nBEGIN ... END constructs can be nested. Each block can define its own variables, a\nCONDITION, a HANDLER and a CURSOR, which don't exist in the outer blocks. The most\nlocal declarations override the outer objects which use the same name (see\nexample below).\n\nThe declarations order is the following:\n\nNote that DECLARE HANDLER contains another BEGIN ... END construct.\n\nHere is an example of a very simple, anonymous block:\nBEGIN NOT ATOMIC\nSET @a=1;\nCREATE TABLE test.t1(a INT);\nEND|\n\nBelow is an example of nested blocks in a stored procedure:\nCREATE PROCEDURE t( )\nBEGIN\n DECLARE x TINYINT UNSIGNED DEFAULT 1;\n BEGIN\n   DECLARE x CHAR(2) DEFAULT '02';\n   DECLARE y TINYINT UNSIGNED DEFAULT 10;\n   SELECT x, y;\n END;\n SELECT x;\nEND;\n\nIn this example, a TINYINT variable, x is declared in the outter block. But in the\ninner block x is re-declared as a CHAR and an y variable is declared. The inner\nSELECT  shows the "new" value of x, and the value of y. But when x is selected in the\nouter block, the "old" value is returned. The final SELECT doesn't try to read y,\nbecause it doesn't exist in that context.\n','','https://mariadb.com/kb/en/library/begin-end/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (301,23,'CASE Statement','Syntax\n------\nCASE case_value\n  WHEN when_value THEN statement_list\n  [WHEN when_value THEN statement_list] ...\n  [ELSE statement_list]\nEND CASE\n\nOr:\nCASE\n  WHEN search_condition THEN statement_list\n  [WHEN search_condition THEN statement_list] ...\n  [ELSE statement_list]\nEND CASE\n\nDescription\n-----------\nThe text on this page describes the CASE statement for stored programs. See the CASE\nOPERATOR for details on the CASE operator outside of stored programs.\n\nThe CASE statement for stored programs implements a complex conditional\nconstruct. If a search_condition evaluates to true, the corresponding SQL\nstatement list is executed. If no search condition matches, the statement list\nin the ELSE clause is executed. Each statement_list consists of one or\nmore statements.\n\nThe CASE statement cannot have an ELSE NULL clause, and it is\nterminated with END CASE instead of END. implements a complex conditional\nconstruct. If a search_condition evaluates to true, the corresponding SQL\nstatement list is executed. If no search condition matches, the statement list\nin the ELSE clause is executed. Each statement_list consists of one or\nmore statements.\n\nIf no when_value or search_condition matches the value tested and the CASE\nstatement contains no ELSE clause, a Case not found for CASE statement\nerror results.\n\nEach statement_list consists of one or more statements; an empty\nstatement_list is not allowed. To handle situations where no value is\nmatched by any WHEN clause, use an ELSE containing an\nempty BEGIN ... END block, as shown in this example:\nDELIMITER |\nCREATE PROCEDURE p()\nBEGIN\n DECLARE v INT DEFAULT 1;\n CASE v\n  WHEN 2 THEN SELECT v;\n  WHEN 3 THEN SELECT 0;\n  ELSE BEGIN END;\n END CASE;\nEND;\n|\n\nThe indentation used here in the ELSE clause is for purposes of clarity only,\nand is not otherwise significant. See Delimiters in the mysql client for more on the\nuse of the delimiter command.\n\nNote: The syntax of the CASE statement used inside stored programs\ndiffers slightly from that of the SQL CASE expression described in\nCASE OPERATOR.\n\nThe CASE statement cannot have an ELSE NULL clause, and it is\nterminated with END CASE instead of END.\n','','https://mariadb.com/kb/en/library/case-statement/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (302,23,'CLOSE','Syntax\n------\nCLOSE cursor_name\n\nDescription\n-----------\nThis statement closes a previously opened cursor. The cursor must have been\npreviously opened or else an error occurs.\n\nIf not closed explicitly, a cursor is closed at the end of the\ncompound statement in which it was declared.\n\nSee Cursor Overview for an example.\n','','https://mariadb.com/kb/en/library/close/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (303,23,'DECLARE CONDITION','Syntax\n------\nDECLARE condition_name CONDITION FOR condition_value\n\ncondition_value:\n  SQLSTATE [VALUE] sqlstate_value\n | mysql_error_code\n\nDescription\n-----------\nThe DECLARE ... CONDITION statement defines a named error condition.\n\nIt specifies a condition that needs specific handling and associates a\nname with that condition. Later, the name can be used in a DECLARE ... HANDLER,\nSIGNAL or RESIGNAL statement (as long as the statement is located in the same BEGIN\n... END block).\n\nConditions must be declared after local variables, but before CURSORs and HANDLERs.\n\nA condition_value for DECLARE ... CONDITION can be an SQLSTATE value (a\n5-character string literal) or a MySQL error code (a number). You should not\nuse SQLSTATE value '00000' or MySQL error code 0, because those indicate sucess\nrather than an error condition. If you try, or if you specify an invalid SQLSTATE\nvalue, an error like this is produced:\nERROR 1407 (42000): Bad SQLSTATE: '00000'\n\nFor a list of SQLSTATE values and MariaDB error\ncodes, see MariaDB Error Codes.\n','','https://mariadb.com/kb/en/library/declare-condition/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (304,23,'DECLARE CURSOR','Syntax\n------\n<= MariaDB 10.2\nDECLARE cursor_name CURSOR FOR select_statement\n\nFrom MariaDB 10.3\nDECLARE cursor_name CURSOR [(cursor_formal_parameter[,...])] FOR select_statement\n\ncursor_formal_parameter:\n  name type [collate clause]\n\nFrom MariaDB 10.8\nDECLARE cursor_name CURSOR [(cursor_formal_parameter[,...])] FOR select_statement\n\ncursor_formal_parameter:\n  [IN] name type [collate clause]\n\nDescription\n-----------\nThis statement declares a cursor. Multiple cursors may be declared in a stored\nprogram, but each cursor in a given block must have a unique name.\n\nselect_statement is not executed until the OPEN statement is executed. It is\nimportant to remember this if the query produces an error, or calls functions which\nhave side effects.\n\nA SELECT associated to a cursor can use variables, but the query itself cannot be a\nvariable, and cannot be dynamically composed. The SELECT statement cannot have an\nINTO clause.\n\nCursors must be declared before HANDLERs, but after local variables and CONDITIONs.\n\nParameters\n\nIN\n\nSee Cursor Overview for an example.\n','','https://mariadb.com/kb/en/library/declare-cursor/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (305,23,'DECLARE HANDLER','Syntax\n------\nDECLARE handler_type HANDLER\n  FOR condition_value [, condition_value] ...\n  statement\n\nhandler_type:\n  CONTINUE\n | EXIT\n | UNDO\n\ncondition_value:\n  SQLSTATE [VALUE] sqlstate_value\n | condition_name\n | SQLWARNING\n | NOT FOUND\n | SQLEXCEPTION\n | mariadb_error_code\n\nDescription\n-----------\nThe DECLARE ... HANDLER statement specifies handlers that each may\ndeal with one or more conditions. If one of these conditions occurs,\nthe specified statement is executed. statement can be a simple\nstatement (for example, SET var_name = value), or it can be a compound\nstatement written using BEGIN and END.\n\nHandlers must be declared after local variables, a CONDITION and a CURSOR.\n\nFor a CONTINUE handler, execution of the current program continues\nafter execution of the handler statement. For an EXIT handler,\nexecution terminates for the BEGIN ... END compound statement in which\nthe handler is declared. (This is true even if the condition occurs in\nan inner block.) The UNDO handler type statement is not supported.\n\nIf a condition occurs for which no handler has been declared, the\ndefault action is EXIT.\n\nA condition_value for DECLARE ... HANDLER can be any of the following\nvalues:\n\nWhen an error raises, in some cases it could be handled by multiple HANDLERs. For\nexample, there may be an handler for 1050 error, a separate handler for the 42S01\nSQLSTATE, and another separate handler for the SQLEXCEPTION class: in theory all\noccurrences of HANDLER may catch the 1050 error, but MariaDB chooses the HANDLER with\nthe highest precedence. Here are the precedence rules:\n\nIn some cases, a statement could produce multiple errors. If this happens, in some\ncases multiple handlers could have the highest precedence. In such cases, the choice\nof the handler is indeterminate.\n\nNote that if an error occurs within a CONTINUE HANDLER block, it can be handled by\nanother HANDLER. However, a HANDLER which is already in the stack (that is, it has\nbeen called to handle an error and its execution didn't finish yet) cannot handle new\nerrors—this prevents endless loops. For example, suppose that a stored procedure\ncontains a CONTINUE HANDLER for SQLWARNING and another CONTINUE HANDLER for NOT\nFOUND. At some point, a NOT FOUND error occurs, and the execution enters the NOT\nFOUND HANDLER. But within that handler, a warning occurs, and the execution enters\nthe SQLWARNING HANDLER. If another NOT FOUND error occurs, it cannot be handled again\nby the NOT FOUND HANDLER, because its execution is not finished.\n\nWhen a DECLARE HANDLER block can handle more than one error condition, it may be\nuseful to know which errors occurred. To do so, you can use the GET\nDIAGNOSTICS statement.\n\nAn error that is handled by a DECLARE HANDLER construct can be issued again using the\nRESIGNAL statement.\n\nBelow is an example using DECLARE HANDLER:\nCREATE TABLE test.t (s1 INT, PRIMARY KEY (s1));\n\nDELIMITER //\n\nCREATE PROCEDURE handlerdemo ( )\n  BEGIN\n   DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @x2 = 1;\n   SET @x = 1;\n   INSERT INTO test.t VALUES (1);\n   SET @x = 2;\n   INSERT INTO test.t VALUES (1);\n   SET @x = 3;\n  END;\n  //\n\nDELIMITER ;\n\nCALL handlerdemo( );\n\nSELECT @x;\n+------+\n| @x   |\n+------+\n|    3 |\n+------+\n','','https://mariadb.com/kb/en/library/declare-handler/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (306,23,'DECLARE Variable','Syntax\n------\nDECLARE var_name [, var_name] ... [[ROW] TYPE OF]] type [DEFAULT value]\n\nDescription\n-----------\nThis statement is used to declare local variables within stored programs. To\nprovide a default value for the variable, include a DEFAULT clause. The\nvalue can be specified as an expression (even subqueries are permitted); it need not\nbe a constant. If the\nDEFAULT clause is missing, the initial value is NULL.\n\nLocal variables are treated like stored routine parameters with respect to data\ntype and overflow checking.  See CREATE PROCEDURE.\n\nLocal variables must be declared before CONDITIONs, CURSORs and HANDLERs.\n\nLocal variable names are not case sensitive.\n\nThe scope of a local variable is within the BEGIN ... END block where it is\ndeclared. The variable can be referred to in blocks nested within the declaring\nblock, except those blocks that declare a variable with the same name.\n\nTYPE OF / ROW TYPE OF\n\nAnchored data types allow a data type to be defined based on another object, such as\na table row, rather than specifically set in the declaration. If the anchor object\nchanges, so will the anchored data type. This can lead to routines being easier to\nmaintain, so that if the data type in the table is changed, it will automatically be\nchanged in the routine as well.\n\nVariables declared with ROW TYPE OF will have the same features as implicit ROW\nvariables. It is not possible to use ROW TYPE OF variables in a LIMIT clause.\n\nThe real data type of TYPE OF and ROW TYPE OF table_name will become known at the\nvery beginning of the stored routine call. ALTER TABLE or DROP TABLE statements\nperformed inside the current routine on the tables that appear in anchors won't\naffect the data type of the anchored variables, even if the variable is declared\nafter an ALTER TABLE or DROP TABLE statement.\n\nThe real data type of a ROW TYPE OF cursor_name variable will become known when\nexecution enters into the block where the variable is declared. Data type\ninstantiation will happen only once. In a cursor ROW TYPE OF variable that is\ndeclared inside a loop, its data type will become known on the very first iteration\nand won't change on further loop iterations.\n\nThe tables referenced in TYPE OF and ROW TYPE OF declarations will be checked for\nexistence at the beginning of the stored routine call. CREATE PROCEDURE or CREATE\nFUNCTION will not check the referenced tables for existence.\n\nExamples\n--------\nTYPE OF and ROW TYPE OF from MariaDB 10.3:\nDECLARE tmp TYPE OF t1.a; -- Get the data type from the column {{a}} in the\ntable {{t1}}\n\nDECLARE rec1 ROW TYPE OF t1; -- Get the row data type from the table {{t1}}\n\nDECLARE rec2 ROW TYPE OF cur1; -- Get the row data type from the cursor {{cur1}}\n','','https://mariadb.com/kb/en/library/declare-variable/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (307,23,'FETCH','Syntax\n------\nFETCH cursor_name INTO var_name [, var_name] ...\n\nDescription\n-----------\nThis statement fetches the next row (if a row exists) using the\nspecified open cursor, and advances the cursor pointer.\n\nvar_name can be a local variable, but not a user-defined variable.\n\nIf no more rows are available, a No Data condition occurs with\nSQLSTATE value 02000. To detect this condition, you can set up a\nhandler for it (or for a NOT FOUND condition).\n\nSee Cursor Overview for an example.\n','','https://mariadb.com/kb/en/library/fetch/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (308,23,'FOR','Syntax\n------\nInteger range FOR loop:\n[begin_label:]\nFOR var_name IN [ REVERSE ] lower_bound .. upper_bound\nDO statement_list\nEND FOR [ end_label ]\n\nExplicit cursor FOR loop\n[begin_label:]\nFOR record_name IN cursor_name [ ( cursor_actual_parameter_list)]\nDO statement_list\nEND FOR [ end_label ]\n\nExplicit cursor FOR loop (Oracle mode)\n[begin_label:]\nFOR record_name IN cursor_name [ ( cursor_actual_parameter_list)]\nLOOP\n statement_list\nEND LOOP [ end_label ]\n\nImplicit cursor FOR loop\n[begin_label:]\nFOR record_name IN ( select_statement )\nDO statement_list\nEND FOR [ end_label ]\n\nDescription\n-----------\nFOR loops allow code to be executed a fixed number of times.\n\nIn an integer range FOR loop, MariaDB will compare the lower bound and upper bound\nvalues, and assign the lower bound value to a counter. If REVERSE is not specified,\nand the upper bound value is greater than or equal to the counter, the counter will\nbe incremented and the statement will continue, after which the loop is entered\nagain. If the upper bound value is greater than the counter, the loop will be exited.\n\nIf REVERSE is specified, the counter is decremented, and the upper bound value needs\nto be less than or equal for the loop to continue.\n\nExamples\n--------\nIntger range FOR loop:\nCREATE TABLE t1 (a INT);\n\nDELIMITER //\n\nFOR i IN 1..3\nDO\n INSERT INTO t1 VALUES (i);\nEND FOR;\n//\n\nDELIMITER ;\n\nSELECT * FROM t1;\n+------+\n| a    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n\nREVERSE integer range FOR loop:\nCREATE OR REPLACE TABLE t1 (a INT);\n\nDELIMITER //\nFOR i IN REVERSE 4..12\n  DO\n  INSERT INTO t1 VALUES (i);\nEND FOR;\n//\nQuery OK, 9 rows affected (0.422 sec)\n\nDELIMITER ;\n\nSELECT * FROM t1;\n+------+\n| a    |\n+------+\n|   12 |\n|   11 |\n|   10 |\n|    9 |\n|    8 |\n|    7 |\n|    6 |\n|    5 |\n|    4 |\n+------+\n\nExplicit cursor in Oracle mode:\nSET sql_mode=ORACLE;\n\nCREATE OR REPLACE TABLE t1 (a INT, b VARCHAR(32));\n\nINSERT INTO t1 VALUES (10,'b0');\nINSERT INTO t1 VALUES (11,'b1');\nINSERT INTO t1 VALUES (12,'b2');\n\nDELIMITER //\n\nCREATE OR REPLACE PROCEDURE p1(pa INT) AS \n CURSOR cur(va INT) IS\n  SELECT a, b FROM t1 WHERE a=va;\nBEGIN\n FOR rec IN cur(pa)\n LOOP\n  SELECT rec.a, rec.b;\n END LOOP;\nEND;\n//\n\nDELIMITER ;\n\nCALL p1(10);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n|    10 | b0    |\n+-------+-------+\n\nCALL p1(11);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n|    11 | b1    |\n+-------+-------+\n\nCALL p1(12);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n|    12 | b2    |\n+-------+-------+\n\nCALL p1(13);\nQuery OK, 0 rows affected (0.000 sec)\n','','https://mariadb.com/kb/en/library/for/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (309,23,'GOTO','Syntax\n------\nGOTO label\n\nDescription\n-----------\nThe GOTO statement causes the code to jump to the specified label, and continue\noperating from there. It is only accepted when in Oracle mode.\n\nExample\n-------\nSET sql_mode=ORACLE;\n\nDELIMITER //\n\nCREATE OR REPLACE PROCEDURE p1 AS\n\nBEGIN\n\nSELECT 1;\n GOTO label;\n SELECT 2;\n <<label>>\n SELECT 3;\n\nEND;\n\n//\n\nDELIMITER\n\ncall p1();\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set (0.000 sec)\n\n+---+\n| 3 |\n+---+\n| 3 |\n+---+\n1 row in set (0.000 sec)\n','','https://mariadb.com/kb/en/library/goto/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (310,23,'IF','Syntax\n------\nIF search_condition THEN statement_list\n  [ELSEIF search_condition THEN statement_list] ...\n  [ELSE statement_list]\nEND IF;\n\nDescription\n-----------\nIF implements a basic conditional construct. If the search_condition\nevaluates to true, the corresponding SQL statement list is executed.\n\nIf no search_condition matches, the statement list in the ELSE clause\nis executed. Each statement_list consists of one or more statements.\n','','https://mariadb.com/kb/en/library/if/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (311,23,'ITERATE','Syntax\n------\nITERATE label\n\nITERATE can appear only within LOOP, REPEAT, and WHILE statements.\n\nITERATE means "do the loop again", and uses the statement's label to determine which\nstatements to repeat. The label must be in the same stored program, not in a\ncaller procedure.\n\nIf you try to use ITERATE with a non-existing label, or if the label is associated to\na construct which is not a loop, the following error will be produced:\nERROR 1308 (42000): ITERATE with no matching label: <label_name>\n\nBelow is an example of how ITERATE might be used:\nCREATE PROCEDURE doiterate(p1 INT)\nBEGIN\n label1: LOOP\n  SET p1 = p1 + 1;\n  IF p1 < 10 THEN ITERATE label1; END IF;\n  LEAVE label1;\n END LOOP label1;\n SET @x = p1;\nEND\n','','https://mariadb.com/kb/en/library/iterate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (312,23,'Labels','Syntax\n------\nlabel: <construct>\n[label]\n\nLabels are MariaDB identifiers which can be used to identify a BEGIN ... END\nconstruct or a loop. They have a maximum length of 16 characters and can be quoted\nwith backticks (i.e.., `).\n\nLabels have a start part and an end part. The start part must precede the portion of\ncode it refers to, must be followed by a colon (:) and can be on the same or\ndifferent line. The end part is optional and adds nothing, but can make the code more\nreadable. If used, the end part must precede the construct's delimiter (;).\n\nConstructs identified by a label can be nested. Each construct can be identified by\nonly one label.\n\nLabels need not be unique in the stored program they belong to. However, a label for\nan inner loop cannot be identical to a label for an outer loop. In this case, the\nfollowing error would be produced:\nERROR 1309 (42000): Redefining label <label_name>\n\nLEAVE and ITERATE statements can be used to exit or repeat a portion of code\nidentified by a label. They must be in the same Stored Routine, Trigger or Event\nwhich contains the target label.\n\nBelow is an example using a simple label that is used to exit a LOOP:\nCREATE PROCEDURE `test_sp`()\nBEGIN\n `my_label`:\n LOOP\n   SELECT 'looping';\n   LEAVE `my_label`;\n END LOOP;\n SELECT 'out of loop';\nEND;\n\nThe following label is used to exit a procedure, and has an end part:\nCREATE PROCEDURE `test_sp`()\n`my_label`:\nBEGIN\n IF @var = 1 THEN\n   LEAVE `my_label`;\n END IF;\n DO something();\nEND `my_label`;\n','','https://mariadb.com/kb/en/library/labels/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (313,23,'LEAVE','Syntax\n------\nLEAVE label\n\nThis statement is used to exit the flow control construct that has the\ngiven label. The label must be in the same stored program, not in a caller procedure.\n\nLEAVE can be used within BEGIN ... END or loop constructs\n(LOOP, REPEAT, WHILE). In Stored Procedures, Triggers and Events, LEAVE can refer to\nthe outmost BEGIN ... END construct; in that case, the program exits the procedure.\n\nIn Stored Functions, RETURN can be used instead.\n\nNote that LEAVE cannot be used to exit a DECLARE HANDLER block.\n\nIf you try to LEAVE a non-existing label, or if you try to LEAVE a HANDLER block, the\nfollowing error will be produced:\nERROR 1308 (42000): LEAVE with no matching label: <label_name>\n\nThe following example uses LEAVE to exit the procedure if a condition is true:\nCREATE PROCEDURE proc(IN p TINYINT)\nCONTAINS SQL\n`whole_proc`:\nBEGIN\n SELECT 1;\n IF p < 1 THEN\n   LEAVE `whole_proc`;\n END IF;\n SELECT 2;\nEND;\n\nCALL proc(0);\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n','','https://mariadb.com/kb/en/library/leave/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (314,23,'LOOP','Syntax\n------\n[begin_label:] LOOP\n  statement_list\nEND LOOP [end_label]\n\nDescription\n-----------\nLOOP implements a simple loop construct, enabling repeated execution\nof the statement list, which consists of one or more statements, each\nterminated by a semicolon (i.e., ;) statement delimiter. The statements\nwithin the loop are repeated until the loop is exited; usually this is\naccomplished with a LEAVE statement.\n\nA LOOP statement can be labeled. end_label cannot be given unless\nbegin_label also is present. If both are present, they must be the\nsame.\n\nSee Delimiters in the mysql client for more on delimiter usage in the client.\n','','https://mariadb.com/kb/en/library/loop/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (315,23,'OPEN','Syntax\n------\n<= MariaDB 10.2\nOPEN cursor_name\n\nFrom MariaDB 10.3\nOPEN cursor_name [expression[,...]];\n\nDescription\n-----------\nThis statement opens a cursor which was previously declared with DECLARE CURSOR.\n\nThe query associated to the DECLARE CURSOR is executed when OPEN is executed. It is\nimportant to remember this if the query produces an error, or calls functions which\nhave side effects.\n\nThis is necessary in order to FETCH rows from a cursor.\n\nSee Cursor Overview for an example.\n','','https://mariadb.com/kb/en/library/open/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (316,23,'REPEAT LOOP','Syntax\n------\n[begin_label:] REPEAT\n  statement_list\nUNTIL search_condition\nEND REPEAT [end_label]\n\nThe statement list within a REPEAT statement is repeated until the\nsearch_condition is true. Thus, a REPEAT always enters the loop at\nleast once. statement_list consists of one or more statements, each\nterminated by a semicolon (i.e., ;) statement delimiter.\n\nA REPEAT statement can be labeled. end_label cannot be given unless\nbegin_label also is present. If both are present, they must be the\nsame.\n\nSee Delimiters in the mysql client for more on client delimiter usage.\n\nDELIMITER //\n\nCREATE PROCEDURE dorepeat(p1 INT)\n BEGIN\n  SET @x = 0;\n  REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;\n END\n//\n\nCALL dorepeat(1000)//\n\nSELECT @x//\n+------+\n| @x   |\n+------+\n| 1001 |\n+------+\n','','https://mariadb.com/kb/en/library/repeat-loop/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (317,23,'RESIGNAL','Syntax\n------\nRESIGNAL [error_condition]\n  [SET error_property\n  [, error_property] ...]\n\nerror_condition:\n  SQLSTATE [VALUE] 'sqlstate_value'\n | condition_name\n\nerror_property:\n  error_property_name = <error_property_value>\n\nerror_property_name:\n  CLASS_ORIGIN\n | SUBCLASS_ORIGIN\n | MESSAGE_TEXT\n | MYSQL_ERRNO\n | CONSTRAINT_CATALOG\n | CONSTRAINT_SCHEMA\n | CONSTRAINT_NAME\n | CATALOG_NAME\n | SCHEMA_NAME\n | TABLE_NAME\n | COLUMN_NAME\n | CURSOR_NAME\n\nDescription\n-----------\nThe syntax of RESIGNAL and its semantics are very similar to SIGNAL. This statement\ncan only be used within an error HANDLER. It produces an error, like SIGNAL. RESIGNAL\nclauses are the same as SIGNAL, except that they all are optional, even SQLSTATE. All\nthe properties which are not specified in RESIGNAL, will be identical to the\nproperties of the error that was received by the error HANDLER. For a description of\nthe clauses, see diagnostics area.\n\nNote that RESIGNAL does not empty the diagnostics area: it just appends another\nerror condition.\n\nRESIGNAL, without any clauses, produces an error which is identical to the error that\nwas received by HANDLER.\n\nIf used out of a HANDLER construct, RESIGNAL produces the following error:\nERROR 1645 (0K000): RESIGNAL when handler not active\n\nIn MariaDB 5.5, if a HANDLER contained a CALL to another procedure, that procedure\ncould use RESIGNAL. Since MariaDB 10.0, trying to do this raises the above error.\n\nFor a list of SQLSTATE values and MariaDB error codes, see MariaDB Error Codes.\n\nThe following procedure tries to query two tables which don't exist, producing a 1146\nerror in both cases. Those errors will trigger the HANDLER. The first time the error\nwill be ignored and the client will not receive it, but the second time, the error is\nre-signaled, so the client will receive it.\n\nCREATE PROCEDURE test_error( )\nBEGIN\n DECLARE CONTINUE HANDLER\n   FOR 1146\n BEGIN\n IF @hide_errors IS FALSE THEN\n   RESIGNAL;\n END IF;\n END;\n SET @hide_errors = TRUE;\n SELECT 'Next error will be ignored' AS msg;\n SELECT `c` FROM `temptab_one`;\n SELECT 'Next error won''t be ignored' AS msg;\n SET @hide_errors = FALSE;\n SELECT `c` FROM `temptab_two`;\nEND;\n\nCALL test_error( );\n\n+----------------------------+\n| msg                        |\n+----------------------------+\n| Next error will be ignored |\n+----------------------------+\n\n+-----------------------------+\n| msg                         |\n+-----------------------------+\n| Next error won't be ignored |\n+-----------------------------+\n\nERROR 1146 (42S02): Table 'test.temptab_two' doesn't exist\n\nThe following procedure re-signals an error, modifying only the error message to\nclarify the cause of the problem.\n\nCREATE PROCEDURE test_error()\nBEGIN\n DECLARE CONTINUE HANDLER\n FOR 1146\n BEGIN\n   RESIGNAL SET\n   MESSAGE_TEXT = '`temptab` does not exist';\n END;\n SELECT `c` FROM `temptab`;\nEND;\n\nCALL test_error( );\nERROR 1146 (42S02): `temptab` does not exist\n\nAs explained above, this works on MariaDB 5.5, but produces a 1645 error since 10.0.\n\nCREATE PROCEDURE handle_error()\nBEGIN\n RESIGNAL;\nEND;\nCREATE PROCEDURE p()\nBEGIN\n DECLARE EXIT HANDLER FOR SQLEXCEPTION CALL p();\n SIGNAL SQLSTATE '45000';\nEND;\n','','https://mariadb.com/kb/en/library/resignal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (318,23,'RETURN','Syntax\n------\nRETURN expr\n\nThe RETURN statement terminates execution of a stored function and\nreturns the value expr to the function caller. There must be at least\none RETURN statement in a stored function. If the function has multiple exit points,\nall exit points must have a RETURN.\n\nThis statement is not used in stored procedures, triggers, or events. LEAVE can be\nused instead.\n\nThe following example shows that RETURN can return the result of a scalar subquery:\nCREATE FUNCTION users_count() RETURNS BOOL\n READS SQL DATA\nBEGIN\n RETURN (SELECT COUNT(DISTINCT User) FROM mysql.user);\nEND;\n','','https://mariadb.com/kb/en/library/return/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (319,23,'SELECT INTO','Syntax\n------\nSELECT col_name [, col_name] ...\n  INTO var_name [, var_name] ...\n  table_expr\n\nDescription\n-----------\nSELECT ... INTO enables selected columns to be stored directly\ninto variables. No resultset is produced. The query should return a single row. If\nthe query\nreturns no rows, a warning with error code 1329 occurs (No data), and\nthe variable values remain unchanged. If the query returns multiple\nrows, error 1172 occurs (Result consisted of more than one row). If it\nis possible that the statement may retrieve multiple rows, you can use\nLIMIT 1 to limit the result set to a single row.\n\nThe INTO clause can also be specified at the end of the statement.\n\nIn the context of such statements that occur as part of events\nexecuted by the Event Scheduler, diagnostics messages (not only\nerrors, but also warnings) are written to the error log, and, on\nWindows, to the application event log.\n\nThis statement can be used with both local variables and user-defined variables.\n\nFor the complete syntax, see SELECT.\n\nAnother way to set a variable's value is the SET statement.\n\nSELECT ... INTO results are not stored in the query cache even if SQL_CACHE\nis specified.\n\nExamples\n--------\nSELECT id, data INTO @x,@y \nFROM test.t1 LIMIT 1;\n','','https://mariadb.com/kb/en/library/selectinto/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (320,23,'SIGNAL','Syntax\n------\nSIGNAL error_condition\n  [SET error_property\n  [, error_property] ...]\n\nerror_condition:\n  SQLSTATE [VALUE] 'sqlstate_value'\n | condition_name\n\nerror_property:\n  error_property_name = <error_property_value>\n\nerror_property_name:\n  CLASS_ORIGIN\n | SUBCLASS_ORIGIN\n | MESSAGE_TEXT\n | MYSQL_ERRNO\n | CONSTRAINT_CATALOG\n | CONSTRAINT_SCHEMA\n | CONSTRAINT_NAME\n | CATALOG_NAME\n | SCHEMA_NAME\n | TABLE_NAME\n | COLUMN_NAME\n | CURSOR_NAME\n\nSIGNAL empties the diagnostics area and produces a custom error. This statement can\nbe used anywhere, but is generally useful when used inside a stored program. When the\nerror is produced, it can be caught by a HANDLER. If not, the current stored program,\nor the current statement, will terminate with the specified error.\n\nSometimes an error HANDLER just needs to SIGNAL the same error it received,\noptionally with some changes. Usually the RESIGNAL statement is the most convenient\nway to do this.\n\nerror_condition can be an SQLSTATE value or a named error condition defined via\nDECLARE CONDITION. SQLSTATE must be a constant string consisting of five characters.\n\nThese codes are standard to ODBC and ANSI SQL. For customized errors, the recommended\nSQLSTATE is '45000'. For a list of SQLSTATE values used by MariaDB, see the MariaDB\nError Codes page. The SQLSTATE can be read via the API method mysql_sqlstate( ).\n\nTo specify error properties user-defined variables and local variables can be used,\nas well as character set conversions (but you can't set a collation).\n\nThe error properties, their type and their default values are explained in the\ndiagnostics area page.\n\nErrors\n------\nIf the SQLSTATE is not valid, the following error like this will be produced:\nERROR 1407 (42000): Bad SQLSTATE: '123456'\n\nIf a property is specified more than once, an error like this will be produced:\nERROR 1641 (42000): Duplicate condition information item 'MESSAGE_TEXT'\n\nIf you specify a condition name which is not declared, an error like this will\nbe produced:\nERROR 1319 (42000): Undefined CONDITION: cond_name\n\nIf MYSQL_ERRNO is out of range, you will get an error like this:\nERROR 1231 (42000): Variable 'MYSQL_ERRNO' can't be set to the value of '0'\n\nExamples\n--------\nHere's what happens if SIGNAL is used in the client to generate errors:\nSIGNAL SQLSTATE '01000';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n\n+---------+------+------------------------------------------+\n| Level   | Code | Message                                  |\n+---------+------+------------------------------------------+\n| Warning | 1642 | Unhandled user-defined warning condition |\n+---------+------+------------------------------------------+\n1 row in set (0.06 sec)\n\nSIGNAL SQLSTATE '02000';\nERROR 1643 (02000): Unhandled user-defined not found condition\n\nHow to specify MYSQL_ERRNO and MESSAGE_TEXT properties:\nSIGNAL SQLSTATE '45000' SET MYSQL_ERRNO=30001, MESSAGE_TEXT='H\nello, world!';\n\nERROR 30001 (45000): Hello, world!\n\nThe following code shows how to use user variables, local variables and character set\nconversion with SIGNAL:\nCREATE PROCEDURE test_error(x INT)\nBEGIN\n DECLARE errno SMALLINT UNSIGNED DEFAULT 31001;\n SET @errmsg = 'Hello, world!';\n IF x = 1 THEN\n   SIGNAL SQLSTATE '45000' SET\n   MYSQL_ERRNO = errno,\n   MESSAGE_TEXT = @errmsg;\n ELSE\n   SIGNAL SQLSTATE '45000' SET\n   MYSQL_ERRNO = errno,\n   MESSAGE_TEXT = _utf8'Hello, world!';\n END IF;\nEND;\n\nHow to use named error conditions:\nCREATE PROCEDURE test_error(n INT)\nBEGIN\n DECLARE `too_big` CONDITION FOR SQLSTATE '45000';\n IF n > 10 THEN\n   SIGNAL `too_big`;\n END IF;\nEND;\n\nIn this example, we'll define a HANDLER for an error code. When the error occurs, we\nSIGNAL a more informative error which makes sense for our procedure:\nCREATE PROCEDURE test_error()\nBEGIN\n DECLARE EXIT HANDLER\n FOR 1146\n BEGIN\n   SIGNAL SQLSTATE '45000' SET\n   MESSAGE_TEXT = 'Temporary tables not found; did you call init() procedure?';\n END;\n -- this will produce a 1146 error\n SELECT `c` FROM `temptab`;\nEND;\n','','https://mariadb.com/kb/en/library/signal/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (321,23,'WHILE','Syntax\n------\n[begin_label:] WHILE search_condition DO\n  statement_list\nEND WHILE [end_label]\n\nDescription\n-----------\nThe statement list within a WHILE statement is repeated as long as the\nsearch_condition is true. statement_list consists of one or more\nstatements. If the loop must be executed at least once, REPEAT ... LOOP can be\nused instead.\n\nA WHILE statement can be labeled. end_label cannot be given unless\nbegin_label also is present. If both are present, they must be the\nsame.\n\nExamples\n--------\nCREATE PROCEDURE dowhile()\nBEGIN\n DECLARE v1 INT DEFAULT 5;\n\nWHILE v1 > 0 DO\n  ...\n  SET v1 = v1 - 1;\n END WHILE;\nEND\n','','https://mariadb.com/kb/en/library/while/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (322,24,'BUFFER','A synonym for ST_BUFFER.\n','','https://mariadb.com/kb/en/library/buffer/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (323,24,'CONVEXHULL','A synonym for ST_CONVEXHULL.\n','','https://mariadb.com/kb/en/library/convexhull/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (324,24,'GEOMETRYCOLLECTION','Syntax\n------\nGeometryCollection(g1,g2,...)\n\nDescription\n-----------\nConstructs a WKB GeometryCollection. If any argument is not a well-formed WKB\nrepresentation of a geometry, the return value is NULL.\n\nExamples\n--------\nCREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n  (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n  (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6),\nPoint(7, 9)))))),\n  (GeomFromText('GeometryCollection()')),\n  (GeomFromText('GeometryCollection EMPTY'));\n','','https://mariadb.com/kb/en/library/geometrycollection/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (325,24,'LINESTRING','Syntax\n------\nLineString(pt1,pt2,...)\n\nDescription\n-----------\nConstructs a WKB LineString value from a number of WKB Point arguments.  If any\nargument is not a WKB Point, the return value is\nNULL. If the number of Point arguments is less than two, the return value is NULL.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n\nCREATE TABLE gis_line  (g LINESTRING);\nINSERT INTO gis_line VALUES\n  (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n  (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n  (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n','','https://mariadb.com/kb/en/library/linestring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (326,24,'MULTILINESTRING','Syntax\n------\nMultiLineString(ls1,ls2,...)\n\nDescription\n-----------\nConstructs a WKB MultiLineString value using WKB LineString arguments.  If any\nargument is not a WKB LineString, the return value is\nNULL.\n\nExample\n-------\nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),\n (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)),\nLineString(Point(2, 5),Point(5, 8),Point(21, 7))))));\n','','https://mariadb.com/kb/en/library/multilinestring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (327,24,'MULTIPOINT','Syntax\n------\nMultiPoint(pt1,pt2,...)\n\nDescription\n-----------\nConstructs a WKB MultiPoint value using WKB Point arguments. If any argument is not a\nWKB Point, the return value is NULL.\n\nExamples\n--------\nSET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1\n5 )');\n\nCREATE TABLE gis_multi_point (g MULTIPOINT);\nINSERT INTO gis_multi_point VALUES\n  (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n  (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n  (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n','','https://mariadb.com/kb/en/library/multipoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (328,24,'MULTIPOLYGON','Syntax\n------\nMultiPolygon(poly1,poly2,...)\n\nDescription\n-----------\nConstructs a WKB MultiPolygon value from a set of WKB Polygon arguments. If any\nargument is not a WKB Polygon, the return value is NULL.\n\nExample\n-------\nCREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nINSERT INTO gis_multi_polygon VALUES\n  (MultiPolygonFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66\n23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48\n6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')),\n  (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0, 3), Point(3, 3),\nPoint(3, 0), Point(0, 3)))))));\n','','https://mariadb.com/kb/en/library/multipolygon/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (329,24,'POINT','Syntax\n------\nPoint(x,y)\n\nDescription\n-----------\nConstructs a WKB Point using the given coordinates.\n\nExamples\n--------\nSET @g = ST_GEOMFROMTEXT('Point(1 1)');\n\nCREATE TABLE gis_point  (g POINT);\nINSERT INTO gis_point VALUES\n  (PointFromText('POINT(10 10)')),\n  (PointFromText('POINT(20 10)')),\n  (PointFromText('POINT(20 20)')),\n  (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n','','https://mariadb.com/kb/en/library/point/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (330,24,'PointOnSurface','A synonym for ST_PointOnSurface.\n','','https://mariadb.com/kb/en/library/pointonsurface/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (331,24,'POLYGON','Syntax\n------\nPolygon(ls1,ls2,...)\n\nDescription\n-----------\nConstructs a WKB Polygon value from a number of WKB LineString\narguments. If any argument does not represent the WKB of a LinearRing (that is,\nnot a closed and simple LineString) the return value is NULL.\n\nNote that according to the OpenGIS standard, a POLYGON should have exactly one\nExteriorRing and all other rings should lie within that ExteriorRing and thus be the\nInteriorRings. Practically, however, some systems, including MariaDB's, permit\npolygons to have several 'ExteriorRings'. In the case of there being multiple,\nnon-overlapping exterior rings ST_NUMINTERIORRINGS() will return 1.\n\nExamples\n--------\nSET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n\nCREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n  (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n  (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10\n20,10 10))')),\n  (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0), Point(30, 0), Point(30, 30),\nPoint(0, 0))))));\n\nNon-overlapping 'polygon':\nSELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n','','https://mariadb.com/kb/en/library/polygon/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (332,24,'ST_BUFFER','Syntax\n------\nST_BUFFER(g1,r)\nBUFFER(g1,r)\n\nDescription\n-----------\nReturns a geometry that represents all points whose distance from geometry g1 is less\nthan or equal to distance, or radius, r.\n\nUses for this function could include creating for example a new geometry representing\na buffer zone around an island.\n\nBUFFER() is a synonym.\n\nExamples\n--------\nDetermining whether a point is within a buffer zone:\nSET @g1 = ST_GEOMFROMTEXT('POLYGON((10 10, 10 20, 20 20, 20 10, 10 10))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(8 8)');\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,5));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,5)) |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,1));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,1)) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n','','https://mariadb.com/kb/en/library/st_buffer/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (333,24,'ST_CONVEXHULL','Syntax\n------\nST_ConvexHull(g)\nConvexHull(g)\n\nDescription\n-----------\nGiven a geometry, returns a geometry that is the minimum convex geometry enclosing\nall geometries within the set. Returns NULL if the geometry value is NULL or an\nempty value.\n\nST_ConvexHull() and ConvexHull() are synonyms.\n\nExamples\n--------\nThe ConvexHull of a single point is simply the single point:\nSET @g = ST_GEOMFROMTEXT('Point(0 0)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+\n\nSET @g = ST_GEOMFROMTEXT('MultiPoint(0 0, 1 2, 2 3)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POLYGON((0 0,1 2,2 3,0 0))   |\n+------------------------------+\n\nSET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1\n5 )');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+----------------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g))           |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n','','https://mariadb.com/kb/en/library/st_convexhull/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (334,24,'ST_INTERSECTION','Syntax\n------\nST_INTERSECTION(g1,g2)\n\nDescription\n-----------\nReturns a geometry that is the intersection, or shared portion, of geometry g1 and\ngeometry g2.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 1, 0 2)');\n\nSELECT ASTEXT(ST_INTERSECTION(@g1,@g2));\n+----------------------------------+\n| ASTEXT(ST_INTERSECTION(@g1,@g2)) |\n+----------------------------------+\n| POINT(2 1)                       |\n+----------------------------------+\n','','https://mariadb.com/kb/en/library/st_intersection/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (335,24,'ST_POINTONSURFACE','Syntax\n------\nST_PointOnSurface(g)\nPointOnSurface(g)\n\nDescription\n-----------\nGiven a geometry, returns a POINT guaranteed to intersect a surface. However,\nsee MDEV-7514.\n\nST_PointOnSurface() and PointOnSurface() are synonyms.\n','','https://mariadb.com/kb/en/library/st_pointonsurface/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (336,24,'ST_SYMDIFFERENCE','Syntax\n------\nST_SYMDIFFERENCE(g1,g2)\n\nDescription\n-----------\nReturns a geometry that represents the portions of geometry g1 and geometry g2 that\ndon't intersect.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(10 20, 10 40)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(10 15, 10 25)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+----------------------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2))            |\n+----------------------------------------------+\n| MULTILINESTRING((10 15,10 20),(10 25,10 40)) |\n+----------------------------------------------+\n\nSET @g2 = ST_GeomFromText('LINESTRING(10 20, 10 41)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+-----------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2)) |\n+-----------------------------------+\n| LINESTRING(10 40,10 41)           |\n+-----------------------------------+\n','','https://mariadb.com/kb/en/library/st_symdifference/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (337,24,'ST_UNION','Syntax\n------\nST_UNION(g1,g2)\n\nDescription\n-----------\nReturns a geometry that is the union of the geometry g1 and geometry g2.\n\nExamples\n--------\nSET @g1 = GEOMFROMTEXT('POINT (0 2)');\n\nSET @g2 = GEOMFROMTEXT('POINT (2 0)');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+---------------------------+\n| ASTEXT(ST_UNION(@g1,@g2)) |\n+---------------------------+\n| MULTIPOINT(2 0,0 2)       |\n+---------------------------+\n\nSET @g1 = GEOMFROMTEXT('POLYGON((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GEOMFROMTEXT('POLYGON((2 2,4 2,4 4,2 4,2 2))');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+------------------------------------------------+\n| ASTEXT(ST_UNION(@g1,@g2))                      |\n+------------------------------------------------+\n| POLYGON((0 0,0 3,2 3,2 4,4 4,4 2,3 2,3 0,0 0)) |\n+------------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_union/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (338,26,'BINLOG','Syntax\n------\nBINLOG 'str'\n\nDescription\n-----------\nBINLOG is an internal-use statement. It is generated by the\nmariadb-binlog/mysqlbinlog program as the printable representation of certain events\nin binary log files.  The 'str' value is a base 64-encoded\nstring the that server decodes to determine the data change indicated by the\ncorresponding event. This statement requires the SUPER privilege (<= MariaDB 10.5.1)\nor theBINLOG REPLAY privilege (>= MariaDB 10.5.2).\n','','https://mariadb.com/kb/en/library/binlog/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (339,26,'CACHE INDEX','Syntax\n------\nCACHE INDEX                      \n tbl_index_list [, tbl_index_list] ...\n IN key_cache_name\n\ntbl_index_list:\n tbl_name [[INDEX|KEY] (index_name[, index_name] ...)]\n\nDescription\n-----------\nThe CACHE INDEX statement assigns table indexes to a specific key\ncache. It is used only for MyISAM tables.\n\nA default key cache exists and cannot be destroyed. To create more key caches, the\nkey_buffer_size server system variable.\n\nThe associations between tables indexes and key caches are lost on server restart. To\nrecreate them automatically, it is necessary to configure caches in a configuration\nfile and include some CACHE INDEX (and optionally LOAD INDEX) statements in the\ninit file.\n\nExamples\n--------\nThe following statement assigns indexes from the tables t1, t2, and t3\nto the key cache named hot_cache:\nCACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table   | Op                 | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status   | OK       |\n| test.t2 | assign_to_keycache | status   | OK       |\n| test.t3 | assign_to_keycache | status   | OK       |\n+---------+--------------------+----------+----------+\n\nImplementation (for MyISAM)\n---------------------------\nNormally CACHE INDEX should not take a long time to execute. Internally it's\nimplemented the following way:\n\nThe only possible long operations are getting the locks for the table and flushing\nthe original key cache, if there were many key blocks for the file in it.\n\nWe plan to also add CACHE INDEX for Aria tables if there is a need for this.\n','','https://mariadb.com/kb/en/library/cache-index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (340,26,'FLUSH','Syntax\n------\nFLUSH [NO_WRITE_TO_BINLOG | LOCAL]\n  flush_option [, flush_option] ...\n\nor when flushing tables:\nFLUSH [NO_WRITE_TO_BINLOG | LOCAL] TABLES [table_list]  [table_flush_option]\n\nwhere table_list is a list of tables separated by , (comma).\n\nDescription\n-----------\nThe FLUSH statement clears or reloads various internal caches used by\nMariaDB. To execute FLUSH, you must have the RELOAD\nprivilege. See GRANT.\n\nThe RESET statement is similar to FLUSH. See\nRESET.\n\nYou cannot issue a FLUSH statement from within a stored function or a trigger. Doing\nso within a stored procedure is permitted, as long as it is not called by a stored\nfunction or trigger. See Stored Routine Limitations, Stored Function Limitations and\nTrigger Limitations.\n\nIf a listed table is a view, an error like the following will be produced:\nERROR 1347 (HY000): 'test.v' is not BASE TABLE\n\nBy default, FLUSH statements are written to the binary log and will be replicated.\n\nThe NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the statement is not\nwritten to the binary log.\n\nThe different flush options are:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------+-----------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------+\n|Option\n\n|Description\n\n|\n|CHANGED_PAGE_BITMAPS\n\n|XtraDB only. Internal command used for backup purposes. See the Information\nSchema CHANGED_PAGE_BITMAPS Table.\n\n|\n|CLIENT_STATISTICS\n\n|Reset client statistics (see SHOW CLIENT_STATISTICS).\n\n|\n|DES_KEY_FILE\n\n|Reloads the DES key file (Specified with the --des-key-file startup option).\n\n|\n|HOSTS\n\n|Flush the hostname cache (used for converting ip to host names and for\nunblocking blocked hosts. See max_connect_errors)\n\n|\n|INDEX_STATISTICS\n\n|Reset index statistics (see SHOW INDEX_STATISTICS).\n\n|\n|[ERROR | ENGINE | GENERAL | SLOW | BINARY | RELAY] LOGS\n\n|Close and reopen the specified log type, or all log types if none are\nspecified. FLUSH RELAY LOGS [connection-name] can be used to flush the relay logs for\na specific connection. Only one connection can be specified per FLUSH command. See\nMulti-source replication. FLUSH ENGINE LOGS will delete all unneeded Aria redo logs.\n\nSince MariaDB 10.1.30 and MariaDB 10.2.11, FLUSH BINARY LOGS\nDELETE_DOMAIN_ID=(list-of-domains) can be used to discard obsolete GTID domains from\nthe server's binary log state. In order for this to be successful, no event group\nfrom the listed GTID domains can be present in existing binary log files. If some\nstill exist, then they must be purged prior to executing this command. If the command\ncompletes successfully, then it also rotates the binary log.|\n|MASTER\n\n|Deprecated option, use RESET MASTER instead.\n\n|\n|PRIVILEGES\n\n|Reload all privileges from the privilege tables in the mysql database. If the\nserver is started with --skip-grant-table option, this will activate the privilege\ntables again.\n\n|\n|QUERY CACHE\n\n|Defragment the query cache to better utilize its memory. If you want to reset\nthe query cache, you can do it with RESET QUERY CACHE.\n\n|\n|QUERY_RESPONSE_TIME\n\n|See the QUERY_RESPONSE_TIME plugin.\n\n|\n|SLAVE\n\n|Deprecated option, use RESET REPLICA or RESET SLAVE instead.\n\n|\n|SSL\n\n|Used to dynamically reinitialize the server's TLS context by reloading the\nfiles defined by several TLS system variables. See FLUSH SSL for more information.\n\nThis command was first added in MariaDB 10.4.1.\n\n|\n|STATUS\n\n|Resets all server status variables that can be reset to 0. Not all global\nstatus variables support this, so not all global values are reset. See FLUSH STATUS\nfor more information.\n\n|\n|TABLE\n\n|Close tables given as options or all open tables if no table list was used.\n\nFrom MariaDB 10.4.1, using without any table list will only close tables not in use,\nand tables not locked by the FLUSH TABLES connection. If there are no locked tables,\nFLUSH TABLES will be instant and will not cause any waits, as it no longer waits for\ntables in use. When a table list is provided, from MariaDB 10.4.1, the server will\nwait for the end of any transactions that are using the tables. Previously, FLUSH\nTABLES only waited for the statements to complete.\n\n|\n|TABLES\n\n|Same as FLUSH TABLE.\n\n|\n|TABLES ... FOR EXPORT\n\n|For InnoDB tables, flushes table changes to disk to permit binary table\ncopies while the server is running. See FLUSH TABLES ... FOR EXPORT for more.\n\n|\n|TABLES WITH READ LOCK\n\n|Closes all open tables. New tables are only allowed to be opened with read\nlocks until an UNLOCK TABLES is given.\n\n|\n|TABLES WITH READ LOCK AND DISABLE CHECKPOINT\n\n|As TABLES WITH READ LOCK but also disable all checkpoint writes by\ntransactional table engines. This is useful when doing a disk snapshot of all tables.\n\n|\n|TABLE_STATISTICS\n\n|Reset table statistics (see SHOW TABLE_STATISTICS).\n\n|\n|USER_RESOURCES\n\n|Resets all per hour user resources. This enables clients that have exhausted\ntheir resources to connect again.\n\n|\n|USER_STATISTICS\n\n|Reset user statistics (see SHOW USER_STATISTICS).\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------+-----------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------+\nYou can also use the mysqladmin client to flush things. Use mysqladmin --help to\nexamine what flush commands it supports.\n\nFLUSH RELAY LOGS\n----------------\nFLUSH RELAY LOGS 'connection_name';\n\nCompatibility with MySQL\n\nFLUSH STATUS\n------------\nServer status variables can be reset by executing the following:\nFLUSH STATUS;\n\nGlobal Status Variables that Support FLUSH STATUS\n\nNot all global status variables support being reset by FLUSH STATUS. Currently, the\nfollowing status variables are reset by FLUSH STATUS:\n\nThe different usage of FLUSH TABLES\n-----------------------------------\n\nThe purpose of FLUSH TABLES\n\nThe purpose of FLUSH TABLES is to clean up the open table cache and\ntable definition cache from not in use tables.  This frees up memory\nand file descriptors. Normally this is not needed as the caches works\non a FIFO bases, but can be useful if the server seams to use up to\nmuch memory for some reason.\n\nThe purpose of FLUSH TABLES WITH READ LOCK\n\nFLUSH TABLES WITH READ LOCK is useful if you want to take a backup\nof some tables.  When FLUSH TABLES WITH READ LOCK returns, all\nwrite access to tables are blocked and all tables are marked as\n'properly closed' on disk.  The tables can still be used for read\noperations.\n\nThe purpose of FLUSH TABLES table_list\n\nFLUSH TABLES table_list is useful if you want to copy a table\nobject/files to or from the server. This command puts a lock that\nstops new users of the table and will wait until everyone has stopped\nusing the table. The table is then removed from the table definition\nand table cache.\n\nNote that it's up to the user to ensure that no one is accessing the\ntable between FLUSH TABLES and the table is copied to or from the\nserver. This can be secured by using LOCK TABLES.\n\nIf there are any tables locked by the connection that is using FLUSH TABLES all the\nlocked tables will be closed as part of the flush and\nreopened and relocked before FLUSH TABLES returns. This allows one\nto copy the table after FLUSH TABLES returns without having any\nwrites on the table.  For now this works works with most tables,\nexcept InnoDB as InnoDB may do background purges on the table even\nwhile it's write locked.\n\nThe purpose of FLUSH TABLES table_list WITH READ LOCK\n\nFLUSH TABLES table_list WITH READ LOCK should work as FLUSH TABLES WITH READ LOCK,\nbut only those tables that are listed will be\nproperly closed.  However in practice this works exactly like FLUSH TABLES WITH READ\nLOCK as the FLUSH command has anyway to wait\nfor all WRITE operations to end because we are depending on a global\nread lock for this code.  In the future we should consider fixing this\nto instead use meta data locks.\n\nImplementation of FLUSH TABLES commands in MariaDB 10.4.8 and above\n-------------------------------------------------------------------\n\nImplementation of FLUSH TABLES\n\nImplementation of FLUSH TABLES WITH READ LOCK\n\nInstead of using FLUSH TABLE WITH READ LOCK one should in most cases instead use\nBACKUP STAGE BLOCK_COMMIT.\n\nImplementation of FLUSH TABLES table_list\n\nImplementation of FLUSH TABLES table_list FOR EXPORT\n\nThis is basically the same behavior as in old MariaDB version if one first lock the\ntables, then do\nFLUSH TABLES.  The tables will be copyable until UNLOCK TABLES.\n\nFLUSH SSL\n---------\nIn MariaDB 10.4 and later, the FLUSH SSL command can be used to dynamically\nreinitialize the server's TLS context. This is most useful if you need to replace a\ncertificate that is about to expire without restarting the server.\n\nThis operation is performed by reloading the files defined by the following TLS\nsystem variables:\n\nThese TLS system variables are not dynamic, so their values can not be changed\nwithout restarting the server.\n\nIf you want to dynamically reinitialize the server's TLS context, then you need to\nchange the certificate and key files at the relevant paths defined by these TLS\nsystem variables, without actually changing the values of the variables. See\nMDEV-19341 for more information.\n\nReducing Memory Usage\n---------------------\nTo flush some of the global caches that take up memory, you could execute the\nfollowing command:\nFLUSH LOCAL HOSTS,\n QUERY CACHE,\n TABLE_STATISTICS,\n INDEX_STATISTICS,\n USER_STATISTICS;\n','','https://mariadb.com/kb/en/library/flush/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (341,26,'FLUSH QUERY CACHE','Description\n-----------\nYou can defragment the query cache to better utilize its memory with\nthe FLUSH QUERY CACHE statement. The statement does not remove any queries from\nthe cache.\n\nThe RESET QUERY CACHE statement removes all query results from the query cache.\n\nThe FLUSH TABLES statement also does this.\n','','https://mariadb.com/kb/en/library/flush-query-cache/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (342,26,'FLUSH TABLES FOR EXPORT','Syntax\n------\nFLUSH TABLES table_name [, table_name] FOR EXPORT\n\nDescription\n-----------\nFLUSH TABLES ... FOR EXPORT flushes changes to the specified tables to disk so that\nbinary copies can be made while the server is still running. This works for Archive,\nAria, CSV, InnoDB, MyISAM, MERGE, and XtraDB tables.\n\nThe table is read locked until one has issued UNLOCK TABLES.\n\nIf a storage engine does not support FLUSH TABLES FOR EXPORT, a 1031 error (SQLSTATE\n'HY000') is produced.\n\nIf FLUSH TABLES ... FOR EXPORT is in effect in the session, the following statements\nwill produce an error if attempted:\n\nIf any of the following statements is in effect in the session, attempting  FLUSH\nTABLES ... FOR EXPORT will produce an error.\n\nFLUSH FOR EXPORT is not written to the binary log.\n\nThis statement requires the RELOAD and the LOCK TABLES privileges.\n\nIf one of the specified tables cannot be locked, none of the tables will be locked.\n\nIf a table does not exist, an error like the following will be produced:\nERROR 1146 (42S02): Table 'test.xxx' doesn't exist\n\nIf a table is a view, an error like the following will be produced:\nERROR 1347 (HY000): 'test.v' is not BASE TABLE\n\nExample\n-------\nFLUSH TABLES test.t1 FOR EXPORT;\n#  Copy files related to the table (see below)\nUNLOCK TABLES;\n\nFor a full description, please see copying MariaDB tables.\n','','https://mariadb.com/kb/en/library/flush-tables-for-export/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (343,26,'HELP Command','Syntax\n------\nHELP search_string\n\nDescription\n-----------\nThe HELP command can be used in any MariaDB client, such as the mysql command-line\nclient, to get basic syntax help and a short description for most commands and\nfunctions.\n\nIf you provide an argument to the HELP command, the mysql client uses it as a search\nstring to access server-side help. The proper operation of this command requires that\nthe help tables in the mysql database be initialized with help topic information.\n\nIf there is no match for the search string, the search fails. Use HELP contents to\nsee a list of the help categories:\nHELP contents\nYou asked for help about help category: "Contents"\nFor more information, type 'help <item>', where <item> is one of the following\ncategories:\n Account Management\n Administration\n Compound Statements\n Data Definition\n Data Manipulation\n Data Types\n Functions\n Functions and Modifiers for Use with GROUP BY\n Geographic Features\n Help Metadata\n Language Structure\n Plugins\n Procedures\n Sequences\n Table Maintenance\n Transactions\n User-Defined Functions\n Utility\n\nIf a search string matches multiple items, MariaDB shows a list of matching topics:\nHELP drop\nMany help items for your request exist.\n\nTo make a more specific request, please type 'help <item>',\nwhere <item> is one of the following\ntopics:\n ALTER TABLE\n DROP DATABASE\n DROP EVENT\n DROP FUNCTION\n DROP FUNCTION UDF\n DROP INDEX\n DROP PACKAGE\n DROP PACKAGE BODY\n DROP PROCEDURE\n DROP ROLE\n DROP SEQUENCE\n DROP SERVER\n DROP TABLE\n DROP TRIGGER\n DROP USER\n DROP VIEW\n\nThen you can enter a topic as the search string to see the help entry for that topic.\n\nThe help is provided with the MariaDB server and makes use of four help tables found\nin the mysql database: help_relation, help_topic, help_category and help_keyword.\n\nThese tables are populated by the mysql_install_db or fill_help_table.sql scripts\nwhich, until MariaDB 10.4.7, contain data generated from an old version of MySQL.\n','','https://mariadb.com/kb/en/library/help-command/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (344,26,'KILL [CONNECTION | QUERY]','Syntax\n------\nKILL [HARD | SOFT] { {CONNECTION|QUERY} thread_id | QUERY ID query_id | USER\nuser_name }\n\nDescription\n-----------\nEach connection to mysqld runs in a separate thread. You can see which threads\nare running with the SHOW PROCESSLIST statement and kill a\nthread with the KILL thread_id statement.\n\nKILL allows the optional CONNECTION or\nQUERY modifier:\n\nIf a connection is terminated that has an active transaction, the transaction will be\nrolled back. If only a query is killed, the current transaction will stay active. See\nalso idle_transaction_timeout.\n\nIf you have the PROCESS privilege, you can see all threads. If\nyou have the SUPER privilege, or, from MariaDB 10.5.2, the CONNECTION ADMIN\nprivilege, you can kill all threads and\nstatements. Otherwise, you can see and kill only your own threads and\nstatements.\n\nKilling queries that repair or create indexes on MyISAM and Aria tables may result in\ncorrupted tables. Use the SOFT option to avoid this!\nThe HARD option (default) kills a command as soon as possible.  If you use\nSOFT, then critical operations that may leave a table in an\ninconsistent state will not be interrupted. Such operations include REPAIR and INDEX\ncreation for MyISAM and Aria tables (REPAIR TABLE, OPTIMIZE TABLE).\n\nKILL ... USER username will kill all connections/queries for a\ngiven user. USER can be specified one of the following ways:\n\nIf you specify a thread id and that thread does not exist, you get the\nfollowing error:\nERROR 1094 (HY000): Unknown thread id: <thread_id>\n\nIf you specify a query id that doesn't exist, you get the following error:\nERROR 1957 (HY000): Unknown query id: <query_id>\n\nHowever, if you specify a user name, no error is issued for non-connected (or even\nnon-existing) users. To check if the connection/query has been killed, you can use\nthe ROW_COUNT() function.\n\nA client whose connection is killed receives the following error:\nERROR 1317 (70100): Query execution was interrupted\n\nTo obtain a list of existing sessions, use the SHOW PROCESSLIST statement or query\nthe Information Schema PROCESSLIST table.\n\nNote: You cannot use KILL with the Embedded MySQL Server\nlibrary because the embedded server merely runs inside the threads of the host\napplication. It does not create any connection threads of its own.\n\nNote: You can also use \nmysqladmin kill thread_id [,thread_id...]\nto kill connections. To get a list of running queries,\nuse mysqladmin processlist. See mysqladmin.\n\nPercona Toolkit contains a program, pt-kill that can be used to automatically kill\nconnections that match certain criteria. For example, it can be used to terminate\nidle connections, or connections that have been busy for more than 60 seconds.\n','','https://mariadb.com/kb/en/library/data-manipulation-kill-connection-query/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (345,26,'LOAD INDEX','Syntax\n------\nLOAD INDEX INTO CACHE\n tbl_index_list [, tbl_index_list] ...\n\ntbl_index_list:\n tbl_name\n  [[INDEX|KEY] (index_name[, index_name] ...)]\n  [IGNORE LEAVES]\n\nDescription\n-----------\nThe LOAD INDEX INTO CACHE statement preloads a table index into the key\ncache to which it has been assigned by an explicit CACHE INDEX\nstatement, or into the default key cache otherwise.\n\nLOAD INDEX INTO CACHE is used only for MyISAM or Aria tables.\n\nThe IGNORE LEAVES modifier causes only blocks for the nonleaf nodes of\nthe index to be preloaded.\n','','https://mariadb.com/kb/en/library/load-index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (346,26,'RESET','Syntax\n------\nRESET reset_option [, reset_option] ...\n\nDescription\n-----------\nThe RESET statement is used to clear the state of various server\noperations. You must have the RELOAD privilege to execute\nRESET.\n\nRESET acts as a stronger version of the FLUSH statement.\n\nThe different RESET options are:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------------------+-------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------------+\n|Option\n\n|Description\n\n|\n|SLAVE ["connection_name"] [ALL]\n\n|Deletes all relay logs from the slave and reset the\nreplication position in the master binary log.\n\n|\n|MASTER\n\n|Deletes all old binary logs, makes the binary index\nfile (--log-bin-index) empty and creates a new binary log file.  This is useful when\nyou want to reset the master to an initial state. If you want to just delete old, not\nused binary logs, you should use the PURGE BINARY LOGS command.|\n|QUERY CACHE\n\n|Removes all queries from the query cache. See also\nFLUSH QUERY CACHE.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------------------+-------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/reset/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (347,26,'SET','Syntax\n------\nSET variable_assignment [, variable_assignment] ...\n\nvariable_assignment:\n   user_var_name = expr\n  | [GLOBAL | SESSION] system_var_name = expr\n  | [@@global. | @@session. | @@]system_var_name = expr\n\nOne can also set a user variable in any expression with this syntax:\nuser_var_name:= expr\n\nDescription\n-----------\nThe SET statement assigns values to different types of\nvariables that affect the operation of the server or your client. Older\nversions of MySQL employed SET OPTION, but this syntax was\ndeprecated in favor of SET without OPTION, and was removed in MariaDB 10.0.\n\nChanging a system variable by using the SET statement does not make the change\npermanently. To do so, the change must be made in a configuration file.\n\nFor setting variables on a per-query basis, see SET STATEMENT.\n\nSee SHOW VARIABLES for documentation on viewing server system variables.\n\nSee Server System Variables for a list of all the system variables.\n\nGLOBAL / SESSION\n\nWhen setting a system variable, the scope can be specified as either GLOBAL\nor SESSION.\n\nA global variable change affects all new sessions. It does not affect any currently\nopen sessions, including the one that made the change.\n\nA session variable change affects the current session only.\n\nIf the variable has a session value, not specifying either GLOBAL or SESSION will be\nthe same as specifying SESSION. If the variable only has a global value, not\nspecifying GLOBAL or SESSION will apply to the change to the global value.\n\nDEFAULT\n\nSetting a global variable to DEFAULT will restore it to the server default, and\nsetting a session variable to DEFAULT will restore it to the current global value.\n\nExamples\n--------\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME IN ('max_error_count',\n'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 64           |\n| SKIP_PARALLEL_REPLICATION | OFF           | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSetting the session values:\nSET max_error_count=128;Query OK, 0 rows affected (0.000 sec)\n\nSET skip_parallel_replication=ON;Query OK, 0 rows affected (0.000 sec)\n\nSET innodb_sync_spin_loops=60;\nERROR 1229 (HY000): Variable 'innodb_sync_spin_loops' is a GLOBAL variable \n and should be set with SET GLOBAL\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME IN ('max_error_count',\n'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 128           | 64           |\n| SKIP_PARALLEL_REPLICATION | ON            | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSetting the global values:\nSET GLOBAL max_error_count=256;\n\nSET GLOBAL skip_parallel_replication=ON;\nERROR 1228 (HY000): Variable 'skip_parallel_replication' is a SESSION variable \n and can't be used with SET GLOBAL\n\nSET GLOBAL innodb_sync_spin_loops=120;\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME IN ('max_error_count',\n'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 128           | 256          |\n| SKIP_PARALLEL_REPLICATION | ON            | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 120          |\n+---------------------------+---------------+--------------+\n\nSHOW VARIABLES will by default return the session value unless the variable is\nglobal only.\n\nSHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 128   |\n+-----------------+-------+\n\nSHOW VARIABLES LIKE 'skip_parallel_replication';\n+---------------------------+-------+\n| Variable_name             | Value |\n+---------------------------+-------+\n| skip_parallel_replication | ON    |\n+---------------------------+-------+\n\nSHOW VARIABLES LIKE 'innodb_sync_spin_loops';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 120   |\n+------------------------+-------+\n\nUsing the inplace syntax:\nSELECT (@a:=1);\n+---------+\n| (@a:=1) |\n+---------+\n|       1 |\n+---------+\n\nSELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n','','https://mariadb.com/kb/en/library/set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (348,26,'About SHOW','SHOW has many forms that provide information about\ndatabases, tables, columns, or status information about the server. These include:\n\nlike_or_where:\n  LIKE 'pattern'\n | WHERE expr\n\nIf the syntax for a given SHOW statement includes a\nLIKE 'pattern' part, 'pattern' is a\nstring that can contain the SQL "%" and\n"_" wildcard characters. The pattern is useful for\nrestricting statement output to matching values.\n\nSeveral SHOW statements also accept a\nWHERE clause that provides more flexibility in specifying\nwhich rows to display. See Extended Show.\n','','https://mariadb.com/kb/en/library/about-show/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (349,26,'SHOW AUTHORS','Syntax\n------\nSHOW AUTHORS\n\nDescription\n-----------\nThe SHOW AUTHORS statement displays information about the\npeople who work on MariaDB. For each author, it displays Name, Location, and\nComment values. All columns are encoded as latin1.\n\nThese include:\n\nThe order is somewhat related to importance of the contribution given to the MariaDB\nproject, but this is not 100% accurate. There is still room for improvement\nand debate...\n\nExample\n-------\nSHOW AUTHORS\G\n*************************** 1. row ***************************\n  Name: Michael (Monty) Widenius\nLocation: Tusby, Finland\n Comment: Lead developer and main author\n*************************** 2. row ***************************\n  Name: Sergei Golubchik\nLocation: Kerpen, Germany\n Comment: Architect, Full-text search, precision math, plugin framework, merges etc\n*************************** 3. row ***************************\n  Name: Igor Babaev\nLocation: Bellevue, USA\n Comment: Optimizer, keycache, core work\n*************************** 4. row ***************************\n  Name: Sergey Petrunia\nLocation: St. Petersburg, Russia\n Comment: Optimizer\n*************************** 5. row ***************************\n  Name: Oleksandr Byelkin\nLocation: Lugansk, Ukraine\n Comment: Query Cache (4.0), Subqueries (4.1), Views (5.0)\n*************************** 6. row ***************************\n  Name: Timour Katchaounov\nLocation: Sofia , Bulgaria\n Comment: Optimizer\n*************************** 7. row ***************************\n  Name: Kristian Nielsen\nLocation: Copenhagen, Denmark\n Comment: Replication, Async client prototocol, General buildbot stuff\n*************************** 8. row ***************************\n  Name: Alexander (Bar) Barkov\nLocation: Izhevsk, Russia\n Comment: Unicode and character sets\n*************************** 9. row ***************************\n  Name: Alexey Botchkov (Holyfoot)\nLocation: Izhevsk, Russia\n Comment: GIS extensions, embedded server, precision math\n*************************** 10. row ***************************\n  Name: Daniel Bartholomew\nLocation: Raleigh, USA\n Comment: MariaDB documentation, Buildbot, releases\n*************************** 11. row ***************************\n  Name: Colin Charles\nLocation: Selangor, Malesia\n Comment: MariaDB documentation, talks at a LOT of conferences\n*************************** 12. row ***************************\n  Name: Sergey Vojtovich\nLocation: Izhevsk, Russia\n Comment: initial implementation of plugin architecture, maintained native storage\nengines (MyISAM, MEMORY, ARCHIVE, etc), rewrite of table cache\n*************************** 13. row ***************************\n  Name: Vladislav Vaintroub\nLocation: Mannheim, Germany\n Comment: MariaDB Java connector, new thread pool, Windows optimizations\n*************************** 14. row ***************************\n  Name: Elena Stepanova\nLocation: Sankt Petersburg, Russia\n Comment: QA, test cases\n*************************** 15. row ***************************\n  Name: Georg Richter\nLocation: Heidelberg, Germany\n Comment: New LGPL C connector, PHP connector\n*************************** 16. row ***************************\n  Name: Jan Lindström\nLocation: Ylämylly, Finland\n Comment: Working on InnoDB\n*************************** 17. row ***************************\n  Name: Lixun Peng\nLocation: Hangzhou, China\n Comment: Multi Source replication\n*************************** 18. row ***************************\n  Name: Olivier Bertrand\nLocation: Paris, France\n Comment: CONNECT storage engine\n*************************** 19. row ***************************\n  Name: Kentoku Shiba\nLocation: Tokyo, Japan\n Comment: Spider storage engine, metadata_lock_info Information schema\n*************************** 20. row ***************************\n  Name: Percona\nLocation: CA, USA\n Comment: XtraDB, microslow patches, extensions to slow log\n*************************** 21. row ***************************\n  Name: Vicentiu Ciorbaru\nLocation: Bucharest, Romania\n Comment: Roles\n*************************** 22. row ***************************\n  Name: Sudheera Palihakkara\nLocation: \n Comment: PCRE Regular Expressions\n*************************** 23. row ***************************\n  Name: Pavel Ivanov\nLocation: USA\n Comment: Some patches and bug fixes\n*************************** 24. row ***************************\n  Name: Konstantin Osipov\nLocation: Moscow, Russia\n Comment: Prepared statements (4.1), Cursors (5.0), GET_LOCK (10.0)\n*************************** 25. row ***************************\n  Name: Ian Gilfillan\nLocation: South Africa\n Comment: MariaDB documentation\n*************************** 26. row ***************************\n  Name: Federico Razolli\nLocation: Italy\n Comment: MariaDB documentation Italian translation\n*************************** 27. row ***************************\n  Name: Guilhem Bichot\nLocation: Bordeaux, France\n Comment: Replication (since 4.0)\n*************************** 28. row ***************************\n  Name: Andrei Elkin\nLocation: Espoo, Finland\n Comment: Replication\n*************************** 29. row ***************************\n  Name: Dmitri Lenev\nLocation: Moscow, Russia\n Comment: Time zones support (4.1), Triggers (5.0)\n*************************** 30. row ***************************\n  Name: Marc Alff\nLocation: Denver, CO, USA\n Comment: Signal, Resignal, Performance schema\n*************************** 31. row ***************************\n  Name: Mikael Ronström\nLocation: Stockholm, Sweden\n Comment: NDB Cluster, Partitioning, online alter table\n*************************** 32. row ***************************\n  Name: Ingo Strüwing\nLocation: Berlin, Germany\n Comment: Bug fixing in MyISAM, Merge tables etc\n*************************** 33. row ***************************\n  Name: Marko Mäkelä\nLocation: Helsinki, Finland\n Comment: InnoDB core developer\n...\n\nSee Also\n','','https://mariadb.com/kb/en/library/show-authors/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (350,26,'SHOW BINARY LOGS','Syntax\n------\nSHOW BINARY LOGS\nSHOW MASTER LOGS\n\nDescription\n-----------\nLists the binary log files on the server. This statement is used as part of the\nprocedure described in PURGE BINARY LOGS, that shows how to\ndetermine which logs can be purged.\n\nThis statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or,\nfrom MariaDB 10.5.2, the BINLOG MONITOR privilege.\n\nExamples\n--------\nSHOW BINARY LOGS;\n+--------------------+-----------+\n| Log_name           | File_size |\n+--------------------+-----------+\n| mariadb-bin.000001 |     19039 |\n| mariadb-bin.000002 |    717389 |\n| mariadb-bin.000003 |       300 |\n| mariadb-bin.000004 |       333 |\n| mariadb-bin.000005 |       899 |\n| mariadb-bin.000006 |       125 |\n| mariadb-bin.000007 |     18907 |\n| mariadb-bin.000008 |     19530 |\n| mariadb-bin.000009 |       151 |\n| mariadb-bin.000010 |       151 |\n| mariadb-bin.000011 |       125 |\n| mariadb-bin.000012 |       151 |\n| mariadb-bin.000013 |       151 |\n| mariadb-bin.000014 |       125 |\n| mariadb-bin.000015 |       151 |\n| mariadb-bin.000016 |       314 |\n+--------------------+-----------+\n','','https://mariadb.com/kb/en/library/show-binary-logs/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (351,26,'SHOW BINLOG EVENTS','Syntax\n------\nSHOW BINLOG EVENTS\n [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\n\nDescription\n-----------\nShows the events in the binary log. If you do not specify 'log_name',\nthe first binary log is displayed.\n\nRequires the BINLOG MONITOR privilege (>= MariaDB 10.5.2) or the REPLICATION SLAVE\nprivilege (<= MariaDB 10.5.1).\n\nExample\n-------\nSHOW BINLOG EVENTS IN 'mysql_sandbox10019-bin.000002';\n+-------------------------------+-----+-------------------+-----------+-------------+\n-----------------------------------------------+\n| Log_name                      | Pos | Event_type        | Server_id | End_log_pos |\nInfo                                           |\n+-------------------------------+-----+-------------------+-----------+-------------+\n-----------------------------------------------+\n| mysql_sandbox10019-bin.000002 |   4 | Format_desc       |         1 |         248 |\nServer ver: 10.0.19-MariaDB-log, Binlog ver: 4 |\n| mysql_sandbox10019-bin.000002 | 248 | Gtid_list         |         1 |         273 |\n[]                                             |\n| mysql_sandbox10019-bin.000002 | 273 | Binlog_checkpoint |         1 |         325 |\nmysql_sandbox10019-bin.000002                  |\n| mysql_sandbox10019-bin.000002 | 325 | Gtid              |         1 |         363 |\nGTID 0-1-1                                     |\n| mysql_sandbox10019-bin.000002 | 363 | Query             |         1 |         446 |\nCREATE DATABASE blog                           |\n| mysql_sandbox10019-bin.000002 | 446 | Gtid              |         1 |         484 |\nGTID 0-1-2                                     |\n| mysql_sandbox10019-bin.000002 | 484 | Query             |         1 |         571 |\nuse `blog`; CREATE TABLE bb (id INT)           |\n+-------------------------------+-----+-------------------+-----------+-------------+\n-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/show-binlog-events/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (352,26,'SHOW CHARACTER SET','Syntax\n------\nSHOW CHARACTER SET\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThe SHOW CHARACTER SET statement shows all available character sets.  The LIKE\nclause, if present on its own, indicates which character\nset names to match. The WHERE and LIKE clauses can be given to select rows using more\ngeneral conditions, as discussed in Extended SHOW.\n\nThe same information can be queried from the Information Schema CHARACTER_SETS table.\n\nSee Setting Character Sets and Collations for details on specifying the character set\nat the server, database, table and column levels.\n\nExamples\n--------\nSHOW CHARACTER SET LIKE 'latin%';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description                 | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |\n| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |\n| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |\n| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |\n+---------+-----------------------------+-------------------+--------+\n\nSHOW CHARACTER SET WHERE Maxlen LIKE '2';\n+---------+---------------------------+-------------------+--------+\n| Charset | Description               | Default collation | Maxlen |\n+---------+---------------------------+-------------------+--------+\n| big5    | Big5 Traditional Chinese  | big5_chinese_ci   |      2 |\n| sjis    | Shift-JIS Japanese        | sjis_japanese_ci  |      2 |\n| euckr   | EUC-KR Korean             | euckr_korean_ci   |      2 |\n| gb2312  | GB2312 Simplified Chinese | gb2312_chinese_ci |      2 |\n| gbk     | GBK Simplified Chinese    | gbk_chinese_ci    |      2 |\n| ucs2    | UCS-2 Unicode             | ucs2_general_ci   |      2 |\n| cp932   | SJIS for Windows Japanese | cp932_japanese_ci |      2 |\n+---------+---------------------------+-------------------+--------+\n','','https://mariadb.com/kb/en/library/show-character-set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (353,26,'SHOW CLIENT_STATISTICS','Syntax\n------\nSHOW CLIENT_STATISTICS\n\nDescription\n-----------\nThe SHOW CLIENT_STATISTICS statement is part of the User Statistics feature. It was\nremoved as a separate statement in MariaDB 10.1.1, but effectively replaced by the\ngeneric SHOW information_schema_table statement. The\ninformation_schema.CLIENT_STATISTICS table holds statistics about client connections.\n\nThe userstat system variable must be set to 1 to activate this feature. See the User\nStatistics and information_schema.CLIENT_STATISTICS articles for more information.\n\nExample\n-------\nSHOW CLIENT_STATISTICS\G\n*************************** 1. row ***************************\n        Client: localhost\n  Total_connections: 35\nConcurrent_connections: 0\n    Connected_time: 708\n      Busy_time: 2.5557979999999985\n       Cpu_time: 0.04123740000000002\n    Bytes_received: 3883\n      Bytes_sent: 21595\n Binlog_bytes_written: 0\n      Rows_read: 18\n      Rows_sent: 115\n     Rows_deleted: 0\n    Rows_inserted: 0\n     Rows_updated: 0\n   Select_commands: 70\n   Update_commands: 0\n    Other_commands: 0\n Commit_transactions: 1\n Rollback_transactions: 0\n  Denied_connections: 0\n   Lost_connections: 0\n    Access_denied: 0\n    Empty_queries: 35\n','','https://mariadb.com/kb/en/library/show-client-statistics/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (354,26,'SHOW COLLATION','Syntax\n------\nSHOW COLLATION\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThe output from SHOW COLLATION includes all available\ncollations. The LIKE clause, if present on its own, indicates which collation names\nto match. The WHERE and LIKE clauses can be given to select rows using more general\nconditions, as discussed in Extended SHOW.\n\nThe same information can be queried from the Information Schema COLLATIONS table.\n\nSee Setting Character Sets and Collations for details on specifying the collation at\nthe server, database, table and column levels.\n\nExamples\n--------\nSHOW COLLATION LIKE 'latin1%';\n+-------------------+---------+----+---------+----------+---------+\n| Collation         | Charset | Id | Default | Compiled | Sortlen |\n+-------------------+---------+----+---------+----------+---------+\n| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |\n| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |\n| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |\n| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |\n| latin1_bin        | latin1  | 47 |         | Yes      |       1 |\n| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |\n| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |\n| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |\n+-------------------+---------+----+---------+----------+---------+\n\nSHOW COLLATION WHERE Sortlen LIKE '8' AND Charset LIKE 'utf8';\n+--------------------+---------+-----+---------+----------+---------+\n| Collation          | Charset | Id  | Default | Compiled | Sortlen |\n+--------------------+---------+-----+---------+----------+---------+\n| utf8_unicode_ci    | utf8    | 192 |         | Yes      |       8 |\n| utf8_icelandic_ci  | utf8    | 193 |         | Yes      |       8 |\n| utf8_latvian_ci    | utf8    | 194 |         | Yes      |       8 |\n| utf8_romanian_ci   | utf8    | 195 |         | Yes      |       8 |\n| utf8_slovenian_ci  | utf8    | 196 |         | Yes      |       8 |\n| utf8_polish_ci     | utf8    | 197 |         | Yes      |       8 |\n| utf8_estonian_ci   | utf8    | 198 |         | Yes      |       8 |\n| utf8_spanish_ci    | utf8    | 199 |         | Yes      |       8 |\n| utf8_swedish_ci    | utf8    | 200 |         | Yes      |       8 |\n| utf8_turkish_ci    | utf8    | 201 |         | Yes      |       8 |\n| utf8_czech_ci      | utf8    | 202 |         | Yes      |       8 |\n| utf8_danish_ci     | utf8    | 203 |         | Yes      |       8 |\n| utf8_lithuanian_ci | utf8    | 204 |         | Yes      |       8 |\n| utf8_slovak_ci     | utf8    | 205 |         | Yes      |       8 |\n| utf8_spanish2_ci   | utf8    | 206 |         | Yes      |       8 |\n| utf8_roman_ci      | utf8    | 207 |         | Yes      |       8 |\n| utf8_persian_ci    | utf8    | 208 |         | Yes      |       8 |\n| utf8_esperanto_ci  | utf8    | 209 |         | Yes      |       8 |\n| utf8_hungarian_ci  | utf8    | 210 |         | Yes      |       8 |\n| utf8_sinhala_ci    | utf8    | 211 |         | Yes      |       8 |\n| utf8_croatian_ci   | utf8    | 213 |         | Yes      |       8 |\n+--------------------+---------+-----+---------+----------+---------+\n','','https://mariadb.com/kb/en/library/show-collation/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (355,26,'SHOW COLUMNS','Syntax\n------\nSHOW [FULL] {COLUMNS | FIELDS} FROM tbl_name [FROM db_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nSHOW COLUMNS displays information about the columns in a\ngiven table. It also works for views. The LIKE clause, if\npresent on its own, indicates which column names to match. The WHERE and LIKE clauses\ncan be given to select rows using more general conditions, as discussed in\nExtended SHOW.\n\nIf the data types differ from what you expect them to be based on a\nCREATE TABLE statement, note that MariaDB sometimes changes\ndata types when you create or alter a table. The conditions under which this\noccurs are described in the Silent Column Changes article.\n\nThe FULL keyword causes the output to include the column\ncollation and comments, as well as the privileges you have for each column.\n\nYou can use db_name.tbl_name as an alternative to the\ntbl_name FROM db_name syntax. In other words, these two\nstatements are equivalent:\nSHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n\nSHOW COLUMNS displays the following values for each table\ncolumn:\nField indicates the column name.\n\nType indicates the column data type.\n\nCollation indicates the collation for non-binary string columns, or\nNULL for other columns. This value is displayed only if you use the\nFULL keyword.\n\nThe Null field contains YES if NULL values can be stored in the column,\nNO if not.\n\nThe Key field indicates whether the column is indexed:\n\nIf more than one of the Key values applies to a given column of a\ntable, Key displays the one with the highest priority, in the order\nPRI, UNI, MUL.\n\nA UNIQUE index may be displayed as PRI if\nit cannot contain NULL values and there is no\nPRIMARY KEY in the table. A UNIQUE index\nmay display as MUL if several columns form a composite\nUNIQUE index; although the combination of the columns is\nunique, each column can still hold multiple occurrences of a given value.\n\nThe Default field indicates the default value that is assigned to the\ncolumn.\n\nThe Extra field contains any additional information that is available about a\ngiven column.\n\n+------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------+\n|Value                                                                              \n|Description                                                                       \n |\n|AUTO_INCREMENT                                                                     \n|The column was created with the AUTO_INCREMENT keyword.\n\n|\n|PERSISTENT                                                                         \n|The column was created with the PERSISTENT keyword. (New in 5.3)                  \n |\n|VIRTUAL                                                                            \n|The column was created with the VIRTUAL keyword. (New in 5.3)                     \n |\n|on update CURRENT_TIMESTAMP                                                        \n|The column is a TIMESTAMP column that is automatically updated on INSERT\nand UPDATE.|\n+------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------+\nPrivileges indicates the privileges you have for the column. This\nvalue is displayed only if you use the FULL keyword.\n\nComment indicates any comment the column has. This value is displayed\nonly if you use the FULL keyword.\n\nSHOW FIELDS is a synonym for\nSHOW COLUMNS. Also DESCRIBE and EXPLAIN can be used as shortcuts.\n\nYou can also list a table's columns with: \nmysqlshow db_name tbl_name\n\nSee the mysqlshow command for more details.\n\nThe DESCRIBE statement provides information similar to SHOW COLUMNS. The\ninformation_schema.COLUMNS table provides similar, but more complete, information.\n\nThe SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements also provide\ninformation about tables.\n\nExamples\n--------\nSHOW COLUMNS FROM city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | NO   |     |         |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | NO   |     | 0       |                |\n+------------+----------+------+-----+---------+----------------+\n\nSHOW COLUMNS FROM employees WHERE Type LIKE 'Varchar%';\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| first_name    | varchar(30) | NO   | MUL | NULL    |       |\n| last_name     | varchar(40) | NO   |     | NULL    |       |\n| position      | varchar(25) | NO   |     | NULL    |       |\n| home_address  | varchar(50) | NO   |     | NULL    |       |\n| home_phone    | varchar(12) | NO   |     | NULL    |       |\n| employee_code | varchar(25) | NO   | UNI | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n','','https://mariadb.com/kb/en/library/show-columns/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (356,26,'SHOW CONTRIBUTORS','Syntax\n------\nSHOW CONTRIBUTORS\n\nDescription\n-----------\nThe SHOW CONTRIBUTORS statement displays information about\nthe companies and people who financially contribute to MariaDB. For each contributor,\nit displays Name, Location, and Comment values. All columns are encoded as latin1.\n\nIt displays all members and sponsors of the MariaDB Foundation as well as other\nfinancial contributors.\n\nExample\n-------\nSHOW CONTRIBUTORS;\n+---------------------+-------------------------------+------------------------------\n------------------------------+\n| Name                | Location                      | Comment                      \n               |\n+---------------------+-------------------------------+------------------------------\n------------------------------+\n| Booking.com         | https://www.booking.com       | Founding member, Platinum\nSponsor of the MariaDB Foundation |\n| Alibaba Cloud       | https://www.alibabacloud.com/ | Platinum Sponsor of the\nMariaDB Foundation                  |\n| Tencent Cloud       | https://cloud.tencent.com     | Platinum Sponsor of the\nMariaDB Foundation                  |\n| Microsoft           | https://microsoft.com/        | Platinum Sponsor of the\nMariaDB Foundation                  |\n| MariaDB Corporation | https://mariadb.com           | Founding member, Platinum\nSponsor of the MariaDB Foundation |\n| Visma               | https://visma.com             | Gold Sponsor of the MariaDB\nFoundation                      |\n| DBS                 | https://dbs.com               | Gold Sponsor of the MariaDB\nFoundation                      |\n| IBM                 | https://www.ibm.com           | Gold Sponsor of the MariaDB\nFoundation                      |\n| Tencent Games       | http://game.qq.com/           | Gold Sponsor of the MariaDB\nFoundation                      |\n| Nexedi              | https://www.nexedi.com        | Silver Sponsor of the MariaDB\nFoundation                    |\n| Acronis             | https://www.acronis.com       | Silver Sponsor of the MariaDB\nFoundation                    |\n| Verkkokauppa.com    | https://www.verkkokauppa.com  | Bronze Sponsor of the MariaDB\nFoundation                    |\n| Virtuozzo           | https://virtuozzo.com         | Bronze Sponsor of the MariaDB\nFoundation                    |\n| Tencent Game DBA    | http://tencentdba.com/about   | Bronze Sponsor of the MariaDB\nFoundation                    |\n| Tencent TDSQL       | http://tdsql.org              | Bronze Sponsor of the MariaDB\nFoundation                    |\n| Percona             | https://www.percona.com/      | Bronze Sponsor of the MariaDB\nFoundation                    |\n| Google              | USA                           | Sponsoring encryption,\nparallel replication and GTID        |\n| Facebook            | USA                           | Sponsoring non-blocking API,\nLIMIT ROWS EXAMINED etc        |\n| Ronald Bradford     | Brisbane, Australia           | EFF contribution for UC2006\nAuction                         |\n| Sheeri Kritzer      | Boston, Mass. USA             | EFF contribution for UC2006\nAuction                         |\n| Mark Shuttleworth   | London, UK.                   | EFF contribution for UC2006\nAuction                         |\n+---------------------+-------------------------------+------------------------------\n------------------------------+\n','','https://mariadb.com/kb/en/library/show-contributors/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (357,26,'SHOW CREATE DATABASE','Syntax\n------\nSHOW CREATE {DATABASE | SCHEMA} db_name\n\nDescription\n-----------\nShows the CREATE DATABASE statement that\ncreates the given database. SHOW CREATE SCHEMA is a synonym\nfor SHOW CREATE DATABASE. SHOW CREATE DATABASE quotes database names according to the\nvalue of the sql_quote_show_create server system variable.\n\nExamples\n--------\nSHOW CREATE DATABASE test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+-----------------------------------------------------------------+\n\nSHOW CREATE SCHEMA test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+-----------------------------------------------------------------+\n\nWith sql_quote_show_create off:\nSHOW CREATE DATABASE test;\n+----------+---------------------------------------------------------------+\n| Database | Create Database                                               |\n+----------+---------------------------------------------------------------+\n| test     | CREATE DATABASE test /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+---------------------------------------------------------------+\n\nWith a comment, from MariaDB 10.5:\nSHOW CREATE DATABASE p;\n+----------+-------------------------------------------------------------------------\n------------+\n| Database | Create Database                                                         \n      |\n+----------+-------------------------------------------------------------------------\n------------+\n| p        | CREATE DATABASE `p` /*!40100 DEFAULT CHARACTER SET latin1 */ COMMENT\n'presentations' |\n+----------+-------------------------------------------------------------------------\n------------+\n','','https://mariadb.com/kb/en/library/show-create-database/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (358,26,'SHOW CREATE EVENT','Syntax\n------\nSHOW CREATE EVENT event_name\n\nDescription\n-----------\nThis statement displays the CREATE EVENT\nstatement needed to re-create a given event, as well as the SQL_MODE that was used\nwhen the trigger has been created and the character set used by the connection. To\nfind out which events are present, use SHOW EVENTS.\n\nThe output of this statement is unreliably affected by the sql_quote_show_create\nserver system variable - see http://bugs.mysql.com/bug.php?id=12719\nThe information_schema.EVENTS table provides similar, but more complete, information.\n\nExamples\n--------\nSHOW CREATE EVENT test.e_daily\G\n*************************** 1. row ***************************\n       Event: e_daily\n      sql_mode:\n     time_zone: SYSTEM\n    Create Event: CREATE EVENT `e_daily`\n            ON SCHEDULE EVERY 1 DAY\n            STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n            ON COMPLETION NOT PRESERVE\n            ENABLE\n            COMMENT 'Saves total number of sessions then\n                clears the table each day'\n            DO BEGIN\n             INSERT INTO site_activity.totals (time, total)\n              SELECT CURRENT_TIMESTAMP, COUNT(*)\n              FROM site_activity.sessions;\n             DELETE FROM site_activity.sessions;\n            END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-create-event/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (359,26,'SHOW CREATE FUNCTION','Syntax\n------\nSHOW CREATE FUNCTION func_name\n\nDescription\n-----------\nThis statement is similar to SHOW CREATE PROCEDURE but for\nstored functions.\n\nThe output of this statement is unreliably affected by the sql_quote_show_create\nserver system variable - see http://bugs.mysql.com/bug.php?id=12719\n\nExample\n-------\nSHOW CREATE FUNCTION VatCents\G\n*************************** 1. row ***************************\n      Function: VatCents\n      sql_mode:\n  Create Function: CREATE DEFINER=`root`@`localhost` FUNCTION `VatCents`(price\nDECIMAL(10,2)) RETURNS int(11)\n  DETERMINISTIC\nBEGIN\n DECLARE x INT;\n SET x = price * 114;\n RETURN x;\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-create-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (360,26,'SHOW CREATE PACKAGE','Syntax\n------\nSHOW CREATE PACKAGE  [ db_name . ] package_name\n\nDescription\n-----------\nThe SHOW CREATE PACKAGE statement can be used when Oracle SQL_MODE is set.\n\nShows the CREATE statement that creates the given package specification.\n\nExamples\n--------\nSHOW CREATE PACKAGE employee_tools\G\n*************************** 1. row ***************************\n      Package: employee_tools\n\nPIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FI\nLD_OPTIONS,NO_AUTO_CREATE_USER\n   Create Package: CREATE DEFINER="root"@"localhost" PACKAGE "employee_tools" AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-create-package/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (361,26,'SHOW CREATE PACKAGE BODY','Syntax\n------\nSHOW CREATE PACKAGE BODY  [ db_name . ] package_name\n\nDescription\n-----------\nThe SHOW CREATE PACKAGE BODY statement can be used when Oracle SQL_MODE is set.\n\nShows the CREATE statement that creates the given package body (i.e.\n\nthe implementation).\n\nExamples\n--------\nSHOW CREATE PACKAGE BODY employee_tools\G\n*************************** 1. row ***************************\n    Package body: employee_tools\n\nPIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FI\nLD_OPTIONS,NO_AUTO_CREATE_USER\n Create Package Body: CREATE DEFINER="root"@"localhost" PACKAGE BODY\n"employee_tools" AS\n\nstdRaiseAmount DECIMAL(10,2):=500;\n\nPROCEDURE log (eid INT, ecmnt TEXT) AS\n BEGIN\n  INSERT INTO employee_log (id, cmnt) VALUES (eid, ecmnt);\n END;\n\nPROCEDURE hire(ename TEXT, esalary DECIMAL(10,2)) AS\n  eid INT;\n BEGIN\n  INSERT INTO employee (name, salary) VALUES (ename, esalary);\n  eid:= last_insert_id();\n  log(eid, 'hire ' || ename);\n END;\n\nFUNCTION getSalary(eid INT) RETURN DECIMAL(10,2) AS\n  nSalary DECIMAL(10,2);\n BEGIN\n  SELECT salary INTO nSalary FROM employee WHERE id=eid;\n  log(eid, 'getSalary id=' || eid || ' salary=' || nSalary);\n  RETURN nSalary;\n END;\n\nPROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2)) AS\n BEGIN\n  UPDATE employee SET salary=salary+amount WHERE id=eid;\n  log(eid, 'raiseSalary id=' || eid || ' amount=' || amount);\n END;\n\nPROCEDURE raiseSalaryStd(eid INT) AS\n BEGIN\n  raiseSalary(eid, stdRaiseAmount);\n  log(eid, 'raiseSalaryStd id=' || eid);\n END;\n\nBEGIN  \n log(0, 'Session ' || connection_id() || ' ' || current_user || ' started');\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-create-package-body/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (362,26,'SHOW CREATE PROCEDURE','Syntax\n------\nSHOW CREATE PROCEDURE proc_name\n\nDescription\n-----------\nThis statement is a MariaDB extension. It returns the exact string that\ncan be used to re-create the named stored procedure, as well as the SQL_MODE that was\nused when the trigger has been created and the character set used by the connection..\nA similar\nstatement, SHOW CREATE FUNCTION,\ndisplays information about stored functions.\n\nBoth statements require that you are the owner of the routine or have the SELECT\nprivilege on the mysql.proc table.  When neither is true, the statements display NULL\nfor the Create Procedure or Create Function field.\n\nWarning Users with SELECT privileges on mysql.proc or USAGE privileges on *.* can\nview the text of routines, even when they do not have privileges for the function or\nprocedure itself.\n\nThe output of these statements is unreliably affected by the sql_quote_show_create\nserver system variable - see http://bugs.mysql.com/bug.php?id=12719\n\nExamples\n--------\nHere's a comparison of the SHOW CREATE PROCEDURE and SHOW CREATE FUNCTION statements.\n\nSHOW CREATE PROCEDURE test.simpleproc\G\n*************************** 1. row ***************************\n     Procedure: simpleproc\n      sql_mode:\n  Create Procedure: CREATE PROCEDURE `simpleproc`(OUT param1 INT)\n           BEGIN\n           SELECT COUNT(*) INTO param1 FROM t;\n           END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n\nSHOW CREATE FUNCTION test.hello\G\n*************************** 1. row ***************************\n      Function: hello\n      sql_mode:\n  Create Function: CREATE FUNCTION `hello`(s CHAR(20))\n           RETURNS CHAR(50)\n           RETURN CONCAT('Hello, ',s,'!')\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n\nWhen the user issuing the statement does not have privileges on the routine,\nattempting to CALL the procedure raises Error 1370.\n\nCALL test.prc1();\nError 1370 (42000): execute command denieed to user 'test_user'@'localhost' for\nroutine 'test'.'prc1'\n\nIf the user neither has privilege to the routine nor the SELECT privilege on\nmysql.proc table, it raises Error 1305, informing them that the procedure does\nnot exist.\n\nSHOW CREATE TABLES test.prc1\G\nError 1305 (42000): PROCEDURE prc1 does not exist\n','','https://mariadb.com/kb/en/library/show-create-procedure/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (363,26,'SHOW CREATE SEQUENCE','Syntax\n------\nSHOW CREATE SEQUENCE sequence_name;\n\nDescription\n-----------\nShows the CREATE SEQUENCE statement that created the given sequence. The statement\nrequires the SELECT privilege for the table.\n\nExample\n-------\nCREATE SEQUENCE s1 START WITH 50;\nSHOW CREATE SEQUENCE s1\G;\n*************************** 1. row ***************************\n   Table: s1\nCreate Table: CREATE SEQUENCE `s1` start with 50 minvalue 1 maxvalue\n9223372036854775806 \n increment by 1 cache 1000 nocycle ENGINE=InnoDB\n\nNotes\n-----\nIf you want to see the underlying table structure used for the SEQUENCE\nyou can use SHOW CREATE TABLE on the SEQUENCE. You can also use SELECT to read the\ncurrent recorded state of the SEQUENCE:\nSHOW CREATE TABLE s1\G\n*************************** 1. row ***************************\n   Table: s1\nCreate Table: CREATE TABLE `s1` (\n `next_not_cached_value` bigint(21) NOT NULL,\n `minimum_value` bigint(21) NOT NULL,\n `maximum_value` bigint(21) NOT NULL,\n `start_value` bigint(21) NOT NULL COMMENT 'start value when sequences is created\n  or value if RESTART is used',\n `increment` bigint(21) NOT NULL COMMENT 'increment value',\n `cache_size` bigint(21) unsigned NOT NULL,\n `cycle_option` tinyint(1) unsigned NOT NULL COMMENT '0 if no cycles are allowed,\n  1 if the sequence should begin a new cycle when maximum_value is passed',\n `cycle_count` bigint(21) NOT NULL COMMENT 'How many cycles have been done'\n) ENGINE=InnoDB SEQUENCE=1\n\nSELECT * FROM s1\G\n*************************** 1. row ***************************\nnext_not_cached_value: 50\n    minimum_value: 1\n    maximum_value: 9223372036854775806\n     start_value: 50\n      increment: 1\n     cache_size: 1000\n    cycle_option: 0\n     cycle_count: 0\n','','https://mariadb.com/kb/en/library/show-create-sequence/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (364,26,'SHOW CREATE TABLE','Syntax\n------\nSHOW CREATE TABLE tbl_name\n\nDescription\n-----------\nShows the CREATE TABLE statement that created the given\ntable. The statement requires the SELECT privilege for the table. This statement also\nworks with views and SEQUENCE.\n\nSHOW CREATE TABLE quotes table and\ncolumn names according to the value of the sql_quote_show_create server\nsystem variable.\n\nCertain SQL_MODE values can result in parts of the original CREATE statement not\nbeing included in the output. MariaDB-specific table options, column options, and\nindex options are not included in the output of this statement if the\nNO_TABLE_OPTIONS, NO_FIELD_OPTIONS and NO_KEY_OPTIONS SQL_MODE flags are used. All\nMariaDB-specific table attributes are also not shown when a non-MariaDB/MySQL\nemulation mode is used, which includes ANSI, DB2, POSTGRESQL, MSSQL, MAXDB or ORACLE.\n\nInvalid table options, column options and index options are normally commented out\n(note, that it is possible to create a table with invalid options, by altering a\ntable of a different engine, where these options were valid). To have them\nuncommented, enable the IGNORE_BAD_TABLE_OPTIONS SQL_MODE. Remember that replaying a\nCREATE TABLE statement with uncommented invalid options will fail with an error,\nunless the IGNORE_BAD_TABLE_OPTIONS SQL_MODE is in effect.\n\nNote that SHOW CREATE TABLE is not meant to provide metadata about a table. It\nprovides information about how the table was declared, but the real table structure\ncould differ a bit. For example, if an index has been declared as HASH, the CREATE\nTABLE statement returned by SHOW CREATE TABLE will declare that index as HASH;\nhowever, it is possible that the index is in fact a BTREE, because the storage engine\ndoes not support HASH.\n\nExamples\n--------\nSHOW CREATE TABLE t\G\n*************************** 1. row ***************************\n   Table: t\nCreate Table: CREATE TABLE `t` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `s` char(60) DEFAULT NULL,\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nWith sql_quote_show_create off:\nSHOW CREATE TABLE t\G\n*************************** 1. row ***************************\n   Table: t\nCreate Table: CREATE TABLE t (\n id int(11) NOT NULL AUTO_INCREMENT,\n s char(60) DEFAULT NULL,\n PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nUnquoted numeric DEFAULTs, from MariaDB 10.2.2:\nCREATE TABLE td (link TINYINT DEFAULT 1);\n\nSHOW CREATE TABLE td\G\n*************************** 1. row ***************************\n   Table: td\nCreate Table: CREATE TABLE `td` (\n `link` tinyint(4) DEFAULT 1\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nQuoted numeric DEFAULTs, until MariaDB 10.2.1:\nCREATE TABLE td (link TINYINT DEFAULT 1);\n\nSHOW CREATE TABLE td\G\n*************************** 1. row ***************************\n   Table: td\nCreate Table: CREATE TABLE `td` (\n `link` tinyint(4) DEFAULT '1'\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nSQL_MODE impacting the output:\nSELECT @@sql_mode;\n+------------------------------------------------------------------------------------\n------+\n| @@sql_mode                                                                         \n   |\n+------------------------------------------------------------------------------------\n------+\n|\n\n_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+------------------------------------------------------------------------------------\n------+\n\nCREATE TABLE `t1` (\n   `id` int(11) NOT NULL AUTO_INCREMENT,\n   `msg` varchar(100) DEFAULT NULL,\n   PRIMARY KEY (`id`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=latin1\n;\n\nSHOW CREATE TABLE t1\G\n*************************** 1. row ***************************\n   Table: t1\nCreate Table: CREATE TABLE `t1` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `msg` varchar(100) DEFAULT NULL,\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nSET SQL_MODE=ORACLE;\n\nSHOW CREATE TABLE t1\G\n*************************** 1. row ***************************\n   Table: t1\nCreate Table: CREATE TABLE "t1" (\n "id" int(11) NOT NULL,\n "msg" varchar(100) DEFAULT NULL,\n PRIMARY KEY ("id")\n','','https://mariadb.com/kb/en/library/show-create-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (365,26,'SHOW CREATE TRIGGER','Syntax\n------\nSHOW CREATE TRIGGER trigger_name\n\nDescription\n-----------\nThis statement shows a CREATE TRIGGER\nstatement that creates the given trigger, as well as the SQL_MODE that was used when\nthe trigger has been created and the character set used by the connection.\n\nThe output of this statement is unreliably affected by the sql_quote_show_create\nserver system variable - see http://bugs.mysql.com/bug.php?id=12719\n\nExamples\n--------\nSHOW CREATE TRIGGER example\G\n*************************** 1. row ***************************\n       Trigger: example\n       sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,STRICT_ALL_TABLES\n,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_\nENGINE_SUBSTITUTION\nSQL Original Statement: CREATE DEFINER=`root`@`localhost` TRIGGER example BEFORE\n INSERT ON t FOR EACH ROW\nBEGIN\n    SET NEW.c = NEW.c * 2;\nEND\n character_set_client: cp850\n collation_connection: cp850_general_ci\n Database Collation: utf8_general_ci\n Created: 2016-09-29 13:53:34.35\n','','https://mariadb.com/kb/en/library/show-create-trigger/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (366,26,'SHOW CREATE USER','Syntax\n------\nSHOW CREATE USER user_name\n\nDescription\n-----------\nShows the CREATE USER statement that created the given\nuser. The statement requires the SELECT privilege for the mysql database, except for\nthe current user.\n\nExamples\n--------\nCREATE USER foo4@test require cipher 'text' \n issuer 'foo_issuer' subject 'foo_subject';\n\nSHOW CREATE USER foo4@test\G\n*************************** 1. row ***************************\nCREATE USER 'foo4'@'test' \n REQUIRE ISSUER 'foo_issuer'\n SUBJECT 'foo_subject'\n CIPHER 'text'\n\nUser Password Expiry:\nCREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY;\n\nSHOW CREATE USER 'monty'@'localhost';\n+------------------------------------------------------------------+\n| CREATE USER for monty@localhost                                  |\n+------------------------------------------------------------------+\n| CREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY |\n+------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/show-create-user/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (367,26,'SHOW CREATE VIEW','Syntax\n------\nSHOW CREATE VIEW view_name\n\nDescription\n-----------\nThis statement shows a CREATE VIEW statement that creates the given view, as well as\nthe character set used by the connection when the view was created. This statement\nalso works with views.\n\nSHOW CREATE VIEW quotes table, column and stored function names according to the\nvalue of the sql_quote_show_create server system variable.\n\nExamples\n--------\nSHOW CREATE VIEW example\G\n*************************** 1. row ***************************\n        View: example\n    Create View: CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL\nSECURITY DEFINER VIEW `example` AS (select `t`.`id` AS `id`,`t`.`s` AS `s` from\n`t`)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n\nWith sql_quote_show_create off:\nSHOW CREATE VIEW example\G\n*************************** 1. row ***************************\n        View: example\n    Create View: CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECU\nRITY DEFINER VIEW example AS (select t.id AS id,t.s AS s from t)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n\nGrants\n------\nTo be able to see a view, you need to have the SHOW VIEW and the SELECT privilege on\nthe view:\nGRANT SHOW VIEW,SELECT ON test_database.test_view TO 'test'@'localhost';\n','','https://mariadb.com/kb/en/library/show-create-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (368,26,'SHOW DATABASES','Syntax\n------\nSHOW {DATABASES | SCHEMAS}\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nSHOW DATABASES lists the databases on the MariaDB server host.\n\nSHOW SCHEMAS is a synonym for \nSHOW DATABASES. The LIKE clause, if\npresent on its own, indicates which database names to match. The WHERE and LIKE\nclauses can be given to select rows using more general conditions, as discussed in\nExtended SHOW.\n\nYou see only those databases for which you have some kind of\nprivilege, unless you have the global \nSHOW DATABASES privilege. You\ncan also get this list using the mysqlshow command.\n\nIf the server was started with the --skip-show-database\noption, you cannot use this statement at all unless you have the\nSHOW DATABASES privilege.\n\nThe list of results returned by SHOW DATABASES is based on directories in the data\ndirectory, which is how MariaDB implements databases. It's possible that output\nincludes directories that do not correspond to actual databases.\n\nThe Information Schema SCHEMATA table also contains database information.\n\nExamples\n--------\nSHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n\nSHOW DATABASES LIKE 'm%';\n+---------------+\n| Database (m%) |\n+---------------+\n| mysql         |\n+---------------+\n','','https://mariadb.com/kb/en/library/show-databases/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (369,26,'SHOW ENGINE','Syntax\n------\nSHOW ENGINE engine_name {STATUS | MUTEX}\n\nDescription\n-----------\nSHOW ENGINE displays operational information about a storage\nengine.  The following statements currently are supported:\nSHOW ENGINE INNODB STATUS\nSHOW ENGINE INNODB MUTEX\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\nSHOW ENGINE ROCKSDB STATUS\n\nIf the Sphinx Storage Engine is installed, the following is also supported:\nSHOW ENGINE SPHINX STATUS\n\nSee SHOW ENGINE SPHINX STATUS.\n\nOlder (and now removed) synonyms were SHOW INNODB STATUS\nfor SHOW ENGINE INNODB STATUS and \nSHOW MUTEX STATUS for \nSHOW ENGINE INNODB MUTEX.\n\nSHOW ENGINE INNODB STATUS\n\nSHOW ENGINE INNODB STATUS displays extensive information\nfrom the standard InnoDB Monitor about the state of the InnoDB storage engine.\n\nSee SHOW ENGINE INNODB STATUS for more.\n\nSHOW ENGINE INNODB MUTEX\n\nSHOW ENGINE INNODB MUTEX displays InnoDB mutex statistics.\n\nThe statement displays the following output fields:\n\nInformation from this statement can be used to diagnose system problems. For\nexample, large values of spin_waits and spin_rounds may indicate scalability\nproblems.\n\nThe information_schema.INNODB_MUTEXES table provides similar information.\n\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\n\nThis statement shows how much memory is used for performance_schema tables and\ninternal buffers.\n\nThe output contains the following fields:\n\nThe following attributes are shown, in this order, for all tables:\n\nFor internal buffers, the attributes are:\n\nSHOW ENGINE ROCKSDB STATUS\n\nSee also MyRocks Performance Troubleshooting\n','','https://mariadb.com/kb/en/library/show-engine/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (370,26,'SHOW ENGINE INNODB STATUS','SHOW ENGINE INNODB STATUS is a specific form of the SHOW ENGINE statement\nthat displays the InnoDB Monitor output, which is extensive InnoDB information which\ncan be useful in diagnosing problems.\n\nThe following sections are displayed\n\nIf the innodb_status_output_locks system variable is set to 1, extended lock\ninformation will be displayed.\n\nExample output:\n=====================================\n2019-09-06 12:44:13 0x7f93cc236700 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 4 seconds\n-----------------\nBACKGROUND THREAD\n-----------------\nsrv_master_thread loops: 2 srv_active, 0 srv_shutdown, 83698 srv_idle\nsrv_master_thread log flush and writes: 83682\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 15\nOS WAIT ARRAY INFO: signal count 8\nRW-shared spins 0, rounds 20, OS waits 7\nRW-excl spins 0, rounds 0, OS waits 0\nRW-sx spins 0, rounds 0, OS waits 0\nSpin rounds per wait: 20.00 RW-shared, 0.00 RW-excl, 0.00 RW-sx\n------------\nTRANSACTIONS\n------------\nTrx id counter 236\nPurge done for trx's n:o < 236 undo n:o < 0 state: running\nHistory list length 22\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 421747401994584, not started\n0 lock struct(s), heap size 1136, 0 row lock(s)\n---TRANSACTION 421747401990328, not started\n0 lock struct(s), heap size 1136, 0 row lock(s)\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for completed aio requests (insert buffer thread)\nI/O thread 1 state: waiting for completed aio requests (log thread)\nI/O thread 2 state: waiting for completed aio requests (read thread)\nI/O thread 3 state: waiting for completed aio requests (read thread)\nI/O thread 4 state: waiting for completed aio requests (read thread)\nI/O thread 5 state: waiting for completed aio requests (read thread)\nI/O thread 6 state: waiting for completed aio requests (write thread)\nI/O thread 7 state: waiting for completed aio requests (write thread)\nI/O thread 8 state: waiting for completed aio requests (write thread)\nI/O thread 9 state: waiting for completed aio requests (write thread)\nPending normal aio reads: [0, 0, 0, 0] , aio writes: [0, 0, 0, 0] ,\n ibuf aio reads:, log i/o's:, sync i/o's:\nPending flushes (fsync) log: 0; buffer pool: 0\n286 OS file reads, 171 OS file writes, 22 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2, 0 merges\nmerged operations:\n insert 0, delete mark 0, delete 0\ndiscarded operations:\n insert 0, delete mark 0, delete 0\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\nHash table size 34679, node heap has 0 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 445926\nLog flushed up to   445926\nPages flushed up to 445926\nLast checkpoint at  445917\n0 pending log flushes, 0 pending chkp writes\n18 log i/o's done, 0.00 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal large memory allocated 167772160\nDictionary memory allocated 50768\nBuffer pool size   8012\nFree buffers       7611\nDatabase pages     401\nOld database pages 0\nModified db pages  0\nPercent of dirty pages(LRU & free pages): 0.000\nMax dirty pages percent: 75.000\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages made young 0, not young 0\n0.00 youngs/s, 0.00 non-youngs/s\nPages read 264, created 137, written 156\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nNo buffer pool page gets since the last printout\nPages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s\nLRU len: 401, unzip_LRU len: 0\nI/O sum[0]:cur[0], unzip sum[0]:cur[0]\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n0 read views open inside InnoDB\nProcess ID=4267, Main thread ID=140272021272320, state: sleeping\nNumber of rows inserted 1, updated 0, deleted 0, read 1\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\nNumber of system rows inserted 0, updated 0, deleted 0, read 0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n','','https://mariadb.com/kb/en/library/show-engine-innodb-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (371,26,'SHOW ENGINES','Syntax\n------\nSHOW [STORAGE] ENGINES\n\nDescription\n-----------\nSHOW ENGINES displays status information about the server's\nstorage engines. This is particularly useful for checking whether a storage\nengine is supported, or to see what the default engine is.\n\nSHOW TABLE TYPES is a deprecated synonym.\n\nThe information_schema.ENGINES table provides the same information.\n\nSince storage engines are plugins, different information about them is also shown in\nthe information_schema.PLUGINS table and by the SHOW PLUGINS statement.\n\nNote that both MySQL's InnoDB and Percona's XtraDB replacement are labeled as InnoDB.\n\nHowever, if XtraDB is in use, it will be specified in the COMMENT field. See XtraDB\nand InnoDB. The same applies to FederatedX.\n\nThe output consists of the following columns:\n\nExamples\n--------\nSHOW ENGINES\G\n*************************** 1. row ***************************\n   Engine: InnoDB\n  Support: DEFAULT\n  Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n     XA: YES\n Savepoints: YES\n*************************** 2. row ***************************\n   Engine: CSV\n  Support: YES\n  Comment: CSV storage engine\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 3. row ***************************\n   Engine: MyISAM\n  Support: YES\n  Comment: MyISAM storage engine\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 4. row ***************************\n   Engine: BLACKHOLE\n  Support: YES\n  Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 5. row ***************************\n   Engine: FEDERATED\n  Support: YES\n  Comment: FederatedX pluggable storage engine\nTransactions: YES\n     XA: NO\n Savepoints: YES\n*************************** 6. row ***************************\n   Engine: MRG_MyISAM\n  Support: YES\n  Comment: Collection of identical MyISAM tables\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 7. row ***************************\n   Engine: ARCHIVE\n  Support: YES\n  Comment: Archive storage engine\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 8. row ***************************\n   Engine: MEMORY\n  Support: YES\n  Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 9. row ***************************\n   Engine: PERFORMANCE_SCHEMA\n  Support: YES\n  Comment: Performance Schema\nTransactions: NO\n     XA: NO\n Savepoints: NO\n*************************** 10. row ***************************\n   Engine: Aria\n  Support: YES\n  Comment: Crash-safe tables with MyISAM heritage\nTransactions: NO\n     XA: NO\n Savepoints: NO\n10 rows in set (0.00 sec)\n','','https://mariadb.com/kb/en/library/show-engines/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (372,26,'SHOW ERRORS','Syntax\n------\nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) ERRORS\n\nDescription\n-----------\nThis statement is similar to SHOW WARNINGS, except that instead of\ndisplaying errors, warnings, and notes, it displays only errors.\n\nThe LIMIT clause has the same syntax as for the\nSELECT statement.\n\nThe SHOW COUNT(*) ERRORS statement displays the number of\nerrors. You can also retrieve this number from the error_count variable.\n\nSHOW COUNT(*) ERRORS;\nSELECT @@error_count;\n\nThe value of error_count might be greater than the number of messages displayed by\nSHOW WARNINGS if the max_error_count system variable is set so low that not all\nmessages are stored.\n\nFor a list of MariaDB error codes, see MariaDB Error Codes.\n\nExamples\n--------\nSELECT f();\nERROR 1305 (42000): FUNCTION f does not exist\n\nSHOW COUNT(*) ERRORS;\n+-----------------------+\n| @@session.error_count |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSHOW ERRORS;\n+-------+------+---------------------------+\n| Level | Code | Message                   |\n+-------+------+---------------------------+\n| Error | 1305 | FUNCTION f does not exist |\n+-------+------+---------------------------+\n','','https://mariadb.com/kb/en/library/show-errors/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (373,26,'SHOW EVENTS','Syntax\n------\nSHOW EVENTS [{FROM | IN} schema_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nShows information about Event Manager events (created with CREATE EVENT). Requires\nthe EVENT privilege. Without any arguments, SHOW EVENTS lists all of the events in\nthe current schema:\nSELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora    | myschema |\n+----------------+----------+\n\nSHOW EVENTS\G\n*************************** 1. row ***************************\n         Db: myschema\n        Name: e_daily\n      Definer: jon@ghidora\n     Time zone: SYSTEM\n        Type: RECURRING\n     Execute at: NULL\n   Interval value: 10\n   Interval field: SECOND\n       Starts: 2006-02-09 10:41:23\n        Ends: NULL\n       Status: ENABLED\n     Originator: 0\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n\nTo see the event action, use SHOW CREATE EVENT instead, or look at the\ninformation_schema.EVENTS table.\n\nTo see events for a specific schema, use the FROM clause.\n\nFor example, to see events for the test schema, use the following statement:\nSHOW EVENTS FROM test;\n\nThe LIKE clause, if present, indicates which event names to\nmatch. The WHERE clause can be given to select rows using\nmore general conditions, as discussed in Extended Show.\n','','https://mariadb.com/kb/en/library/show-events/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (374,26,'SHOW EXPLAIN','Syntax\n------\nSHOW EXPLAIN FOR <thread_id>;\n\nDescription\n-----------\nThe SHOW EXPLAIN command allows one to get an EXPLAIN (that is, a\ndescription of a query plan) of a query running in a certain thread.\n\nSHOW EXPLAIN FOR <thread_id>;\n\nwill produce an EXPLAIN output for the query that thread number thread_id is running.\n\nThe thread id can be obtained with SHOW PROCESSLIST.\n\nSHOW EXPLAIN FOR 1;\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n| id   | select_type | table | type  | possible_keys | key  | key_len | ref  | rows  \n | Extra       |\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n|    1 | SIMPLE      | tbl   | index | NULL          | a    | 5       | NULL |\n1000107 | Using index |\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nThe output is always accompanied with a warning which shows the query the\ntarget thread is running (this shows what the EXPLAIN is for):\nSHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1003 | select sum(a) from tbl |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n\nPossible Errors\n\nThe output can be only produced if the target thread is currently running a\nquery, which has a ready query plan. If this is not the case, the output will\nbe:\nSHOW EXPLAIN FOR 2;\nERROR 1932 (HY000): Target is not running an EXPLAINable command\n\nYou will get this error when:\n\nDifferences Between SHOW EXPLAIN and EXPLAIN Outputs\n\nBackground\nIn MySQL, EXPLAIN execution takes a slightly different route from the way\nthe real query (typically the SELECT) is optimized. This is unfortunate,\nand has caused a number of bugs in EXPLAIN. (For example, see\nMDEV-326, MDEV-410, and\nlp:1013343.\n\nlp:992942 is not directly\nabout EXPLAIN, but it also would not have existed if MySQL didn't try to delete\nparts of a query plan in the middle of the query) \nSHOW EXPLAIN examines a running SELECT, and hence its output may be\nslightly different from what EXPLAIN SELECT would produce. We did our best\nto make sure that either the difference is negligible, or SHOW EXPLAIN's\noutput is closer to reality than EXPLAIN's output.\n\nList of Recorded Differences\n\nRequired Permissions\nRunning SHOW EXPLAIN requires the same permissions as\nrunning SHOW PROCESSLIST would.\n','','https://mariadb.com/kb/en/library/show-explain/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (375,26,'SHOW FUNCTION CODE','Syntax\n------\nSHOW FUNCTION CODE func_name\n\nDescription\n-----------\nSHOW FUNCTION CODE shows a representation of the internal implementation of the\nstored function.\n\nIt  is similar to SHOW PROCEDURE CODE but for stored functions.\n','','https://mariadb.com/kb/en/library/show-function-code/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (376,26,'SHOW FUNCTION STATUS','Syntax\n------\nSHOW FUNCTION STATUS\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThis statement is similar to \nSHOW PROCEDURE STATUS but for\nstored functions.\n\nThe LIKE clause, if present on its own, indicates which function names to match.\n\nThe WHERE and LIKE clauses can be given to select rows using more general conditions,\nas discussed in Extended SHOW.\n\nThe information_schema.ROUTINES table contains more detailed information.\n\nExamples\n--------\nShowing all stored functions:\nSHOW FUNCTION STATUS\G\n*************************** 1. row ***************************\n         Db: test\n        Name: VatCents\n        Type: FUNCTION\n      Definer: root@localhost\n      Modified: 2013-06-01 12:40:31\n      Created: 2013-06-01 12:40:31\n   Security_type: DEFINER\n      Comment:\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n\nStored functions whose name starts with 'V': \nSHOW FUNCTION STATUS LIKE 'V%' \G\n*************************** 1. row ***************************\n         Db: test\n        Name: VatCents\n        Type: FUNCTION\n      Definer: root@localhost\n      Modified: 2013-06-01 12:40:31\n      Created: 2013-06-01 12:40:31\n   Security_type: DEFINER\n      Comment:\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n\nStored functions with a security type of 'DEFINER':\nSHOW FUNCTION STATUS WHERE Security_type LIKE 'DEFINER' \G\n*************************** 1. row ***************************\n         Db: test\n        Name: VatCents\n        Type: FUNCTION\n      Definer: root@localhost\n      Modified: 2013-06-01 12:40:31\n      Created: 2013-06-01 12:40:31\n   Security_type: DEFINER\n      Comment:\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-function-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (377,26,'SHOW GRANTS','Syntax\n------\nSHOW GRANTS [FOR user|role]\n\nDescription\n-----------\nThe SHOW GRANTS statement lists privileges granted to a particular user or role.\n\nUsers\n\nThe statement lists the GRANT statement or\nstatements that must be issued to duplicate the privileges that are granted to\na MariaDB user account. The account is named using the same format as for the\nGRANT statement; for example,\n'jeffrey'@'localhost'. If you specify only the user name part\nof the account name, a host name part of '%' is used.  For\nadditional information about specifying account names, see\nGRANT.\n\nSHOW GRANTS FOR 'root'@'localhost';\n+---------------------------------------------------------------------+\n| Grants for root@localhost                                           |\n+---------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |\n+---------------------------------------------------------------------+\n\nTo list the privileges granted to the account that you are using to\nconnect to the server, you can use any of the following statements:\nSHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\nSHOW GRANTS FOR CURRENT_USER();\n\nIf SHOW GRANTS FOR CURRENT_USER (or any\nof the equivalent syntaxes) is used in DEFINER context (such\nas within a stored procedure that is defined with \n SQL SECURITY DEFINER), the grants displayed are those of the\ndefiner and not the invoker.\n\nNote that the DELETE HISTORY privilege, introduced in MariaDB 10.3.4, was displayed\nas DELETE VERSIONING ROWS when running SHOW GRANTS until MariaDB\n10.3.15 (MDEV-17655).\n\nRoles\n\nSHOW GRANTS can also be used to view the privileges granted to a role.\n\nExample\nSHOW GRANTS FOR journalist;\n+------------------------------------------+\n| Grants for journalist                    |\n+------------------------------------------+\n| GRANT USAGE ON *.* TO 'journalist'       |\n| GRANT DELETE ON `test`.* TO 'journalist' |\n+------------------------------------------+\n','','https://mariadb.com/kb/en/library/show-grants/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (378,26,'SHOW INDEX','Syntax\n------\nSHOW {INDEX | INDEXES | KEYS} \n FROM tbl_name [FROM db_name]\n [WHERE expr]\n\nDescription\n-----------\nSHOW INDEX returns table index information. The format\nresembles that of the SQLStatistics call in ODBC.\n\nYou can use db_name.tbl_name as an alternative to the\n tbl_name FROM db_name syntax. These two statements are\n equivalent:\nSHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;\n\nSHOW KEYS and SHOW INDEXES are synonyms for SHOW INDEX.\n\nYou can also list a table's indexes with the mariadb-show/mysqlshow command: \nmysqlshow -k db_name tbl_name\n\nThe information_schema.STATISTICS table stores similar information.\n\nThe following fields are returned by SHOW INDEX.\n\n+------------------------------------------------------------------------------------\n--------------------------------------------------------------------------+----------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------+\n|Field\n\n|Description                                                                         \n                                     |\n|Table                                                                               \n                                     |Table name\n\n|\n|Non_unique                                                                          \n                                     |1 if the\nindex permits duplicate values, 0 if values must be unique.\n\n|\n|Key_name                                                                            \n                                     |Index\nname. The primary key is always named PRIMARY.\n\n|\n|Seq_in_index                                                                        \n                                     |The\ncolumn's sequence in the index, beginning with 1.\n\n|\n|Column_name                                                                         \n                                     |Column\nname.\n\n|\n|Collation                                                                           \n                                     |Either A,\nif the column is sorted in ascending order in the index, or NULL if it's not sorted.\n\n|\n|Cardinality                                                                         \n                                     |Estimated\nnumber of unique values in the index. The cardinality statistics are calculated at\nvarious times, and can help the optimizer make improved decisions.|\n|Sub_part                                                                            \n                                     |NULL if\nthe entire column is included in the index, or the number of included characters if\nnot.                                                               |\n|Packed                                                                              \n                                     |NULL if\nthe index is not packed, otherwise how the index is packed.\n\n|\n|Null                                                                                \n                                     |NULL if\nNULL values are permitted in the column, an empty string if NULLs are not permitted.\n\n|\n|Index_type                                                                          \n                                     |The index\ntype, which can be BTREE, FULLTEXT, HASH or RTREE. See Storage Engine Index Types.\n\n|\n|Comment                                                                             \n                                     |Other\ninformation, such as whether the index is disabled.\n\n|\n|Index_comment                                                                       \n                                     |Contents\nof the COMMENT attribute when the index was created.\n\n|\n|Ignored                                                                             \n                                     |Whether or\nnot an index will be ignored by the optimizer. See Ignored Indexes. From MariaDB\n10.6.0.                                                            |\n+------------------------------------------------------------------------------------\n--------------------------------------------------------------------------+----------\n-------------------------------------------------------------------------------------\n--------------------------------------------------------------+\nThe WHERE and LIKE clauses can be given to select rows using more general conditions,\nas discussed in Extended SHOW.\n\nExamples\n--------\nCREATE TABLE IF NOT EXISTS `employees_example` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `first_name` varchar(30) NOT NULL,\n `last_name` varchar(40) NOT NULL,\n `position` varchar(25) NOT NULL,\n `home_address` varchar(50) NOT NULL,\n `home_phone` varchar(12) NOT NULL,\n `employee_code` varchar(25) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `employee_code` (`employee_code`),\n KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n\nINSERT INTO `employees_example` (`first_name`, `last_name`, `position`,\n`home_address`, `home_phone`, `employee_code`)\n VALUES\n ('Mustapha', 'Mond', 'Chief Executive Officer', '692 Promiscuous Plaza',\n'326-555-3492', 'MM1'),\n ('Henry', 'Foster', 'Store Manager', '314 Savage Circle', '326-555-3847', 'HF1'),\n ('Bernard', 'Marx', 'Cashier', '1240 Ambient Avenue', '326-555-8456', 'BM1'),\n ('Lenina', 'Crowne', 'Cashier', '281 Bumblepuppy Boulevard',\n'328-555-2349', 'LC1'),\n ('Fanny', 'Crowne', 'Restocker', '1023 Bokanovsky Lane', '326-555-6329', 'FC1'),\n ('Helmholtz', 'Watson', 'Janitor', '944 Soma Court', '329-555-2478', 'HW1');\n\nSHOW INDEXES FROM employees_example\G\n*************************** 1. row ***************************\n    Table: employees_example\n Non_unique: 0\n  Key_name: PRIMARY\n Seq_in_index: 1\n Column_name: id\n  Collation: A\n Cardinality: 6\n  Sub_part: NULL\n   Packed: NULL\n    Null:\n Index_type: BTREE\n   Comment:\nIndex_comment: \n   Ignored: NO\n*************************** 2. row ***************************\n    Table: employees_example\n Non_unique: 0\n  Key_name: employee_code\n Seq_in_index: 1\n Column_name: employee_code\n  Collation: A\n Cardinality: 6\n  Sub_part: NULL\n   Packed: NULL\n    Null:\n Index_type: BTREE\n   Comment:\nIndex_comment: \n   Ignored: NO\n*************************** 3. row ***************************\n    Table: employees_example\n Non_unique: 1\n  Key_name: first_name\n Seq_in_index: 1\n Column_name: first_name\n  Collation: A\n Cardinality: NULL\n  Sub_part: NULL\n   Packed: NULL\n    Null:\n Index_type: BTREE\n   Comment:\nIndex_comment: \n   Ignored: NO\n*************************** 4. row ***************************\n    Table: employees_example\n Non_unique: 1\n  Key_name: first_name\n Seq_in_index: 2\n Column_name: last_name\n  Collation: A\n Cardinality: NULL\n  Sub_part: NULL\n   Packed: NULL\n    Null:\n Index_type: BTREE\n   Comment:\nIndex_comment: \n   Ignored: NO\n','','https://mariadb.com/kb/en/library/show-index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (379,26,'SHOW LOCALES','SHOW LOCALES was introduced as part of the Information Schema\nplugin extension.\n\nSHOW LOCALES is used to return locales information as part of the Locales plugin.\n\nWhile the information_schema.LOCALES table has 8 columns, the SHOW LOCALES statement\nwill only display 4 of them:\n\nExample\n-------\nSHOW LOCALES;\n+-----+-------+-------------------------------------+------------------------+\n| Id  | Name  | Description                         | Error_Message_Language |\n+-----+-------+-------------------------------------+------------------------+\n|   0 | en_US | English - United States             | english                |\n|   1 | en_GB | English - United Kingdom            | english                |\n|   2 | ja_JP | Japanese - Japan                    | japanese               |\n|   3 | sv_SE | Swedish - Sweden                    | swedish                |\n...\n','','https://mariadb.com/kb/en/library/show-locales/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (380,26,'SHOW MASTER STATUS','Syntax\n------\nSHOW MASTER STATUS\nSHOW BINLOG STATUS -- From MariaDB 10.5.2\n\nDescription\n-----------\nProvides status information about the binary log files of the primary.\n\nThis statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or,\nfrom MariaDB 10.5.2, the BINLOG MONITOR privilege.\n\nTo see information about the current GTIDs in the binary log, use the\ngtid_binlog_pos variable.\n\nSHOW MASTER STATUS was renamed to SHOW BINLOG STATUS in MariaDB 10.5.2, but the old\nname remains an alias for compatibility purposes.\n\nExample\n-------\nSHOW MASTER STATUS;\n+--------------------+----------+--------------+------------------+\n| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+--------------------+----------+--------------+------------------+\n| mariadb-bin.000016 |      475 |              |                  |\n+--------------------+----------+--------------+------------------+\nSELECT @@global.gtid_binlog_pos;\n+--------------------------+\n| @@global.gtid_binlog_pos |\n+--------------------------+\n| 0-1-2                    |\n+--------------------------+\n','','https://mariadb.com/kb/en/library/show-master-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (381,26,'SHOW OPEN TABLES','Syntax\n------\nSHOW OPEN TABLES [FROM db_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\n SHOW OPEN TABLES lists the non-TEMPORARY\ntables that are currently open in the table cache. See\nhttp://dev.mysql.com/doc/refman/5.1/en/table-cache.html.\n\nThe FROM and LIKE clauses may be used.\n\nThe FROM\nclause, if present, restricts the tables shown to those present in the\ndb_name database.\n\nThe LIKE clause, if\npresent on its own, indicates which table names to match. The WHERE and LIKE clauses\ncan be given to select rows using more general conditions, as discussed in\nExtended SHOW.\n\nThe following information is returned:\n+-----------------------------------------------------------------------------------+\n----------------------------------------------------------------------------------+\n|Column                                                                            \n|Description                                                                        |\n|Database                                                                          \n|Database name.                                                                     |\n|Name                                                                              \n|Table name.                                                                        |\n|In_use                                                                            \n|Number of  table instances being used.                                             |\n|Name_locked                                                                       \n|1 if the table is name-locked, e.g. if it is being dropped or renamed, otherwise 0.|\n+-----------------------------------------------------------------------------------+\n----------------------------------------------------------------------------------+\nBefore MariaDB 5.5, each use of, for example, LOCK TABLE ... WRITE would increment\nIn_use for that table. With the implementation of the metadata locking improvements\nin MariaDB 5.5, LOCK TABLE... WRITE acquires a strong MDL lock, and concurrent\nconnections will wait on this MDL lock, so any subsequent LOCK TABLE... WRITE will\nnot increment In_use.\n\nExample\n-------\nSHOW OPEN TABLES;\n+----------+---------------------------+--------+-------------+\n| Database | Table                     | In_use | Name_locked |\n+----------+---------------------------+--------+-------------+\n...\n| test     | xjson                     |      0 |           0 |\n| test     | jauthor                   |      0 |           0 |\n| test     | locks                     |      1 |           0 |\n...\n+----------+---------------------------+--------+-------------+\n','','https://mariadb.com/kb/en/library/show-open-tables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (382,26,'SHOW PACKAGE BODY STATUS','Syntax\n------\nSHOW PACKAGE BODY STATUS\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThe SHOW PACKAGE BODY STATUS statement returns characteristics of stored package\nbodies (implementations), such as the database, name, type, creator, creation and\nmodification dates, and character set information. A similar statement, SHOW PACKAGE\nSTATUS, displays information about stored package specifications.\n\nThe LIKE clause, if present, indicates which package names to match. The WHERE and\nLIKE clauses can be given to select rows using more general conditions, as discussed\nin Extended SHOW.\n\nThe ROUTINES table in the INFORMATION_SCHEMA database contains more\ndetailed information.\n\nExamples\n--------\nSHOW PACKAGE BODY STATUS LIKE 'pkg1'\G\n*************************** 1. row ***************************\n         Db: test\n        Name: pkg1\n        Type: PACKAGE BODY\n      Definer: root@localhost\n      Modified: 2018-02-27 14:44:14\n      Created: 2018-02-27 14:44:14\n   Security_type: DEFINER\n      Comment: This is my first package body\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-package-body-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (383,26,'SHOW PACKAGE STATUS','Syntax\n------\nSHOW PACKAGE STATUS\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThe SHOW PACKAGE STATUS statement returns characteristics of stored package\nspecifications, such as the database, name, type, creator, creation and modification\ndates, and character set information. A similar statement, SHOW PACKAGE BODY STATUS,\ndisplays information about stored package bodies (i.e. implementations).\n\nThe LIKE clause, if present, indicates which package names to match. The WHERE and\nLIKE clauses can be given to select rows using more general conditions, as discussed\nin Extended SHOW.\n\nThe ROUTINES table in the INFORMATION_SCHEMA database contains more\ndetailed information.\n\nExamples\n--------\nSHOW PACKAGE STATUS LIKE 'pkg1'\G\n*************************** 1. row ***************************\n         Db: test\n        Name: pkg1\n        Type: PACKAGE\n      Definer: root@localhost\n      Modified: 2018-02-27 14:38:15\n      Created: 2018-02-27 14:38:15\n   Security_type: DEFINER\n      Comment: This is my first package\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-package-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (384,26,'SHOW PLUGINS','Syntax\n------\nSHOW PLUGINS;\n\nDescription\n-----------\n SHOW PLUGINS displays information about installed plugins. The Library column\nindicates the plugin library - if it is NULL, the plugin is built-in and cannot\nbe uninstalled.\n\nThe PLUGINS table in the information_schema database contains more\ndetailed information.\n\nFor specific information about storage engines (a particular type of plugin), see the\ninformation_schema.ENGINES table and the SHOW ENGINES statement.\n\nExamples\n--------\nSHOW PLUGINS;\n+----------------------------+----------+--------------------+-------------+---------\n\n| Name                       | Status   | Type               | Library     |\nLicense |\n+----------------------------+----------+--------------------+-------------+---------\n\n| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| mysql_native_password      | ACTIVE   | AUTHENTICATION     | NULL        | GPL   \n |\n| mysql_old_password         | ACTIVE   | AUTHENTICATION     | NULL        | GPL   \n |\n| MRG_MyISAM                 | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| MyISAM                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| CSV                        | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| MEMORY                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| FEDERATED                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| PERFORMANCE_SCHEMA         | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| Aria                       | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| InnoDB                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| INNODB_TRX                 | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL   \n |\n...\n| INNODB_SYS_FOREIGN         | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL   \n |\n| INNODB_SYS_FOREIGN_COLS    | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL   \n |\n| SPHINX                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| ARCHIVE                    | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| BLACKHOLE                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| FEEDBACK                   | DISABLED | INFORMATION SCHEMA | NULL        | GPL   \n |\n| partition                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL   \n |\n| pam                        | ACTIVE   | AUTHENTICATION     | auth_pam.so | GPL   \n |\n+----------------------------+----------+--------------------+-------------+---------\n','','https://mariadb.com/kb/en/library/show-plugins/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (385,26,'SHOW PLUGINS SONAME','Syntax\n------\nSHOW PLUGINS SONAME { library | LIKE 'pattern' | WHERE expr };\n\nDescription\n-----------\nSHOW PLUGINS SONAME displays information about compiled-in and all server plugins in\nthe plugin_dir directory, including plugins that haven't been installed.\n\nExamples\n--------\nSHOW PLUGINS SONAME 'ha_example.so';\n+----------+---------------+----------------+---------------+---------+\n| Name     | Status        | Type           | Library       | License |\n+----------+---------------+----------------+---------------+---------+\n| EXAMPLE  | NOT INSTALLED | STORAGE ENGINE | ha_example.so | GPL     |\n| UNUSABLE | NOT INSTALLED | DAEMON         | ha_example.so | GPL     |\n+----------+---------------+----------------+---------------+---------+\n\nThere is also a corresponding information_schema table, called ALL_PLUGINS, which\ncontains more complete information.\n','','https://mariadb.com/kb/en/library/show-plugins-soname/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (386,26,'SHOW PRIVILEGES','Syntax\n------\nSHOW PRIVILEGES\n\nDescription\n-----------\n SHOW PRIVILEGES shows the list of system privileges that the MariaDB server\nsupports. The exact list of privileges depends on the version of your server.\n\nNote that before MariaDB 10.3.23, MariaDB 10.4.13 and MariaDB 10.5.2 , the Delete\nhistory privilege displays as Delete versioning rows (MDEV-20382).\n\nExample\n-------\nFrom MariaDB 10.5.9\nSHOW PRIVILEGES;\n+--------------------------+---------------------------------------+-----------------\n--------------------------------------------------+\n| Privilege                | Context                               | Comment         \n                         |\n+--------------------------+---------------------------------------+-----------------\n--------------------------------------------------+\n| Alter                    | Tables                                | To alter the\ntable                                                 |\n| Alter routine            | Functions,Procedures                  | To alter or drop\nstored functions/procedures                       |\n| Create                   | Databases,Tables,Indexes              | To create new\ndatabases and tables                                 |\n| Create routine           | Databases                             | To use CREATE\nFUNCTION/PROCEDURE                                   |\n| Create temporary tables  | Databases                             | To use CREATE\nTEMPORARY TABLE                                      |\n| Create view              | Tables                                | To create new\nviews                                                |\n| Create user              | Server Admin                          | To create new\nusers                                                |\n| Delete                   | Tables                                | To delete\nexisting rows                                            |\n| Delete history           | Tables                                | To delete\nversioning table historical rows                         |\n| Drop                     | Databases,Tables                      | To drop\ndatabases, tables, and views                               |\n| Event                    | Server Admin                          | To create,\nalter, drop and execute events                          |\n| Execute                  | Functions,Procedures                  | To execute\nstored routines                                         |\n| File                     | File access on server                 | To read and\nwrite files on the server                              |\n| Grant option             | Databases,Tables,Functions,Procedures | To give to other\nusers those privileges you possess                |\n| Index                    | Tables                                | To create or\ndrop indexes                                          |\n| Insert                   | Tables                                | To insert data\ninto tables                                         |\n| Lock tables              | Databases                             | To use LOCK\nTABLES (together with SELECT privilege)                |\n| Process                  | Server Admin                          | To view the\nplain text of currently executing queries              |\n| Proxy                    | Server Admin                          | To make proxy\nuser possible                                        |\n| References               | Databases,Tables                      | To have\nreferences on tables                                       |\n| Reload                   | Server Admin                          | To reload or\nrefresh tables, logs and privileges                   |\n| Binlog admin             | Server                                | To purge binary\nlogs                                               |\n| Binlog monitor           | Server                                | To use SHOW\nBINLOG STATUS and SHOW BINARY LOG                      |\n| Binlog replay            | Server                                | To use BINLOG\n(generated by mariadb-binlog)                        |\n| Replication master admin | Server                                | To monitor\nconnected slaves                                        |\n| Replication slave admin  | Server                                | To start/stop\nslave and apply binlog events                        |\n| Slave monitor            | Server                                | To use SHOW\nSLAVE STATUS and SHOW RELAYLOG EVENTS                  |\n| Replication slave        | Server Admin                          | To read binary\nlog events from the master                          |\n| Select                   | Tables                                | To retrieve rows\nfrom table                                        |\n| Show databases           | Server Admin                          | To see all\ndatabases with SHOW DATABASES                           |\n| Show view                | Tables                                | To see views\nwith SHOW CREATE VIEW                                 |\n| Shutdown                 | Server Admin                          | To shut down the\nserver                                            |\n| Super                    | Server Admin                          | To use KILL\nthread, SET GLOBAL, CHANGE MASTER, etc.                |\n| Trigger                  | Tables                                | To use triggers \n                         |\n| Create tablespace        | Server Admin                          | To\ncreate/alter/drop tablespaces                                   |\n| Update                   | Tables                                | To update\nexisting rows                                            |\n| Set user                 | Server                                | To create views\nand stored routines with a different definer       |\n| Federated admin          | Server                                | To execute the\nCREATE SERVER, ALTER SERVER, DROP SERVER statements |\n| Connection admin         | Server                                | To bypass\nconnection limits and kill other users' connections      |\n| Read_only admin          | Server                                | To perform write\noperations even if @@read_only=ON                 |\n| Usage                    | Server Admin                          | No privileges -\nallow connect only                                 |\n+--------------------------+---------------------------------------+-----------------\n--------------------------------------------------+\n41 rows in set (0.000 sec)\n','','https://mariadb.com/kb/en/library/show-privileges/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (387,26,'SHOW PROCEDURE CODE','Syntax\n------\nSHOW PROCEDURE CODE proc_name\n\nDescription\n-----------\nThis statement is a MariaDB extension that is available only for servers that\nhave been built with debugging support. It displays a representation of the\ninternal implementation of the named stored procedure. A similar statement,\n SHOW FUNCTION CODE, displays\ninformation about stored functions.\n\nBoth statements require that you be the owner of the routine or have\n SELECT access to the mysql.proc table.\n\nIf the named routine is available, each statement produces a result\nset. Each row in the result set corresponds to one "instruction" in\nthe routine. The first column is Pos, which is an ordinal number\nbeginning with 0. The second column is Instruction, which contains an\nSQL statement (usually changed from the original source), or a\ndirective which has meaning only to the stored-routine handler.\n\nExamples\n--------\nDELIMITER //\n\nCREATE PROCEDURE p1 ()\n BEGIN\n  DECLARE fanta INT DEFAULT 55;\n  DROP TABLE t2;\n  LOOP\n   INSERT INTO t3 VALUES (fanta);\n   END LOOP;\n END//\nQuery OK, 0 rows affected (0.00 sec)\n\nSHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction                            |\n+-----+----------------------------------------+\n|   0 | set fanta@0 55                         |\n|   1 | stmt 9 "DROP TABLE t2"                 |\n|   2 | stmt 5 "INSERT INTO t3 VALUES (fanta)" |\n|   3 | jump 2                                 |\n+-----+----------------------------------------+\n','','https://mariadb.com/kb/en/library/show-procedure-code/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (388,26,'SHOW PROCEDURE STATUS','Syntax\n------\nSHOW PROCEDURE STATUS\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nThis statement is a MariaDB extension. It returns characteristics of a stored\nprocedure, such as the database, name, type, creator, creation and modification\ndates, and character set information. A similar statement, \n SHOW FUNCTION STATUS, displays\ninformation about stored functions.\n\nThe LIKE clause, if present, indicates which procedure or\nfunction names to match. The WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n\nThe ROUTINES table in the INFORMATION_SCHEMA database contains more\ndetailed information.\n\nExamples\n--------\nSHOW PROCEDURE STATUS LIKE 'p1'\G\n*************************** 1. row ***************************\n         Db: test\n        Name: p1\n        Type: PROCEDURE\n      Definer: root@localhost\n      Modified: 2010-08-23 13:23:03\n      Created: 2010-08-23 13:23:03\n   Security_type: DEFINER\n      Comment:\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n','','https://mariadb.com/kb/en/library/show-procedure-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (389,26,'SHOW PROCESSLIST','Syntax\n------\nSHOW [FULL] PROCESSLIST\n\nDescription\n-----------\n SHOW PROCESSLIST shows you which threads are running. You\ncan also get this information from the\ninformation_schema.PROCESSLIST table or the mysqladmin processlist command. If you\nhave the \nPROCESS privilege, you can see all threads.\n\nOtherwise, you can see only your own threads (that is, threads associated with\nthe MariaDB account that you are using). If you do not use the\nFULL keyword, only the first 100 characters of each\nstatement are shown in the Info field.\n\nThe columns shown in SHOW PROCESSLIST are:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------------------+------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+\n|Name\n\n|Description\n\n|\n|ID\n\n|The client's process ID.\n\n|\n|USER\n\n|The username associated\nwith the process.\n\n|\n|HOST\n\n|The host the client is\nconnected to.\n\n|\n|DB\n\n|The default database of\nthe process (NULL if no default).\n\n|\n|COMMAND\n\n|The command type. See\nThread Command Values.\n\n|\n|TIME\n\n|The amount of time, in\nseconds, the process has been in its current state. For a replica SQL thread before\nMariaDB 10.1, this is the time in seconds between the last replicated event's\ntimestamp and the replica machine's real time.|\n|STATE\n\n|See Thread States.\n\n|\n|INFO\n\n|The statement being\nexecuted.\n\n|\n|PROGRESS\n\n|The total progress of\nthe process (0-100%) (see Progress Reporting).\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------------------+------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------+\nSee TIME_MS column in information_schema.PROCESSLIST for differences in the TIME\ncolumn between MariaDB and MySQL.\n\nThe information_schema.PROCESSLIST  table contains the following additional columns:\n+-------------------------------------------------------------------------------+----\n--------------------------------------------------------------------------+\n|Name                                                                          \n|Description                                                                    |\n|TIME_MS                                                                        |The\namount of time, in milliseconds, the process has been in its current state.|\n|STAGE                                                                          |The\nstage the process is currently in.                                         |\n|MAX_STAGE                                                                      |The\nmaximum number of stages.                                                  |\n|PROGRESS                                                                       |The\nprogress of the process within the current stage (0-100%).                 |\n|MEMORY_USED                                                                    |The\namount of memory used by the process.                                      |\n|EXAMINED_ROWS                                                                  |The\nnumber of rows the process has examined.                                   |\n|QUERY_ID                                                                      \n|Query ID.                                                                      |\n+-------------------------------------------------------------------------------+----\n--------------------------------------------------------------------------+\nNote that the PROGRESS field from the information schema, and the PROGRESS field from\nSHOW PROCESSLIST display different results. SHOW PROCESSLIST shows the total\nprogress, while the information schema shows the progress for the current stage only.\n\nThreads can be killed using their thread_id or their query_id, with the\nKILL statement.\n\nSince queries on this table are locking, if the performance_schema is enabled, you\nmay want to query the THREADS table instead.\n\nExamples\n--------\nSHOW PROCESSLIST;\n+----+-----------------+-----------+------+---------+------+------------------------+\n-----------------+----------+\n| Id | User            | Host      | db   | Command | Time | State                  |\nInfo             | Progress |\n+----+-----------------+-----------+------+---------+------+------------------------+\n-----------------+----------+\n|  2 | event_scheduler | localhost | NULL | Daemon  | 2693 | Waiting on empty queue |\nNULL             |    0.000 |\n|  4 | root            | localhost | NULL | Query   |    0 | Table lock             |\nSHOW PROCESSLIST |    0.000 |\n+----+-----------------+-----------+------+---------+------+------------------------+\n-----------------+----------+\n\nCONNECTION_ID()\n','','https://mariadb.com/kb/en/library/show-processlist/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (390,26,'SHOW PROFILE','Syntax\n------\nSHOW PROFILE [type [, type] ... ]\n  [FOR QUERY n]\n  [LIMIT row_count [OFFSET offset]]\n\ntype:\n  ALL\n | BLOCK IO\n | CONTEXT SWITCHES\n | CPU\n | IPC\n | MEMORY\n | PAGE FAULTS\n | SOURCE\n | SWAPS\n\nDescription\n-----------\nThe SHOW PROFILE and \nSHOW PROFILES statements display profiling\ninformation that indicates resource usage for statements executed during the\ncourse of the current session.\n\nProfiling is controlled by the profiling session variable, which has a default value\nof 0 (OFF). Profiling is enabled by setting profiling to 1 or ON:\nSET profiling = 1;\n\nSHOW PROFILES displays a list of the most recent statements\nsent to the master. The size of the list is controlled by the\nprofiling_history_size session variable, which has a default value of 15. The maximum\nvalue is 100. Setting the value to 0 has the practical effect of disabling profiling.\n\nAll statements are profiled except SHOW PROFILES and \nSHOW PROFILE, so you will find neither of those statements\nin the profile list.  Malformed statements are profiled. For example, \n SHOW PROFILING is an illegal statement, and a syntax error\noccurs if you try to execute it, but it will show up in the profiling list.\n\nSHOW PROFILE displays detailed information about a single\nstatement.  Without the FOR QUERY n clause, the output\npertains to the most recently executed statement. If \n FOR QUERY n is included,\n SHOW PROFILE displays information for statement n. The\nvalues of n correspond to\nthe Query_ID values displayed by SHOW PROFILES.\n\nThe LIMIT row_count clause may be given to limit the\noutput to row_count rows. If LIMIT is given, \n OFFSET offset may be added to begin the output offset\nrows into the full set of rows.\n\nBy default, SHOW PROFILE displays Status and Duration\ncolumns. The Status values are like the State values displayed by \nSHOW PROCESSLIST,\nalthough there might be some minor differences in interpretation for\nthe two statements for some status values (see\nhttp://dev.mysql.com/doc/refman/5.6/en/thread-information.html).\n\nOptional type values may be specified to display specific additional\ntypes of information:\n\nProfiling is enabled per session. When a session ends, its profiling information\nis lost.\n\nThe information_schema.PROFILING table contains similar information.\n\nExamples\n--------\nSELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n\nSET profiling = 1;\n\nUSE test;\n\nDROP TABLE IF EXISTS t1;\n\nCREATE TABLE T1 (id INT);\n\nSHOW PROFILES;\n+----------+------------+--------------------------+\n| Query_ID | Duration   | Query                    |\n+----------+------------+--------------------------+\n|        1 | 0.00009200 | SELECT DATABASE()        |\n|        2 | 0.00023800 | show databases           |\n|        3 | 0.00018900 | show tables              |\n|        4 | 0.00014700 | DROP TABLE IF EXISTS t1  |\n|        5 | 0.24476900 | CREATE TABLE T1 (id INT) |\n+----------+------------+--------------------------+\n\nSHOW PROFILE;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| starting             | 0.000042 |\n| checking permissions | 0.000044 |\n| creating table       | 0.244645 |\n| After create         | 0.000013 |\n| query end            | 0.000003 |\n| freeing items        | 0.000016 |\n| logging slow query   | 0.000003 |\n| cleaning up          | 0.000003 |\n+----------------------+----------+\n\nSHOW PROFILE FOR QUERY 4;\n+--------------------+----------+\n| Status             | Duration |\n+--------------------+----------+\n| starting           | 0.000126 |\n| query end          | 0.000004 |\n| freeing items      | 0.000012 |\n| logging slow query | 0.000003 |\n| cleaning up        | 0.000002 |\n+--------------------+----------+\n\nSHOW PROFILE CPU FOR QUERY 5;\n+----------------------+----------+----------+------------+\n| Status               | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| starting             | 0.000042 | 0.000000 |   0.000000 |\n| checking permissions | 0.000044 | 0.000000 |   0.000000 |\n| creating table       | 0.244645 | 0.000000 |   0.000000 |\n| After create         | 0.000013 | 0.000000 |   0.000000 |\n| query end            | 0.000003 | 0.000000 |   0.000000 |\n| freeing items        | 0.000016 | 0.000000 |   0.000000 |\n| logging slow query   | 0.000003 | 0.000000 |   0.000000 |\n| cleaning up          | 0.000003 | 0.000000 |   0.000000 |\n+----------------------+----------+----------+------------+\n','','https://mariadb.com/kb/en/library/show-profile/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (391,26,'SHOW PROFILES','Syntax\n------\nSHOW PROFILES\n\nDescription\n-----------\nThe SHOW PROFILES statement displays profiling information\nthat indicates resource usage for statements executed during the course of the\ncurrent session. It is used together with \nSHOW PROFILE.\n','','https://mariadb.com/kb/en/library/show-profiles/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (392,26,'SHOW QUERY_RESPONSE_TIME','It is possible to use SHOW QUERY_RESPONSE_TIME as an alternative for\nretrieving information from the QUERY_RESPONSE_TIME plugin.\n\nThis was introduced as part of the Information Schema plugin extension.\n','','https://mariadb.com/kb/en/library/show-query_response_time/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (393,26,'SHOW RELAYLOG EVENTS','The terms master and slave have historically been used in replication, but\nthe terms terms primary and replica are now preferred. The old terms are used still\nused in parts of the documentation, and in MariaDB commands, although MariaDB 10.5\nhas begun the process of renaming. The documentation process is ongoing. See\nMDEV-18777 to follow progress on this effort.\n\nSyntax\n------\nSHOW RELAYLOG ['connection_name'] EVENTS\n  [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\n  [ FOR CHANNEL 'channel_name']\n\nDescription\n-----------\nOn replicas, this command shows the events in the relay log. If 'log_name' is not\nspecified, the first relay log is shown.\n\nSyntax for the LIMIT clause is the same as for SELECT ... LIMIT.\n\nUsing the LIMIT clause is highly recommended because the SHOW RELAYLOG EVENTS command\nreturns the complete contents of the relay log, which can be quite large.\n\nThis command does not return events related to setting user and system variables. If\nyou need those, use mariadb-binlog/mysqlbinlog.\n\nOn the primary, this command does nothing.\n\nRequires the REPLICA MONITOR privilege (>= MariaDB 10.5.9), the REPLICATION SLAVE\nADMIN privilege (>= MariaDB 10.5.2) or the REPLICATION SLAVE privilege (<=\nMariaDB 10.5.1).\n\nconnection_name\nIf there is only one nameless primary, or the default primary (as specified by the\ndefault_master_connection system variable) is intended, connection_name can be\nomitted. If provided, the SHOW RELAYLOG statement will apply to the specified\nprimary. connection_name is case-insensitive.\n','','https://mariadb.com/kb/en/library/show-relaylog-events/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (394,26,'SHOW SLAVE HOSTS','Syntax\n------\nSHOW SLAVE HOSTS\nSHOW REPLICA HOSTS -- from MariaDB 10.5.1\n\nDescription\n-----------\nThis command is run on the primary and displays a list of replicas that are currently\nregistered with it. Only replicas started with the --report-host=host_name option\nare visible in this list.\n\nThe list is displayed on any server (not just the primary server). The output\nlooks like this:\nSHOW SLAVE HOSTS;\n+------------+-----------+------+-----------+\n| Server_id  | Host      | Port | Master_id |\n+------------+-----------+------+-----------+\n|  192168010 | iconnect2 | 3306 | 192168011 |\n| 1921680101 | athena    | 3306 | 192168011 |\n+------------+-----------+------+-----------+\n\nSome MariaDB and MySQL versions report another variable, rpl_recovery_rank. This\nvariable was never used, and was eventually removed in MariaDB 10.1.2 .\n\nRequires the REPLICATION MASTER ADMIN privilege (>= MariaDB 10.5.2) or the\nREPLICATION SLAVE privilege (<= MariaDB 10.5.1).\n\nSHOW REPLICA HOSTS\n','','https://mariadb.com/kb/en/library/show-slave-hosts/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (395,26,'SHOW SLAVE STATUS','Syntax\n------\nSHOW SLAVE ["connection_name"] STATUS [FOR CHANNEL "connection_name"]\nSHOW REPLICA ["connection_name"] STATUS -- From MariaDB 10.5.1\n\nor\nSHOW ALL SLAVES STATUS\nSHOW ALL REPLICAS STATUS -- From MariaDB 10.5.1\n\nDescription\n-----------\nThis statement is to be run on a replica and provides status information on essential\nparameters of the replica threads.\n\nThis statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or,\nfrom MariaDB 10.5.2, the REPLICATION SLAVE ADMIN privilege, or, from MariaDB 10.5.9,\nthe REPLICA MONITOR privilege.\n\nMulti-Source\n\nThe FULL and "connection_name" options allow you to connect to many primaries at the\nsame time.\n\nALL SLAVES (or ALL REPLICAS from MariaDB 10.5.1) gives you a list of all connections\nto the primary nodes.\n\nThe rows will be sorted according to Connection_name.\n\nIf you specify a connection_name, you only get the information about that\nconnection. If connection_name is not used, then the name set by\ndefault_master_connection is used. If the connection name doesn't exist you will get\nan error:\nThere is no master connection for 'xxx'.\n\nColumn Descriptions\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------+----------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--+----------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------+\n|Name\n\n|Description\n\n|Added\n\n|\n|Connection_name\n\n|Name of the primary connection. Returned\nwith SHOW ALL SLAVES STATUS (or SHOW ALL REPLICAS STATUS from MariaDB 10.5.1) only.\n\n|\n\n|\n|Slave_SQL_State\n\n|State of SQL thread. Returned with SHOW\nALL SLAVES STATUS (or SHOW ALL REPLICAS STATUS from MariaDB 10.5.1) only. See Slave\nSQL Thread States.\n\n|\n\n|\n|Slave_IO_State\n\n|State of I/O thread. See Slave I/O\nThread States.\n\n|\n\n|\n|Master_host\n\n|Master host that the replica is\nconnected to.\n\n|\n\n|\n|Master_user\n\n|Account user name being used to connect\nto the primary.\n\n|\n\n|\n|Master_port\n\n|The port being used to connect to the\nprimary.\n\n|\n\n|\n|Connect_Retry\n\n|Time in seconds between retries to\nconnect. The default is 60. The CHANGE MASTER TO statement can set this. The\nmaster-retry-count option determines the maximum number of reconnection attempts.\n\n|\n\n|\n|Master_Log_File\n\n|Name of the primary binary log file that\nthe I/O thread is currently reading from.\n\n|\n\n|\n|Read_Master_Log_Pos\n\n|Position up to which the I/O thread has\nread in the current primary binary log file.\n\n|\n\n|\n|Relay_Log_File\n\n|Name of the relay log file that the SQL\nthread is currently processing.\n\n|\n\n|\n|Relay_Log_Pos\n\n|Position up to which the SQL thread has\nfinished processing in the current relay log file.\n\n|\n\n|\n|Relay_Master_Log_File\n\n|Name of the primary binary log file that\ncontains the most recent event executed by the SQL thread.\n\n|\n\n|\n|Slave_IO_Running\n\n|Whether the replica I/O thread is\nrunning and connected (Yes), running but not connected to a primary (Connecting) or\nnot running (No).\n\n|\n\n|\n|Slave_SQL_Running\n\n|Whether or not the SQL thread is\nrunning.\n\n|\n\n|\n|Replicate_Do_DB\n\n|Databases specified for replicating with\nthe replicate_do_db option.\n\n|\n\n|\n|Replicate_Ignore_DB\n\n|Databases specified for ignoring with\nthe replicate_ignore_db option.\n\n|\n\n|\n|Replicate_Do_Table\n\n|Tables specified for replicating with\nthe replicate_do_table option.\n\n|\n\n|\n|Replicate_Ignore_Table\n\n|Tables specified for ignoring with the\nreplicate_ignore_table option.\n\n|\n\n|\n|Replicate_Wild_Do_Table\n\n|Tables specified for replicating with\nthe replicate_wild_do_table option.\n\n|\n\n|\n|Replicate_Wild_Ignore_Table\n\n|Tables specified for ignoring with the\nreplicate_wild_ignore_table option.\n\n|\n\n|\n|Last_Errno\n\n|Alias for Last_SQL_Errno (see below)\n\n|\n\n|\n|Last Error\n\n|Alias for Last_SQL_Error (see below)\n\n|\n\n|\n|Skip_Counter\n\n|Number of events that a replica skips\nfrom the master, as recorded in the sql_slave_skip_counter system variable.\n\n|\n\n|\n|Exec_Master_Log_Pos\n\n|Position up to which the SQL thread has\nprocessed in the current master binary log file. Can be used to start a new replica\nfrom a current replica with the CHANGE MASTER TO ... MASTER_LOG_POS option.\n\n|\n\n|\n|Relay_Log_Space\n\n|Total size of all relay log files\ncombined.\n\n|\n\n|\n|Until_Condition\n\n|\n\n|\n\n|\n|Until_Log_File\n\n|The MASTER_LOG_FILE value of the START\nSLAVE UNTIL condition.\n\n|\n\n|\n|Until_Log_Pos\n\n|The MASTER_LOG_POS value of the START\nSLAVE UNTIL condition.\n\n|\n\n|\n|Master_SSL_Allowed\n\n|Whether an SSL connection is permitted\n(Yes), not permitted (No) or permitted but without the replica having SSL support\nenabled (Ignored)\n\n|\n\n|\n|Master_SSL_CA_File\n\n|The MASTER_SSL_CA option of the CHANGE\nMASTER TO statement.\n\n|\n\n|\n|Master_SSL_CA_Path\n\n|The MASTER_SSL_CAPATH option of the\nCHANGE MASTER TO statement.\n\n|\n\n|\n|Master_SSL_Cert\n\n|The MASTER_SSL_CERT option of the CHANGE\nMASTER TO statement.\n\n|\n\n|\n|Master_SSL_Cipher\n\n|The MASTER_SSL_CIPHER option of the\nCHANGE MASTER TO statement.\n\n|\n\n|\n|Master_SSL_Key\n\n|The MASTER_SSL_KEY option of the CHANGE\nMASTER TO statement.\n\n|\n\n|\n|Seconds_Behind_Master\n\n|Difference between the timestamp logged\non the master for the event that the replica is currently processing, and the current\ntimestamp on the replica. Zero if the replica is not currently processing an event.\n\nWith parallel replication, seconds_behind_master is updated only after transactions\ncommit.|\n\n|\n|Master_SSL_Verify_Server_Cert\n\n|The MASTER_SSL_VERIFY_SERVER_CERT option\nof the CHANGE MASTER TO statement.\n\n|\n\n|\n|Last_IO_Errno\n\n|Error code of the most recent error that\ncaused the I/O thread to stop (also recorded in the replica's error log). 0 means no\nerror. RESET SLAVE or RESET MASTER will reset this value.\n\n|\n\n|\n|Last_IO_Error\n\n|Error message of the most recent error\nthat caused the I/O thread to stop (also recorded in the replica's error log). An\nempty string means no error. RESET SLAVE or RESET MASTER will reset this value.\n\n|\n\n|\n|Last_SQL_Errno\n\n|Error code of the most recent error that\ncaused the SQL thread to stop (also recorded in the replica's error log). 0 means no\nerror. RESET SLAVE or RESET MASTER will reset this value.\n\n|\n\n|\n|Last_SQL_Error\n\n|Error message of the most recent error\nthat caused the SQL thread to stop (also recorded in the replica's error log). An\nempty string means no error. RESET SLAVE or RESET MASTER will reset this value.\n\n|\n\n|\n|Replicate_Ignore_Server_Ids\n\n|List of server_ids that are currently\nbeing ignored for replication purposes, or an empty string for none, as specified in\nthe IGNORE_SERVER_IDS option of the CHANGE MASTER TO statement.\n\n|\n\n|\n|Master_Server_Id\n\n|The master's server_id value.\n\n|\n\n|\n|Master_SSL_Crl\n\n|The MASTER_SSL_CRL option of the CHANGE\nMASTER TO statement.\n\n|\n\n|\n|Master_SSL_Crlpath\n\n|The MASTER_SSL_CRLPATH option of the\nCHANGE MASTER TO statement.\n\n|\n\n|\n|Using_Gtid\n\n|Whether or not global transaction ID's\nare being used for replication (can be No, Slave_Pos, or Current_Pos).\n\n|\n\n|\n|Gtid_IO_Pos\n\n|Current global transaction ID value.\n\n|\n\n|\n|Retried_transactions\n\n|Number of retried transactions for this\nconnection. Returned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|Max_relay_log_size\n\n|Max relay log size for this connection.\n\nReturned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|Executed_log_entries\n\n|How many log entries the replica has\nexecuted. Returned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|Slave_received_heartbeats\n\n|How many heartbeats we have got from the\nmaster. Returned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|Slave_heartbeat_period\n\n|How often to request a heartbeat packet\nfrom the master (in seconds). Returned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|Gtid_Slave_Pos\n\n|GTID of the last event group replicated\non a replica server, for each replication domain, as stored in the gtid_slave_pos\nsystem variable. Returned with SHOW ALL SLAVES STATUS only.\n\n|\n\n|\n|SQL_Delay\n\n|Value specified by MASTER_DELAY in\nCHANGE MASTER (or 0 if none).\n\n|MariaDB 10.2.3\n\n|\n|SQL_Remaining_Delay\n\n|When the replica is delaying the\nexecution of an event due to MASTER_DELAY, this is the number of seconds of delay\nremaining before the event will be applied. Otherwise, the value is NULL.\n\n|MariaDB 10.2.3\n\n|\n|Slave_SQL_Running_State\n\n|The state of the SQL driver threads,\nsame as in SHOW PROCESSLIST. When the replica is delaying the execution of an event\ndue to MASTER_DELAY, this field displays: "Waiting until MASTER_DELAY seconds after\nmaster executed event".\n\n|MariaDB 10.2.3\n\n|\n|Slave_DDL_Groups\n\n|This status variable counts the\noccurrence of DDL statements.  This is a replica-side counter for optimistic parallel\nreplication.\n\n|MariaDB 10.3.7\n\n|\n|Slave_Non_Transactional_Groups\n\n|This status variable counts the\noccurrence of non-transactional event groups.  This is a replica-side counter for\noptimistic parallel replication.\n\n|MariaDB 10.3.7\n\n|\n|Slave_Transactional_Groups\n\n|This status variable counts the\noccurrence of transactional event groups.  This is a replica-side counter for\noptimistic parallel replication.\n\n|MariaDB 10.3.7\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------------------+----------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--+----------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------+\n\nSHOW REPLICA STATUS\n\nExamples\n--------\nIf you issue this statement using the mysql client,\nyou can use a \G statement terminator rather than a semicolon to\nobtain a more readable vertical layout.\n\nSHOW SLAVE STATUS\G\n*************************** 1. row ***************************\n       Slave_IO_State: Waiting for master to send event\n         Master_Host: db01.example.com\n         Master_User: replicant\n         Master_Port: 3306\n        Connect_Retry: 60\n       Master_Log_File: mariadb-bin.000010\n     Read_Master_Log_Pos: 548\n       Relay_Log_File: relay-bin.000004\n        Relay_Log_Pos: 837\n    Relay_Master_Log_File: mariadb-bin.000010\n      Slave_IO_Running: Yes\n      Slave_SQL_Running: Yes\n       Replicate_Do_DB:\n     Replicate_Ignore_DB:\n     Replicate_Do_Table:\n   Replicate_Ignore_Table:\n   Replicate_Wild_Do_Table:\n Replicate_Wild_Ignore_Table:\n         Last_Errno: 0\n         Last_Error:\n        Skip_Counter: 0\n     Exec_Master_Log_Pos: 548\n       Relay_Log_Space: 1497\n       Until_Condition: None\n       Until_Log_File:\n        Until_Log_Pos: 0\n     Master_SSL_Allowed: No\n     Master_SSL_CA_File:\n     Master_SSL_CA_Path:\n       Master_SSL_Cert:\n      Master_SSL_Cipher:\n       Master_SSL_Key:\n    Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n        Last_IO_Errno: 0\n        Last_IO_Error:\n       Last_SQL_Errno: 0\n       Last_SQL_Error:\n Replicate_Ignore_Server_Ids:\n      Master_Server_Id: 101\n       Master_SSL_Crl:\n     Master_SSL_Crlpath:\n         Using_Gtid: No\n         Gtid_IO_Pos:\n\nSHOW ALL SLAVES STATUS\G\n*************************** 1. row ***************************\n       Connection_name:\n       Slave_SQL_State: Slave has read all relay log; waiting for the slave\nI/O thread to update it\n       Slave_IO_State: Waiting for master to send event\n         Master_Host: db01.example.com\n         Master_User: replicant\n         Master_Port: 3306\n        Connect_Retry: 60\n       Master_Log_File: mariadb-bin.000010\n     Read_Master_Log_Pos: 3608\n       Relay_Log_File: relay-bin.000004\n        Relay_Log_Pos: 3897\n    Relay_Master_Log_File: mariadb-bin.000010\n      Slave_IO_Running: Yes\n      Slave_SQL_Running: Yes\n       Replicate_Do_DB:\n     Replicate_Ignore_DB:\n     Replicate_Do_Table:\n   Replicate_Ignore_Table:\n   Replicate_Wild_Do_Table:\n Replicate_Wild_Ignore_Table:\n         Last_Errno: 0\n         Last_Error:\n        Skip_Counter: 0\n     Exec_Master_Log_Pos: 3608\n       Relay_Log_Space: 4557\n       Until_Condition: None\n       Until_Log_File:\n        Until_Log_Pos: 0\n     Master_SSL_Allowed: No\n     Master_SSL_CA_File:\n     Master_SSL_CA_Path:\n       Master_SSL_Cert:\n      Master_SSL_Cipher:\n       Master_SSL_Key:\n    Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n        Last_IO_Errno: 0\n        Last_IO_Error:\n       Last_SQL_Errno: 0\n       Last_SQL_Error:\n Replicate_Ignore_Server_Ids:\n      Master_Server_Id: 101\n       Master_SSL_Crl:\n     Master_SSL_Crlpath:\n         Using_Gtid: No\n         Gtid_IO_Pos:\n    Retried_transactions: 0\n     Max_relay_log_size: 104857600\n    Executed_log_entries: 40\n  Slave_received_heartbeats: 11\n   Slave_heartbeat_period: 1800.000\n       Gtid_Slave_Pos: 0-101-2320\n\nYou can also access some of the variables directly from status variables:\nSET @@default_master_connection="test" ;\nshow status like "%slave%"\n\nVariable_name   Value\nCom_show_slave_hosts    0\nCom_show_slave_status   0\nCom_start_all_slaves    0\nCom_start_slave 0\nCom_stop_all_slaves     0\nCom_stop_slave  0\nRpl_semi_sync_slave_status      OFF\nSlave_connections       0\nSlave_heartbeat_period  1800.000\nSlave_open_temp_tables  0\nSlave_received_heartbeats       0\nSlave_retried_transactions      0\nSlave_running   OFF\nSlaves_connected        0\nSlaves_running  1\n','','https://mariadb.com/kb/en/library/show-slave-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (396,26,'SHOW STATUS','Syntax\n------\nSHOW [GLOBAL | SESSION] STATUS\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nSHOW STATUS provides server status information. This\ninformation also can be obtained using the mysqladmin extended-status command, or by\nquerying the Information Schema GLOBAL_STATUS and SESSION_STATUS tables.\n\nThe LIKE clause, if present, indicates which variable names\nto match. The WHERE clause can be given to select rows using\nmore general conditions.\n\nWith the GLOBAL modifier, SHOW STATUS\ndisplays the status values for all connections to MariaDB. With\nSESSION, it displays the status values\nfor the current connection. If no modifier is present, the default is\n SESSION. LOCAL is a synonym for\n SESSION. If you see a lot of 0 values, the reason is probably that you have used\nSHOW STATUS with a new connection instead of SHOW GLOBAL STATUS.\n\nSome status variables have only a global value. For these, you get the\nsame value for both GLOBAL and SESSION.\n\nSee Server Status Variables for a full list, scope and description of the variables\nthat can be viewed with SHOW STATUS.\n\nThe LIKE clause, if present on its own, indicates which variable name to match.\n\nThe WHERE and LIKE clauses can be given to select rows using more general conditions,\nas discussed in Extended SHOW.\n\nExamples\n--------\nFull output from MariaDB 10.1.17:\nSHOW GLOBAL STATUS;\n+--------------------------------------------------------------+---------------------\n------------------+\n| Variable_name                                                | Value               \n         |\n+--------------------------------------------------------------+---------------------\n------------------+\n| Aborted_clients                                              | 0                   \n         |\n| Aborted_connects                                             | 0                   \n         |\n| Access_denied_errors                                         | 0                   \n         |\n| Acl_column_grants                                            | 0                   \n         |\n| Acl_database_grants                                          | 2                   \n         |\n| Acl_function_grants                                          | 0                   \n         |\n| Acl_procedure_grants                                         | 0                   \n         |\n| Acl_proxy_users                                              | 2                   \n         |\n| Acl_role_grants                                              | 0                   \n         |\n| Acl_roles                                                    | 0                   \n         |\n| Acl_table_grants                                             | 0                   \n         |\n| Acl_users                                                    | 6                   \n         |\n| Aria_pagecache_blocks_not_flushed                            | 0                   \n         |\n| Aria_pagecache_blocks_unused                                 | 15706               \n         |\n| Aria_pagecache_blocks_used                                   | 0                   \n         |\n| Aria_pagecache_read_requests                                 | 0                   \n         |\n| Aria_pagecache_reads                                         | 0                   \n         |\n| Aria_pagecache_write_requests                                | 0                   \n         |\n| Aria_pagecache_writes                                        | 0                   \n         |\n| Aria_transaction_log_syncs                                   | 0                   \n         |\n| Binlog_commits                                               | 0                   \n         |\n| Binlog_group_commits                                         | 0                   \n         |\n| Binlog_group_commit_trigger_count                            | 0                   \n         |\n| Binlog_group_commit_trigger_lock_wait                        | 0                   \n         |\n| Binlog_group_commit_trigger_timeout                          | 0                   \n         |\n| Binlog_snapshot_file                                         |                     \n         |\n| Binlog_snapshot_position                                     | 0                   \n         |\n| Binlog_bytes_written                                         | 0                   \n         |\n| Binlog_cache_disk_use                                        | 0                   \n         |\n| Binlog_cache_use                                             | 0                   \n         |\n| Binlog_stmt_cache_disk_use                                   | 0                   \n         |\n| Binlog_stmt_cache_use                                        | 0                   \n         |\n| Busy_time                                                    | 0.000000            \n         |\n| Bytes_received                                               | 432                 \n         |\n| Bytes_sent                                                   | 15183               \n         |\n| Com_admin_commands                                           | 1                   \n         |\n| Com_alter_db                                                 | 0                   \n         |\n| Com_alter_db_upgrade                                         | 0                   \n         |\n| Com_alter_event                                              | 0                   \n         |\n| Com_alter_function                                           | 0                   \n         |\n| Com_alter_procedure                                          | 0                   \n         |\n| Com_alter_server                                             | 0                   \n         |\n| Com_alter_table                                              | 0                   \n         |\n| Com_alter_tablespace                                         | 0                   \n         |\n| Com_analyze                                                  | 0                   \n         |\n| Com_assign_to_keycache                                       | 0                   \n         |\n| Com_begin                                                    | 0                   \n         |\n| Com_binlog                                                   | 0                   \n         |\n| Com_call_procedure                                           | 0                   \n         |\n| Com_change_db                                                | 0                   \n         |\n| Com_change_master                                            | 0                   \n         |\n| Com_check                                                    | 0                   \n         |\n| Com_checksum                                                 | 0                   \n         |\n| Com_commit                                                   | 0                   \n         |\n| Com_compound_sql                                             | 0                   \n         |\n| Com_create_db                                                | 0                   \n         |\n| Com_create_event                                             | 0                   \n         |\n| Com_create_function                                          | 0                   \n         |\n| Com_create_index                                             | 0                   \n         |\n| Com_create_procedure                                         | 0                   \n         |\n| Com_create_role                                              | 0                   \n         |\n| Com_create_server                                            | 0                   \n         |\n| Com_create_table                                             | 0                   \n         |\n| Com_create_temporary_table                                   | 0                   \n         |\n| Com_create_trigger                                           | 0                   \n         |\n| Com_create_udf                                               | 0                   \n         |\n| Com_create_user                                              | 0                   \n         |\n| Com_create_view                                              | 0                   \n         |\n| Com_dealloc_sql                                              | 0                   \n         |\n| Com_delete                                                   | 0                   \n         |\n| Com_delete_multi                                             | 0                   \n         |\n| Com_do                                                       | 0                   \n         |\n| Com_drop_db                                                  | 0                   \n         |\n| Com_drop_event                                               | 0                   \n         |\n| Com_drop_function                                            | 0                   \n         |\n| Com_drop_index                                               | 0                   \n         |\n| Com_drop_procedure                                           | 0                   \n         |\n| Com_drop_role                                                | 0                   \n         |\n| Com_drop_server                                              | 0                   \n         |\n| Com_drop_table                                               | 0                   \n         |\n| Com_drop_temporary_table                                     | 0                   \n         |\n| Com_drop_trigger                                             | 0                   \n         |\n| Com_drop_user                                                | 0                   \n         |\n| Com_drop_view                                                | 0                   \n         |\n| Com_empty_query                                              | 0                   \n         |\n| Com_execute_sql                                              | 0                   \n         |\n| Com_flush                                                    | 0                   \n         |\n| Com_get_diagnostics                                          | 0                   \n         |\n| Com_grant                                                    | 0                   \n         |\n| Com_grant_role                                               | 0                   \n         |\n| Com_ha_close                                                 | 0                   \n         |\n| Com_ha_open                                                  | 0                   \n         |\n| Com_ha_read                                                  | 0                   \n         |\n| Com_help                                                     | 0                   \n         |\n| Com_insert                                                   | 0                   \n         |\n| Com_insert_select                                            | 0                   \n         |\n| Com_install_plugin                                           | 0                   \n         |\n| Com_kill                                                     | 0                   \n         |\n| Com_load                                                     | 0                   \n         |\n| Com_lock_tables                                              | 0                   \n         |\n| Com_optimize                                                 | 0                   \n         |\n| Com_preload_keys                                             | 0                   \n         |\n| Com_prepare_sql                                              | 0                   \n         |\n| Com_purge                                                    | 0                   \n         |\n| Com_purge_before_date                                        | 0                   \n         |\n| Com_release_savepoint                                        | 0                   \n         |\n| Com_rename_table                                             | 0                   \n         |\n| Com_rename_user                                              | 0                   \n         |\n| Com_repair                                                   | 0                   \n         |\n| Com_replace                                                  | 0                   \n         |\n| Com_replace_select                                           | 0                   \n         |\n| Com_reset                                                    | 0                   \n         |\n| Com_resignal                                                 | 0                   \n         |\n| Com_revoke                                                   | 0                   \n         |\n| Com_revoke_all                                               | 0                   \n         |\n| Com_revoke_role                                              | 0                   \n         |\n| Com_rollback                                                 | 0                   \n         |\n| Com_rollback_to_savepoint                                    | 0                   \n         |\n| Com_savepoint                                                | 0                   \n         |\n| Com_select                                                   | 1                   \n         |\n| Com_set_option                                               | 0                   \n         |\n| Com_show_authors                                             | 0                   \n         |\n| Com_show_binlog_events                                       | 0                   \n         |\n| Com_show_binlogs                                             | 0                   \n         |\n| Com_show_charsets                                            | 0                   \n         |\n| Com_show_collations                                          | 0                   \n         |\n| Com_show_contributors                                        | 0                   \n         |\n| Com_show_create_db                                           | 0                   \n         |\n| Com_show_create_event                                        | 0                   \n         |\n| Com_show_create_func                                         | 0                   \n         |\n| Com_show_create_proc                                         | 0                   \n         |\n| Com_show_create_table                                        | 0                   \n         |\n| Com_show_create_trigger                                      | 0                   \n         |\n| Com_show_databases                                           | 0                   \n         |\n| Com_show_engine_logs                                         | 0                   \n         |\n| Com_show_engine_mutex                                        | 0                   \n         |\n| Com_show_engine_status                                       | 0                   \n         |\n| Com_show_errors                                              | 0                   \n         |\n| Com_show_events                                              | 0                   \n         |\n| Com_show_explain                                             | 0                   \n         |\n| Com_show_fields                                              | 0                   \n         |\n| Com_show_function_status                                     | 0                   \n         |\n| Com_show_generic                                             | 0                   \n         |\n| Com_show_grants                                              | 0                   \n         |\n| Com_show_keys                                                | 0                   \n         |\n| Com_show_master_status                                       | 0                   \n         |\n| Com_show_open_tables                                         | 0                   \n         |\n| Com_show_plugins                                             | 0                   \n         |\n| Com_show_privileges                                          | 0                   \n         |\n| Com_show_procedure_status                                    | 0                   \n         |\n| Com_show_processlist                                         | 0                   \n         |\n| Com_show_profile                                             | 0                   \n         |\n| Com_show_profiles                                            | 0                   \n         |\n| Com_show_relaylog_events                                     | 0                   \n         |\n| Com_show_slave_hosts                                         | 0                   \n         |\n| Com_show_slave_status                                        | 0                   \n         |\n| Com_show_status                                              | 2                   \n         |\n| Com_show_storage_engines                                     | 0                   \n         |\n| Com_show_table_status                                        | 0                   \n         |\n| Com_show_tables                                              | 0                   \n         |\n| Com_show_triggers                                            | 0                   \n         |\n| Com_show_variables                                           | 0                   \n         |\n| Com_show_warnings                                            | 0                   \n         |\n| Com_shutdown                                                 | 0                   \n         |\n| Com_signal                                                   | 0                   \n         |\n| Com_start_all_slaves                                         | 0                   \n         |\n| Com_start_slave                                              | 0                   \n         |\n| Com_stmt_close                                               | 0                   \n         |\n| Com_stmt_execute                                             | 0                   \n         |\n| Com_stmt_fetch                                               | 0                   \n         |\n| Com_stmt_prepare                                             | 0                   \n         |\n| Com_stmt_reprepare                                           | 0                   \n         |\n| Com_stmt_reset                                               | 0                   \n         |\n| Com_stmt_send_long_data                                      | 0                   \n         |\n| Com_stop_all_slaves                                          | 0                   \n         |\n| Com_stop_slave                                               | 0                   \n         |\n| Com_truncate                                                 | 0                   \n         |\n| Com_uninstall_plugin                                         | 0                   \n         |\n| Com_unlock_tables                                            | 0                   \n         |\n| Com_update                                                   | 0                   \n         |\n| Com_update_multi                                             | 0                   \n         |\n| Com_xa_commit                                                | 0                   \n         |\n| Com_xa_end                                                   | 0                   \n         |\n| Com_xa_prepare                                               | 0                   \n         |\n| Com_xa_recover                                               | 0                   \n         |\n| Com_xa_rollback                                              | 0                   \n         |\n| Com_xa_start                                                 | 0                   \n         |\n| Compression                                                  | OFF                 \n         |\n| Connection_errors_accept                                     | 0                   \n         |\n| Connection_errors_internal                                   | 0                   \n         |\n| Connection_errors_max_connections                            | 0                   \n         |\n| Connection_errors_peer_address                               | 0                   \n         |\n| Connection_errors_select                                     | 0                   \n         |\n| Connection_errors_tcpwrap                                    | 0                   \n         |\n| Connections                                                  | 4                   \n         |\n| Cpu_time                                                     | 0.000000            \n         |\n| Created_tmp_disk_tables                                      | 0                   \n         |\n| Created_tmp_files                                            | 6                   \n         |\n| Created_tmp_tables                                           | 2                   \n         |\n| Delayed_errors                                               | 0                   \n         |\n| Delayed_insert_threads                                       | 0                   \n         |\n| Delayed_writes                                               | 0                   \n         |\n| Delete_scan                                                  | 0                   \n         |\n| Empty_queries                                                | 0                   \n         |\n| Executed_events                                              | 0                   \n         |\n| Executed_triggers                                            | 0                   \n         |\n| Feature_delay_key_write                                      | 0                   \n         |\n| Feature_dynamic_columns                                      | 0                   \n         |\n| Feature_fulltext                                             | 0                   \n         |\n| Feature_gis                                                  | 0                   \n         |\n| Feature_locale                                               | 0                   \n         |\n| Feature_subquery                                             | 0                   \n         |\n| Feature_timezone                                             | 0                   \n         |\n| Feature_trigger                                              | 0                   \n         |\n| Feature_xml                                                  | 0                   \n         |\n| Flush_commands                                               | 1                   \n         |\n| Handler_commit                                               | 1                   \n         |\n| Handler_delete                                               | 0                   \n         |\n| Handler_discover                                             | 0                   \n         |\n| Handler_external_lock                                        | 0                   \n         |\n| Handler_icp_attempts                                         | 0                   \n         |\n| Handler_icp_match                                            | 0                   \n         |\n| Handler_mrr_init                                             | 0                   \n         |\n| Handler_mrr_key_refills                                      | 0                   \n         |\n| Handler_mrr_rowid_refills                                    | 0                   \n         |\n| Handler_prepare                                              | 0                   \n         |\n| Handler_read_first                                           | 3                   \n         |\n| Handler_read_key                                             | 0                   \n         |\n| Handler_read_last                                            | 0                   \n         |\n| Handler_read_next                                            | 0                   \n         |\n| Handler_read_prev                                            | 0                   \n         |\n| Handler_read_retry                                           | 0                   \n         |\n| Handler_read_rnd                                             | 0                   \n         |\n| Handler_read_rnd_deleted                                     | 0                   \n         |\n| Handler_read_rnd_next                                        | 537                 \n         |\n| Handler_rollback                                             | 0                   \n         |\n| Handler_savepoint                                            | 0                   \n         |\n| Handler_savepoint_rollback                                   | 0                   \n         |\n| Handler_tmp_update                                           | 0                   \n         |\n| Handler_tmp_write                                            | 516                 \n         |\n| Handler_update                                               | 0                   \n         |\n| Handler_write                                                | 0                   \n         |\n| Innodb_available_undo_logs                                   | 128                 \n         |\n| Innodb_background_log_sync                                   | 222                 \n         |\n| Innodb_buffer_pool_bytes_data                                | 2523136             \n         |\n| Innodb_buffer_pool_bytes_dirty                               | 0                   \n         |\n| Innodb_buffer_pool_dump_status                               | Dumping buffer\npool(s) not yet started |\n| Innodb_buffer_pool_load_status                               | Loading buffer\npool(s) not yet started |\n| Innodb_buffer_pool_pages_data                                | 154                 \n         |\n| Innodb_buffer_pool_pages_dirty                               | 0                   \n         |\n| Innodb_buffer_pool_pages_flushed                             | 1                   \n         |\n| Innodb_buffer_pool_pages_free                                | 8037                \n         |\n| Innodb_buffer_pool_pages_lru_flushed                         | 0                   \n         |\n| Innodb_buffer_pool_pages_made_not_young                      | 0                   \n         |\n| Innodb_buffer_pool_pages_made_young                          | 0                   \n         |\n| Innodb_buffer_pool_pages_misc                                | 0                   \n         |\n| Innodb_buffer_pool_pages_old                                 | 0                   \n         |\n| Innodb_buffer_pool_pages_total                               | 8191                \n         |\n| Innodb_buffer_pool_read_ahead                                | 0                   \n         |\n| Innodb_buffer_pool_read_ahead_evicted                        | 0                   \n         |\n| Innodb_buffer_pool_read_ahead_rnd                            | 0                   \n         |\n| Innodb_buffer_pool_read_requests                             | 558                 \n         |\n| Innodb_buffer_pool_reads                                     | 155                 \n         |\n| Innodb_buffer_pool_wait_free                                 | 0                   \n         |\n| Innodb_buffer_pool_write_requests                            | 1                   \n         |\n| Innodb_checkpoint_age                                        | 0                   \n         |\n| Innodb_checkpoint_max_age                                    | 80826164            \n         |\n| Innodb_data_fsyncs                                           | 5                   \n         |\n| Innodb_data_pending_fsyncs                                   | 0                   \n         |\n| Innodb_data_pending_reads                                    | 0                   \n         |\n| Innodb_data_pending_writes                                   | 0                   \n         |\n| Innodb_data_read                                             | 2609664             \n         |\n| Innodb_data_reads                                            | 172                 \n         |\n| Innodb_data_writes                                           | 5                   \n         |\n| Innodb_data_written                                          | 34304               \n         |\n| Innodb_dblwr_pages_written                                   | 1                   \n         |\n| Innodb_dblwr_writes                                          | 1                   \n         |\n| Innodb_deadlocks                                             | 0                   \n         |\n| Innodb_have_atomic_builtins                                  | ON                  \n         |\n| Innodb_history_list_length                                   | 0                   \n         |\n| Innodb_ibuf_discarded_delete_marks                           | 0                   \n         |\n| Innodb_ibuf_discarded_deletes                                | 0                   \n         |\n| Innodb_ibuf_discarded_inserts                                | 0                   \n         |\n| Innodb_ibuf_free_list                                        | 0                   \n         |\n| Innodb_ibuf_merged_delete_marks                              | 0                   \n         |\n| Innodb_ibuf_merged_deletes                                   | 0                   \n         |\n| Innodb_ibuf_merged_inserts                                   | 0                   \n         |\n| Innodb_ibuf_merges                                           | 0                   \n         |\n| Innodb_ibuf_segment_size                                     | 2                   \n         |\n| Innodb_ibuf_size                                             | 1                   \n         |\n| Innodb_log_waits                                             | 0                   \n         |\n| Innodb_log_write_requests                                    | 0                   \n         |\n| Innodb_log_writes                                            | 1                   \n         |\n| Innodb_lsn_current                                           | 1616829             \n         |\n| Innodb_lsn_flushed                                           | 1616829             \n         |\n| Innodb_lsn_last_checkpoint                                   | 1616829             \n         |\n| Innodb_master_thread_active_loops                            | 0                   \n         |\n| Innodb_master_thread_idle_loops                              | 222                 \n         |\n| Innodb_max_trx_id                                            | 2308                \n         |\n| Innodb_mem_adaptive_hash                                     | 2217568             \n         |\n| Innodb_mem_dictionary                                        | 630703              \n         |\n| Innodb_mem_total                                             | 140771328           \n         |\n| Innodb_mutex_os_waits                                        | 1                   \n         |\n| Innodb_mutex_spin_rounds                                     | 30                  \n         |\n| Innodb_mutex_spin_waits                                      | 1                   \n         |\n| Innodb_oldest_view_low_limit_trx_id                          | 0                   \n         |\n| Innodb_os_log_fsyncs                                         | 3                   \n         |\n| Innodb_os_log_pending_fsyncs                                 | 0                   \n         |\n| Innodb_os_log_pending_writes                                 | 0                   \n         |\n| Innodb_os_log_written                                        | 512                 \n         |\n| Innodb_page_size                                             | 16384               \n         |\n| Innodb_pages_created                                         | 0                   \n         |\n| Innodb_pages_read                                            | 154                 \n         |\n| Innodb_pages_written                                         | 1                   \n         |\n| Innodb_purge_trx_id                                          | 0                   \n         |\n| Innodb_purge_undo_no                                         | 0                   \n         |\n| Innodb_read_views_memory                                     | 88                  \n         |\n| Innodb_row_lock_current_waits                                | 0                   \n         |\n| Innodb_row_lock_time                                         | 0                   \n         |\n| Innodb_row_lock_time_avg                                     | 0                   \n         |\n| Innodb_row_lock_time_max                                     | 0                   \n         |\n| Innodb_row_lock_waits                                        | 0                   \n         |\n| Innodb_rows_deleted                                          | 0                   \n         |\n| Innodb_rows_inserted                                         | 0                   \n         |\n| Innodb_rows_read                                             | 0                   \n         |\n| Innodb_rows_updated                                          | 0                   \n         |\n| Innodb_system_rows_deleted                                   | 0                   \n         |\n| Innodb_system_rows_inserted                                  | 0                   \n         |\n| Innodb_system_rows_read                                      | 0                   \n         |\n| Innodb_system_rows_updated                                   | 0                   \n         |\n| Innodb_s_lock_os_waits                                       | 2                   \n         |\n| Innodb_s_lock_spin_rounds                                    | 60                  \n         |\n| Innodb_s_lock_spin_waits                                     | 2                   \n         |\n| Innodb_truncated_status_writes                               | 0                   \n         |\n| Innodb_x_lock_os_waits                                       | 0                   \n         |\n| Innodb_x_lock_spin_rounds                                    | 0                   \n         |\n| Innodb_x_lock_spin_waits                                     | 0                   \n         |\n| Innodb_page_compression_saved                                | 0                   \n         |\n| Innodb_page_compression_trim_sect512                         | 0                   \n         |\n| Innodb_page_compression_trim_sect1024                        | 0                   \n         |\n| Innodb_page_compression_trim_sect2048                        | 0                   \n         |\n| Innodb_page_compression_trim_sect4096                        | 0                   \n         |\n| Innodb_page_compression_trim_sect8192                        | 0                   \n         |\n| Innodb_page_compression_trim_sect16384                       | 0                   \n         |\n| Innodb_page_compression_trim_sect32768                       | 0                   \n         |\n| Innodb_num_index_pages_written                               | 0                   \n         |\n| Innodb_num_non_index_pages_written                           | 5                   \n         |\n| Innodb_num_pages_page_compressed                             | 0                   \n         |\n| Innodb_num_page_compressed_trim_op                           | 0                   \n         |\n| Innodb_num_page_compressed_trim_op_saved                     | 0                   \n         |\n| Innodb_num_pages_page_decompressed                           | 0                   \n         |\n| Innodb_num_pages_page_compression_error                      | 0                   \n         |\n| Innodb_num_pages_encrypted                                   | 0                   \n         |\n| Innodb_num_pages_decrypted                                   | 0                   \n         |\n| Innodb_have_lz4                                              | OFF                 \n         |\n| Innodb_have_lzo                                              | OFF                 \n         |\n| Innodb_have_lzma                                             | OFF                 \n         |\n| Innodb_have_bzip2                                            | OFF                 \n         |\n| Innodb_have_snappy                                           | OFF                 \n         |\n| Innodb_defragment_compression_failures                       | 0                   \n         |\n| Innodb_defragment_failures                                   | 0                   \n         |\n| Innodb_defragment_count                                      | 0                   \n         |\n| Innodb_onlineddl_rowlog_rows                                 | 0                   \n         |\n| Innodb_onlineddl_rowlog_pct_used                             | 0                   \n         |\n| Innodb_onlineddl_pct_progress                                | 0                   \n         |\n| Innodb_secondary_index_triggered_cluster_reads               | 0                   \n         |\n| Innodb_secondary_index_triggered_cluster_reads_avoided       | 0                   \n         |\n| Innodb_encryption_rotation_pages_read_from_cache             | 0                   \n         |\n| Innodb_encryption_rotation_pages_read_from_disk              | 0                   \n         |\n| Innodb_encryption_rotation_pages_modified                    | 0                   \n         |\n| Innodb_encryption_rotation_pages_flushed                     | 0                   \n         |\n| Innodb_encryption_rotation_estimated_iops                    | 0                   \n         |\n| Innodb_scrub_background_page_reorganizations                 | 0                   \n         |\n| Innodb_scrub_background_page_splits                          | 0                   \n         |\n| Innodb_scrub_background_page_split_failures_underflow        | 0                   \n         |\n| Innodb_scrub_background_page_split_failures_out_of_filespace | 0                   \n         |\n| Innodb_scrub_background_page_split_failures_missing_index    | 0                   \n         |\n| Innodb_scrub_background_page_split_failures_unknown          | 0                   \n         |\n| Key_blocks_not_flushed                                       | 0                   \n         |\n| Key_blocks_unused                                            | 107163              \n         |\n| Key_blocks_used                                              | 0                   \n         |\n| Key_blocks_warm                                              | 0                   \n         |\n| Key_read_requests                                            | 0                   \n         |\n| Key_reads                                                    | 0                   \n         |\n| Key_write_requests                                           | 0                   \n         |\n| Key_writes                                                   | 0                   \n         |\n| Last_query_cost                                              | 0.000000            \n         |\n| Master_gtid_wait_count                                       | 0                   \n         |\n| Master_gtid_wait_time                                        | 0                   \n         |\n| Master_gtid_wait_timeouts                                    | 0                   \n         |\n| Max_statement_time_exceeded                                  | 0                   \n         |\n| Max_used_connections                                         | 1                   \n         |\n| Memory_used                                                  | 273614696           \n         |\n| Not_flushed_delayed_rows                                     | 0                   \n         |\n| Open_files                                                   | 25                  \n         |\n| Open_streams                                                 | 0                   \n         |\n| Open_table_definitions                                       | 18                  \n         |\n| Open_tables                                                  | 11                  \n         |\n| Opened_files                                                 | 77                  \n         |\n| Opened_plugin_libraries                                      | 0                   \n         |\n| Opened_table_definitions                                     | 18                  \n         |\n| Opened_tables                                                | 18                  \n         |\n| Opened_views                                                 | 0                   \n         |\n| Performance_schema_accounts_lost                             | 0                   \n         |\n| Performance_schema_cond_classes_lost                         | 0                   \n         |\n| Performance_schema_cond_instances_lost                       | 0                   \n         |\n| Performance_schema_digest_lost                               | 0                   \n         |\n| Performance_schema_file_classes_lost                         | 0                   \n         |\n| Performance_schema_file_handles_lost                         | 0                   \n         |\n| Performance_schema_file_instances_lost                       | 0                   \n         |\n| Performance_schema_hosts_lost                                | 0                   \n         |\n| Performance_schema_locker_lost                               | 0                   \n         |\n| Performance_schema_mutex_classes_lost                        | 0                   \n         |\n| Performance_schema_mutex_instances_lost                      | 0                   \n         |\n| Performance_schema_rwlock_classes_lost                       | 0                   \n         |\n| Performance_schema_rwlock_instances_lost                     | 0                   \n         |\n| Performance_schema_session_connect_attrs_lost                | 0                   \n         |\n| Performance_schema_socket_classes_lost                       | 0                   \n         |\n| Performance_schema_socket_instances_lost                     | 0                   \n         |\n| Performance_schema_stage_classes_lost                        | 0                   \n         |\n| Performance_schema_statement_classes_lost                    | 0                   \n         |\n| Performance_schema_table_handles_lost                        | 0                   \n         |\n| Performance_schema_table_instances_lost                      | 0                   \n         |\n| Performance_schema_thread_classes_lost                       | 0                   \n         |\n| Performance_schema_thread_instances_lost                     | 0                   \n         |\n| Performance_schema_users_lost                                | 0                   \n         |\n| Prepared_stmt_count                                          | 0                   \n         |\n| Qcache_free_blocks                                           | 1                   \n         |\n| Qcache_free_memory                                           | 1031336             \n         |\n| Qcache_hits                                                  | 0                   \n         |\n| Qcache_inserts                                               | 0                   \n         |\n| Qcache_lowmem_prunes                                         | 0                   \n         |\n| Qcache_not_cached                                            | 0                   \n         |\n| Qcache_queries_in_cache                                      | 0                   \n         |\n| Qcache_total_blocks                                          | 1                   \n         |\n| Queries                                                      | 4                   \n         |\n| Questions                                                    | 4                   \n         |\n| Rows_read                                                    | 10                  \n         |\n| Rows_sent                                                    | 517                 \n         |\n| Rows_tmp_read                                                | 516                 \n         |\n| Rpl_status                                                   | AUTH_MASTER         \n         |\n| Select_full_join                                             | 0                   \n         |\n| Select_full_range_join                                       | 0                   \n         |\n| Select_range                                                 | 0                   \n         |\n| Select_range_check                                           | 0                   \n         |\n| Select_scan                                                  | 2                   \n         |\n| Slave_connections                                            | 0                   \n         |\n| Slave_heartbeat_period                                       | 0.000               \n         |\n| Slave_open_temp_tables                                       | 0                   \n         |\n| Slave_received_heartbeats                                    | 0                   \n         |\n| Slave_retried_transactions                                   | 0                   \n         |\n| Slave_running                                                | OFF                 \n         |\n| Slave_skipped_errors                                         | 0                   \n         |\n| Slaves_connected                                             | 0                   \n         |\n| Slaves_running                                               | 0                   \n         |\n| Slow_launch_threads                                          | 0                   \n         |\n| Slow_queries                                                 | 0                   \n         |\n| Sort_merge_passes                                            | 0                   \n         |\n| Sort_priority_queue_sorts                                    | 0                   \n         |\n| Sort_range                                                   | 0                   \n         |\n| Sort_rows                                                    | 0                   \n         |\n| Sort_scan                                                    | 0                   \n         |\n| Ssl_accept_renegotiates                                      | 0                   \n         |\n| Ssl_accepts                                                  | 0                   \n         |\n| Ssl_callback_cache_hits                                      | 0                   \n         |\n| Ssl_cipher                                                   |                     \n         |\n| Ssl_cipher_list                                              |                     \n         |\n| Ssl_client_connects                                          | 0                   \n         |\n| Ssl_connect_renegotiates                                     | 0                   \n         |\n| Ssl_ctx_verify_depth                                         | 0                   \n         |\n| Ssl_ctx_verify_mode                                          | 0                   \n         |\n| Ssl_default_timeout                                          | 0                   \n         |\n| Ssl_finished_accepts                                         | 0                   \n         |\n| Ssl_finished_connects                                        | 0                   \n         |\n| Ssl_server_not_after                                         |                     \n         |\n| Ssl_server_not_before                                        |                     \n         |\n| Ssl_session_cache_hits                                       | 0                   \n         |\n| Ssl_session_cache_misses                                     | 0                   \n         |\n| Ssl_session_cache_mode                                       | NONE                \n         |\n| Ssl_session_cache_overflows                                  | 0                   \n         |\n| Ssl_session_cache_size                                       | 0                   \n         |\n| Ssl_session_cache_timeouts                                   | 0                   \n         |\n| Ssl_sessions_reused                                          | 0                   \n         |\n| Ssl_used_session_cache_entries                               | 0                   \n         |\n| Ssl_verify_depth                                             | 0                   \n         |\n| Ssl_verify_mode                                              | 0                   \n         |\n| Ssl_version                                                  |                     \n         |\n| Subquery_cache_hit                                           | 0                   \n         |\n| Subquery_cache_miss                                          | 0                   \n         |\n| Syncs                                                        | 2                   \n         |\n| Table_locks_immediate                                        | 21                  \n         |\n| Table_locks_waited                                           | 0                   \n         |\n| Tc_log_max_pages_used                                        | 0                   \n         |\n| Tc_log_page_size                                             | 4096                \n         |\n| Tc_log_page_waits                                            | 0                   \n         |\n| Threadpool_idle_threads                                      | 0                   \n         |\n| Threadpool_threads                                           | 0                   \n         |\n| Threads_cached                                               | 0                   \n         |\n| Threads_connected                                            | 1                   \n         |\n| Threads_created                                              | 2                   \n         |\n| Threads_running                                              | 1                   \n         |\n| Update_scan                                                  | 0                   \n         |\n| Uptime                                                       | 223                 \n         |\n| Uptime_since_flush_status                                    | 223                 \n         |\n| wsrep_cluster_conf_id                                        | 18446744073709551615\n         |\n| wsrep_cluster_size                                           | 0                   \n         |\n| wsrep_cluster_state_uuid                                     |                     \n         |\n| wsrep_cluster_status                                         | Disconnected        \n         |\n| wsrep_connected                                              | OFF                 \n         |\n| wsrep_local_bf_aborts                                        | 0                   \n         |\n| wsrep_local_index                                            | 18446744073709551615\n         |\n| wsrep_provider_name                                          |                     \n         |\n| wsrep_provider_vendor                                        |                     \n         |\n| wsrep_provider_version                                       |                     \n         |\n| wsrep_ready                                                  | OFF                 \n         |\n| wsrep_thread_count                                           | 0                   \n         |\n+--------------------------------------------------------------+---------------------\n------------------+\n516 rows in set (0.00 sec)\n\nExample of filtered output:\nSHOW STATUS LIKE 'Key%';\n+------------------------+--------+\n| Variable_name          | Value  |\n+------------------------+--------+\n| Key_blocks_not_flushed | 0      |\n| Key_blocks_unused      | 107163 |\n| Key_blocks_used        | 0      |\n| Key_blocks_warm        | 0      |\n| Key_read_requests      | 0      |\n| Key_reads              | 0      |\n| Key_write_requests     | 0      |\n| Key_writes             | 0      |\n+------------------------+--------+\n8 rows in set (0.00 sec)\n','','https://mariadb.com/kb/en/library/show-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (397,26,'SHOW TABLE STATUS','Syntax\n------\nSHOW TABLE STATUS [{FROM | IN} db_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\n SHOW TABLE STATUS works like \n SHOW TABLES, but provides more extensive information about each non-TEMPORARY table.\n\nThe LIKE clause, if present on its own, indicates which table names to\nmatch. The WHERE and LIKE clauses can be given to select rows using more general\nconditions, as discussed in Extended SHOW.\n\nThe following information is returned:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------+\n|Column\n\n|Description\n\n|\n|Name\n\n|Table name.\n\n|\n|Engine\n\n|Table storage engine.\n\n|\n|Version\n\n|Version number from the table's .frm\nfile.\n\n|\n|Row_format\n\n|Row format (see InnoDB, Aria and\nMyISAM row formats).\n\n|\n|Rows\n\n|Number of rows in the table. Some\nengines, such as XtraDB and InnoDB may store an estimate.\n\n|\n|Avg_row_length\n\n|Average row length in the table.\n\n|\n|Data_length\n\n|For InnoDB/XtraDB, the index size,\nin pages, multiplied by the page size. For Aria and MyISAM, length of the data file,\nin bytes. For MEMORY, the approximate allocated memory.\n\n|\n|Max_data_length\n\n|Maximum length of the data file, ie\nthe total number of bytes that could be stored in the table. Not used in XtraDB and\nInnoDB.\n\n|\n|Index_length\n\n|Length of the index file.\n\n|\n|Data_free\n\n|Bytes allocated but unused. For\nInnoDB tables in a shared tablespace, the free space of the shared tablespace with\nsmall safety margin. An estimate in the case of partitioned tables - see the\nPARTITIONS table.\n\n|\n|Auto_increment\n\n|Next AUTO_INCREMENT value.\n\n|\n|Create_time\n\n|Time the table was created.\n\n|\n|Update_time\n\n|Time the table was last updated. On\nWindows, the timestamp is not updated on update, so MyISAM values will be inaccurate.\n\nIn InnoDB, if shared tablespaces are used, will be NULL, while buffering can also\ndelay the update, so the value will differ from the actual time of the last UPDATE,\nINSERT or DELETE.|\n|Check_time\n\n|Time the table was last checked. Not\nkept by all storage engines, in which case will be NULL.\n\n|\n|Collation\n\n|Character set and collation.\n\n|\n|Checksum\n\n|Live checksum value, if any.\n\n|\n|Create_options\n\n|Extra CREATE TABLE options.\n\n|\n|Comment\n\n|Table comment provided when MariaDB\ncreated the table.\n\n|\n|Max_index_length\n\n|Maximum index length (supported by\nMyISAM and Aria tables). Added in MariaDB 10.3.5.\n\n|\n|Temporary\n\n|Placeholder to signal that a table\nis a temporary table. Currently always "N", except "Y" for generated\ninformation_schema tables and NULL for views. Added in MariaDB 10.3.5.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------+\nSimilar information can be found in the information_schema.TABLES table as well as by\nusing mysqlshow:\nmysqlshow --status db_name\n\nViews\n-----\nFor views, all columns in SHOW TABLE STATUS are NULL except 'Name' and 'Comment'\n\nExample\n-------\nshow table status\G\n*************************** 1. row ***************************\n     Name: bus_routes\n    Engine: InnoDB\n    Version: 10\n  Row_format: Dynamic\n     Rows: 5\n Avg_row_length: 3276\n  Data_length: 16384\nMax_data_length: 0\n Index_length: 0\n   Data_free: 0\n Auto_increment: NULL\n  Create_time: 2017-05-24 11:17:46\n  Update_time: NULL\n  Check_time: NULL\n   Collation: latin1_swedish_ci\n   Checksum: NULL\n Create_options: \n    Comment:\n','','https://mariadb.com/kb/en/library/show-table-status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (398,26,'SHOW TABLES','Syntax\n------\nSHOW [FULL] TABLES [FROM db_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nSHOW TABLES lists the non-TEMPORARY tables, sequences and views in a given database.\n\nThe LIKE clause, if present on its own, indicates which table names to match. The\nWHERE and LIKE clauses can be given to select rows using more general conditions, as\ndiscussed in Extended SHOW. For example, when searching for tables in the test\ndatabase, the column name for use in the WHERE and LIKE clauses will\nbe Tables_in_test\nThe FULL modifier is supported such that SHOW FULL TABLES displays a second output\ncolumn. Values for the second column. Table_type, are BASE TABLE for a table, VIEW\nfor a view and SEQUENCE for a sequence.\n\nYou can also get this information using:\nmysqlshow db_name\n\nSee mysqlshow for more details.\n\nIf you have no privileges for a base table or view, it does not show up in the output\nfrom SHOW TABLES or mysqlshow db_name.\n\nThe information_schema.TABLES table, as well as the SHOW TABLE STATUS statement,\nprovide extended information about tables.\n\nExamples\n--------\nSHOW TABLES;\n+----------------------+\n| Tables_in_test       |\n+----------------------+\n| animal_count         |\n| animals              |\n| are_the_mooses_loose |\n| aria_test2           |\n| t1                   |\n| view1                |\n+----------------------+\n\nShowing the tables beginning with a only.\n\nSHOW TABLES WHERE Tables_in_test LIKE 'a%';\n+----------------------+\n| Tables_in_test       |\n+----------------------+\n| animal_count         |\n| animals              |\n| are_the_mooses_loose |\n| aria_test2           |\n+----------------------+\n\nShowing tables and table types:\nSHOW FULL TABLES;\n+----------------+------------+\n| Tables_in_test | Table_type |\n+----------------+------------+\n| s1             | SEQUENCE   |\n| student        | BASE TABLE |\n| v1             | VIEW       |\n+----------------+------------+\n','','https://mariadb.com/kb/en/library/show-tables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (399,26,'SHOW TABLE_STATISTICS','Syntax\n------\nSHOW TABLE_STATISTICS\n\nDescription\n-----------\nThe SHOW TABLE_STATISTICS statementis part of the User Statistics feature. It was\nremoved as a separate statement in MariaDB 10.1.1, but effectively replaced by the\ngeneric SHOW information_schema_table statement. The\ninformation_schema.TABLE_STATISTICS table shows statistics on table usage\nThe userstat system variable must be set to 1 to activate this feature. See the User\nStatistics and information_schema.TABLE_STATISTICS articles for more information.\n\nExample\n-------\nSHOW TABLE_STATISTICS\G\n*************************** 1. row ***************************\n     Table_schema: mysql\n      Table_name: proxies_priv\n       Rows_read: 2\n     Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 2. row ***************************\n     Table_schema: test\n      Table_name: employees_example\n       Rows_read: 7\n     Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 3. row ***************************\n     Table_schema: mysql\n      Table_name: user\n       Rows_read: 16\n     Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 4. row ***************************\n     Table_schema: mysql\n      Table_name: db\n       Rows_read: 2\n     Rows_changed: 0\nRows_changed_x_#indexes: 0\n','','https://mariadb.com/kb/en/library/show-table-statistics/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (400,26,'SHOW TRIGGERS','Syntax\n------\nSHOW TRIGGERS [FROM db_name]\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\n SHOW TRIGGERS lists the triggers currently defined for\ntables in a database (the default database unless a FROM\nclause is given).  This statement requires the\nTRIGGER privilege (prior to MySQL\n5.1.22, it required the SUPER privilege).\n\nThe LIKE clause, if present on its own, indicates which table names to\nmatch and causes the statement to display triggers for those tables. The WHERE and\nLIKE clauses can be given to select rows using more general conditions, as discussed\nin Extended SHOW.\n\nSimilar information is stored in the information_schema.TRIGGERS table.\n\nExamples\n--------\nFor the trigger defined at Trigger Overview:\nSHOW triggers Like 'animals' \G\n*************************** 1. row ***************************\n      Trigger: the_mooses_are_loose\n       Event: INSERT\n       Table: animals\n     Statement: BEGIN\n IF NEW.name = 'Moose' THEN\n UPDATE animal_count SET animal_count.animals = animal_count.animals+100;\n ELSE \n UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n END IF;\nEND\n       Timing: AFTER\n      Created: 2016-09-29 13:53:34.35\n      sql_mode:\n      Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n\nListing all triggers associated with a certain table:\nSHOW TRIGGERS FROM test WHERE `Table` = 'user' \G\n*************************** 1. row ***************************\n      Trigger: user_ai\n       Event: INSERT\n       Table: user\n     Statement: BEGIN END\n       Timing: AFTER\n      Created:  2016-09-29 13:53:34.35\n      sql_mode:\n      Definer: root@%\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n\nSHOW triggers WHERE Event Like 'Insert' \G\n*************************** 1. row ***************************\n      Trigger: the_mooses_are_loose\n       Event: INSERT\n       Table: animals\n     Statement: BEGIN\n IF NEW.name = 'Moose' THEN\n UPDATE animal_count SET animal_count.animals = animal_count.animals+100;\n ELSE \n UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n END IF;\nEND\n       Timing: AFTER\n      Created: 2016-09-29 13:53:34.35\n      sql_mode:\n      Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n\nThese columns were added in MariaDB/MySQL 5.1.21.\n\nOld triggers created before MySQL 5.7 and MariaDB 10.2.3 has NULL in the\nCreated column.\n','','https://mariadb.com/kb/en/library/show-triggers/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (401,26,'SHOW USER_STATISTICS','Syntax\n------\nSHOW USER_STATISTICS\n\nDescription\n-----------\nThe SHOW USER_STATISTICS statement is part of the User Statistics feature. It was\nremoved as a separate statement in MariaDB 10.1.1, but effectively replaced by the\ngeneric SHOW information_schema_table statement. The\ninformation_schema.USER_STATISTICS table holds statistics about user activity. You\ncan use this table to find out such things as which user is causing the most load and\nwhich users are being abusive. You can also use this table to measure how close to\ncapacity the server may be.\n\nThe userstat system variable must be set to 1 to activate this feature. See the User\nStatistics and information_schema.USER_STATISTICS table for more information.\n\nExample\n-------\nSHOW USER_STATISTICS\G\n*************************** 1. row ***************************\n         User: root\n  Total_connections: 1\nConcurrent_connections: 0\n    Connected_time: 3297\n      Busy_time: 0.14113400000000006\n       Cpu_time: 0.017637000000000003\n    Bytes_received: 969\n      Bytes_sent: 22355\n Binlog_bytes_written: 0\n      Rows_read: 10\n      Rows_sent: 67\n     Rows_deleted: 0\n    Rows_inserted: 0\n     Rows_updated: 0\n   Select_commands: 7\n   Update_commands: 0\n    Other_commands: 0\n Commit_transactions: 1\n Rollback_transactions: 0\n  Denied_connections: 0\n   Lost_connections: 0\n    Access_denied: 0\n    Empty_queries: 7\n','','https://mariadb.com/kb/en/library/show-user-statistics/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (402,26,'SHOW VARIABLES','Syntax\n------\nSHOW [GLOBAL | SESSION] VARIABLES\n  [LIKE 'pattern' | WHERE expr]\n\nDescription\n-----------\nSHOW VARIABLES shows the values of MariaDB system variables. This\ninformation also can be obtained using the mysqladmin variables\ncommand. The LIKE clause, if present, indicates which variable names\nto match. The WHERE clause can be given to select rows using more\ngeneral conditions.\n\nWith the GLOBAL modifier, SHOW VARIABLES displays the values that are\nused for new connections to MariaDB. With SESSION, it displays the\nvalues that are in effect for the current connection. If no modifier\nis present, the default is SESSION. LOCAL is a synonym for SESSION.\n\nWith a LIKE clause, the statement displays only rows for those\nvariables with names that match the pattern. To obtain the row for a\nspecific variable, use a LIKE clause as shown:\nSHOW VARIABLES LIKE 'maria_group_commit';\nSHOW SESSION VARIABLES LIKE 'maria_group_commit';\n\nTo get a list of variables whose name match a pattern, use the "%"\nwildcard character in a LIKE clause:\nSHOW VARIABLES LIKE '%maria%';\nSHOW GLOBAL VARIABLES LIKE '%maria%';\n\nWildcard characters can be used in any position within the pattern to\nbe matched. Strictly speaking, because "_" is a wildcard that matches\nany single character, you should escape it as "\_" to match it\nliterally. In practice, this is rarely necessary.\n\nThe WHERE and LIKE clauses can be given to select rows using more general conditions,\nas discussed in Extended SHOW.\n\nSee SET for information on setting server system variables.\n\nSee Server System Variables for a list of all the variables that can be set.\n\nYou can also see the server variables by querying the Information Schema\nGLOBAL_VARIABLES and SESSION_VARIABLES tables.\n\nExamples\n--------\nSHOW VARIABLES LIKE 'aria%';\n+------------------------------------------+---------------------+\n| Variable_name                            | Value               |\n+------------------------------------------+---------------------+\n| aria_block_size                          | 8192                |\n| aria_checkpoint_interval                 | 30                  |\n| aria_checkpoint_log_activity             | 1048576             |\n| aria_force_start_after_recovery_failures | 0                   |\n| aria_group_commit                        | none                |\n| aria_group_commit_interval               | 0                   |\n| aria_log_file_size                       | 1073741824          |\n| aria_log_purge_type                      | immediate           |\n| aria_max_sort_file_size                  | 9223372036853727232 |\n| aria_page_checksum                       | ON                  |\n| aria_pagecache_age_threshold             | 300                 |\n| aria_pagecache_buffer_size               | 134217728           |\n| aria_pagecache_division_limit            | 100                 |\n| aria_recover                             | NORMAL              |\n| aria_repair_threads                      | 1                   |\n| aria_sort_buffer_size                    | 134217728           |\n| aria_stats_method                        | nulls_unequal       |\n| aria_sync_log_dir                        | NEWFILE             |\n| aria_used_for_temp_tables                | ON                  |\n+------------------------------------------+---------------------+\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n VARIABLE_NAME LIKE 'max_error_count' OR\n VARIABLE_NAME LIKE 'innodb_sync_spin_loops';\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 64           |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSET GLOBAL max_error_count=128;\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n VARIABLE_NAME LIKE 'max_error_count' OR\n VARIABLE_NAME LIKE 'innodb_sync_spin_loops';\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 128          |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSET GLOBAL max_error_count=128;\n\nSHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 64    |\n+-----------------+-------+\n\nSHOW GLOBAL VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 128   |\n+-----------------+-------+\n\nBecause the following variable only has a global scope, the global value is returned\neven when specifying SESSION (in this case by default):\nSHOW VARIABLES LIKE 'innodb_sync_spin_loops';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 30    |\n+------------------------+-------+\n','','https://mariadb.com/kb/en/library/show-variables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (403,26,'SHOW WARNINGS','Syntax\n------\nSHOW WARNINGS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) WARNINGS\n\nDescription\n-----------\n SHOW WARNINGS shows the error, warning, and note messages\nthat resulted from the last statement that generated messages in the\ncurrent session.  It shows nothing if the last statement used a table\nand generated no messages. (That is, a statement that uses a table but\ngenerates no messages clears the message list.) Statements that do not\nuse tables and do not generate messages have no effect on the message\nlist.\n\nA note is different to a warning in that it only appears if the sql_notes variable is\nset to 1 (the default), and is not converted to an error if strict mode is enabled.\n\nA related statement, SHOW ERRORS, shows only the errors.\n\nThe SHOW COUNT(*) WARNINGS statement displays the total\nnumber of errors, warnings, and notes. You can also retrieve this number from\nthe warning_count variable:\nSHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;\n\nThe value of warning_count might be greater than the number of messages displayed by\nSHOW WARNINGS if the max_error_count system variable is set so low that not all\nmessages are stored.\n\nThe LIMIT clause has the same syntax as for the\n SELECT statement.\n\nSHOW WARNINGS can be used after EXPLAIN EXTENDED to see how a query is internally\nrewritten by MariaDB.\n\nIf the sql_notes server variable is set to 1, Notes are included in the output of\nSHOW WARNINGS; if it is set to 0, this statement will not show (or count) Notes.\n\nThe results of SHOW WARNINGS and SHOW COUNT(*) WARNINGS are directly sent to the\nclient. If you need to access those information in a stored program, you can use the\nGET DIAGNOSTICS statement instead.\n\nFor a list of MariaDB error codes, see MariaDB Error Codes.\n\nThe mysql client also has a number of options related to warnings.  The \W command\nwill show warnings after every statement, while \w will disable this. Starting the\nclient with the --show-warnings option will show warnings after every statement.\n\nMariaDB 10.3.1 implements a stored routine error stack trace. SHOW WARNINGS can also\nbe used to show more information. See the example below.\n\nExamples\n--------\nSELECT 1/0;\n+------+\n| 1/0  |\n+------+\n| NULL |\n+------+\n\nSHOW COUNT(*) WARNINGS;\n+-------------------------+\n| @@session.warning_count |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSHOW WARNINGS;\n+---------+------+---------------+\n| Level   | Code | Message       |\n+---------+------+---------------+\n| Warning | 1365 | Division by 0 |\n+---------+------+---------------+\n\nStack Trace\n\nFrom MariaDB 10.3.1, displaying a stack trace:\nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1()\n BEGIN\n  DECLARE c CURSOR FOR SELECT * FROM not_existing;\n  OPEN c;\n  CLOSE c;\n END;\n$$\nCREATE OR REPLACE PROCEDURE p2()\n BEGIN\n  CALL p1;\n END;\n$$\nDELIMITER ;\nCALL p2;\nERROR 1146 (42S02): Table 'test.not_existing' doesn't exist\n\nSHOW WARNINGS;\n+-------+------+-----------------------------------------+\n| Level | Code | Message                                 |\n+-------+------+-----------------------------------------+\n| Error | 1146 | Table 'test.not_existing' doesn't exist |\n| Note  | 4091 | At line 6 in test.p1                    |\n| Note  | 4091 | At line 4 in test.p2                    |\n+-------+------+-----------------------------------------+\n\nSHOW WARNINGS displays a stack trace, showing where the error actually happened:\n','','https://mariadb.com/kb/en/library/show-warnings/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (404,26,'SHOW WSREP_MEMBERSHIP','SHOW WSREP_MEMBERSHIP is part of the WSREP_INFO plugin.\n\nSyntax\n------\nSHOW WSREP_MEMBERSHIP\n\nDescription\n-----------\nThe SHOW WSREP_MEMBERSHIP statement returns Galera node cluster membership\ninformation. It returns the same information as found in the\ninformation_schema.WSREP_MEMBERSHIP table. Only users with the SUPER privilege can\naccess this information.\n\nExamples\n--------\nSHOW WSREP_MEMBERSHIP;\n+-------+--------------------------------------+----------+-----------------+\n| Index | Uuid                                 | Name     | Address         |\n+-------+--------------------------------------+----------+-----------------+\n|     0 | 19058073-8940-11e4-8570-16af7bf8fced | my_node1 | 10.0.2.15:16001 |\n|     1 | 19f2b0e0-8942-11e4-9cb8-b39e8ee0b5dd | my_node3 | 10.0.2.15:16003 |\n|     2 | d85e62db-8941-11e4-b1ef-4bc9980e476d | my_node2 | 10.0.2.15:16002 |\n+-------+--------------------------------------+----------+-----------------+\n','','https://mariadb.com/kb/en/library/show-wsrep_membership/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (405,26,'SHOW WSREP_STATUS','SHOW WSREP_STATUS is part of the WSREP_INFO plugin.\n\nSyntax\n------\nSHOW WSREP_STATUS\n\nDescription\n-----------\nThe SHOW WSREP_STATUS statement returns Galera node and cluster status information.\n\nIt returns the same information as found in the information_schema.WSREP_STATUS\ntable. Only users with the SUPER privilege can access this information.\n\nExamples\n--------\nSHOW WSREP_STATUS;\n+------------+-------------+----------------+--------------+\n| Node_Index | Node_Status | Cluster_Status | Cluster_Size |\n+------------+-------------+----------------+--------------+\n|          0 | Synced      | Primary        |            3 |\n+------------+-------------+----------------+--------------+\n','','https://mariadb.com/kb/en/library/show-wsrep_status/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (406,27,'CALL','Syntax\n------\nCALL sp_name([parameter[,...]])\nCALL sp_name[()]\n\nDescription\n-----------\nThe CALL statement invokes a stored procedure that was\ndefined previously with CREATE PROCEDURE.\n\nStored procedure names can be specified as database_name.procedure_name. Procedure\nnames and database names can be quoted with backticks (). This is necessary if they\nare reserved words, or contain special characters. See identifier qualifiers\nfor details.\n\nCALL p() and CALL p are equivalent.\n\nIf parentheses are used, any number of spaces, tab characters and newline characters\nare allowed between the procedure's name and the open parenthesis.\n\nCALL can pass back values to its caller using parameters\nthat are declared as OUT or INOUT\nparameters. If no value is assigned to an OUT parameter, NULL is assigned (and its\nformer value is lost). To pass such values from another stored program you can use\nuser-defined variables, local variables or routine's parameters; in other contexts,\nyou can only use user-defined variables.\n\nCALL can also be executed as a prepared statement. Placeholders can be used for IN\nparameters in all versions of MariaDB; for OUT and INOUT parameters, placeholders can\nbe used since MariaDB 5.5.\n\nWhen the procedure returns, a client program can also obtain the\nnumber of rows affected for the final statement executed within the routine: At\nthe SQL level, call the ROW_COUNT() function; from the C\nAPI, call the mysql_affected_rows() function.\n\nIf the CLIENT_MULTI_RESULTS API flag is set, CALL can return any number of resultsets\nand the called stored procedure can execute prepared statements. If it is not set, at\nmost one resultset can be returned and prepared statements cannot be used\nwithin procedures.\n','','https://mariadb.com/kb/en/library/call/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (407,27,'Concurrent Inserts','The MyISAM storage engine supports concurrent inserts. This feature allows SELECT\nstatements to be executed during INSERT operations, reducing contention.\n\nWhether concurrent inserts can be used or not depends on the value of the\nconcurrent_insert server system variable:\n\nIf the binary log is used, CREATE TABLE ... SELECT and INSERT ... SELECT statements\ncannot use concurrent inserts. These statements acquire a read lock on the table, so\nconcurrent inserts will need to wait. This way the log can be safely used to\nrestore data.\n\nConcurrent inserts are not used by replicas with the row based replication (see\nbinary log formats).\n\nIf an INSERT statement contain the HIGH_PRIORITY clause, concurrent inserts cannot be\nused. INSERT ... DELAYED is usually unneeded if concurrent inserts are enabled.\n\nLOAD DATA INFILE uses concurrent inserts if the CONCURRENT keyword is specified and \nconcurrent_insert is not NEVER. This makes the statement slower (even if no other\nsessions access the table) but reduces contention.\n\nLOCK TABLES allows non-conflicting concurrent inserts if a READ LOCAL lock is used.\n\nConcurrent inserts are not allowed if the LOCAL keyword is omitted.\n\nNotes\n-----\nThe decision to enable concurrent insert for a table  is done when the table is\nopened. If you change the value of concurrent_insert it will only affect new opened\ntables. If you want it to work for also for tables in use or cached, you should do\nFLUSH TABLES after setting the variable.\n','','https://mariadb.com/kb/en/library/concurrent-inserts/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (408,27,'DELETE','Syntax\n------\nSingle-table syntax:\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE] \n FROM tbl_name [PARTITION (partition_list)]\n [FOR PORTION OF period FROM expr1 TO expr2]\n [WHERE where_condition]\n [ORDER BY ...]\n [LIMIT row_count]\n [RETURNING select_expr\n  [, select_expr ...]]\n\nMultiple-table syntax:\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n  tbl_name[.*] [, tbl_name[.*]] ...\n  FROM table_references\n  [WHERE where_condition]\n\nOr:\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n  FROM tbl_name[.*] [, tbl_name[.*]] ...\n  USING table_references\n  [WHERE where_condition]\n\nTrimming history:\nDELETE HISTORY\n FROM tbl_name [PARTITION (partition_list)]\n [BEFORE SYSTEM_TIME [TIMESTAMP|TRANSACTION] expression]\n\nDescription\n-----------\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------+----------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------------------+\n|Option\n\n|Description\n\n|\n|LOW_PRIORITY\n\n|Wait until all SELECT's are done before starting the\nstatement. Used with storage engines that uses table locking (MyISAM, Aria etc). See\nHIGH_PRIORITY and LOW_PRIORITY clauses for details.\n\n|\n|QUICK\n\n|Signal the storage engine that it should expect that\na lot of rows are deleted. The storage engine engine can do things to speed up the\nDELETE like ignoring merging of data blocks until all rows are deleted from the block\n(instead of when a block is half full). This speeds up things at the expanse of lost\nspace in data blocks. At least MyISAM and Aria support this feature.|\n|IGNORE\n\n|Don't stop the query even if a not-critical error\noccurs (like data overflow). See How IGNORE works for a full description.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------------------------+----------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------------------------------+\nFor the single-table syntax, the DELETE statement deletes rows\nfrom tbl_name and returns a count of the number of deleted rows. This count can\nbe obtained by calling the ROW_COUNT() function. The\nWHERE clause, if given, specifies the conditions that identify\nwhich rows to delete. With no WHERE clause, all rows are\ndeleted. If the ORDER BY clause is specified, the rows are\ndeleted in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be deleted.\n\nFor the multiple-table syntax, DELETE deletes from each\ntbl_name the rows that satisfy the conditions. In this case,\nORDER BY and LIMIT> cannot be used. A DELETE can also reference tables which are\nlocated in different databases; see Identifier Qualifiers for the syntax.\n\nwhere_condition is an expression that evaluates to true for\neach row to be deleted. It is specified as described in SELECT.\n\nCurrently, you cannot delete from a table and select from the same\ntable in a subquery.\n\nYou need the DELETE privilege on a table to delete rows from\nit. You need only the SELECT privilege for any columns that\nare only read, such as those named in the WHERE clause. See\nGRANT.\n\nAs stated, a DELETE statement with no WHERE\nclause deletes all rows. A faster way to do this, when you do not need to know\nthe number of deleted rows, is to use TRUNCATE TABLE. However,\nwithin a transaction or if you have a lock on the table, \nTRUNCATE TABLE cannot be used whereas DELETE\ncan. See TRUNCATE TABLE, and\nLOCK.\n\nPARTITION\n\nSee Partition Pruning and Selection for details.\n\nFOR PORTION OF\n\nRETURNING\n\nIt is possible to return a resultset of the deleted rows for a single table to the\nclient by using the syntax DELETE ... RETURNING select_expr [, select_expr2 ...]]\nAny of SQL expression that can be calculated from a single row fields is allowed.\n\nSubqueries are allowed. The AS keyword is allowed, so it is possible to use aliases.\n\nThe use of aggregate functions is not allowed. RETURNING cannot be used in\nmulti-table DELETEs.\n\nExamples\n--------\nHow to use the ORDER BY and LIMIT clauses:\nDELETE FROM page_hit ORDER BY timestamp LIMIT 1000000;\n\nHow to use the RETURNING clause:\nDELETE FROM t RETURNING f1;\n+------+\n| f1   |\n+------+\n|    5 |\n|   50 |\n|  500 |\n+------+\n\nThe following statement joins two tables: one is only used to satisfy a WHERE\ncondition, but no row is deleted from it; rows from the other table are\ndeleted, instead.\n\nDELETE post FROM blog INNER JOIN post WHERE blog.id = post.blog_id;\n\nDeleting from the Same Source and Target\n\nCREATE TABLE t1 (c1 INT, c2 INT);\nDELETE FROM t1 WHERE c1 IN (SELECT b.c1 FROM t1 b WHERE b.c2=0);\n\nUntil MariaDB 10.3.1, this returned:\nERROR 1093 (HY000): Table 't1' is specified twice, both as a target for 'DELETE' \n and as a separate source for\n\nFrom MariaDB 10.3.1:\nQuery OK, 0 rows affected (0.00 sec)\n','','https://mariadb.com/kb/en/library/delete/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (409,27,'DO','Syntax\n------\nDO expr [, expr] ...\n\nDescription\n-----------\n DO executes the expressions but does not return any\nresults. In most respects, DO is shorthand for\n SELECT expr, ..., but has the advantage that it is slightly\nfaster when you do not care about the result.\n\nDO is useful primarily with functions that have side\n effects, such as RELEASE_LOCK().\n','','https://mariadb.com/kb/en/library/do/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (410,27,'DUAL','Description\n-----------\nYou are allowed to specify DUAL as a dummy table name in\nsituations where no tables are referenced, such as the following SELECT statement:\nSELECT 1 + 1 FROM DUAL;\n+-------+\n| 1 + 1 |\n+-------+\n|     2 |\n+-------+\n\nDUAL is purely for the convenience of people who require\n that all SELECT statements should have\n FROM and possibly other clauses. MariaDB ignores the\n clauses. MariaDB does not require FROM DUAL if no tables\n are referenced.\n\nFROM DUAL could be used when you only SELECT computed values, but require a WHERE\nclause, perhaps to test that a script correctly handles empty resultsets:\nSELECT 1 FROM DUAL WHERE FALSE;\nEmpty set (0.00 sec)\n','','https://mariadb.com/kb/en/library/dual/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (411,27,'EXCEPT','The result of EXCEPT is all records of the left SELECT result set except\nrecords which are in right SELECT result set, i.e. it is subtraction of two result\nsets. From MariaDB 10.6.1, MINUS is a synonym.\n\nSELECT ...\n(INTERSECT [ALL | DISTINCT] | EXCEPT [ALL | DISTINCT] | UNION [ALL | DISTINCT])\nSELECT ...\n[(INTERSECT [ALL | DISTINCT] | EXCEPT [ALL | DISTINCT] | UNION [ALL | DISTINCT])\nSELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n\nPlease note:\n\nDescription\n-----------\nMariaDB has supported EXCEPT and INTERSECT in addition to UNION since MariaDB 10.3.\n\nAll behavior for naming columns, ORDER BY and LIMIT is the same as for UNION.\n\nEXCEPT implicitly supposes a DISTINCT operation.\n\nThe result of EXCEPT is all records of the left SELECT result except records which\nare in right SELECT result set, i.e. it is subtraction of two result sets.\n\nEXCEPT and UNION have the same operation precedence and INTERSECT has a higher\nprecedence, unless running in Oracle mode, in which case all three have the\nsame precedence.\n\nExamples\n--------\nShow customers which are not employees:\n(SELECT e_name AS name, email FROM customers)\nEXCEPT\n(SELECT c_name AS name, email FROM employees);\n\nDifference between UNION, EXCEPT and INTERSECT. INTERSECT ALL and EXCEPT ALL are\navailable from MariaDB 10.5.0.\n\nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(2),(3),(3),(4),(5),(6);\n\nSELECT i FROM seqs WHERE i <= 3 UNION SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 UNION ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n|    3 |\n|    3 |\n|    3 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n|    3 |\n+------+\n\nParentheses for specifying precedence, from MariaDB 10.4.0\nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n\n((SELECT a FROM t1) UNION (SELECT b FROM t2)) EXCEPT (SELECT c FROM t3);\n+------+\n| a    |\n+------+\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n+------+\n\n(SELECT a FROM t1) UNION ((SELECT b FROM t2) EXCEPT (SELECT c FROM t3));\n+------+\n| a    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n+------+\n','','https://mariadb.com/kb/en/library/except/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (412,27,'FOR UPDATE','InnoDB supports row-level locking. Selected rows can be locked using LOCK IN\nSHARE MODE or FOR UPDATE. In both cases, a lock is acquired on the rows read by the\nquery, and it will be released when the current transaction is committed.\n\nThe FOR UPDATE clause of SELECT applies only when autocommit is set to 0 or the\nSELECT is enclosed in a transaction. A lock is acquired on the rows, and other\ntransactions are prevented from writing the rows, acquire locks, and from reading\nthem (unless their isolation level is READ UNCOMMITTED).\n\nIf autocommit is set to 1, the LOCK IN SHARE MODE and FOR UPDATE clauses have\nno effect.\n\nIf the isolation level is set to SERIALIZABLE, all plain SELECT statements are\nconverted to SELECT ... LOCK IN SHARE MODE.\n\nExample\n-------\nSELECT * FROM trans WHERE period=2001 FOR UPDATE;\n','','https://mariadb.com/kb/en/library/for-update/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (413,27,'GROUP BY','Use the GROUP BY clause in a SELECT statement to group rows together that have the\nsame value in one or more column, or the same computed value using expressions\nwith any\nfunctions and operators except\ngrouping functions. When you\nuse a GROUP BY clause, you will get a single result row for each group of rows\nthat have the same value for the expression given in GROUP BY.\n\nWhen grouping rows, grouping values are compared as if by the = operator.\n\nFor string values, the = operator ignores trailing whitespace and may normalize\ncharacters and ignore case, depending on the collation in use.\n\nYou can use any of the grouping functions in your select expression. Their\nvalues will\nbe calculated based on all the rows that have been grouped together for each result\nrow. If you select a non-grouped column or a value computed from a non-grouped\ncolumn, it is undefined which row the returned value is taken from. This is not\npermitted if the ONLY_FULL_GROUP_BY SQL_MODE is used.\n\nYou can use multiple expressions in the GROUP BY clause, separated by commas.\n\nRows are grouped together if they match on each of the expressions.\n\nYou can also use a single integer as the grouping expression. If you use an\ninteger n,\nthe results will be grouped by the nth column in the select expression.\n\nThe WHERE clause is applied before the GROUP BY clause. It filters non-aggregated\nrows before the rows are grouped together. To filter grouped rows based on\naggregate values,\nuse the HAVING clause. The HAVING clause takes any expression and evaluates it as\na boolean, just like the WHERE clause. You can use grouping functions in the HAVING\nclause. As with the select expression, if you reference non-grouped columns in\nthe HAVING\nclause, the behavior is undefined.\n\nBy default, if a GROUP BY clause is present, the rows in the output will be sorted by\nthe expressions used in the GROUP BY. You can also specify ASC or DESC (ascending,\ndescending) after those expressions, like in ORDER BY. The default is ASC.\n\nIf you want the rows to be sorted by another field, you can add an explicit ORDER BY.\n\nIf you don't want the result to be ordered, you can add ORDER BY NULL.\n\nWITH ROLLUP\n\nThe WITH ROLLUP modifer adds extra rows to the resultset that represent\nsuper-aggregate summaries. For a full description with examples, see SELECT\nWITH ROLLUP.\n\nGROUP BY Examples\n\nConsider the following table that records how many times each user has played and won\na game:\nCREATE TABLE plays (name VARCHAR(16), plays INT, wins INT);\nINSERT INTO plays VALUES \n ("John", 20, 5),\n ("Robert", 22, 8),\n ("Wanda", 32, 8),\n ("Susan", 17, 3);\n\nGet a list of win counts along with a count:\nSELECT wins, COUNT(*) FROM plays GROUP BY wins;\n+------+----------+\n| wins | COUNT(*) |\n+------+----------+\n|    3 |        1 |\n|    5 |        1 |\n|    8 |        2 |\n+------+----------+\n3 rows in set (0.00 sec)\n\nThe GROUP BY expression can be a computed value, and can refer back to an identifer\nspecified with AS. Get a list of win averages along with a count:\nSELECT (wins / plays) AS winavg, COUNT(*) FROM plays GROUP BY winavg;\n+--------+----------+\n| winavg | COUNT(*) |\n+--------+----------+\n| 0.1765 |        1 |\n| 0.2500 |        2 |\n| 0.3636 |        1 |\n+--------+----------+\n3 rows in set (0.00 sec)\n\nYou can use any grouping function\nin the select expression. For each win average as above, get a list of the\naverage play\ncount taken to get that average:\nSELECT (wins / plays) AS winavg, AVG(plays) FROM plays \n GROUP BY winavg;\n+--------+------------+\n| winavg | AVG(plays) |\n+--------+------------+\n| 0.1765 |    17.0000 |\n| 0.2500 |    26.0000 |\n| 0.3636 |    22.0000 |\n+--------+------------+\n3 rows in set (0.00 sec)\n\nYou can filter on aggregate information using the HAVING clause. The HAVING\nclause is applied after GROUP BY and allows you to filter on aggregate data that is\nnot available to the WHERE clause. Restrict the above example to results that involve\nan average number of plays over 20:\nSELECT (wins / plays) AS winavg, AVG(plays) FROM plays \n GROUP BY winavg HAVING AVG(plays) > 20;\n+--------+------------+\n| winavg | AVG(plays) |\n+--------+------------+\n| 0.2500 |    26.0000 |\n| 0.3636 |    22.0000 |\n+--------+------------+\n2 rows in set (0.00 sec)\n\nSee Also\n','','https://mariadb.com/kb/en/library/group-by/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (414,27,'HANDLER Commands','Syntax\n------\nHANDLER tbl_name OPEN [ [AS] alias]\nHANDLER tbl_name READ index_name { = | >= | <= | < } (value1,value2,...)\n  [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }\n  [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ { FIRST | NEXT }\n  [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name CLOSE\n\nDescription\n-----------\nThe HANDLER statement provides direct access to table\nstorage engine interfaces for key lookups and key or table scans. It is available for\nat least Aria, Memory, MyISAM and InnoDB tables (and should work with most 'normal'\nstorage engines, but not with system tables, MERGE or views).\n\nHANDLER ... OPEN opens a table, allowing it to be accessible to subsequent HANDLER\n... READ statements. The table can either be opened using an alias (which must then\nbe used by HANDLER ... READ, or a table name.\n\nThe table object is only closed when HANDLER ... CLOSE is called by the session, and\nis not shared by other sessions.\n\nPrepared statements work with HANDLER READ, which gives a much higher performance\n(50% speedup) as there is no parsing and all data is transformed in binary (without\nconversions to text, as with the normal protocol).\n\nThe HANDLER command does not work with partitioned tables.\n\nKey Lookup\n----------\nA key lookup is started with:\nHANDLER tbl_name READ index_name { = | >= | <= | < }  (value,value) [LIMIT...]\n\nThe values stands for the value of each of the key columns. For most key types\n(except for HASH keys in MEMORY storage engine) you can use a prefix subset of\nit's columns.\n\nIf you are using LIMIT, then in case of >= or > then there is an implicit NEXT\nimplied, while if you are using <= or < then there is an implicit PREV implied.\n\nAfter the initial read, you can use\nHANDLER tbl_name READ index_name NEXT [ LIMIT ... ]\nor\nHANDLER tbl_name READ index_name PREV [ LIMIT ... ]\n\nto scan the rows in key order.\n\nNote that the row order is not defined for keys with duplicated values and will vary\nfrom engine to engine.\n\nKey Scans\n---------\nYou can scan a table in key order by doing:\nHANDLER tbl_name READ index_name FIRST [ LIMIT ... ]\nHANDLER tbl_name READ index_name NEXT  [ LIMIT ... ]\n\nor, if the handler supports backwards key scans (most do):\nHANDLER tbl_name READ index_name LAST [ LIMIT ... ]\nHANDLER tbl_name READ index_name PREV [ LIMIT ... ]\n\nTable Scans\n-----------\nYou can scan a table in row order by doing:\nHANDLER tbl_name READ FIRST [ LIMIT ... ]\nHANDLER tbl_name READ NEXT  [ LIMIT ... ]\n\nLimitations\n-----------\nAs this is a direct interface to the storage engine, some limitations may apply for\nwhat you can do and what happens if the table changes. Here follows some of the\ncommon limitations:\n\nFinding 'Old Rows'\n\nHANDLER READ is not transaction safe, consistent or atomic.  It's ok for the storage\nengine to returns rows that existed when you started the scan but that were later\ndeleted. This can happen as the storage engine may cache rows as part of the scan\nfrom a previous read.\n\nYou may also find rows committed since the scan originally started.\n\nInvisible Columns\n\nHANDLER ... READ also reads the data of invisible-columns.\n\nSystem-Versioned Tables\n\nHANDLER ... READ reads everything from system-versioned tables, and so includes\nrow_start and row_end fields, as well as all rows that have since been deleted or\nchanged, including when history partitions are used.\n\nOther Limitations\n\nError Codes\n-----------\n','','https://mariadb.com/kb/en/library/handler-commands/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (415,27,'HIGH_PRIORITY and LOW_PRIORITY','The InnoDB storage engine uses row-level locking to ensure data integrity. However\nsome storage engines (such as MEMORY, MyISAM, Aria and MERGE) lock the whole table to\nprevent conflicts. These storage engines use two separate queues to remember pending\nstatements; one is for SELECTs and the other one is for write statements (INSERT,\nDELETE, UPDATE). By default, the latter has a higher priority.\n\nTo give write operations a lower priority, the low_priority_updates server system\nvariable can be set to ON. The option is available on both the global and session\nlevels, and it can be set at startup or via the SET statement.\n\nWhen too many table locks have been set by write statements, some pending SELECTs are\nexecuted. The maximum number of write locks that can be acquired before this happens\nis determined by the max_write_lock_count server system variable, which is dynamic.\n\nIf write statements have a higher priority (default), the priority of individual\nwrite statements (INSERT, REPLACE, UPDATE, DELETE) can be changed via the\nLOW_PRIORITY attribute, and the priority of a SELECT statement can be raised via the\nHIGH_PRIORITY attribute. Also, LOCK TABLES supports a LOW_PRIORITY attribute for\nWRITE locks.\n\nIf read statements have a higher priority, the priority of an INSERT can be changed\nvia the HIGH_PRIORITY attribute. However, the priority of other write statements\ncannot be raised individually.\n\nThe use of LOW_PRIORITY or HIGH_PRIORITY for an INSERT prevents Concurrent Inserts\nfrom being used.\n','','https://mariadb.com/kb/en/library/high_priority-and-low_priority/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (416,27,'IGNORE','The IGNORE option tells the server to ignore some common errors.\n\nIGNORE can be used with the following statements:\n\nThe logic used:\n\nThe following errors are ignored:\n+---------------------------------------------------------------------+--------------\n------------------------------------------------------+------------------------------\n--------------------------------------+\n|Error number                                                         |Symbolic error\nname                                                  |Description                   \n                   |\n|1022                                                                 |ER_DUP_KEY    \n                           |Can't write; duplicate key in\ntable '%s'                             |\n|1048                                                                \n|ER_BAD_NULL_ERROR                                                    |Column '%s'\ncannot be null                                           |\n|1062                                                                 |ER_DUP_ENTRY  \n                           |Duplicate entry '%s' for key\n%d                                      |\n|1242                                                                \n|ER_SUBQUERY_NO_1_ROW                                                 |Subquery\nreturns more than 1 row                                     |\n|1264                                                                \n|ER_WARN_DATA_OUT_OF_RANGE                                            |Out of range\nvalue for column '%s' at row %ld                        |\n|1265                                                                \n|WARN_DATA_TRUNCATED                                                  |Data truncated\nfor column '%s' at row %ld                            |\n|1292                                                                \n|ER_TRUNCATED_WRONG_VALUE                                             |Truncated\nincorrect %s value: '%s'                                   |\n|1366                                                                \n|ER_TRUNCATED_WRONG_VALUE_FOR_FIELD                                   |Incorrect\ninteger value                                              |\n|1369                                                                \n|ER_VIEW_CHECK_FAILED                                                 |CHECK OPTION\nfailed '%s.%s'                                          |\n|1451                                                                \n|ER_ROW_IS_REFERENCED_2                                               |Cannot delete\nor update a parent row                                 |\n|1452                                                                \n|ER_NO_REFERENCED_ROW_2                                               |Cannot add or\nupdate a child row: a foreign key constraint fails (%s)|\n|1526                                                                \n|ER_NO_PARTITION_FOR_GIVEN_VALUE                                      |Table has no\npartition for value %s                                  |\n|1586                                                                \n|ER_DUP_ENTRY_WITH_KEY_NAME                                           |Duplicate\nentry '%s' for key '%s'                                    |\n|1591                                                                \n|ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT                               |Table has no\npartition for some existing values                      |\n|1748                                                                \n|ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET                            |Found a row\nnot matching the given partition set                     |\n+---------------------------------------------------------------------+--------------\n------------------------------------------------------+------------------------------\n--------------------------------------+\nIgnored errors normally generate a warning.\n\nA property of the IGNORE clause consists in causing transactional engines and\nnon-transactional engines (like XtraDB and Aria) to behave the same way. For example,\nnormally a multi-row insert which tries to violate a UNIQUE contraint is completely\nrolled back on XtraDB/InnoDB, but might be partially executed on Aria. With the\nIGNORE clause, the statement will be partially executed in both engines.\n\nDuplicate key errors also generate warnings. The OLD_MODE server variable can be used\nto prevent this.\n','','https://mariadb.com/kb/en/library/ignore/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (417,27,'INSERT','Syntax\n------\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n  [, col=expr] ... ] [RETURNING select_expr\n   [, select_expr ...]]\n\nOr:\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n  [INTO] tbl_name [PARTITION (partition_list)]\n  SET col={expr | DEFAULT}, ...\n  [ ON DUPLICATE KEY UPDATE\n   col=expr\n    [, col=expr] ... ] [RETURNING select_expr\n   [, select_expr ...]]\n\nOr:\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n  [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n  SELECT ...\n  [ ON DUPLICATE KEY UPDATE\n   col=expr\n    [, col=expr] ... ] [RETURNING select_expr\n   [, select_expr ...]]\n\nThe INSERT statement is used to insert new rows into an existing table. The INSERT\n... VALUES\nand INSERT ... SET forms of the statement insert rows based on explicitly specified\nvalues. The INSERT ... SELECT form inserts rows selected from another table or\ntables. INSERT ... SELECT is discussed further in the INSERT ... SELECT article.\n\nThe table name can be specified in the form db_name.tbl_name or, if a default\ndatabase is selected, in the form tbl_name (see Identifier Qualifiers). This allows\nto use INSERT ... SELECT to copy rows between different databases.\n\nThe PARTITION clause can be used in both the INSERT and the SELECT part. See\nPartition Pruning and Selection for details.\n\nThe columns list is optional. It specifies which values are explicitly inserted, and\nin which order. If this clause is not specified, all values must be explicitly\nspecified, in the same order they are listed in the table definition.\n\nThe list of value follow the VALUES or VALUE keyword (which are interchangeable,\nregardless how much values you want to insert), and is wrapped by parenthesis. The\nvalues must be listed in the same order as the columns list. It is possible to\nspecify more than one list to insert more than one rows with a single statement. If\nmany rows are inserted, this is a speed optimization.\n\nFor one-row statements, the SET clause may be more simple, because you don't need to\nremember the columns order. All values are specified in the form col = expr.\n\nValues can also be specified in the form of a SQL expression or subquery. However,\nthe subquery cannot access the same table that is named in the INTO clause.\n\nIf you use the LOW_PRIORITY keyword, execution of the INSERT is delayed until no\nother clients are reading from the table. If you use the HIGH_PRIORITY keyword, the\nstatement has the same priority as SELECTs. This affects only storage engines that\nuse only table-level locking (MyISAM, MEMORY, MERGE). However, if one of these\nkeywords is specified, concurrent inserts cannot be used. See HIGH_PRIORITY and\nLOW_PRIORITY clauses for details.\n\nINSERT DELAYED\n--------------\nFor more details on the DELAYED option, see INSERT DELAYED.\n\nHIGH PRIORITY and LOW PRIORITY\n------------------------------\nSee HIGH_PRIORITY and LOW_PRIORITY.\n\nDefaults and Duplicate Values\n-----------------------------\nSee INSERT - Default & Duplicate Values for details..\n\nINSERT IGNORE\n-------------\nSee INSERT IGNORE.\n\nINSERT ON DUPLICATE KEY UPDATE\n------------------------------\nSee INSERT ON DUPLICATE KEY UPDATE.\n\nExamples\n--------\nSpecifying the column names:\nINSERT INTO person (first_name, last_name) VALUES ('John', 'Doe');\n\nInserting more than 1 row at a time:\nINSERT INTO tbl_name VALUES (1, "row 1"), (2, "row 2");\n\nUsing the SET clause:\nINSERT INTO person SET first_name = 'John', last_name = 'Doe';\n\nSELECTing from another table:\nINSERT INTO contractor SELECT * FROM person WHERE status = 'c';\n\nSee INSERT ON DUPLICATE KEY UPDATE and INSERT IGNORE for further examples.\n\nINSERT ... RETURNING\n--------------------\nINSERT ... RETURNING returns a resultset of the inserted rows.\n\nThis returns the listed columns for all the rows that are inserted, or alternatively,\nthe specified SELECT expression. Any SQL expressions which can be calculated can be\nused in the select expression for the RETURNING clause, including virtual columns and\naliases, expressions which use various operators such as bitwise, logical and\narithmetic operators, string functions, date-time functions, numeric functions,\ncontrol flow functions, secondary functions and stored functions. Along with this,\nstatements which have subqueries and prepared statements can also be used.\n\nExamples\n\nSimple INSERT statement\nINSERT INTO t2 VALUES (1,'Dog'),(2,'Lion'),(3,'Tiger'),(4,'Leopard') \nRETURNING id2,id2+id2,id2&id2,id2||id2;\n+-----+---------+---------+----------+\n| id2 | id2+id2 | id2&id2 | id2||id2 |\n+-----+---------+---------+----------+\n|   1 |       2 |       1 |        1 |\n|   2 |       4 |       2 |        1 |\n|   3 |       6 |       3 |        1 |\n|   4 |       8 |       4 |        1 |\n+-----+---------+---------+----------+\n\nUsing stored functions in RETURNING\nDELIMITER |\nCREATE FUNCTION f(arg INT) RETURNS INT\n  BEGIN\n   RETURN (SELECT arg+arg);\n  END|\n\nDELIMITER ;\n\nPREPARE stmt FROM "INSERT INTO t1 SET id1=1, animal1='Bear' RETURNING\nf(id1), UPPER(animal1)";\n\nEXECUTE stmt;\n+---------+----------------+\n| f(id1)  | UPPER(animal1) |\n+---------+----------------+\n|       2 | BEAR           |\n+---------+----------------+\n\nSubqueries in the RETURNING clause that return more than one row or column cannot\nbe used.\n\nAggregate functions cannot be used in the RETURNING clause. Since aggregate functions\nwork on a set of values, and if the purpose is to get the row count, ROW_COUNT() with\nSELECT can be used or it can be used in INSERT...SELECT...RETURNING if the table in\nthe RETURNING clause is not the same as the INSERT table.\n','','https://mariadb.com/kb/en/library/insert/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (418,27,'INSERT - Default &amp; Duplicate Values','Default Values\n--------------\nIf the SQL_MODE contains STRICT_TRANS_TABLES and you are inserting into a\ntransactional table (like InnoDB), or if the SQL_MODE contains STRICT_ALL_TABLES, all\nNOT NULL columns which does not have a DEFAULT value (and is not AUTO_INCREMENT) must\nbe explicitly referenced in INSERT statements. If not, an error like this\nis produced:\nERROR 1364 (HY000): Field 'col' doesn't have a default value\n\nIn all other cases, if a NOT NULL column without a DEFAULT value is not referenced,\nan empty value will be inserted (for example, 0 for INTEGER columns and '' for CHAR\ncolumns). See NULL Values in MariaDB:Inserting for examples.\n\nIf a NOT NULL column having a DEFAULT value is not referenced, NULL will be inserted.\n\nIf a NULL column having a DEFAULT value is not referenced, its default value will be\ninserted. It is also possible to explicitly assign the default value using the\nDEFAULT keyword or the DEFAULT() function.\n\nIf the DEFAULT keyword is used but the column does not have a DEFAULT value, an error\nlike this is produced:\nERROR 1364 (HY000): Field 'col' doesn't have a default value\n\nDuplicate Values\n----------------\nBy default, if you try to insert a duplicate row and there is a UNIQUE index, INSERT\nstops and an error like this is produced:\nERROR 1062 (23000): Duplicate entry 'dup_value' for key 'col'\n\nTo handle duplicates you can use the IGNORE clause, INSERT ON DUPLICATE KEY UPDATE or\nthe REPLACE statement. Note that the IGNORE and DELAYED options are ignored when you\nuse ON DUPLICATE KEY UPDATE.\n','','https://mariadb.com/kb/en/library/insert-default-duplicate-values/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (419,27,'INSERT DELAYED','Syntax\n------\nINSERT DELAYED ...\n\nDescription\n-----------\nThe DELAYED option for the INSERT\nstatement is a MariaDB/MySQL extension to standard SQL that is very useful if\nyou have\nclients that cannot or need not wait for the INSERT to\ncomplete. This is a common situation when you use MariaDB for logging and you\nalso periodically run SELECT and UPDATE\nstatements that take a long time to complete.\n\nWhen a client uses INSERT DELAYED, it gets an okay from the\nserver at once, and the row is queued to be inserted when the table is not in\nuse by any other thread.\n\nAnother major benefit of using INSERT DELAYED is that\ninserts from many clients are bundled together and written in one block. This\nis much faster than performing many separate inserts.\n\nNote that INSERT DELAYED is slower than a normal\n INSERT if the table is not otherwise in use. There is also\nthe additional overhead for the server to handle a separate thread for each\ntable for which there are delayed rows. This means that you should use\nINSERT DELAYED only when you are really sure that you need\nit.\n\nThe queued rows are held only in memory until they are inserted into the table.\n\nThis means that if you terminate mysqld forcibly (for example, with kill -9) or\nif mysqld dies unexpectedly, any queued rows that have not been written to disk\nare lost.\n\nThe number of concurrent INSERT DELAYED threads is limited by the max_delayed_threads\nserver system variables. If it is set to 0, INSERT DELAYED is disabled. The session\nvalue can be equal to the global value, or 0 to disable this statement for the\ncurrent session. If this limit has been reached, the DELAYED clause will be silently\nignore for subsequent statements (no error will be produced).\n\nLimitations\n\nThere are some limitations on the use of DELAYED:\n','','https://mariadb.com/kb/en/library/insert-delayed/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (420,27,'INSERT IGNORE','Ignoring Errors\n---------------\nNormally INSERT stops and rolls back when it encounters an error.\n\nBy using the IGNORE keyword all errors are converted to warnings, which will not stop\ninserts of additional rows.\n\nThe IGNORE and DELAYED options are ignored when you use ON DUPLICATE KEY UPDATE.\n\nPrior to MySQL and MariaDB 5.5.28, no warnings were issued for duplicate key errors\nwhen using IGNORE.\n\nYou can get the old behavior if you set OLD_MODE to NO_DUP_KEY_WARNINGS_WITH_IGNORE.\n\nExamples\n--------\nCREATE TABLE t1 (x INT UNIQUE);\n\nINSERT INTO t1 VALUES(1),(2);\n\nINSERT INTO t1 VALUES(2),(3);\nERROR 1062 (23000): Duplicate entry '2' for key 'x'\nSELECT * FROM t1;\n+------+\n| x    |\n+------+\n|    1 |\n|    2 |\n+------+\n2 rows in set (0.00 sec)\n\nINSERT IGNORE INTO t1 VALUES(2),(3);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSHOW WARNINGS;\n+---------+------+---------------------------------+\n| Level   | Code | Message                         |\n+---------+------+---------------------------------+\n| Warning | 1062 | Duplicate entry '2' for key 'x' |\n+---------+------+---------------------------------+\n\nSELECT * FROM t1;\n+------+\n| x    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n\nSee INSERT ON DUPLICATE KEY UPDATE for further examples using that syntax.\n','','https://mariadb.com/kb/en/library/insert-ignore/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (421,27,'INSERT ON DUPLICATE KEY UPDATE','Syntax\n------\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n [ ON DUPLICATE KEY UPDATE\n  col=expr\n   [, col=expr] ... ]\n\nOr:\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n  [INTO] tbl_name [PARTITION (partition_list)]\n  SET col={expr | DEFAULT}, ...\n  [ ON DUPLICATE KEY UPDATE\n   col=expr\n    [, col=expr] ... ]\n\nOr:\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n  [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n  SELECT ...\n  [ ON DUPLICATE KEY UPDATE\n   col=expr\n    [, col=expr] ... ]\n\nDescription\n-----------\nINSERT ... ON DUPLICATE KEY UPDATE is a MariaDB/MySQL extension to the INSERT\nstatement that, if it finds a duplicate unique or primary key, will instead perform\nan UPDATE.\n\nThe row/s affected value is reported as 1 if a row is inserted, and 2 if a row is\nupdated, unless the API's CLIENT_FOUND_ROWS flag is set.\n\nIf more than one unique index is matched, only the first is updated. It is not\nrecommended to use this statement on tables with more than one unique index.\n\nIf the table has an AUTO_INCREMENT primary key and the statement inserts or updates a\nrow, the LAST_INSERT_ID() function returns its AUTO_INCREMENT value.\n\nThe VALUES() function can only be used in a ON DUPLICATE KEY UPDATE clause and has no\nmeaning in any other context. It returns the column values from the INSERT portion of\nthe statement. This function is particularly useful for multi-rows inserts.\n\nThe IGNORE and DELAYED options are ignored when you use ON DUPLICATE KEY UPDATE.\n\nSee Partition Pruning and Selection for details on the PARTITION clause.\n\nThis statement activates INSERT and UPDATE triggers. See Trigger Overview\nfor details.\n\nSee also a similar statement, REPLACE.\n\nExamples\n--------\nCREATE TABLE ins_duplicate (id INT PRIMARY KEY, animal VARCHAR(30));\nINSERT INTO ins_duplicate VALUES (1,'Aardvark'), (2,'Cheetah'), (3,'Zebra');\n\nIf there is no existing key, the statement runs as a regular INSERT:\nINSERT INTO ins_duplicate VALUES (4,'Gorilla') \n ON DUPLICATE KEY UPDATE animal='Gorilla';\nQuery OK, 1 row affected (0.07 sec)\n\nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal   |\n+----+----------+\n|  1 | Aardvark |\n|  2 | Cheetah  |\n|  3 | Zebra    |\n|  4 | Gorilla  |\n+----+----------+\n\nA regular INSERT with a primary key value of 1 will fail, due to the existing key:\nINSERT INTO ins_duplicate VALUES (1,'Antelope');\nERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n\nHowever, we can use an INSERT ON DUPLICATE KEY UPDATE instead:\nINSERT INTO ins_duplicate VALUES (1,'Antelope') \n ON DUPLICATE KEY UPDATE animal='Antelope';\nQuery OK, 2 rows affected (0.09 sec)\n\nNote that there are two rows reported as affected, but this refers only to\nthe UPDATE.\n\nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal   |\n+----+----------+\n|  1 | Antelope |\n|  2 | Cheetah  |\n|  3 | Zebra    |\n|  4 | Gorilla  |\n+----+----------+\n\nAdding a second unique column:\nALTER TABLE ins_duplicate ADD id2 INT;\nUPDATE ins_duplicate SET id2=id+10;\nALTER TABLE ins_duplicate ADD UNIQUE KEY(id2);\n\nWhere two rows match the unique keys match, only the first is updated.  This can be\nunsafe and is not recommended unless you are certain what you are doing.\n\nINSERT INTO ins_duplicate VALUES (2,'Lion',13) \n ON DUPLICATE KEY UPDATE animal='Lion';\nQuery OK, 2 rows affected (0.004 sec)\n\nSELECT * FROM ins_duplicate;\n+----+----------+------+\n| id | animal   | id2  |\n+----+----------+------+\n|  1 | Antelope |   11 |\n|  2 | Lion     |   12 |\n|  3 | Zebra    |   13 |\n|  4 | Gorilla  |   14 |\n+----+----------+------+\n\nAlthough the third row with an id of 3 has an id2 of 13, which also matched, it was\nnot updated.\n\nChanging id to an auto_increment field. If a new row is added, the auto_increment is\nmoved forward. If the row is updated, it remains the same.\n\nALTER TABLE `ins_duplicate` CHANGE `id` `id` INT( 11 ) NOT NULL AUTO_INCREMENT;\nALTER TABLE ins_duplicate DROP id2;\nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES \n WHERE TABLE_NAME='ins_duplicate';\n+----------------+\n| Auto_increment |\n+----------------+\n|              5 |\n+----------------+\n\nINSERT INTO ins_duplicate VALUES (2,'Leopard') \n ON DUPLICATE KEY UPDATE animal='Leopard';\nQuery OK, 2 rows affected (0.00 sec)\n\nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES \n WHERE TABLE_NAME='ins_duplicate';\n+----------------+\n| Auto_increment |\n+----------------+\n|              5 |\n+----------------+\n\nINSERT INTO ins_duplicate VALUES (5,'Wild Dog') \n ON DUPLICATE KEY UPDATE animal='Wild Dog';\nQuery OK, 1 row affected (0.09 sec)\n\nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal   |\n+----+----------+\n|  1 | Antelope |\n|  2 | Leopard  |\n|  3 | Zebra    |\n|  4 | Gorilla  |\n|  5 | Wild Dog |\n+----+----------+\n\nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES \n WHERE TABLE_NAME='ins_duplicate';\n+----------------+\n| Auto_increment |\n+----------------+\n|              6 |\n+----------------+\n\nRefering to column values from the INSERT portion of the statement: \nINSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n  ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\n\nSee the VALUES() function for more.\n','','https://mariadb.com/kb/en/library/insert-on-duplicate-key-update/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (422,27,'INSERT SELECT','Syntax\n------\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n  [INTO] tbl_name [(col_name,...)]\n  SELECT ...\n  [ ON DUPLICATE KEY UPDATE col_name=expr, ... ]\n\nDescription\n-----------\nWith INSERT ... SELECT, you can quickly insert many rows\ninto a table from one or more other tables. For example:\nINSERT INTO tbl_temp2 (fld_id)\n SELECT tbl_temp1.fld_order_id\n FROM tbl_temp1 WHERE tbl_temp1.fld_order_id > 100;\n\ntbl_name can also be specified in the form db_name.tbl_name (see Identifier\nQualifiers). This allows to copy rows between different databases.\n\nIf the new table has a primary key or UNIQUE indexes, you can use IGNORE to handle\nduplicate key errors during the query. The newer values will not be inserted if an\nidentical value already exists.\n\nREPLACE can be used instead of INSERT to prevent duplicates on UNIQUE indexes by\ndeleting old values. In that case, ON DUPLICATE KEY UPDATE cannot be used.\n\nINSERT ... SELECT works for tables which already exist. To create a table for a given\nresultset, you can use CREATE TABLE ... SELECT.\n','','https://mariadb.com/kb/en/library/insert-select/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (423,27,'INTERSECT','The result of an intersect is the intersection of right and left SELECT\nresults, i.e. only records that are present in both result sets will be included in\nthe result of the operation.\n\nSyntax\n------\nSELECT ...\n(INTERSECT [ALL | DISTINCT] | EXCEPT [ALL | DISTINCT] | UNION [ALL | DISTINCT])\nSELECT ...\n[(INTERSECT [ALL | DISTINCT] | EXCEPT [ALL | DISTINCT] | UNION [ALL | DISTINCT])\nSELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n\nDescription\n-----------\nMariaDB has supported INTERSECT (as well as EXCEPT) in addition to UNION since\nMariaDB 10.3.\n\nAll behavior for naming columns, ORDER BY and LIMIT is the same as for UNION.\n\nINTERSECT implicitly supposes a DISTINCT operation.\n\nThe result of an intersect is the intersection of right and left SELECT results, i.e.\n\nonly records that are present in both result sets will be included in the result of\nthe operation.\n\nINTERSECT has higher precedence than UNION and EXCEPT (unless running running in\nOracle mode, in which case all three have the same precedence). If possible it will\nbe executed linearly but if not it will be translated to a subquery in the\nFROM clause:\n(select a,b from t1)\nunion\n(select c,d from t2)\nintersect\n(select e,f from t3)\nunion\n(select 4,4);\n\nwill be translated to:\n(select a,b from t1)\nunion\nselect c,d from\n ((select c,d from t2)\n intersect\n (select e,f from t3)) dummy_subselect\nunion\n(select 4,4)\n\nExamples\n--------\nShow customers which are employees:\n(SELECT e_name AS name, email FROM employees)\nINTERSECT\n(SELECT c_name AS name, email FROM customers);\n\nDifference between UNION, EXCEPT and INTERSECT. INTERSECT ALL and EXCEPT ALL are\navailable from MariaDB 10.5.0.\n\nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(2),(3),(3),(4),(5),(6);\n\nSELECT i FROM seqs WHERE i <= 3 UNION SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 UNION ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n|    3 |\n|    3 |\n|    3 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n|    3 |\n+------+\n\nParentheses for specifying precedence, from MariaDB 10.4.0\nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n\n((SELECT a FROM t1) UNION (SELECT b FROM t2)) INTERSECT (SELECT c FROM t3);\n+------+\n| a    |\n+------+\n|    1 |\n|    6 |\n+------+\n\n(SELECT a FROM t1) UNION ((SELECT b FROM t2) INTERSECT (SELECT c FROM t3));\n+------+\n| a    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    6 |\n+------+\n','','https://mariadb.com/kb/en/library/intersect/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (424,27,'JOIN Syntax','Description\n-----------\nMariaDB supports the following JOIN syntaxes for\nthe table_references part of SELECT statements and\nmultiple-table DELETE and UPDATE statements:\ntable_references:\n  table_reference [, table_reference] ...\n\ntable_reference:\n  table_factor\n | join_table\n\ntable_factor:\n  tbl_name [PARTITION (partition_list)]\n    [query_system_time_period_specification] [[AS] alias] [index_hint_list]\n | table_subquery [query_system_time_period_specification] [AS] alias\n | ( table_references )\n | { ON table_reference LEFT OUTER JOIN table_reference\n    ON conditional_expr }\n\njoin_table:\n  table_reference [INNER | CROSS] JOIN table_factor [join_condition]\n | table_reference STRAIGHT_JOIN table_factor\n | table_reference STRAIGHT_JOIN table_factor ON conditional_expr\n | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference join_condition\n | table_reference NATURAL [{LEFT|RIGHT} [OUTER]] JOIN table_factor\n\njoin_condition:\n  ON conditional_expr\n | USING (column_list)\n\nquery_system_time_period_specification:\n  FOR SYSTEM_TIME AS OF point_in_time\n | FOR SYSTEM_TIME BETWEEN point_in_time AND point_in_time\n | FOR SYSTEM_TIME FROM point_in_time TO point_in_time\n | FOR SYSTEM_TIME ALL\n\npoint_in_time:\n  [TIMESTAMP] expression\n | TRANSACTION expression\n\nindex_hint_list:\n  index_hint [, index_hint] ...\n\nindex_hint:\n  USE {INDEX|KEY}\n   [{FOR {JOIN|ORDER BY|GROUP BY}] ([index_list])\n | IGNORE {INDEX|KEY}\n   [{FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n | FORCE {INDEX|KEY}\n   [{FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n\nindex_list:\n  index_name [, index_name] ...\n\nA table reference is also known as a join expression.\n\nEach table can also be specified as db_name.tabl_name. This allows to write queries\nwhich involve multiple databases. See Identifier Qualifiers for syntax details.\n\nThe syntax of table_factor is extended in comparison with the\nSQL Standard. The latter accepts only table_reference, not a\nlist of them inside a pair of parentheses.\n\nThis is a conservative extension if we consider each comma in a list of\ntable_reference items as equivalent to an inner join. For example:\nSELECT * FROM t1 LEFT JOIN (t2, t3, t4)\n        ON (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)\n\nis equivalent to:\nSELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4)\n        ON (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)\n\nIn MariaDB, CROSS JOIN is a syntactic equivalent to\nINNER JOIN (they can replace each other). In standard SQL,\nthey are not equivalent. INNER JOIN is used with an\nON clause, CROSS JOIN is used otherwise.\n\nIn general, parentheses can be ignored in join expressions containing only\ninner join operations. MariaDB also supports nested joins (see\nhttp://dev.mysql.com/doc/refman/5.1/en/nested-join-optimization.html).\n\nSee System-versioned tables for more information\nabout FOR SYSTEM_TIME syntax.\n\nIndex hints can be specified to affect how the MariaDB optimizer makes\nuse of indexes. For more information, see How to force query plans.\n\nExamples\n--------\nSELECT left_tbl.*\n FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id = right_tbl.id\n WHERE right_tbl.id IS NULL;\n','','https://mariadb.com/kb/en/library/join-syntax/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (425,27,'LIMIT','Description\n-----------\nUse the LIMIT clause to restrict the number of returned rows. When you use a single\ninteger n with LIMIT, the first n rows will be returned. Use the ORDER BY\nclause to control which rows come first. You can also select a number of rows after\nan offset\nusing either of the following:\nLIMIT offset, row_count\nLIMIT row_count OFFSET offset\n\nWhen you provide an offset m with a limit n, the first m rows will be ignored,\nand the\nfollowing n rows will be returned.\n\nExecuting an UPDATE with the LIMIT clause is not safe for replication. LIMIT 0 is an\nexception to this rule (see MDEV-6170).\n\nThere is a LIMIT ROWS EXAMINED optimization which provides the\nmeans to terminate the execution of SELECT statements which examine too\nmany rows, and thus use too many resources. See LIMIT ROWS EXAMINED.\n\nMulti-Table Updates\n\nGROUP_CONCAT\n\nExamples\n--------\nCREATE TABLE members (name VARCHAR(20));\nINSERT INTO members VALUES('Jagdish'),('Kenny'),('Rokurou'),('Immaculada');\n\nSELECT * FROM members;\n+------------+\n| name       |\n+------------+\n| Jagdish    |\n| Kenny      |\n| Rokurou    |\n| Immaculada |\n+------------+\n\nSelect the first two names (no ordering specified):\nSELECT * FROM members LIMIT 2;\n+---------+\n| name    |\n+---------+\n| Jagdish |\n| Kenny   |\n+---------+\n\nAll the names in alphabetical order:\nSELECT * FROM members ORDER BY name;\n+------------+\n| name       |\n+------------+\n| Immaculada |\n| Jagdish    |\n| Kenny      |\n| Rokurou    |\n+------------+\n\nThe first two names, ordered alphabetically:\nSELECT * FROM members ORDER BY name LIMIT 2;\n+------------+\n| name       |\n+------------+\n| Immaculada |\n| Jagdish    |\n+------------+\n\nThe third name, ordered alphabetically (the first name would be offset zero, so the\nthird is offset two):\nSELECT * FROM members ORDER BY name LIMIT 2,1;\n+-------+\n| name  |\n+-------+\n| Kenny |\n+-------+\n\nFrom MariaDB 10.3.2, LIMIT can be used in a multi-table update:\nCREATE TABLE warehouse (product_id INT, qty INT);\nINSERT INTO warehouse VALUES (1,100),(2,100),(3,100),(4,100);\n\nCREATE TABLE store (product_id INT, qty INT);\nINSERT INTO store VALUES (1,5),(2,5),(3,5),(4,5);\n\nUPDATE warehouse,store SET warehouse.qty = warehouse.qty-2, store.qty = store.qty+2 \n WHERE (warehouse.product_id = store.product_id AND store.product_id  >= 1)\n  ORDER BY store.product_id DESC LIMIT 2;\n\nSELECT * FROM warehouse;\n+------------+------+\n| product_id | qty  |\n+------------+------+\n|          1 |  100 |\n|          2 |  100 |\n|          3 |   98 |\n|          4 |   98 |\n+------------+------+\n\nSELECT * FROM store;\n+------------+------+\n| product_id | qty  |\n+------------+------+\n|          1 |    5 |\n|          2 |    5 |\n|          3 |    7 |\n|          4 |    7 |\n+------------+------+\n\nFrom MariaDB 10.3.3, LIMIT can be used with GROUP_CONCAT, so, for example, given the\nfollowing table:\nCREATE TABLE d (dd DATE, cc INT);\n\nINSERT INTO d VALUES ('2017-01-01',1);\nINSERT INTO d VALUES ('2017-01-02',2);\nINSERT INTO d VALUES ('2017-01-04',3);\n\nthe following query:\nSELECT SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC),",",1)\nFROM d;\n+----------------------------------------------------------------------------+\n| SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC),",",1) |\n+----------------------------------------------------------------------------+\n| 2017-01-04:3                                                               |\n+----------------------------------------------------------------------------+\n\ncan be more simply rewritten as:\nSELECT GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC LIMIT 1) FROM d;\n+-------------------------------------------------------------+\n| GROUP_CONCAT(CONCAT_WS(":",dd,cc) ORDER BY cc DESC LIMIT 1) |\n+-------------------------------------------------------------+\n| 2017-01-04:3                                                |\n+-------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/limit/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (426,27,'LOAD DATA INFILE','Syntax\n------\nLOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name'\n  [REPLACE | IGNORE]\n  INTO TABLE tbl_name\n  [CHARACTER SET charset_name]\n  [{FIELDS | COLUMNS}\n    [TERMINATED BY 'string']\n    [[OPTIONALLY] ENCLOSED BY 'char']\n    [ESCAPED BY 'char']\n  ]\n  [LINES\n    [STARTING BY 'string']\n    [TERMINATED BY 'string']\n  ]\n  [IGNORE number LINES]\n  [(col_name_or_user_var,...)]\n  [SET col_name = expr,...]\n\nDescription\n-----------\nLOAD DATA INFILE is unsafe for statement-based replication.\n\nReads rows from a text file into the designated table on the database at a very high\nspeed. The file name must be given as a literal string.\n\nFiles are written to disk using the SELECT INTO OUTFILE statement.  You can then read\nthe files back into a table using the LOAD DATA INFILE statement.  The FIELDS and\nLINES clauses are the same in both statements.  These clauses are optional, but if\nboth are specified then the FIELDS clause must precede LINES.\n\nExecuting this statement activates INSERT triggers.\n\nOne must have the FILE privilege to be able to execute LOAD DATA. This is the ensure\nthe normal users will not attempt to read system files.\n\nNote that MariaDB's systemd unit file restricts access to /home, /root, and /run/user\nby default. See Configuring access to home directories.\n\nLOAD DATA LOCAL INFILE\n\nWhen you execute the LOAD DATA INFILE statement, MariaDB Server attempts to read the\ninput file from its own file system. In contrast, when you execute the LOAD DATA\nLOCAL INFILE statement, the client attempts to read the input file from its file\nsystem, and it sends the contents of the input file to the MariaDB Server. This\nallows you to load files from the client's local file system into the database.\n\nIn the event that you don't want to permit this operation (such as for security\nreasons), you can disable the LOAD DATA LOCAL INFILE statement on either the server\nor the client.\n\nIf the LOAD DATA LOCAL INFILE statement is disabled by either the server or the\nclient and if the user attempts to execute it, then the server will cause the\nstatement to fail with the following error message:\nThe used command is not allowed with this MariaDB version\n\nNote that it is not entirely accurate to say that the MariaDB version does not\nsupport the command. It would be more accurate to say that the MariaDB configuration\ndoes not support the command. See MDEV-20500 for more information.\n\nFrom MariaDB 10.5.2, the error message is more accurate:\nThe used command is not allowed because the MariaDB server or client \n has disabled the local infile capability\n\nREPLACE and IGNORE\n\nIn cases where you load data from a file into a table that already contains data and\nhas a primary key, you may encounter issues where the statement attempts to insert a\nrow with a primary key that already exists. When this happens, the statement fails\nwith Error 1064, protecting the data already on the table. In cases where you want\nMariaDB to overwrite duplicates, use the REPLACE keyword.\n\nThe REPLACE keyword works like the REPLACE statement. Here, the statement attempts to\nload the data from the file. If the row does not exist, it adds it to the table.  If\nthe row contains an existing Primary Key, it replaces the table data. That is, in the\nevent of a conflict, it assumes the file contains the desired row.\n\nThis operation can cause a degradation in load speed by a factor of 20 or more if the\npart that has already been loaded is larger than the capacity of the InnoDB Buffer\nPool.  This happens because it causes a lot of turnaround in the buffer pool.\n\nUse the IGNORE keyword when you want to skip any rows that contain a conflicting\nprimary key. Here, the statement attempts to load the data from the file. If the row\ndoes not exist, it adds it to the table. If the row contains an existing primary key,\nit ignores the addition request and moves on to the next. That is, in the event of a\nconflict, it assumes the table contains the desired row.\n\nCharacter-sets\n\nWhen the statement opens the file, it attempts to read the contents using the default\ncharacter-set, as defined by the character_set_database system variable.\n\nIn the cases where the file was written using a character-set other than the default,\nyou can specify the character-set to use with the CHARACTER SET clause in the\nstatement.  It ignores character-sets specified by the SET NAMES statement and by the\ncharacter_set_client system variable.  Setting the CHARACTER SET clause to a value of\nbinary indicates "no conversion."\nThe statement interprets all fields in the file as having the same character-set,\nregardless of the column data type.  To properly interpret file contents, you must\nensure that it was written with the correct character-set.  If you write a data file\nwith mysqldump -T or with the SELECT INTO OUTFILE statement with the mysql client, be\nsure to use the --default-character-set option, so that the output is written with\nthe desired character-set.\n\nWhen using mixed character sets, use the CHARACTER SET clause in both SELECT INTO\nOUTFILE and LOAD DATA INFILE to ensure that MariaDB correctly interprets the\nescape sequences.\n\nThe character_set_filesystem system variable controls the interpretation of\nthe filename.\n\nIt is currently not possible to load data files that use the ucs2 character set.\n\nPreprocessing Inputs\n\ncol_name_or_user_var can be a column name, or a user variable. In the case of a\nvariable, the SET statement can be used to preprocess the value before loading into\nthe table.\n\nPriority and Concurrency\n\nIn storage engines that perform table-level locking (MyISAM, MEMORY and MERGE), using\nthe LOW_PRIORITY keyword, MariaDB delays insertions until no other clients are\nreading from the table. Alternatively, when using the MyISAM storage engine, you can\nuse the CONCURRENT keyword to perform concurrent insertion.\n\nThe LOW_PRIORITY and CONCURRENT keywords are mutually exclusive.  They cannot be used\nin the same statement.\n\nProgress Reporting\n\nThe LOAD DATA INFILE statement supports progress reporting. You may find this useful\nwhen dealing with long-running operations. Using another client you can issue a SHOW\nPROCESSLIST query to check the progress of the data load.\n\nUsing mariadb-import/mysqlimport\n\nMariaDB ships with a separate utility for loading data from files: mariadb-import (or\nmysqlimport before MariaDB 10.5). It operates by sending LOAD DATA INFILE statements\nto the server.\n\nUsing mariadb-import/mysqlimport you can compress the file using the --compress\noption, to get better performance over slow networks, providing both the client and\nserver support the compressed protocol.  Use the --local option to load from the\nlocal file system.\n\nIndexing\n\nIn cases where the storage engine supports ALTER TABLE... DISABLE KEYS statements\n(MyISAM and Aria), the LOAD DATA INFILE statement automatically disables indexes\nduring the execution.\n\nExamples\n--------\nYou have a file with this content (note the the separator is ',', not tab, which is\nthe default):\n2,2\n3,3\n4,4\n5,5\n6,8\n\nCREATE TABLE t1 (a int, b int, c int, d int);\nLOAD DATA LOCAL INFILE \n '/tmp/loaddata7.dat' into table t1 fields terminated by ',' (a,b) set c=a+b;\nSELECT * FROM t1;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    2 |    2 |    4 |\n|    3 |    3 |    6 |\n|    4 |    4 |    8 |\n|    5 |    5 |   10 |\n|    6 |    8 |   14 |\n+------+------+------+\n\nAnother example, given the following data (the separator is a tab):\n1       a\n2       b\n\nThe value of the first column is doubled before loading:\nLOAD DATA INFILE 'ld.txt' INTO TABLE ld (@i,v) SET i=@i*2;\n\nSELECT * FROM ld;\n+------+------+\n| i    | v    |\n+------+------+\n|    2 | a    |\n|    4 | b    |\n+------+------+\n','','https://mariadb.com/kb/en/library/load-data-infile/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (427,27,'LOAD XML','Syntax\n------\nLOAD XML [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name'\n  [REPLACE | IGNORE]\n  INTO TABLE [db_name.]tbl_name\n  [CHARACTER SET charset_name]\n  [ROWS IDENTIFIED BY '<tagname>']\n  [IGNORE number {LINES | ROWS}]\n  [(column_or_user_var,...)]\n  [SET col_name = expr,...]\n\nDescription\n-----------\nThe LOAD XML statement reads data from an XML file into a table. The\nfile_name must be given as a literal string. The tagname in the\noptional ROWS IDENTIFIED BY clause must also be given as a literal\nstring, and must be surrounded by angle brackets (< and >).\n\nLOAD XML acts as the complement of running the mysql client in XML\noutput mode (that is, starting the client with the --xml option). To\nwrite data from a table to an XML file, use a command such as the\nfollowing one from the system shell:\nshell> mysql --xml -e 'SELECT * FROM mytable' > file.xml\n\nTo read the file back into a table, use LOAD XML INFILE. By default,\nthe <row> element is considered to be the equivalent of a database\ntable row; this can be changed using the ROWS IDENTIFIED BY clause.\n\nThis statement supports three different XML formats:\n\n<row column1="value1" column2="value2" .../>\n\n<row>\n <column1>value1</column1>\n <column2>value2</column2>\n</row>\n\n<row>\n <field name='column1'>value1</field>\n <field name='column2'>value2</field>\n</row>\n\nThis is the format used by other tools, such as mysqldump.\n\nAll 3 formats can be used in the same XML file; the import routine\nautomatically detects the format for each row and interprets it\ncorrectly. Tags are matched based on the tag or attribute name and the\ncolumn name.\n\nThe following clauses work essentially the same way for LOAD XML as\nthey do for LOAD DATA:\n\nSee LOAD DATA for more information about these clauses.\n\nThe IGNORE number LINES or IGNORE number ROWS clause causes the first\nnumber rows in the XML file to be skipped. It is analogous to the LOAD\nDATA statement's IGNORE ... LINES clause.\n\nIf the LOW_PRIORITY keyword is used, insertions are delayed until no other clients\nare reading from the table. The CONCURRENT keyword allowes the use of concurrent\ninserts. These clauses cannot be specified together.\n\nThis statement activates INSERT triggers.\n','','https://mariadb.com/kb/en/library/load-xml/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (428,27,'LOCK IN SHARE MODE','InnoDB supports row-level locking. Selected rows can be locked using LOCK IN\nSHARE MODE or FOR UPDATE. In both cases, a lock is acquired on the rows read by the\nquery, and it will be released when the current transaction is committed.\n\nWhen LOCK IN SHARE MODE is specified in a SELECT statement, MariaDB will wait until\nall transactions that have modified the rows are committed. Then, a write lock is\nacquired. All transactions can read the rows, but if they want to modify them, they\nhave to wait until your transaction is committed.\n\nIf autocommit is set to 1, the LOCK IN SHARE MODE and FOR UPDATE clauses have\nno effect.\n','','https://mariadb.com/kb/en/library/lock-in-share-mode/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (429,27,'Non-Recursive Common Table Expressions Overview','Common Table Expressions (CTEs) are a standard SQL feature, and are essentially\ntemporary named result sets. There are two kinds of CTEs: Non-Recursive, which this\narticle covers; and Recursive.\n\nNon-Recursive CTEs\n------------------\nThe WITH keyword signifies a CTE. It is given a name, followed by a body (the main\nquery) as follows:\n\nCTEs are similar to derived tables. For example\nWITH engineers AS \n ( SELECT * FROM employees\n  WHERE dept = 'Engineering' )\n\nSELECT * FROM engineers\nWHERE ...\n\nSELECT * FROM\n ( SELECT * FROM employees\n  WHERE dept = 'Engineering' ) AS engineers\nWHERE\n...\n\nA non-recursive CTE is basically a query-local VIEW. There are several advantages and\ncaveats to them. The syntax is more readable than nested FROM (SELECT ...).\n\nA CTE can refer to another and it can be referenced from multiple places.\n\nA CTE referencing Another CTE\n\nUsing this format makes for a more readable SQL than a nested FROM(SELECT ...)\nclause.  Below is an example of this:\nWITH engineers AS (\nSELECT * FROM employees\nWHERE dept IN('Development','Support') ),\neu_engineers AS ( SELECT * FROM engineers WHERE country IN('NL',...) )\nSELECT\n...\nFROM eu_engineers;\n\nMultiple Uses of a CTE\n\nThis can be an 'anti-self join', for example:\nWITH engineers AS (\nSELECT * FROM employees\nWHERE dept IN('Development','Support') )\n\nSELECT * FROM engineers E1\nWHERE NOT EXISTS\n (SELECT 1 FROM engineers E2\n  WHERE E2.country=E1.country\n  AND E2.name <> E1.name );\n\nOr, for year-over-year comparisons, for example:\nWITH sales_product_year AS (\nSELECT product, YEAR(ship_date) AS year,\nSUM(price) AS total_amt\nFROM item_sales\nGROUP BY product, year )\n\nSELECT *\nFROM sales_product_year CUR,\nsales_product_year PREV,\nWHERE CUR.product=PREV.product \nAND  CUR.year=PREV.year + 1 \nAND CUR.total_amt > PREV.total_amt\n\nAnother use is to compare individuals against their group. Below is an example of how\nthis might be executed:\nWITH sales_product_year AS (\nSELECT product,\nYEAR(ship_date) AS year,\nSUM(price) AS total_amt\nFROM item_sales\nGROUP BY product, year\n)\n\nSELECT * \nFROM sales_product_year S1\nWHERE\ntotal_amt > \n  (SELECT 0.1 * SUM(total_amt)\n  FROM sales_product_year S2\n  WHERE S2.year = S1.year)\n','','https://mariadb.com/kb/en/library/non-recursive-common-table-expressions-overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (430,27,'ORDER BY','Description\n-----------\nUse the ORDER BY clause to order a resultset, such as that are returned from a SELECT\nstatement. You can specify just a column or use any expression with functions. If\nyou are\nusing the GROUP BY clause, you can use grouping functions in ORDER BY.\n\nOrdering is done after grouping.\n\nYou can use multiple ordering expressions, separated by commas. Rows will be\nsorted by\nthe first expression, then by the second expression if they have the same value\nfor the\nfirst, and so on.\n\nYou can use the keywords ASC and DESC after each ordering expression to\nforce that ordering to be ascending or descending, respectively. Ordering\nis ascending\nby default.\n\nYou can also use a single integer as the ordering expression. If you use an\ninteger n,\nthe results will be ordered by the nth column in the select expression.\n\nWhen string values are compared, they are compared as if by the STRCMP\nfunction. STRCMP ignores trailing whitespace and may normalize\ncharacters and ignore case, depending on the collation in use.\n\nDuplicated entries in the ORDER BY clause are removed.\n\nORDER BY can also be used to order the activities of a DELETE or UPDATE statement\n(usually with the LIMIT clause).\n\nExamples\n--------\nCREATE TABLE seq (i INT, x VARCHAR(1));\nINSERT INTO seq VALUES (1,'a'), (2,'b'), (3,'b'), (4,'f'), (5,'e');\n\nSELECT * FROM seq ORDER BY i;\n+------+------+\n| i    | x    |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | b    |\n|    4 | f    |\n|    5 | e    |\n+------+------+\n\nSELECT * FROM seq ORDER BY i DESC;\n+------+------+\n| i    | x    |\n+------+------+\n|    5 | e    |\n|    4 | f    |\n|    3 | b    |\n|    2 | b    |\n|    1 | a    |\n+------+------+\n\nSELECT * FROM seq ORDER BY x,i;\n+------+------+\n| i    | x    |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | b    |\n|    5 | e    |\n|    4 | f    |\n+------+------+\n\nORDER BY in an UPDATE statement, in conjunction with LIMIT:\nUPDATE seq SET x='z' WHERE x='b' ORDER BY i DESC LIMIT 1;\n\nSELECT * FROM seq;\n+------+------+\n| i    | x    |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | z    |\n|    4 | f    |\n|    5 | e    |\n+------+------+\n\nFrom MariaDB 10.3.2, ORDER BY can be used in a multi-table update:\nCREATE TABLE warehouse (product_id INT, qty INT);\nINSERT INTO warehouse VALUES (1,100),(2,100),(3,100),(4,100);\n\nCREATE TABLE store (product_id INT, qty INT);\nINSERT INTO store VALUES (1,5),(2,5),(3,5),(4,5);\n\nUPDATE warehouse,store SET warehouse.qty = warehouse.qty-2, store.qty = store.qty+2 \n WHERE (warehouse.product_id = store.product_id AND store.product_id  >= 1)\n  ORDER BY store.product_id DESC LIMIT 2;\n\nSELECT * FROM warehouse;\n+------------+------+\n| product_id | qty  |\n+------------+------+\n|          1 |  100 |\n|          2 |  100 |\n|          3 |   98 |\n|          4 |   98 |\n+------------+------+\n\nSELECT * FROM store;\n+------------+------+\n| product_id | qty  |\n+------------+------+\n|          1 |    5 |\n|          2 |    5 |\n|          3 |    7 |\n|          4 |    7 |\n+------------+------+\n','','https://mariadb.com/kb/en/library/order-by/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (431,27,'PROCEDURE','The PROCEDURE clause of SELECT passes the whole result set to a Procedure\nwhich will process it. These Procedures are not Stored Procedures, and can only be\nwritten in the C language, so it is necessary to recompile the server.\n\nCurrently, the only available procedure is ANALYSE, which examines the resultset and\nsuggests the optimal datatypes for each column. It is defined in the\nsql/sql_analyse.cc file, and can be used as an example to create more Procedures.\n\nThis clause cannot be used in a view's definition.\n','','https://mariadb.com/kb/en/library/procedure/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (432,27,'Recursive Common Table Expressions Overview','Common Table Expressions (CTEs) are a standard SQL feature, and are essentially\ntemporary named result sets. CTEs first appeared in the SQL standard in 1999, and the\nfirst implementations began appearing in 2007.\n\nThere are two kinds of CTEs:\n\nSQL is generally poor at recursive structures.\n\nCTEs permit a query to reference itself. A recursive CTE will repeatedly execute\nsubsets of the data until it obtains the complete result set. This makes it\nparticularly useful for handing hierarchical or tree-structured data.\n\nmax_recursive_iterations avoids infinite loops.\n\nSyntax example\n\nWITH RECURSIVE signifies a recursive CTE. It is given a name, followed by a body (the\nmain query) as follows:\n\nComputation\n\nGiven the following structure:\n\nFirst execute the anchor part of the query:\n\nNext, execute the recursive part of the query:\n\nSummary so far\n\nwith recursive R as (\n select anchor_data\n union [all]\n select recursive_part\n from R, ...\n)\nselect ...\n\nCompute anchor_data\nCompute recursive_part to get the new data\nif (new data is non-empty) goto 2;\n\nCAST to avoid truncating data\n\nAs currently implemented by MariaDB and by the SQL Standard, data may be truncated if\nnot correctly cast. It is necessary to CAST the column to the correct width if the\nCTE's recursive part produces wider values for a column than the CTE's nonrecursive\npart. Some other DBMS give an error in this situation, and MariaDB's behavior may\nchange in future - see MDEV-12325. See the examples below.\n\nExamples\n\nTransitive closure - determining bus destinations\nSample data:\n\nCREATE TABLE bus_routes (origin varchar(50), dst varchar(50));\nINSERT INTO bus_routes VALUES \n ('New York', 'Boston'),\n ('Boston', 'New York'),\n ('New York', 'Washington'),\n ('Washington', 'Boston'),\n ('Washington', 'Raleigh');\n\nNow, we want to return the bus destinations with New York as the origin:\nWITH RECURSIVE bus_dst as ( \n  SELECT origin as dst FROM bus_routes WHERE origin='New York'\n UNION\n  SELECT bus_routes.dst FROM bus_routes JOIN bus_dst ON bus_dst.dst=\nbus_routes.origin \n) \nSELECT * FROM bus_dst;\n+------------+\n| dst        |\n+------------+\n| New York   |\n| Boston     |\n| Washington |\n| Raleigh    |\n+------------+\n\nThe above example is computed as follows:\nFirst, the anchor data is calculated:\n\nNext, the recursive part:\n\nComputing paths - determining bus routes\nThis time, we are trying to get bus routes such as  “New York -> Washington\n-> Raleigh”.\n\nUsing the same sample data as the previous example:\nWITH RECURSIVE paths (cur_path, cur_dest) AS (\n  SELECT origin, origin FROM bus_routes WHERE origin='New York'\n UNION\n  SELECT CONCAT(paths.cur_path, ',', bus_routes.dst), bus_routes.dst\n  FROM paths\n  JOIN bus_routes\n   ON paths.cur_dest = bus_routes.origin AND\n    NOT FIND_IN_SET(bus_routes.dst, paths.cur_path)\n) \nSELECT * FROM paths;\n+-----------------------------+------------+\n| cur_path                    | cur_dest   |\n+-----------------------------+------------+\n| New York                    | New York   |\n| New York,Boston             | Boston     |\n| New York,Washington         | Washington |\n| New York,Washington,Boston  | Boston     |\n| New York,Washington,Raleigh | Raleigh    |\n+-----------------------------+------------+\n\nCAST to avoid data truncation\nIn the following example, data is truncated because the results are not specifically\ncast to a wide enough type:\nWITH RECURSIVE tbl AS (\n SELECT NULL AS col\n UNION\n SELECT "THIS NEVER SHOWS UP" AS col FROM tbl\n)\nSELECT col FROM tbl\n+------+\n| col  |\n+------+\n| NULL |\n|      |\n+------+\n\nExplicitly use CAST to overcome this:\nWITH RECURSIVE tbl AS (\n SELECT CAST(NULL AS CHAR(50)) AS col\n UNION SELECT "THIS NEVER SHOWS UP" AS col FROM tbl\n)  \nSELECT * FROM tbl;\n+---------------------+\n| col                 |\n+---------------------+\n| NULL                |\n| THIS NEVER SHOWS UP |\n+---------------------+\n','','https://mariadb.com/kb/en/library/recursive-common-table-expressions-overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (433,27,'REPLACE','Syntax\n------\nREPLACE [LOW_PRIORITY | DELAYED]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n[RETURNING select_expr \n   [, select_expr ...]]\n\nOr:\nREPLACE [LOW_PRIORITY | DELAYED]\n  [INTO] tbl_name [PARTITION (partition_list)]\n  SET col={expr | DEFAULT}, ...\n[RETURNING select_expr \n   [, select_expr ...]]\n\nOr:\nREPLACE [LOW_PRIORITY | DELAYED]\n  [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n  SELECT ...\n[RETURNING select_expr \n   [, select_expr ...]]\n\nDescription\n-----------\n REPLACE works exactly like\n INSERT, except that if an old row in the table\n has the same value as a new row for a PRIMARY KEY or a\n UNIQUE index, the old row is deleted before the new row is\n inserted. If the table has more than one UNIQUE keys, it is possible that the new\nrow conflicts with more than one row. In this case, all conflicting rows will\nbe deleted.\n\nThe table name can be specified in the form db_name.tbl_name or, if a default\ndatabase is selected, in the form tbl_name (see Identifier Qualifiers). This allows\nto use REPLACE ... SELECT to copy rows between different databases.\n\nBasically it works like this:\nBEGIN;\nSELECT 1 FROM t1 WHERE key=# FOR UPDATE;\nIF found-row\n DELETE FROM t1 WHERE key=# ;\nENDIF\nINSERT INTO t1 VALUES (...);\nEND;\n\nThe above can be replaced with:\nREPLACE INTO t1 VALUES (...)\n\nREPLACE is a MariaDB/MySQL extension to the SQL standard. It\n either inserts, or deletes and inserts. For other MariaDB/MySQL extensions to\n standard SQL --- that also handle duplicate values --- see IGNORE and INSERT ON\nDUPLICATE KEY UPDATE.\n\nNote that unless the table has a PRIMARY KEY or\n UNIQUE index, using a REPLACE statement\nmakes no sense. It becomes equivalent to INSERT, because\nthere is no index to be used to determine whether a new row duplicates another.\n\nValues for all columns are taken from the values sSee Partition Pruning and Selection\nfor details.pecified in the\n REPLACE statement. Any missing columns are set to their\ndefault values, just as happens for INSERT. You cannot refer\nto values from the current row and use them in the new row. If you use an\nassignment such as 'SET col = col + 1', the\nreference to the column name on the right hand side is treated as\n DEFAULT(col), so the assignment is equivalent to\n 'SET col = DEFAULT(col) + 1'.\n\nTo use REPLACE, you must have both the\n INSERT and DELETE privileges\nfor the table.\n\nThere are some gotchas you should be aware of, before using REPLACE:\n\nTo avoid some of these behaviors, you can use INSERT ... ON DUPLICATE KEY UPDATE.\n\nThis statement activates INSERT and DELETE triggers. See Trigger Overview\nfor details.\n\nPARTITION\n\nSee Partition Pruning and Selection for details.\n\nREPLACE RETURNING\n\nREPLACE ... RETURNING returns a resultset of the replaced rows.\n\nThis returns the listed columns for all the rows that are replaced, or alternatively,\nthe specified SELECT expression. Any SQL expressions which can be calculated can be\nused in the select expression for the RETURNING clause, including virtual columns and\naliases, expressions which use various operators such as bitwise, logical and\narithmetic operators, string functions, date-time functions, numeric functions,\ncontrol flow functions, secondary functions and stored functions. Along with this,\nstatements which have subqueries and prepared statements can also be used.\n\nExamples\nSimple REPLACE statement\nREPLACE INTO t2 VALUES (1,'Leopard'),(2,'Dog') RETURNING id2, id2+id2 \nas Total ,id2|id2, id2&&id2;\n+-----+-------+---------+----------+\n| id2 | Total | id2|id2 | id2&&id2 |\n+-----+-------+---------+----------+\n|   1 |     2 |       1 |        1 |\n|   2 |     4 |       2 |        1 |\n+-----+-------+---------+----------+\n\nUsing stored functions in RETURNING\nDELIMITER |\nCREATE FUNCTION f(arg INT) RETURNS INT\n  BEGIN\n   RETURN (SELECT arg+arg);\n  END|\n\nDELIMITER ;\nPREPARE stmt FROM "REPLACE INTO t2 SET id2=3, animal2='Fox' RETURNING f2(id2),\nUPPER(animal2)";\n\nEXECUTE stmt;\n+---------+----------------+\n| f2(id2) | UPPER(animal2) |\n+---------+----------------+\n|       6 | FOX            |\n+---------+----------------+\n\nSubqueries in the statement\nREPLACE INTO t1 SELECT * FROM t2 RETURNING (SELECT id2 FROM t2 WHERE \nid2 IN (SELECT id2 FROM t2 WHERE id2=1)) AS new_id;\n+--------+\n| new_id |\n+--------+\n|      1 |\n|      1 |\n|      1 |\n|      1 |\n+--------+\n\nSubqueries in the RETURNING clause that return more than one row or column cannot\nbe used..\nAggregate functions cannot be used in the RETURNING clause. Since aggregate functions\nwork on a set of values and if the purpose is to get the row count, ROW_COUNT() with\nSELECT can be used, or it can be used in REPLACE...SEL== Description\nREPLACE ... RETURNING returns a resultset of the replaced rows.\n\nThis returns the listed columns for all the rows that are replaced, or alternatively,\nthe specified SELECT expression. Any SQL expressions which can be calculated can be\nused in the select expression for the RETURNING clause, including virtual columns and\naliases, expressions which use various operators such as bitwise, logical and\narithmetic operators, string functions, date-time functions, numeric functions,\ncontrol flow functions, secondary functions and stored functions. Along with this,\nstatements which have subqueries and prepared statements can also be used.\n\nExamples\n--------\nSimple REPLACE statement\nREPLACE INTO t2 VALUES (1,'Leopard'),(2,'Dog') RETURNING id2, id2+id2 \nas Total ,id2|id2, id2&&id2;\n+-----+-------+---------+----------+\n| id2 | Total | id2|id2 | id2&&id2 |\n+-----+-------+---------+----------+\n|   1 |     2 |       1 |        1 |\n|   2 |     4 |       2 |        1 |\n+-----+-------+---------+----------+\n\nUsing stored functions in RETURNING\nDELIMITER |\nCREATE FUNCTION f(arg INT) RETURNS INT\n  BEGIN\n   RETURN (SELECT arg+arg);\n  END|\n\nDELIMITER ;\nPREPARE stmt FROM "REPLACE INTO t2 SET id2=3, animal2='Fox' RETURNING f2(id2),\nUPPER(animal2)";\n\nEXECUTE stmt;\n+---------+----------------+\n| f2(id2) | UPPER(animal2) |\n+---------+----------------+\n|       6 | FOX            |\n+---------+----------------+\n\nSubqueries in the statement\nREPLACE INTO t1 SELECT * FROM t2 RETURNING (SELECT id2 FROM t2 WHERE \nid2 IN (SELECT id2 FROM t2 WHERE id2=1)) AS new_id;\n+--------+\n| new_id |\n+--------+\n|      1 |\n|      1 |\n|      1 |\n|      1 |\n+--------+\n\nSubqueries in the RETURNING clause that return more than one row or column cannot\nbe used..\nAggregate functions cannot be used in the RETURNING clause. Since aggregate functions\nwork on a set of values and if the purpose is to get the row count, ROW_COUNT() with\nSELECT can be used, or it can be used in REPLACE...SELECT...RETURNING if the table in\nthe RETURNING clause is not the same as the REPLACE table.\n\nECT...RETURNING if the table in the RETURNING clause is not the same as the\nREPLACE table.\n','','https://mariadb.com/kb/en/library/replace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (434,27,'SELECT','Syntax\n------\nSELECT\n  [ALL | DISTINCT | DISTINCTROW]\n  [HIGH_PRIORITY]\n  [STRAIGHT_JOIN]\n  [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n  [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n  select_expr [, select_expr ...]\n  [ FROM table_references\n   [WHERE where_condition]\n   [GROUP BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]]\n   [HAVING where_condition]\n   [ORDER BY {col_name | expr | position} [ASC | DESC], ...]\n   [LIMIT {[offset,] row_count | row_count OFFSET offset  [ROWS EXAMINED\nrows_limit] } |\n    [OFFSET start { ROW | ROWS }]\n    [FETCH { FIRST | NEXT } [ count ] { ROW | ROWS } { ONLY | WITH TIES }] ]\n   procedure|[PROCEDURE procedure_name(argument_list)]\n   [INTO OUTFILE 'file_name' [CHARACTER SET charset_name] [export_options] |\n    INTO DUMPFILE 'file_name' | INTO var_name [, var_name] ]\n   [FOR UPDATE lock_option | LOCK IN SHARE MODE lock_option]\nexport_options:\n  [{FIELDS | COLUMNS}\n    [TERMINATED BY 'string']\n    [[OPTIONALLY] ENCLOSED BY 'char']\n    [ESCAPED BY 'char']\n  ]\n  [LINES\n    [STARTING BY 'string']\n    [TERMINATED BY 'string']\n  ]\nlock_option:\n  [WAIT n | NOWAIT | SKIP LOCKED]\n\nDescription\n-----------\nSELECT is used to retrieve rows selected from one or more\ntables, and can include UNION statements and subqueries.\n\nSELECT can also be used to retrieve rows computed without reference to\nany table.\n\nSelect Expressions\n\nA SELECT statement must contain one or more select expressions, separated\nby commas. Each select expression can be one of the following:\n\nWhen specifying a column, you can either use just the column name or qualify\nthe column\nname with  the name of the table using tbl_name.col_name. The qualified form is\nuseful if you are joining multiple tables in the FROM clause. If you do not\nqualify the\ncolumn names when selecting from multiple tables, MariaDB will try to find the\ncolumn in\neach table. It is an error if that column name exists in multiple tables.\n\nYou can quote column names using backticks. If you are qualifying column names\nwith table names, quote each part separately as `tbl_name`.`col_name`.\n\nIf you use any grouping functions\nin any of the select expressions, all rows in your results will be implicitly\ngrouped, as if\nyou had used GROUP BY NULL.\n\nDISTINCT\n\nA query may produce some identical rows. By default, all rows are retrieved, even\nwhen their values are the same. To explicitly specify that you want to retrieve\nidentical rows, use the ALL option. If you want duplicates to be removed from the\nresultset, use the DISTINCT option. DISTINCTROW is a synonym for DISTINCT. See also\nCOUNT DISTINCT and SELECT UNIQUE in Oracle mode.\n\nINTO\n\nThe INTO clause is used to specify that the query results should be written to a file\nor variable.\n\nThe reverse of SELECT INTO OUTFILE is LOAD DATA.\n\nLIMIT\n\nRestricts the number of returned rows. See LIMIT and LIMIT ROWS EXAMINED for details.\n\nLOCK IN SHARE MODE/FOR UPDATE\n\nSee LOCK IN SHARE MODE and FOR UPDATE for details on the respective locking clauses.\n\nOFFSET ... FETCH\n\nORDER BY\n\nOrder a resultset. See ORDER BY for details.\n\nPARTITION\n\nSpecifies to the optimizer which partitions are relevant for the query. Other\npartitions will not be read.  See Partition Pruning and Selection for details.\n\nPROCEDURE\n\nPasses the whole result set to a C Procedure. See PROCEDURE and PROCEDURE ANALYSE\n(the only built-in procedure not requiring the server to be recompiled).\n\nSKIP LOCKED\n\nSQL_CALC_FOUND_ROWS\n\nWhen SQL_CALC_FOUND_ROWS is used, then MariaDB will calculate how many rows would\nhave been in the result, if there would be no LIMIT clause. The result can be found\nby calling the function FOUND_ROWS() in your next sql statement.\n\nmax_statement_time clause\n\nBy using max_statement_time in conjunction with SET STATEMENT, it is possible to\nlimit the execution time of individual queries. For example:\nSET STATEMENT max_statement_time=100 FOR \n SELECT field1 FROM table_name ORDER BY field1;\n\nWAIT/NOWAIT\n\nSet the lock wait timeout. See WAIT and NOWAIT.\n\nExamples\n--------\nSELECT f1,f2 FROM t1 WHERE (f3<=10) AND (f4='y');\n\nSee Getting Data from MariaDB (Beginner tutorial), or the various sub-articles, for\nmore examples.\n','','https://mariadb.com/kb/en/library/select/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (435,27,'SELECT INTO DUMPFILE','Syntax\n------\nSELECT ... INTO DUMPFILE 'file_path'\n\nDescription\n-----------\nSELECT ... INTO DUMPFILE is a SELECT clause which writes the resultset into a single\nunformatted row, without any separators, in a file. The results will not be returned\nto the client.\n\nfile_path can be an absolute path, or a relative path starting from the data\ndirectory. It can only be specified as a string literal, not as a variable. However,\nthe statement can be dynamically composed and executed as a prepared statement to\nwork around this limitation.\n\nThis statement is binary-safe and so is particularly useful for writing BLOB values\nto file. It can be used, for example, to copy an image or an audio document from the\ndatabase to a file. SELECT ... INTO FILE can be used to save a text file.\n\nThe file must not exist. It cannot be overwritten. A user needs the FILE privilege to\nrun this statement. Also, MariaDB needs permission to write files in the specified\nlocation. If the secure_file_priv system variable is set to a non-empty directory\nname, the file can only be written to that directory.\n\nSince MariaDB 5.1, the character_set_filesystem system variable has controlled\ninterpretation of file names that are given as literal strings.\n\nExample\n-------\nSELECT _utf8'Hello world!' INTO DUMPFILE '/tmp/world';\n\nSELECT LOAD_FILE('/tmp/world') AS world;\n+--------------+\n| world        |\n+--------------+\n| Hello world! |\n+--------------+\n','','https://mariadb.com/kb/en/library/select-into-dumpfile/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (436,27,'SELECT INTO OUTFILE','Syntax\n------\nSELECT ... INTO OUTFILE 'file_name'\n    [CHARACTER SET charset_name]\n    [export_options]\n\nexport_options:\n  [{FIELDS | COLUMNS}\n    [TERMINATED BY 'string']\n    [[OPTIONALLY] ENCLOSED BY 'char']\n    [ESCAPED BY 'char']\n  ]\n  [LINES\n    [STARTING BY 'string']\n    [TERMINATED BY 'string']\n  ]\n\nDescription\n-----------\nSELECT INTO OUTFILE writes the resulting rows to a file, and allows the use of column\nand row terminators to specify a particular output format. The default is to\nterminate fields with tabs (\t) and lines with newlines (\n).\n\nThe file must not exist. It cannot be overwritten. A user needs the FILE privilege to\nrun this statement. Also, MariaDB needs permission to write files in the specified\nlocation. If the secure_file_priv system variable is set to a non-empty directory\nname, the file can only be written to that directory.\n\nThe LOAD DATA INFILE statement complements SELECT INTO OUTFILE.\n\nCharacter-sets\n\nThe CHARACTER SET clause specifies the character set in which the results are to be\nwritten. Without the clause, no conversion takes place (the binary character set). In\nthis case, if there are multiple character sets, the output will contain these too,\nand may not easily be able to be reloaded.\n\nIn cases where you have two servers using different character-sets, using SELECT INTO\nOUTFILE to transfer data from one to the other can have unexpected results.  To\nensure that MariaDB correctly interprets the escape sequences, use the CHARACTER SET\nclause on both the SELECT INTO OUTFILE statement and the subsequent LOAD DATA\nINFILE statement.\n\nExample\n-------\nThe following example produces a file in the CSV format:\nSELECT customer_id, firstname, surname INTO OUTFILE '/exportdata/customers.txt'\n FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'\n LINES TERMINATED BY '\n'\n FROM customers;\n','','https://mariadb.com/kb/en/library/select-into-outfile/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (437,27,'SELECT WITH ROLLUP','Syntax\n------\nSee SELECT for the full syntax.\n\nDescription\n-----------\nThe WITH ROLLUP modifier adds extra rows to the resultset that represent\nsuper-aggregate summaries. The super-aggregated column is represented by a NULL\nvalue. Multiple aggregates over different columns will be added if there are multiple\nGROUP BY columns.\n\nThe LIMIT clause can be used at the same time, and is applied after the WITH ROLLUP\nrows have been added.\n\nWITH ROLLUP cannot be used with ORDER BY. Some sorting is still possible by using ASC\nor DESC clauses with the GROUP BY column, although the super-aggregate rows will\nalways be added last.\n\nExamples\n--------\nThese examples use the following sample table\nCREATE TABLE booksales ( \n country VARCHAR(35), genre ENUM('fiction','non-fiction'), year YEAR, sales INT);\n\nINSERT INTO booksales VALUES\n ('Senegal','fiction',2014,12234), ('Senegal','fiction',2015,15647),\n ('Senegal','non-fiction',2014,64980), ('Senegal','non-fiction',2015,78901),\n ('Paraguay','fiction',2014,87970), ('Paraguay','fiction',2015,76940),\n ('Paraguay','non-fiction',2014,8760), ('Paraguay','non-fiction',2015,9030);\n\nThe addition of the WITH ROLLUP modifier in this example adds an extra row that\naggregates both years:\nSELECT year, SUM(sales) FROM booksales GROUP BY year;\n+------+------------+\n| year | SUM(sales) |\n+------+------------+\n| 2014 |     173944 |\n| 2015 |     180518 |\n+------+------------+\n2 rows in set (0.08 sec)\n\nSELECT year, SUM(sales) FROM booksales GROUP BY year WITH ROLLUP;\n+------+------------+\n| year | SUM(sales) |\n+------+------------+\n| 2014 |     173944 |\n| 2015 |     180518 |\n| NULL |     354462 |\n+------+------------+\n\nIn the following example, each time the genre, the year or the country change,\nanother super-aggregate row is added:\nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre;\n+----------+------+-------------+------------+\n| country  | year | genre       | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction     |      87970 |\n| Paraguay | 2014 | non-fiction |       8760 |\n| Paraguay | 2015 | fiction     |      76940 |\n| Paraguay | 2015 | non-fiction |       9030 |\n| Senegal  | 2014 | fiction     |      12234 |\n| Senegal  | 2014 | non-fiction |      64980 |\n| Senegal  | 2015 | fiction     |      15647 |\n| Senegal  | 2015 | non-fiction |      78901 |\n+----------+------+-------------+------------+\n\nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre WITH ROLLUP;\n+----------+------+-------------+------------+\n| country  | year | genre       | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction     |      87970 |\n| Paraguay | 2014 | non-fiction |       8760 |\n| Paraguay | 2014 | NULL        |      96730 |\n| Paraguay | 2015 | fiction     |      76940 |\n| Paraguay | 2015 | non-fiction |       9030 |\n| Paraguay | 2015 | NULL        |      85970 |\n| Paraguay | NULL | NULL        |     182700 |\n| Senegal  | 2014 | fiction     |      12234 |\n| Senegal  | 2014 | non-fiction |      64980 |\n| Senegal  | 2014 | NULL        |      77214 |\n| Senegal  | 2015 | fiction     |      15647 |\n| Senegal  | 2015 | non-fiction |      78901 |\n| Senegal  | 2015 | NULL        |      94548 |\n| Senegal  | NULL | NULL        |     171762 |\n| NULL     | NULL | NULL        |     354462 |\n+----------+------+-------------+------------+\n\nThe LIMIT clause, applied after WITH ROLLUP:\nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre WITH ROLLUP LIMIT 4;\n+----------+------+-------------+------------+\n| country  | year | genre       | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction     |      87970 |\n| Paraguay | 2014 | non-fiction |       8760 |\n| Paraguay | 2014 | NULL        |      96730 |\n| Paraguay | 2015 | fiction     |      76940 |\n+----------+------+-------------+------------+\n\nSorting by year descending:\nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year DESC, genre WITH ROLLUP;\n+----------+------+-------------+------------+\n| country  | year | genre       | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2015 | fiction     |      76940 |\n| Paraguay | 2015 | non-fiction |       9030 |\n| Paraguay | 2015 | NULL        |      85970 |\n| Paraguay | 2014 | fiction     |      87970 |\n| Paraguay | 2014 | non-fiction |       8760 |\n| Paraguay | 2014 | NULL        |      96730 |\n| Paraguay | NULL | NULL        |     182700 |\n| Senegal  | 2015 | fiction     |      15647 |\n| Senegal  | 2015 | non-fiction |      78901 |\n| Senegal  | 2015 | NULL        |      94548 |\n| Senegal  | 2014 | fiction     |      12234 |\n| Senegal  | 2014 | non-fiction |      64980 |\n| Senegal  | 2014 | NULL        |      77214 |\n| Senegal  | NULL | NULL        |     171762 |\n| NULL     | NULL | NULL        |     354462 |\n+----------+------+-------------+------------+\n','','https://mariadb.com/kb/en/library/select-with-rollup/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (438,27,'UNION','UNION is used to combine the results from multiple SELECT statements into a\nsingle result set.\n\nSyntax\n------\nSELECT ...\nUNION [ALL | DISTINCT] SELECT ...\n[UNION [ALL | DISTINCT] SELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n\nDescription\n-----------\nUNION is used to combine the results from multiple SELECT statements into a single\nresult set.\n\nThe column names from the first SELECT statement are used as the column names for the\nresults returned. Selected columns listed in corresponding positions of each SELECT\nstatement should have the same data type. (For example, the first column selected by\nthe first statement should have the same type as the first column selected by the\nother statements.)\nIf they don't, the type and length of the columns in the result take into account the\nvalues returned by all of the SELECTs, so there is no need for explicit casting. Note\nthat currently this is not the case for recursive CTEs - see MDEV-12325.\n\nTable names can be specified as db_name.tbl_name. This permits writing UNIONs which\ninvolve multiple databases. See Identifier Qualifiers for syntax details.\n\nUNION queries cannot be used with aggregate functions.\n\nEXCEPT and UNION have the same operation precedence and INTERSECT has a higher\nprecedence, unless running in Oracle mode, in which case all three have the\nsame precedence.\n\nALL/DISTINCT\n\nThe ALL keyword causes duplicate rows to be preserved. The DISTINCT keyword (the\ndefault if the keyword is omitted) causes duplicate rows to be removed by\nthe results.\n\nUNION ALL and UNION DISTINCT can both be present in a query. In this case, UNION\nDISTINCT will override any UNION ALLs to its left.\n\nORDER BY and LIMIT\n\nIndividual SELECTs can contain their own ORDER BY and LIMIT clauses. In this case,\nthe individual queries need to be wrapped between parentheses. However, this does not\naffect the order of the UNION, so they only are useful to limit the record read by\none SELECT.\n\nThe UNION can have global ORDER BY and LIMIT clauses, which affect the whole\nresultset. If the columns retrieved by individual SELECT statements have an alias\n(AS), the ORDER BY must use that alias, not the real column names.\n\nHIGH_PRIORITY\n\nSpecifying a query as HIGH_PRIORITY will not work inside a UNION. If applied to the\nfirst SELECT, it will be ignored. Applying to a later SELECT results in a\nsyntax error:\nERROR 1234 (42000): Incorrect usage/placement of 'HIGH_PRIORITY'\n\nSELECT ... INTO ...\n\nIndividual SELECTs cannot be written INTO DUMPFILE or INTO OUTFILE. If the last\nSELECT statement specifies INTO DUMPFILE or INTO OUTFILE, the entire result of the\nUNION will be written. Placing the clause after any other SELECT will result in a\nsyntax error.\n\nIf the result is a single row, SELECT ... INTO @var_name can also be used.\n\nExamples\n--------\nUNION between tables having different column names:\n(SELECT e_name AS name, email FROM employees)\nUNION\n(SELECT c_name AS name, email FROM customers);\n\nSpecifying the UNION's global order and limiting total rows:\n(SELECT name, email FROM employees)\nUNION\n(SELECT name, email FROM customers)\nORDER BY name LIMIT 10;\n\nAdding a constant row:\n(SELECT 'John Doe' AS name, 'john.doe@example.net' AS email)\nUNION\n(SELECT name, email FROM customers);\n\nDiffering types:\nSELECT CAST('x' AS CHAR(1)) UNION SELECT REPEAT('y',4);\n+----------------------+\n| CAST('x' AS CHAR(1)) |\n+----------------------+\n| x                    |\n| yyyy                 |\n+----------------------+\n\nReturning the results in order of each individual SELECT by use of a sort column:\n(SELECT 1 AS sort_column, e_name AS name, email FROM employees)\nUNION\n(SELECT 2, c_name AS name, email FROM customers) ORDER BY sort_column;\n\nDifference between UNION, EXCEPT and INTERSECT. INTERSECT ALL and EXCEPT ALL are\navailable from MariaDB 10.5.0.\n\nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(2),(3),(3),(4),(5),(6);\n\nSELECT i FROM seqs WHERE i <= 3 UNION SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 UNION ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n|    3 |\n|    3 |\n|    3 |\n|    3 |\n|    4 |\n|    5 |\n|    6 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 EXCEPT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    1 |\n|    2 |\n|    2 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n+------+\n\nSELECT i FROM seqs WHERE i <= 3 INTERSECT ALL SELECT i FROM seqs WHERE i>=3;\n+------+\n| i    |\n+------+\n|    3 |\n|    3 |\n+------+\n\nParentheses for specifying precedence, from MariaDB 10.4.0\nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n\n((SELECT a FROM t1) UNION (SELECT b FROM t2)) INTERSECT (SELECT c FROM t3);\n+------+\n| a    |\n+------+\n|    1 |\n|    6 |\n+------+\n\n(SELECT a FROM t1) UNION ((SELECT b FROM t2) INTERSECT (SELECT c FROM t3));\n+------+\n| a    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    6 |\n+------+\n','','https://mariadb.com/kb/en/library/union/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (439,27,'UPDATE','Syntax\n------\nSingle-table syntax:\nUPDATE [LOW_PRIORITY] [IGNORE] table_reference \n [PARTITION (partition_list)]\n [FOR PORTION OF period FROM expr1 TO expr2]\n SET col1={expr1|DEFAULT} [,col2={expr2|DEFAULT}] ...\n [WHERE where_condition]\n [ORDER BY ...]\n [LIMIT row_count]\n\nMultiple-table syntax:\nUPDATE [LOW_PRIORITY] [IGNORE] table_references\n  SET col1={expr1|DEFAULT} [, col2={expr2|DEFAULT}] ...\n  [WHERE where_condition]\n\nDescription\n-----------\nFor the single-table syntax, the UPDATE statement updates\ncolumns of existing rows in the named table with new values. The\nSET clause indicates which columns to modify and the values\nthey should be given.  Each value can be given as an expression, or the keyword\nDEFAULT to set a column explicitly to its default value. The\nWHERE clause, if given, specifies the conditions that identify\nwhich rows to update. With no WHERE clause, all rows are\nupdated. If the ORDER BY clause is specified, the rows are\nupdated in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be updated.\n\nUntil MariaDB 10.3.2, for the multiple-table syntax, UPDATE updates rows in each\ntable named in table_references that satisfy the conditions. In this case,\nORDER BY and LIMIT cannot be used. This restriction was lifted in MariaDB 10.3.2 and\nboth clauses can be used with multiple-table updates. An UPDATE can also reference\ntables which are located in different databases; see Identifier Qualifiers for\nthe syntax.\n\nwhere_condition is an expression that evaluates to true for\neach row to be updated.\n\ntable_references and where_condition are as\nspecified as described in SELECT.\n\nFor single-table updates, assignments are evaluated in left-to-right order, while for\nmulti-table updates, there is no guarantee of a particular order. If the\nSIMULTANEOUS_ASSIGNMENT sql_mode (available from MariaDB 10.3.5) is set, UPDATE\nstatements evaluate all assignments simultaneously.\n\nYou need the UPDATE privilege only for columns referenced in\nan UPDATE that are actually updated. You need only the\nSELECT privilege for any columns that are read but\nnot modified. See GRANT.\n\nThe UPDATE statement supports the following modifiers:\n\nPARTITION\n\nSee Partition Pruning and Selection for details.\n\nFOR PORTION OF\n\nUPDATE Statements With the Same Source and Target\n\nFor example, given the following table:\nDROP TABLE t1;\nCREATE TABLE t1 (c1 INT, c2 INT);\nINSERT INTO t1 VALUES (10,10), (20,20);\n\nUntil MariaDB 10.3.1, the following UPDATE statement would not work:\nUPDATE t1 SET c1=c1+1 WHERE c2=(SELECT MAX(c2) FROM t1);\nERROR 1093 (HY000): Table 't1' is specified twice, \n both as a target for 'UPDATE' and as a separate source for data\n\nFrom MariaDB 10.3.2, the statement executes successfully:\nUPDATE t1 SET c1=c1+1 WHERE c2=(SELECT MAX(c2) FROM t1);\n\nSELECT * FROM t1;\n+------+------+\n| c1   | c2   |\n+------+------+\n|   10 |   10 |\n|   21 |   20 |\n+------+------+\n\nExample\n-------\nSingle-table syntax:\nUPDATE table_name SET column1 = value1, column2 = value2 WHERE id=100;\n\nMultiple-table syntax:\nUPDATE tab1, tab2 SET tab1.column1 = value1, tab1.column2 = value2 WHERE tab1.id\n= tab2.id;\n','','https://mariadb.com/kb/en/library/update/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (440,27,'WITH','Syntax\n\nWITH [RECURSIVE] table_reference [(columns_list)] AS  (\n SELECT ...\n)\n[CYCLE cycle_column_list RESTRICT]\nSELECT ...\n\nDescription\n\nThe WITH keyword signifies a Common Table Expression (CTE). It allows you to refer to\na subquery expression many times in a query, as if having a temporary table that only\nexists for the duration of a query.\n\nThere are two kinds of CTEs:\n\nYou can use table_reference as any normal table in the external SELECT part.  You can\nalso use WITH in subqueries, as well as with EXPLAIN and SELECT.\n\nPoorly-formed recursive CTEs can in theory cause infinite loops. The\nmax_recursive_iterations system variable limits the number of recursions.\n\nCYCLE ... RESTRICT\n\nExamples\n\nBelow is an example with the WITH at the top level:\nWITH t AS (SELECT a FROM t1 WHERE b >= 'c') \n SELECT * FROM t2, t WHERE t2.c = t.a;\n\nThe example below uses WITH in a subquery:\nSELECT t1.a, t1.b FROM t1, t2\n WHERE t1.a > t2.c\n  AND t2.c IN(WITH t AS (SELECT * FROM t1 WHERE t1.a < 5)\n        SELECT t2.c FROM t2, t WHERE t2.c = t.a);\n\nBelow is an example of a Recursive CTE:\nWITH RECURSIVE ancestors AS \n ( SELECT * FROM folks\n WHERE name="Alex"\n UNION\n SELECT f.*\n FROM folks AS f, ancestors AS a\n WHERE f.id = a.father OR f.id = a.mother )\nSELECT * FROM ancestors;\n\nTake the following structure, and data,\nCREATE TABLE t1 (from_ int, to_ int);\nINSERT INTO t1 VALUES (1,2), (1,100), (2,3), (3,4), (4,1);\nSELECT * FROM t1;\n+-------+------+\n| from_ | to_  |\n+-------+------+\n|     1 |    2 |\n|     1 |  100 |\n|     2 |    3 |\n|     3 |    4 |\n|     4 |    1 |\n+-------+------+\n\nGiven the above, the following query would theoretically result in an infinite loop\ndue to the last record in t1 (note that max_recursive_iterations is set to 10 for the\npurposes of this example, to avoid the excessive number of cycles):\nSET max_recursive_iterations=10;\n\nWITH RECURSIVE cte (depth, from_, to_) AS ( \n SELECT 0,1,1 UNION DISTINCT SELECT depth+1, t1.from_, t1.to_\n  FROM t1, cte  WHERE t1.from_ = cte.to_\n) \nSELECT * FROM cte;\n+-------+-------+------+\n| depth | from_ | to_  |\n+-------+-------+------+\n|     0 |     1 |    1 |\n|     1 |     1 |    2 |\n|     1 |     1 |  100 |\n|     2 |     2 |    3 |\n|     3 |     3 |    4 |\n|     4 |     4 |    1 |\n|     5 |     1 |    2 |\n|     5 |     1 |  100 |\n|     6 |     2 |    3 |\n|     7 |     3 |    4 |\n|     8 |     4 |    1 |\n|     9 |     1 |    2 |\n|     9 |     1 |  100 |\n|    10 |     2 |    3 |\n+-------+-------+------+\n\nHowever, the CYCLE ... RESTRICT clause (from MariaDB 10.5.2) can overcome this:\nWITH RECURSIVE cte (depth, from_, to_) AS ( \n SELECT 0,1,1 UNION SELECT depth+1, t1.from_, t1.to_\n  FROM t1, cte WHERE t1.from_ = cte.to_\n) \nCYCLE from_, to_ RESTRICT \nSELECT * FROM cte;\n+-------+-------+------+\n| depth | from_ | to_  |\n+-------+-------+------+\n|     0 |     1 |    1 |\n|     1 |     1 |    2 |\n|     1 |     1 |  100 |\n|     2 |     2 |    3 |\n|     3 |     3 |    4 |\n|     4 |     4 |    1 |\n+-------+-------+------+\n\nSee Also\n','','https://mariadb.com/kb/en/library/with/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (441,28,'DESCRIBE','Syntax\n------\n{DESCRIBE | DESC} tbl_name [col_name | wild]\n\nDescription\n-----------\nDESCRIBE provides information about the columns in a table.\n\nIt is a shortcut for SHOW COLUMNS FROM.\n\nThese statements also display information for views.\n\ncol_name can be a column name, or a string containing the\nSQL "%" and "_" wildcard characters to\nobtain output only for the columns with names matching the string. There is no\nneed to enclose the string within quotes unless it contains spaces or other\nspecial characters.\n\nDESCRIBE city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | YES  |     | NULL    |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | YES  |     | NULL    |                |\n+------------+----------+------+-----+---------+----------------+\n\nThe description for SHOW COLUMNS provides\nmore information about the output columns.\n','','https://mariadb.com/kb/en/library/describe/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (442,28,'EXPLAIN','Syntax\n------\nEXPLAIN tbl_name\n\nOr\nEXPLAIN [EXTENDED | PARTITIONS] \n {SELECT select_options | UPDATE update_options | DELETE delete_options}\n\nDescription\n-----------\nThe EXPLAIN statement can be used either as a synonym for\nDESCRIBE or as a way to obtain information about how MariaDB\nexecutes a SELECT, UPDATE or DELETE statement:\n\nSHOW EXPLAIN shows the output of a running statement. In some cases, its output can\nbe closer to reality than EXPLAIN.\n\nThe ANALYZE statement runs a statement and returns information about its execution\nplan. It also shows additional columns, to check how much the optimizer's estimation\nabout filtering and found rows are close to reality.\n\nThere is an online EXPLAIN Analyzer that you can use to share EXPLAIN and EXPLAIN\nEXTENDED output with others.\n\nEXPLAIN can acquire metadata locks in the same way that SELECT does, as it needs to\nknow table metadata and, sometimes, data as well.\n\nColumns in EXPLAIN ... SELECT\n\n+------------------------------------------------------------------------------------\n--------------+----------------------------------------------------------------------\n----------------------------+\n|Column name                                                                         \n       |Description\n              |\n|id                                                                                  \n       |Sequence number that shows in which order tables are joined.\n\n|\n|select_type                                                                         \n       |What kind of SELECT the table comes from.\n\n|\n|table                                                                               \n       |Alias name of table. Materialized temporary tables for sub queries are\nnamed <subquery#>           |\n|type                                                                                \n       |How rows are found from the table (join type).\n\n|\n|possible_keys                                                                       \n       |keys in table that could be used to find rows in the table\n              |\n|key                                                                                 \n       |The name of the key that is used to retrieve rows. NULL is no key was\nused.                        |\n|key_len                                                                             \n       |How many bytes of the key that was used (shows if we are using only\nparts of the multi-column key).|\n|ref                                                                                 \n       |The reference that is used as the key value.\n\n|\n|rows                                                                                \n       |An estimate of how many rows we will find in the table for each key\nlookup.                        |\n|Extra                                                                               \n       |Extra information about this join.\n\n|\n+------------------------------------------------------------------------------------\n--------------+----------------------------------------------------------------------\n----------------------------+\nHere are descriptions of the values for some of the more complex columns in EXPLAIN\n... SELECT:\n"Select_type" Column\nThe select_type column can have the following values:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------+-----------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------+----------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------+\n|Value\n\n|Description\n\n|Comment\n\n|\n|DEPENDENT SUBQUERY\n\n|The SUBQUERY is DEPENDENT.\n\n|\n\n|\n|DEPENDENT UNION\n\n|The UNION is DEPENDENT.\n\n|\n\n|\n|DERIVED\n\n|The SELECT is DERIVED from the PRIMARY.\n\n|\n\n|\n|MATERIALIZED\n\n|The SUBQUERY is MATERIALIZED.\n\n|Materialized tables will be populated at first access and will be\naccessed by the primary key (= one key lookup). Number of rows in EXPLAIN shows the\ncost of populating the table|\n|PRIMARY\n\n|The SELECT is a PRIMARY one.\n\n|\n\n|\n|SIMPLE\n\n|The SELECT is a SIMPLE one.\n\n|\n\n|\n|SUBQUERY\n\n|The SELECT is a SUBQUERY of the PRIMARY.\n\n|\n\n|\n|UNCACHEABLE SUBQUERY\n\n|The SUBQUERY is UNCACHEABLE.\n\n|\n\n|\n|UNCACHEABLE UNION\n\n|The UNION is UNCACHEABLE.\n\n|\n\n|\n|UNION\n\n|The SELECT is a UNION of the PRIMARY.\n\n|\n\n|\n|UNION RESULT\n\n|The result of the UNION.\n\n|\n\n|\n|LATERAL DERIVED\n\n|The SELECT uses a Lateral Derived optimization\n\n|\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------+-----------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n--------------+----------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------+\n"Type" Column\nThis column contains information on how the table is accessed.\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------------+------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------+\n|Value\n\n|Description\n\n|\n|ALL\n\n|A full table scan is done for\nthe table (all rows are read). This is bad if the table is large and the table is\njoined against a previous table!  This happens when the optimizer could not find any\nusable index to access rows.|\n|const\n\n|There is only one possibly\nmatching row in the table. The row is read before the optimization phase and all\ncolumns in the table are treated as constants.\n\n|\n|eq_ref\n\n|A unique index is used to find\nthe rows. This is the best possible plan to find the row.\n\n|\n|fulltext\n\n|A fulltext index is used to\naccess the rows.\n\n|\n|index_merge\n\n|A 'range' access is done for\nfor several index and the found rows are merged. The key column shows which keys are\nused.\n\n|\n|index_subquery\n\n|This is similar as ref, but\nused for sub queries that are transformed to key lookups.\n\n|\n|index\n\n|A full scan over the used\nindex.  Better than ALL but still bad if index is large and the table is joined\nagainst a previous table.\n\n|\n|range\n\n|The table will be accessed\nwith a key over one or more value ranges.\n\n|\n|ref_or_null\n\n|Like 'ref' but in addition\nanother search for the 'null' value is done if the first value was not found. This\nhappens usually with sub queries.\n\n|\n|ref\n\n|A non unique index or prefix\nof an unique index is used to find the rows. Good if the prefix doesn't match many\nrows.\n\n|\n|system\n\n|The table has 0 or 1 rows.\n\n|\n|unique_subquery\n\n|This is similar as eq_ref, but\nused for sub queries that are transformed to key lookups\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------------+------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------+\n"Extra" Column\nThis column consists of one or more of the following values, separated by ';'\n Note that some of these values are detected after the optimization phase.\n\nThe optimization phase can do the following changes to the WHERE clause:\n\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------+------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+\n|Value\n\n|Description\n\n|\n|const row not found\n\n|The table was a system table (a table with should exactly\none row), but no row was found.\n\n|\n|Distinct\n\n|If distinct optimization (remove duplicates) was used. This\nis marked only for the last table in the SELECT.\n\n|\n|Full scan on NULL key\n\n|The table is a part of the sub query and if the value that\nis used to match the sub query will be NULL, we will do a full table scan.\n\n|\n|Impossible HAVING\n\n|The used HAVING clause is always false so the SELECT will\nreturn no rows.\n\n|\n|Impossible WHERE noticed after reading const tables.\n\n|The used WHERE clause is always false so the SELECT will\nreturn no rows. This case was detected after we had read all 'const' tables and used\nthe column values as constant in the WHERE clause. For example: WHERE const_column=5\nand const_column had a value of 4.\n\n|\n|Impossible WHERE\n\n|The used WHERE clause is always false so the SELECT will\nreturn no rows. For example: WHERE 1=2\n\n|\n|No matching min/max row\n\n|During early optimization of MIN()/MAX() values it was\ndetected that no row could match the WHERE clause. The MIN()/MAX() function will\nreturn NULL.\n\n|\n|no matching row in const table\n\n|The table was a const table (a table with only one possible\nmatching row), but no row was found.\n\n|\n|No tables used\n\n|The SELECT was a sub query that did not use any tables. For\nexample a there was no FROM clause or a FROM DUAL clause.\n\n|\n|Not exists\n\n|Stop searching after more row if we find one single matching\nrow. This optimization is used with LEFT JOIN where one is explicitly searching for\nrows that doesn't exists in the LEFT JOIN TABLE. Example: SELECT * FROM t1 LEFT JOIN\nt2 on (...) WHERE t2.not_null_column IS NULL.  As t2.not_null_column can only be NULL\nif there was no matching row for on condition, we can stop searching if we find a\nsingle matching row.                                   |\n|Open_frm_only\n\n|For information_schema tables.  Only the frm (table\ndefinition file was opened) was opened for each matching row.\n\n|\n|Open_full_table\n\n|For information_schema tables. A full table open for each\nmatching row is done to retrieve the requested information. (Slow)\n\n|\n|Open_trigger_only\n\n|For information_schema tables. Only the trigger file\ndefinition was opened for each matching row.\n\n|\n|Range checked for each record (index map: ...)\n\n|This only happens when there was no good default index to\nuse but there may some index that could be used when we can treat all columns from\nprevious table as constants.  For each row combination the optimizer will decide\nwhich index to use (if any) to fetch a row from this table. This is not fast, but\nfaster than a full table scan that is the only other choice. The index map is a\nbitmask that shows which index are considered for each row condition.|\n|Scanned 0/1/all databases\n\n|For information_schema tables. Shows how many times we had\nto do a directory scan.\n\n|\n|Select tables optimized away\n\n|All tables in the join was optimized away. This happens when\nwe are only using COUNT(*), MIN() and MAX() functions in the SELECT and we where able\nto replace all of these with constants.\n\n|\n|Skip_open_table\n\n|For information_schema tables. The queried table didn't need\nto be opened.\n\n|\n|unique row not found\n\n|The table was detected to be a const table (a table with\nonly one possible matching row) during the early optimization phase, but no row was\nfound.\n\n|\n|Using filesort\n\n|Filesort is needed to resolve the query. This means an extra\nphase where we first collect all columns to sort, sort them with a disk based merge\nsort and then use the sorted set to retrieve the rows in sorted order. If the column\nset is small, we store all the columns in the sort file to not have to go to the\ndatabase to retrieve them again.\n\n|\n|Using index\n\n|Only the index is used to retrieve the needed information\nfrom the table. There is no need to perform an extra seek to retrieve the actual\nrecord.\n\n|\n|Using index condition\n\n|Like 'Using where' but the where condition is pushed down to\nthe table engine for internal optimization at the index level.\n\n|\n|Using index condition(BKA)\n\n|Like 'Using index condition' but in addition we use batch\nkey access to retrieve rows.\n\n|\n|Using index for group-by\n\n|The index is being used to resolve a GROUP BY or DISTINCT\nquery. The rows are not read.  This is very efficient if the table has a lot of\nidentical index entries as duplicates are quickly jumped over.\n\n|\n|Using intersect(...)\n\n|For index_merge joins. Shows which index are part of the\nintersect.\n\n|\n|Using join buffer\n\n|We store previous row combinations in a row buffer to be\nable to match each row against all of the rows combinations in the join buffer at one\ngo.\n\n|\n|Using sort_union(...)\n\n|For index_merge joins. Shows which index are part of the\nunion.\n\n|\n|Using temporary\n\n|A temporary table is created to hold the result. This\ntypically happens if you are using GROUP BY, DISTINCT or ORDER BY.\n\n|\n|Using where\n\n|A WHERE expression (in additional to the possible key\nlookup) is used to check if the row should be accepted. If you don't have 'Using\nwhere' together with a join type of ALL, you are probably doing something wrong!\n\n|\n|Using where with pushed condition\n\n|Like 'Using where' but the where condition is pushed down to\nthe table engine for internal optimization at the row level.\n\n|\n|Using buffer\n\n|The UPDATE statement will first buffer the rows, and then\nrun the updates, rather than do updates on the fly. See Using Buffer UPDATE Algorithm\nfor a detailed explanation.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------+------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n------------------------------------------------+\n\nEXPLAIN EXTENDED\n\nThe EXTENDED keyword adds another column, filtered, to the output. This is a\npercentage estimate of the table rows that will be filtered by the condition.\n\nAn EXPLAIN EXTENDED will always throw a warning, as it adds extra Message information\nto a subsequent SHOW WARNINGS statement. This includes what the SELECT query would\nlook like after optimizing and rewriting rules are applied and how the optimizer\nqualifies columns and tables.\n\nExamples\n--------\nAs synonym for DESCRIBE or SHOW COLUMNS FROM:\nDESCRIBE city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | YES  |     | NULL    |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | YES  |     | NULL    |                |\n+------------+----------+------+-----+---------+----------------+\n\nA simple set of examples to see how EXPLAIN can identify poor index usage:\nCREATE TABLE IF NOT EXISTS `employees_example` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `first_name` varchar(30) NOT NULL,\n `last_name` varchar(40) NOT NULL,\n `position` varchar(25) NOT NULL,\n `home_address` varchar(50) NOT NULL,\n `home_phone` varchar(12) NOT NULL,\n `employee_code` varchar(25) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `employee_code` (`employee_code`),\n KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n\nINSERT INTO `employees_example` (`first_name`, `last_name`, `position`,\n`home_address`, `home_phone`, `employee_code`)\n VALUES\n ('Mustapha', 'Mond', 'Chief Executive Officer', '692 Promiscuous Plaza',\n'326-555-3492', 'MM1'),\n ('Henry', 'Foster', 'Store Manager', '314 Savage Circle', '326-555-3847', 'HF1'),\n ('Bernard', 'Marx', 'Cashier', '1240 Ambient Avenue', '326-555-8456', 'BM1'),\n ('Lenina', 'Crowne', 'Cashier', '281 Bumblepuppy Boulevard',\n'328-555-2349', 'LC1'),\n ('Fanny', 'Crowne', 'Restocker', '1023 Bokanovsky Lane', '326-555-6329', 'FC1'),\n ('Helmholtz', 'Watson', 'Janitor', '944 Soma Court', '329-555-2478', 'HW1');\n\nSHOW INDEXES FROM employees_example;\n+-------------------+------------+---------------+--------------+---------------+----\n------+-------------+----------+--------+------+------------+---------+--------------\n+\n| Table             | Non_unique | Key_name      | Seq_in_index | Column_name   |\nCollation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |\nIndex_comment |\n+-------------------+------------+---------------+--------------+---------------+----\n------+-------------+----------+--------+------+------------+---------+--------------\n+\n| employees_example |          0 | PRIMARY       |            1 | id            | A  \n   |           7 |     NULL | NULL   |      | BTREE      |         |\n |\n| employees_example |          0 | employee_code |            1 | employee_code | A  \n   |           7 |     NULL | NULL   |      | BTREE      |         |\n |\n| employees_example |          1 | first_name    |            1 | first_name    | A  \n   |        NULL |     NULL | NULL   |      | BTREE      |         |\n |\n| employees_example |          1 | first_name    |            2 | last_name     | A  \n   |        NULL |     NULL | NULL   |      | BTREE      |         |\n |\n+-------------------+------------+---------------+--------------+---------------+----\n------+-------------+----------+--------+------+------------+---------+--------------\n+\n\nSELECT on a primary key:\nEXPLAIN SELECT * FROM employees_example WHERE id=1;\n+------+-------------+-------------------+-------+---------------+---------+---------\n-------+------+-------+\n| id   | select_type | table             | type  | possible_keys | key     | key_len\n| ref   | rows | Extra |\n+------+-------------+-------------------+-------+---------------+---------+---------\n-------+------+-------+\n|    1 | SIMPLE      | employees_example | const | PRIMARY       | PRIMARY | 4      \n| const |    1 |       |\n+------+-------------+-------------------+-------+---------------+---------+---------\n-------+------+-------+\n\nThe type is const, which means that only one possible result could be returned.\n\nNow, returning the same record but searching by their phone number:\nEXPLAIN SELECT * FROM employees_example WHERE home_phone='326-555-3492';\n+------+-------------+-------------------+------+---------------+------+---------+---\n--+------+-------------+\n| id   | select_type | table             | type | possible_keys | key  | key_len |\nref  | rows | Extra       |\n+------+-------------+-------------------+------+---------------+------+---------+---\n--+------+-------------+\n|    1 | SIMPLE      | employees_example | ALL  | NULL          | NULL | NULL    |\nNULL |    6 | Using where |\n+------+-------------+-------------------+------+---------------+------+---------+---\n--+------+-------------+\n\nHere, the type is All, which means no index could be used. Looking at the rows count,\na full table scan (all six rows) had to be performed in order to retrieve the record.\n\nIf it's a requirement to search by phone number, an index will have to be created.\n\nSHOW EXPLAIN example:\nSHOW EXPLAIN FOR 1;\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n| id   | select_type | table | type  | possible_keys | key  | key_len | ref  | rows  \n | Extra       |\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n|    1 | SIMPLE      | tbl   | index | NULL          | a    | 5       | NULL |\n1000107 | Using index |\n+------+-------------+-------+-------+---------------+------+---------+------+-------\n-+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nExample of ref_or_null Optimization\n\nSELECT * FROM table_name\n WHERE key_column=expr OR key_column IS NULL;\n\nref_or_null is something that often happens when you use subqueries with NOT IN as\nthen one has to do an extra check for NULL values if the first value didn't have a\nmatching row.\n','','https://mariadb.com/kb/en/library/explain/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (443,28,'EXPLAIN ANALYZE','The syntax for the EXPLAIN ANALYZE feature was changed to ANALYZE statement,\navailable since MariaDB 10.1.0.  See ANALYZE statement.\n','','https://mariadb.com/kb/en/library/explain-analyze/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (444,28,'ANALYZE FORMAT=JSON','ANALYZE FORMAT=JSON is a mix of the EXPLAIN FORMAT=JSON and ANALYZE statement\nfeatures. The ANALYZE FORMAT=JSON $statement will execute $statement, and then print\nthe output of EXPLAIN FORMAT=JSON, amended with data from the query execution.\n\nBasic Execution Data\n--------------------\nYou can get the following also from tabular ANALYZE statement form:\n\nAdvanced Execution Data\n-----------------------\nThe most important data not available in the regular tabula ANALYZE statement are:\n\nData About Individual Query Plan Nodes\n--------------------------------------\n\nUse Cases\n---------\nSee Examples of ANALYZE FORMAT=JSON.\n','','https://mariadb.com/kb/en/library/analyze-format-json/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (445,28,'ANALYZE FORMAT=JSON Examples','Example #1\n----------\nCustomers who have ordered more than 1M goods.\n\nANALYZE FORMAT=JSON\nSELECT COUNT(*)\nFROM customer\nWHERE\n (SELECT SUM(o_totalprice) FROM orders WHERE o_custkey=c_custkey) > 1000*1000;\n\nThe query takes 40 seconds over cold cache\nEXPLAIN: {\n "query_block": {\n  "select_id": 1,\n  "r_loops": 1,\n  "r_total_time_ms": 39872,\n  "table": {\n   "table_name": "customer",\n   "access_type": "index",\n   "key": "i_c_nationkey",\n   "key_length": "5",\n   "used_key_parts": ["c_nationkey"],\n   "r_loops": 1,\n   "rows": 150303,\n   "r_rows": 150000,\n   "r_total_time_ms": 270.3,\n   "filtered": 100,\n   "r_filtered": 60.691,\n   "attached_condition": "((subquery#2) > <cache>((1000 * 1000)))",\n   "using_index": true\n  },\n  "subqueries": [\n   {\n    "query_block": {\n     "select_id": 2,\n     "r_loops": 150000,\n     "r_total_time_ms": 39531,\n     "table": {\n      "table_name": "orders",\n      "access_type": "ref",\n      "possible_keys": ["i_o_custkey"],\n      "key": "i_o_custkey",\n      "key_length": "5",\n      "used_key_parts": ["o_custkey"],\n      "ref": ["dbt3sf1.customer.c_custkey"],\n      "r_loops": 150000,\n      "rows": 7,\n      "r_rows": 10,\n      "r_total_time_ms": 39208,\n      "filtered": 100,\n      "r_filtered": 100\n     }\n    }\n   }\n  ]\n }\n}\nANALYZE shows that 39.2 seconds were spent in the subquery, which was executed 150K\ntimes (for every row of outer table).\n','','https://mariadb.com/kb/en/library/analyze-formatjson-examples/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (446,30,'CONTAINS','Syntax\n------\nContains(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2.\n\nCONTAINS() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_CONTAINS() uses object shapes.\n\nThis tests the opposite relationship to Within().\n','','https://mariadb.com/kb/en/library/contains/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (447,30,'CROSSES','Syntax\n------\nCrosses(g1,g2)\n\nDescription\n-----------\nReturns 1 if g1 spatially crosses g2. Returns NULL if g1 is\na Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.\n\nThe term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:\n\nCROSSES() is based on the original MySQL implementation, and uses object bounding\nrectangles, while ST_CROSSES() uses object shapes.\n','','https://mariadb.com/kb/en/library/crosses/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (448,30,'DISJOINT','Syntax\n------\nDisjoint(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether g1 is spatially disjoint from\n(does not intersect) g2.\n\nDISJOINT() tests the opposite relationship to INTERSECTS().\n\nDISJOINT() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_DISJOINT() uses object shapes.\n','','https://mariadb.com/kb/en/library/disjoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (449,30,'EQUALS','Syntax\n------\nEquals(g1,g2)\n\nFrom MariaDB 10.2.3:\nMBREQUALS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether g1 is spatially equal to g2.\n\nEQUALS() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_EQUALS() uses object shapes.\n\nFrom MariaDB 10.2.3, MBREQUALS is a synonym for Equals.\n','','https://mariadb.com/kb/en/library/equals/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (450,30,'INTERSECTS','Syntax\n------\nINTERSECTS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.\n\nINTERSECTS() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_INTERSECTS() uses object shapes.\n\nINTERSECTS() tests the opposite relationship to DISJOINT().\n','','https://mariadb.com/kb/en/library/intersects/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (451,30,'OVERLAPS','Syntax\n------\nOVERLAPS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether g1 spatially overlaps g2.\n\nThe term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.\n\nOVERLAPS() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_OVERLAPS() uses object shapes.\n','','https://mariadb.com/kb/en/library/overlaps/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (452,30,'ST_CONTAINS','Syntax\n------\nST_CONTAINS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2.\n\nST_CONTAINS() uses object shapes, while CONTAINS(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nST_CONTAINS tests the opposite relationship to ST_WITHIN().\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(175 151)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/st-contains/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (453,30,'ST_CROSSES','Syntax\n------\nST_CROSSES(g1,g2)\n\nDescription\n-----------\nReturns 1 if geometry g1 spatially crosses geometry g2. Returns NULL if g1 is a\nPolygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.\n\nThe term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:\n\nST_CROSSES() uses object shapes, while CROSSES(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(176 149, 176 151)');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/st-crosses/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (454,30,'ST_DIFFERENCE','Syntax\n------\nST_DIFFERENCE(g1,g2)\n\nDescription\n-----------\nReturns a geometry representing the point set difference of the given\ngeometry values.\n\nExample\n-------\nSET @g1 = POINT(10,10), @g2 = POINT(20,20);\n\nSELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(10 10)                       |\n+------------------------------------+\n','','https://mariadb.com/kb/en/library/st_difference/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (455,30,'ST_DISJOINT','Syntax\n------\nST_DISJOINT(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 is spatially disjoint from\n(does not intersect with) geometry g2.\n\nST_DISJOINT() uses object shapes, while DISJOINT(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nST_DISJOINT() tests the opposite relationship to ST_INTERSECTS().\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/st_disjoint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (456,30,'ST_DISTANCE','Syntax\n------\nST_DISTANCE(g1,g2)\n\nDescription\n-----------\nReturns the distance between two geometries, or null if not given valid inputs.\n\nExample\n-------\nSELECT ST_Distance(POINT(1,2),POINT(2,2));\n+------------------------------------+\n| ST_Distance(POINT(1,2),POINT(2,2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n','','https://mariadb.com/kb/en/library/st_distance/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (457,30,'ST_EQUALS','Syntax\n------\nST_EQUALS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 is spatially equal to geometry g2.\n\nST_EQUALS() uses object shapes, while EQUALS(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(176 151, 174 149)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(0 2)');\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/st-equals/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (458,30,'ST_INTERSECTS','Syntax\n------\nST_INTERSECTS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.\n\nST_INTERSECTS() uses object shapes, while INTERSECTS(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nST_INTERSECTS() tests the opposite relationship to ST_DISJOINT().\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/st-intersects/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (459,30,'ST_LENGTH','Syntax\n------\nST_LENGTH(ls)\n\nDescription\n-----------\nReturns as a double-precision number the length of the\nLineString value ls in its associated spatial reference.\n\nExamples\n--------\nSET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT ST_LENGTH(ST_GeomFromText(@ls));\n+---------------------------------+\n| ST_LENGTH(ST_GeomFromText(@ls)) |\n+---------------------------------+\n|                2.82842712474619 |\n+---------------------------------+\n','','https://mariadb.com/kb/en/library/st_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (460,30,'ST_OVERLAPS','Syntax\n------\nST_OVERLAPS(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 spatially overlaps geometry g2.\n\nThe term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.\n\nST_OVERLAPS() uses object shapes, while OVERLAPS(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n','','https://mariadb.com/kb/en/library/st-overlaps/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (461,30,'ST_TOUCHES','Syntax\n------\nST_TOUCHES(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 spatially touches geometry g2. Two\ngeometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.\n\nST_TOUCHES() uses object shapes, while TOUCHES(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/st-touches/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (462,30,'ST_WITHIN','Syntax\n------\nST_WITHIN(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether geometry g1 is spatially within geometry g2.\n\nThis tests the opposite relationship as ST_CONTAINS().\n\nST_WITHIN() uses object shapes, while WITHIN(), based on the original MySQL\nimplementation, uses object bounding rectangles.\n\nExamples\n--------\nSET @g1 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(176 151)');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/st-within/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (463,30,'TOUCHES','Syntax\n------\nTouches(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether g1 spatially touches g2. Two\ngeometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.\n\nTOUCHES() is based on the original MySQL implementation and uses object bounding\nrectangles, while ST_TOUCHES() uses object shapes.\n','','https://mariadb.com/kb/en/library/touches/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (464,30,'WITHIN','Syntax\n------\nWithin(g1,g2)\n\nDescription\n-----------\nReturns 1 or 0 to indicate whether g1 is spatially within g2.\n\nThis tests the opposite relationship as Contains().\n\nWITHIN() is based on the original MySQL implementation, and uses object bounding\nrectangles, while ST_WITHIN() uses object shapes.\n\nExamples\n--------\nSET @g1 = GEOMFROMTEXT('POINT(174 149)');\nSET @g2 = GEOMFROMTEXT('POINT(176 151)');\nSET @g3 = GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT within(@g1,@g3);\n+-----------------+\n| within(@g1,@g3) |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT within(@g2,@g3);\n+-----------------+\n| within(@g2,@g3) |\n+-----------------+\n|               0 |\n+-----------------+\n','','https://mariadb.com/kb/en/library/within/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (465,31,'ADDDATE','Syntax\n------\nADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n\nDescription\n-----------\nWhen invoked with the INTERVAL form of the second argument, ADDDATE()\nis a synonym for DATE_ADD(). The related function\nSUBDATE() is a synonym for DATE_SUB(). For\ninformation on the INTERVAL unit argument, see the discussion for\nDATE_ADD().\n\nWhen invoked with the days form of the second argument, MariaDB treats it as an\ninteger number of days to be added to expr.\n\nExamples\n--------\nSELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_ADD('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2008-02-02                              |\n+-----------------------------------------+\n\nSELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2008-02-02                             |\n+----------------------------------------+\n\nSELECT ADDDATE('2008-01-02', 31);\n+---------------------------+\n| ADDDATE('2008-01-02', 31) |\n+---------------------------+\n| 2008-02-02                |\n+---------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d, ADDDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | ADDDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-02-09 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-25 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-05-01 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-11-09 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-02-09 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-10-17 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, ADDDATE(d, INTERVAL 10 HOUR) from t1;\n+---------------------+------------------------------+\n| d                   | ADDDATE(d, INTERVAL 10 HOUR) |\n+---------------------+------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-31 07:31:07          |\n| 1983-10-15 06:42:51 | 1983-10-15 16:42:51          |\n| 2011-04-21 12:34:56 | 2011-04-21 22:34:56          |\n| 2011-10-30 06:31:41 | 2011-10-30 16:31:41          |\n| 2011-01-30 14:03:25 | 2011-01-31 00:03:25          |\n| 2004-10-07 11:19:34 | 2004-10-07 21:19:34          |\n+---------------------+------------------------------+\n','','https://mariadb.com/kb/en/library/adddate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (466,31,'ADDTIME','Syntax\n------\nADDTIME(expr1,expr2)\n\nDescription\n-----------\nADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time\nor datetime expression, and expr2 is a time expression.\n\nExamples\n--------\nSELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n+---------------------------------------------------------+\n| ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 2008-01-02 01:01:01.000001                              |\n+---------------------------------------------------------+\n\nSELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| ADDTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| 03:00:01.999997                               |\n+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/addtime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (467,31,'CONVERT_TZ','Syntax\n------\nCONVERT_TZ(dt,from_tz,to_tz)\n\nDescription\n-----------\nCONVERT_TZ() converts a datetime value dt from the time zone given by from_tz to the\ntime zone given by to_tz and returns the resulting value.\n\nIn order to use named time zones, such as GMT, MET or Africa/Johannesburg, the\ntime_zone tables must be loaded (see mysql_tzinfo_to_sql).\n\nNo conversion will take place if the value falls outside of the supported TIMESTAMP\nrange ('1970-01-01 00:00:01' to '2038-01-19 05:14:07' UTC) when converted from\nfrom_tz to UTC.\n\nThis function returns NULL if the arguments are invalid (or named time zones have not\nbeen loaded).\n\nSee time zones for more information.\n\nExamples\n--------\nSELECT CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 2016-01-01 22:00:00                                 |\n+-----------------------------------------------------+\n\nUsing named time zones (with the time zone tables loaded):\nSELECT CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg');\n+---------------------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg') |\n+---------------------------------------------------------------+\n| 2016-01-01 14:00:00                                           |\n+---------------------------------------------------------------+\n\nThe value is out of the TIMESTAMP range, so no conversion takes place:\nSELECT CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 1969-12-31 22:00:00                                 |\n+-----------------------------------------------------+\n','','https://mariadb.com/kb/en/library/convert_tz/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (468,31,'CURDATE','Syntax\n------\nCURDATE()\nCURRENT_DATE\nCURRENT_DATE()\n\nDescription\n-----------\nCURDATE returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or\nnumeric context.\n\nCURRENT_DATE and CURRENT_DATE() are synonyms.\n\nExamples\n--------\nSELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-03-05 |\n+------------+\n\nIn a numeric context (note this is not performing date calculations):\nSELECT CURDATE() +0;\n+--------------+\n| CURDATE() +0 |\n+--------------+\n|     20190305 |\n+--------------+\n\nData calculation:\nSELECT CURDATE() - INTERVAL 5 DAY;\n+----------------------------+\n| CURDATE() - INTERVAL 5 DAY |\n+----------------------------+\n| 2019-02-28                 |\n+----------------------------+\n','','https://mariadb.com/kb/en/library/curdate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (469,31,'CURRENT_DATE','Syntax\n------\nCURRENT_DATE, CURRENT_DATE()\n\nDescription\n-----------\nCURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE().\n','','https://mariadb.com/kb/en/library/current_date/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (470,31,'CURRENT_TIME','Syntax\n------\nCURRENT_TIME\nCURRENT_TIME([precision])\n\nDescription\n-----------\nCURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().\n','','https://mariadb.com/kb/en/library/current_time/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (471,31,'CURRENT_TIMESTAMP','Syntax\n------\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\n\nDescription\n-----------\nCURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW().\n','','https://mariadb.com/kb/en/library/current_timestamp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (472,31,'CURTIME','Syntax\n------\nCURTIME([precision])\n\nDescription\n-----------\nReturns the current time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending\non whether the function is used in a string or numeric context. The value is\nexpressed in the current time zone.\n\nThe optional precision determines the microsecond precision. See Microseconds\nin MariaDB.\n\nExamples\n--------\nSELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 12:45:39  |\n+-----------+\n\nSELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n| 124545.000000 |\n+---------------+\n\nWith precision:\nSELECT CURTIME(2);\n+-------------+\n| CURTIME(2)  |\n+-------------+\n| 09:49:08.09 |\n+-------------+\n','','https://mariadb.com/kb/en/library/curtime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (473,31,'DATE FUNCTION','Syntax\n------\nDATE(expr)\n\nDescription\n-----------\nExtracts the date part of the date or datetime expression expr.\n\nExamples\n--------\nSELECT DATE('2013-07-18 12:21:32');\n+-----------------------------+\n| DATE('2013-07-18 12:21:32') |\n+-----------------------------+\n| 2013-07-18                  |\n+-----------------------------+\n\nError Handling\n--------------\nUntil MariaDB 5.5.32, some versions of MariaDB returned 0000-00-00 when passed an\ninvalid date. From 5.5.32, NULL is returned.\n','','https://mariadb.com/kb/en/library/date-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (474,31,'DATEDIFF','Syntax\n------\nDATEDIFF(expr1,expr2)\n\nDescription\n-----------\nDATEDIFF() returns (expr1 – expr2) expressed\nas a value in days from one date to the other. expr1 and expr2 are date\nor date-and-time expressions. Only the date parts of the values are used in the\ncalculation.\n\nExamples\n--------\nSELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n+----------------------------------------------+\n| DATEDIFF('2007-12-31 23:59:59','2007-12-30') |\n+----------------------------------------------+\n|                                            1 |\n+----------------------------------------------+\n\nSELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n+----------------------------------------------+\n| DATEDIFF('2010-11-30 23:59:59','2010-12-31') |\n+----------------------------------------------+\n|                                          -31 |\n+----------------------------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2011-05-23 10:56:05 |\n+---------------------+\n\nSELECT d, DATEDIFF(NOW(),d) FROM t1;\n+---------------------+-------------------+\n| d                   | DATEDIFF(NOW(),d) |\n+---------------------+-------------------+\n| 2007-01-30 21:31:07 |              1574 |\n| 1983-10-15 06:42:51 |             10082 |\n| 2011-04-21 12:34:56 |                32 |\n| 2011-10-30 06:31:41 |              -160 |\n| 2011-01-30 14:03:25 |               113 |\n| 2004-10-07 11:19:34 |              2419 |\n+---------------------+-------------------+\n','','https://mariadb.com/kb/en/library/datediff/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (475,31,'DATE_ADD','Syntax\n------\nDATE_ADD(date,INTERVAL expr unit)\n\nDescription\n-----------\nPerforms date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be added or subtracted from the starting date. expr is a\nstring; it may start with a "-" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date\nand Time Units for a complete list of permitted units.\n\nExamples\n--------\nSELECT '2008-12-31 23:59:59' + INTERVAL 1 SECOND;\n+-------------------------------------------+\n| '2008-12-31 23:59:59' + INTERVAL 1 SECOND |\n+-------------------------------------------+\n| 2009-01-01 00:00:00                       |\n+-------------------------------------------+\n\nSELECT INTERVAL 1 DAY + '2008-12-31';\n+-------------------------------+\n| INTERVAL 1 DAY + '2008-12-31' |\n+-------------------------------+\n| 2009-01-01                    |\n+-------------------------------+\n\nSELECT '2005-01-01' - INTERVAL 1 SECOND;\n+----------------------------------+\n| '2005-01-01' - INTERVAL 1 SECOND |\n+----------------------------------+\n| 2004-12-31 23:59:59              |\n+----------------------------------+\n\nSELECT DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND);\n+----------------------------------------------------+\n| DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND) |\n+----------------------------------------------------+\n| 2001-01-01 00:00:00                                |\n+----------------------------------------------------+\n\nSELECT DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY);\n+-------------------------------------------------+\n| DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY) |\n+-------------------------------------------------+\n| 2011-01-01 23:59:59                             |\n+-------------------------------------------------+\n\nSELECT DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND);\n+---------------------------------------------------------------+\n| DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND) |\n+---------------------------------------------------------------+\n| 2101-01-01 00:01:00                                           |\n+---------------------------------------------------------------+\n\nSELECT DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR);\n+------------------------------------------------------------+\n| DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR) |\n+------------------------------------------------------------+\n| 1899-12-30 14:00:00                                        |\n+------------------------------------------------------------+\n\nSELECT DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL\n'1.999999' SECOND_MICROSECOND);\n+--------------------------------------------------------------------------------+\n| DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL '1.999999' SECOND_MICROSECOND) |\n+--------------------------------------------------------------------------------+\n| 1993-01-01 00:00:01.000001                                                     |\n+--------------------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/date_add/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (476,31,'DATE_FORMAT','Syntax\n------\nDATE_FORMAT(date, format[, locale])\n\nDescription\n-----------\nFormats the date value according to the format string.\n\nThe language used for the names is controlled by the value of the lc_time_names\nsystem variable. See server locale for more on the supported locales.\n\nThe options that can be used by DATE_FORMAT(), as well as its inverse STR_TO_DATE()\nand the FROM_UNIXTIME() function, are:\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\n|Option                                                                              \n                    |Description\n                                        |\n|%a                                                                                  \n                    |Short weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%b                                                                                  \n                    |Short form month name in current locale. For\nlocale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.|\n|%c                                                                                  \n                    |Month with 1 or 2 digits.\n\n|\n|%D                                                                                  \n                    |Day with English suffix 'th', 'nd', 'st' or\n'rd''. (1st, 2nd, 3rd...).                                                       |\n|%d                                                                                  \n                    |Day with 2 digits.\n\n|\n|%e                                                                                  \n                    |Day with 1 or 2 digits.\n\n|\n|%f                                                                                  \n                    |Microseconds 6 digits.\n\n|\n|%H                                                                                  \n                    |Hour with 2 digits between 00-23.\n\n|\n|%h                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%I                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%i                                                                                  \n                    |Minute with 2 digits.\n\n|\n|%j                                                                                  \n                    |Day of the year (001-366)\n                                        |\n|%k                                                                                  \n                    |Hour with 1 digits between 0-23.\n\n|\n|%l                                                                                  \n                    |Hour with 1 digits between 1-12.\n\n|\n|%M                                                                                  \n                    |Full month name in current locale (Variable\nlc_time_names).                                                                  |\n|%m                                                                                  \n                    |Month with 2 digits.\n\n|\n|%p                                                                                  \n                    |AM/PM according to current locale (Variable\nlc_time_names).                                                                  |\n|%r                                                                                  \n                    |Time in 12 hour format, followed by AM/PM.\n\nShort for '%I:%i:%S %p'.                                                          |\n|%S                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%s                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%T                                                                                  \n                    |Time in 24 hour format. Short for\n'%H:%i:%S'.\n\n|\n|%U                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Sunday.                                                                   |\n|%u                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Monday.                                                                   |\n|%V                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Sunday. Used with %X.                                                     |\n|%v                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Monday. Used with %x.                                                     |\n|%W                                                                                  \n                    |Full weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%w                                                                                  \n                    |Day of the week. 0 = Sunday, 6 = Saturday.\n\n|\n|%X                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Sunday. Used with %V.                                                       |\n|%x                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Monday. Used with %v.                                                       |\n|%Y                                                                                  \n                    |Year with 4 digits.\n\n|\n|%y                                                                                  \n                    |Year with 2 digits.\n\n|\n|%#                                                                                  \n                    |For str_to_date(), skip all numbers.\n\n|\n|%.\n\n|For str_to_date(), skip all punctation\ncharacters.\n\n|\n|%@                                                                                  \n                    |For str_to_date(), skip all alpha\ncharacters.\n\n|\n|%%                                                                                  \n                    |A literal % character.\n\n|\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\nTo get a date in one of the standard formats, GET_FORMAT() can be used.\n\nExamples\n--------\nSELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n+------------------------------------------------+\n| DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y') |\n+------------------------------------------------+\n| Sunday October 2009                            |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n+------------------------------------------------+\n| DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s') |\n+------------------------------------------------+\n| 22:23:00                                       |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j');\n+------------------------------------------------------------+\n| DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j') |\n+------------------------------------------------------------+\n| 4th 00 Thu 04 10 Oct 277                                   |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w');\n+------------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w') |\n+------------------------------------------------------------+\n| 22 22 10 10:23:00 PM 22:23:00 00 6                         |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1999-01-01', '%X %V');\n+------------------------------------+\n| DATE_FORMAT('1999-01-01', '%X %V') |\n+------------------------------------+\n| 1998 52                            |\n+------------------------------------+\n\nSELECT DATE_FORMAT('2006-06-00', '%d');\n+---------------------------------+\n| DATE_FORMAT('2006-06-00', '%d') |\n+---------------------------------+\n| 00                              |\n+---------------------------------+\n','','https://mariadb.com/kb/en/library/date_format/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (477,31,'DATE_SUB','Syntax\n------\nDATE_SUB(date,INTERVAL expr unit)\n\nDescription\n-----------\nPerforms date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be added or subtracted from the starting date. expr is a\nstring; it may start with a "-" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date\nand Time Units for a complete list of permitted units.\n\nSee also DATE_ADD().\n\nExamples\n--------\nSELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('1998-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 1997-12-02                              |\n+-----------------------------------------+\n\nSELECT DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND);\n+----------------------------------------------------------------+\n| DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND) |\n+----------------------------------------------------------------+\n| 2004-12-30 22:58:59                                            |\n+----------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/date_sub/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (478,31,'DAY','Syntax\n------\nDAY(date)\n\nDescription\n-----------\nDAY() is a synonym for DAYOFMONTH().\n','','https://mariadb.com/kb/en/library/day/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (479,31,'DAYNAME','Syntax\n------\nDAYNAME(date)\n\nDescription\n-----------\nReturns the name of the weekday for date. The language used for the name is\ncontrolled by the value\nof the lc_time_names system variable. See server locale for more on the\nsupported locales.\n\nExamples\n--------\nSELECT DAYNAME('2007-02-03');\n+-----------------------+\n| DAYNAME('2007-02-03') |\n+-----------------------+\n| Saturday              |\n+-----------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d, DAYNAME(d) FROM t1;\n+---------------------+------------+\n| d                   | DAYNAME(d) |\n+---------------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |\n| 1983-10-15 06:42:51 | Saturday   |\n| 2011-04-21 12:34:56 | Thursday   |\n| 2011-10-30 06:31:41 | Sunday     |\n| 2011-01-30 14:03:25 | Sunday     |\n| 2004-10-07 11:19:34 | Thursday   |\n+---------------------+------------+\n\nChanging the locale:\nSET lc_time_names = 'fr_CA';\n\nSELECT DAYNAME('2013-04-01');\n+-----------------------+\n| DAYNAME('2013-04-01') |\n+-----------------------+\n| lundi                 |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/dayname/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (480,31,'DAYOFMONTH','Syntax\n------\nDAYOFMONTH(date)\n\nDescription\n-----------\nReturns the day of the month for date, in the range 1 to 31, or 0\nfor dates such as '0000-00-00' or '2008-00-00' which have a zero day\npart.\n\nDAY() is a synonym.\n\nExamples\n--------\nSELECT DAYOFMONTH('2007-02-03');\n+--------------------------+\n| DAYOFMONTH('2007-02-03') |\n+--------------------------+\n|                        3 |\n+--------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d FROM t1 where DAYOFMONTH(d) = 30;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/dayofmonth/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (481,31,'DAYOFWEEK','Syntax\n------\nDAYOFWEEK(date)\n\nDescription\n-----------\nReturns the day of the week index for the date (1 = Sunday, 2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC standard.\n\nThis contrasts with WEEKDAY() which follows a different index numbering\n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).\n\nExamples\n--------\nSELECT DAYOFWEEK('2007-02-03');\n+-------------------------+\n| DAYOFWEEK('2007-02-03') |\n+-------------------------+\n|                       7 |\n+-------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d, DAYNAME(d), DAYOFWEEK(d), WEEKDAY(d) from t1;\n+---------------------+------------+--------------+------------+\n| d                   | DAYNAME(d) | DAYOFWEEK(d) | WEEKDAY(d) |\n+---------------------+------------+--------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |            3 |          1 |\n| 1983-10-15 06:42:51 | Saturday   |            7 |          5 |\n| 2011-04-21 12:34:56 | Thursday   |            5 |          3 |\n| 2011-10-30 06:31:41 | Sunday     |            1 |          6 |\n| 2011-01-30 14:03:25 | Sunday     |            1 |          6 |\n| 2004-10-07 11:19:34 | Thursday   |            5 |          3 |\n+---------------------+------------+--------------+------------+\n','','https://mariadb.com/kb/en/library/dayofweek/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (482,31,'DAYOFYEAR','Syntax\n------\nDAYOFYEAR(date)\n\nDescription\n-----------\nReturns the day of the year for date, in the range 1 to 366.\n\nExamples\n--------\nSELECT DAYOFYEAR('2018-02-16');\n+-------------------------+\n| DAYOFYEAR('2018-02-16') |\n+-------------------------+\n|                      47 |\n+-------------------------+\n','','https://mariadb.com/kb/en/library/dayofyear/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (483,31,'EXTRACT','Syntax\n------\nEXTRACT(unit FROM date)\n\nDescription\n-----------\nThe EXTRACT() function extracts the required unit from the date. See Date and Time\nUnits for a complete list of permitted units.\n\nIn MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR FROM ...) was changed to return a\nvalue from 0 to 23, adhering to the SQL standard. Until MariaDB 10.0.6 and MariaDB\n5.5.34, and in all versions of MySQL at least as of MySQL 5.7, it could return a\nvalue > 23. HOUR() is not a standard function, so continues to adhere to the old\nbehaviour inherited from MySQL.\n\nExamples\n--------\nSELECT EXTRACT(YEAR FROM '2009-07-02');\n+---------------------------------+\n| EXTRACT(YEAR FROM '2009-07-02') |\n+---------------------------------+\n|                            2009 |\n+---------------------------------+\n\nSELECT EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                         200907 |\n+------------------------------------------------+\n\nSELECT EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                          20102 |\n+------------------------------------------------+\n\nSELECT EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123');\n+--------------------------------------------------------+\n| EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123') |\n+--------------------------------------------------------+\n|                                                    123 |\n+--------------------------------------------------------+\n\nFrom MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR FROM...) returns a value from 0\nto 23, as per the SQL standard. HOUR is not a standard function, so continues to\nadhere to the old behaviour inherited from MySQL.\n\nSELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n','','https://mariadb.com/kb/en/library/extract/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (484,31,'FROM_DAYS','Syntax\n------\nFROM_DAYS(N)\n\nDescription\n-----------\nGiven a day number N, returns a DATE value. The day count is based on the number of\ndays from the start of the standard calendar (0000-00-00).\n\nThe function is not designed for use with dates before the advent of the Gregorian\ncalendar in October 1582. Results will not be reliable since it doesn't account for\nthe lost days when the calendar changed from the Julian calendar.\n\nThis is the converse of the TO_DAYS() function.\n\nExamples\n--------\nSELECT FROM_DAYS(730669);\n+-------------------+\n| FROM_DAYS(730669) |\n+-------------------+\n| 2000-07-03        |\n+-------------------+\n','','https://mariadb.com/kb/en/library/from_days/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (485,31,'FROM_UNIXTIME','Syntax\n------\nFROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n\nDescription\n-----------\nReturns a representation of the unix_timestamp argument as a value in\n'YYYY-MM-DD HH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on\nwhether the function is used in a string or numeric context. The value\nis expressed in the current time zone. unix_timestamp is an internal\ntimestamp value such as is produced by the UNIX_TIMESTAMP() function.\n\nIf format is given, the result is formatted according to the format\nstring, which is used the same way as listed in the entry for the\nDATE_FORMAT() function.\n\nTimestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19\n05:14:07. This is due to the underlying 32-bit limitation. Using the function on a\ntimestamp beyond this will result in NULL being returned. Use DATETIME as a storage\ntype if you require dates beyond this.\n\nThe options that can be used by FROM_UNIXTIME(), as well as DATE_FORMAT() and\nSTR_TO_DATE(), are:\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\n|Option                                                                              \n                    |Description\n                                        |\n|%a                                                                                  \n                    |Short weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%b                                                                                  \n                    |Short form month name in current locale. For\nlocale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.|\n|%c                                                                                  \n                    |Month with 1 or 2 digits.\n\n|\n|%D                                                                                  \n                    |Day with English suffix 'th', 'nd', 'st' or\n'rd''. (1st, 2nd, 3rd...).                                                       |\n|%d                                                                                  \n                    |Day with 2 digits.\n\n|\n|%e                                                                                  \n                    |Day with 1 or 2 digits.\n\n|\n|%f                                                                                  \n                    |Microseconds 6 digits.\n\n|\n|%H                                                                                  \n                    |Hour with 2 digits between 00-23.\n\n|\n|%h                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%I                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%i                                                                                  \n                    |Minute with 2 digits.\n\n|\n|%j                                                                                  \n                    |Day of the year (001-366)\n                                        |\n|%k                                                                                  \n                    |Hour with 1 digits between 0-23.\n\n|\n|%l                                                                                  \n                    |Hour with 1 digits between 1-12.\n\n|\n|%M                                                                                  \n                    |Full month name in current locale (Variable\nlc_time_names).                                                                  |\n|%m                                                                                  \n                    |Month with 2 digits.\n\n|\n|%p                                                                                  \n                    |AM/PM according to current locale (Variable\nlc_time_names).                                                                  |\n|%r                                                                                  \n                    |Time in 12 hour format, followed by AM/PM.\n\nShort for '%I:%i:%S %p'.                                                          |\n|%S                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%s                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%T                                                                                  \n                    |Time in 24 hour format. Short for\n'%H:%i:%S'.\n\n|\n|%U                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Sunday.                                                                   |\n|%u                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Monday.                                                                   |\n|%V                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Sunday. Used with %X.                                                     |\n|%v                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Monday. Used with %x.                                                     |\n|%W                                                                                  \n                    |Full weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%w                                                                                  \n                    |Day of the week. 0 = Sunday, 6 = Saturday.\n\n|\n|%X                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Sunday. Used with %V.                                                       |\n|%x                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Sunday. Used with %v.                                                       |\n|%Y                                                                                  \n                    |Year with 4 digits.\n\n|\n|%y                                                                                  \n                    |Year with 2 digits.\n\n|\n|%#                                                                                  \n                    |For str_to_date(), skip all numbers.\n\n|\n|%.\n\n|For str_to_date(), skip all punctation\ncharacters.\n\n|\n|%@                                                                                  \n                    |For str_to_date(), skip all alpha\ncharacters.\n\n|\n|%%                                                                                  \n                    |A literal % character.\n\n|\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\n\nPerformance Considerations\n--------------------------\nIf your session time zone is set to SYSTEM (the default), FROM_UNIXTIME() will call\nthe OS function to convert the data using the system time zone. At least on Linux,\nthe corresponding function (localtime_r) uses a global mutex inside glibc that can\ncause contention under high concurrent load.\n\nSet your time zone to a named time zone to avoid this issue. See mysql time zone\ntables for details on how to do this.\n\nExamples\n--------\nSELECT FROM_UNIXTIME(1196440219);\n+---------------------------+\n| FROM_UNIXTIME(1196440219) |\n+---------------------------+\n| 2007-11-30 11:30:19       |\n+---------------------------+\n\nSELECT FROM_UNIXTIME(1196440219) + 0;\n+-------------------------------+\n| FROM_UNIXTIME(1196440219) + 0 |\n+-------------------------------+\n|         20071130113019.000000 |\n+-------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x') |\n+---------------------------------------------------------+\n| 2010 27th March 01:03:47 2010                           |\n+---------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/from_unixtime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (486,31,'GET_FORMAT','Syntax\n------\nGET_FORMAT({DATE|DATETIME|TIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n\nDescription\n-----------\nReturns a format string. This function is useful in combination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.\n\nPossible result formats are:\n+-------------------------------+-------------------------------+\n|Function Call                  |Result Format                  |\n|GET_FORMAT(DATE,'EUR')         |'%d.%m.%Y'                     |\n|GET_FORMAT(DATE,'USA')         |'%m.%d.%Y'                     |\n|GET_FORMAT(DATE,'JIS')         |'%Y-%m-%d'                     |\n|GET_FORMAT(DATE,'ISO')         |'%Y-%m-%d'                     |\n|GET_FORMAT(DATE,'INTERNAL')    |'%Y%m%d'                       |\n|GET_FORMAT(DATETIME,'EUR')     |'%Y-%m-%d %H.%i.%s'            |\n|GET_FORMAT(DATETIME,'USA')     |'%Y-%m-%d %H.%i.%s'            |\n|GET_FORMAT(DATETIME,'JIS')     |'%Y-%m-%d %H:%i:%s'            |\n|GET_FORMAT(DATETIME,'ISO')     |'%Y-%m-%d %H:%i:%s'            |\n|GET_FORMAT(DATETIME,'INTERNAL')|'%Y%m%d%H%i%s'                 |\n|GET_FORMAT(TIME,'EUR')         |'%H.%i.%s'                     |\n|GET_FORMAT(TIME,'USA')         |'%h:%i:%s %p'                  |\n|GET_FORMAT(TIME,'JIS')         |'%H:%i:%s'                     |\n|GET_FORMAT(TIME,'ISO')         |'%H:%i:%s'                     |\n|GET_FORMAT(TIME,'INTERNAL')    |'%H%i%s'                       |\n+-------------------------------+-------------------------------+\n\nExamples\n--------\nObtaining the string matching to the standard European date format:\nSELECT GET_FORMAT(DATE, 'EUR');\n+-------------------------+\n| GET_FORMAT(DATE, 'EUR') |\n+-------------------------+\n| %d.%m.%Y                |\n+-------------------------+\n\nUsing the same string to format a date:\nSELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n+--------------------------------------------------+\n| DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR')) |\n+--------------------------------------------------+\n| 03.10.2003                                       |\n+--------------------------------------------------+\n\nSELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n+--------------------------------------------------+\n| STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA')) |\n+--------------------------------------------------+\n| 2003-10-31                                       |\n+--------------------------------------------------+\n','','https://mariadb.com/kb/en/library/get_format/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (487,31,'HOUR','Syntax\n------\nHOUR(time)\n\nDescription\n-----------\nReturns the hour for time. The range of the return value is 0 to 23\nfor time-of-day values. However, the range of TIME values actually is\nmuch larger, so HOUR can return values greater than 23.\n\nThe return value is always positive, even if a negative TIME value is provided.\n\nExamples\n--------\nSELECT HOUR('10:05:03');\n+------------------+\n| HOUR('10:05:03') |\n+------------------+\n|               10 |\n+------------------+\n\nSELECT HOUR('272:59:59');\n+-------------------+\n| HOUR('272:59:59') |\n+-------------------+\n|               272 |\n+-------------------+\n\nDifference between EXTRACT (HOUR FROM ...) (>= MariaDB 10.0.7 and MariaDB 5.5.35)\nand HOUR:\nSELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n','','https://mariadb.com/kb/en/library/hour/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (488,31,'LAST_DAY','Syntax\n------\nLAST_DAY(date)\n\nDescription\n-----------\nTakes a date or datetime value and returns the corresponding value for\nthe last day of the month. Returns NULL if the argument is invalid.\n\nExamples\n--------\nSELECT LAST_DAY('2003-02-05');\n+------------------------+\n| LAST_DAY('2003-02-05') |\n+------------------------+\n| 2003-02-28             |\n+------------------------+\n\nSELECT LAST_DAY('2004-02-05');\n+------------------------+\n| LAST_DAY('2004-02-05') |\n+------------------------+\n| 2004-02-29             |\n+------------------------+\n\nSELECT LAST_DAY('2004-01-01 01:01:01');\n+---------------------------------+\n| LAST_DAY('2004-01-01 01:01:01') |\n+---------------------------------+\n| 2004-01-31                      |\n+---------------------------------+\n\nSELECT LAST_DAY('2003-03-32');\n+------------------------+\n| LAST_DAY('2003-03-32') |\n+------------------------+\n| NULL                   |\n+------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Incorrect datetime value: '2003-03-32'\n','','https://mariadb.com/kb/en/library/last_day/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (489,31,'LOCALTIME','Syntax\n------\nLOCALTIME\nLOCALTIME([precision])\n\nDescription\n-----------\nLOCALTIME and LOCALTIME() are synonyms for NOW().\n','','https://mariadb.com/kb/en/library/localtime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (490,31,'LOCALTIMESTAMP','Syntax\n------\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n\nDescription\n-----------\nLOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().\n','','https://mariadb.com/kb/en/library/localtimestamp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (491,31,'MAKEDATE','Syntax\n------\nMAKEDATE(year,dayofyear)\n\nDescription\n-----------\nReturns a date, given year and day-of-year values. dayofyear must be\ngreater than 0 or the result is NULL.\n\nExamples\n--------\nSELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31        | 2011-02-01        |\n+-------------------+-------------------+\n\nSELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n+--------------------+--------------------+\n| MAKEDATE(2011,365) | MAKEDATE(2014,365) |\n+--------------------+--------------------+\n| 2011-12-31         | 2014-12-31         |\n+--------------------+--------------------+\n\nSELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL             |\n+------------------+\n','','https://mariadb.com/kb/en/library/makedate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (492,31,'MAKETIME','Syntax\n------\nMAKETIME(hour,minute,second)\n\nDescription\n-----------\nReturns a time value calculated from the hour, minute, and second arguments.\n\nIf minute or second are out of the range 0 to 60, NULL is returned. The hour can be\nin the range -838 to 838, outside of which the value is truncated with a warning.\n\nExamples\n--------\nSELECT MAKETIME(13,57,33);\n+--------------------+\n| MAKETIME(13,57,33) |\n+--------------------+\n| 13:57:33           |\n+--------------------+\n\nSELECT MAKETIME(-13,57,33);\n+---------------------+\n| MAKETIME(-13,57,33) |\n+---------------------+\n| -13:57:33           |\n+---------------------+\n\nSELECT MAKETIME(13,67,33);\n+--------------------+\n| MAKETIME(13,67,33) |\n+--------------------+\n| NULL               |\n+--------------------+\n\nSELECT MAKETIME(-1000,57,33);\n+-----------------------+\n| MAKETIME(-1000,57,33) |\n+-----------------------+\n| -838:59:59            |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------------+\n| Level   | Code | Message                                       |\n+---------+------+-----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '-1000:57:33' |\n+---------+------+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/maketime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (493,31,'MICROSECOND','Syntax\n------\nMICROSECOND(expr)\n\nDescription\n-----------\nReturns the microseconds from the time or datetime expression expr as a number in the\nrange from 0 to 999999.\n\nIf expr is a time with no microseconds, zero is returned, while if expr is a date\nwith no time, zero with a warning is returned.\n\nExamples\n--------\nSELECT MICROSECOND('12:00:00.123456');\n+--------------------------------+\n| MICROSECOND('12:00:00.123456') |\n+--------------------------------+\n|                         123456 |\n+--------------------------------+\n\nSELECT MICROSECOND('2009-12-31 23:59:59.000010');\n+-------------------------------------------+\n| MICROSECOND('2009-12-31 23:59:59.000010') |\n+-------------------------------------------+\n|                                        10 |\n+-------------------------------------------+\n\nSELECT MICROSECOND('2013-08-07 12:13:14');\n+------------------------------------+\n| MICROSECOND('2013-08-07 12:13:14') |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nSELECT MICROSECOND('2013-08-07');\n+---------------------------+\n| MICROSECOND('2013-08-07') |\n+---------------------------+\n|                         0 |\n+---------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------------+\n| Level   | Code | Message                                      |\n+---------+------+----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '2013-08-07' |\n+---------+------+----------------------------------------------+\n','','https://mariadb.com/kb/en/library/microsecond/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (494,31,'MINUTE','Syntax\n------\nMINUTE(time)\n\nDescription\n-----------\nReturns the minute for time, in the range 0 to 59.\n\nExamples\n--------\nSELECT MINUTE('2013-08-03 11:04:03');\n+-------------------------------+\n| MINUTE('2013-08-03 11:04:03') |\n+-------------------------------+\n|                             4 |\n+-------------------------------+\n\nSELECT MINUTE ('23:12:50');\n+---------------------+\n| MINUTE ('23:12:50') |\n+---------------------+\n|                  12 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/minute/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (495,31,'MONTH','Syntax\n------\nMONTH(date)\n\nDescription\n-----------\nReturns the month for date in the range 1 to 12 for January to\nDecember, or 0 for dates such as '0000-00-00' or '2008-00-00' that\nhave a zero month part.\n\nExamples\n--------\nSELECT MONTH('2019-01-03');\n+---------------------+\n| MONTH('2019-01-03') |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSELECT MONTH('2019-00-03');\n+---------------------+\n| MONTH('2019-00-03') |\n+---------------------+\n|                   0 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/month/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (496,31,'MONTHNAME','Syntax\n------\nMONTHNAME(date)\n\nDescription\n-----------\nReturns the full name of the month for date. The language used for the name is\ncontrolled by the value of the lc_time_names system variable. See server locale for\nmore on the supported locales.\n\nExamples\n--------\nSELECT MONTHNAME('2019-02-03');\n+-------------------------+\n| MONTHNAME('2019-02-03') |\n+-------------------------+\n| February                |\n+-------------------------+\n\nChanging the locale:\nSET lc_time_names = 'fr_CA';\n\nSELECT MONTHNAME('2019-05-21');\n+-------------------------+\n| MONTHNAME('2019-05-21') |\n+-------------------------+\n| mai                     |\n+-------------------------+\n','','https://mariadb.com/kb/en/library/monthname/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (497,31,'NOW','Syntax\n------\nNOW([precision])\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\nLOCALTIME, LOCALTIME([precision])\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n\nDescription\n-----------\nReturns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context. The value is expressed in the\ncurrent time zone.\n\nThe optional precision determines the microsecond precision. See Microseconds\nin MariaDB.\n\nNOW() (or its synonyms) can be used as the default value for TIMESTAMP columns as\nwell as, since MariaDB 10.0.1, DATETIME columns. Before MariaDB 10.0.1, it was only\npossible for a single TIMESTAMP column per table to contain the CURRENT_TIMESTAMP as\nits default.\n\nWhen displayed in the INFORMATION_SCHEMA.COLUMNS table, a default CURRENT TIMESTAMP\nis displayed as CURRENT_TIMESTAMP up until MariaDB 10.2.2, and as current_timestamp()\nfrom MariaDB 10.2.3, due to to MariaDB 10.2 accepting expressions in the\nDEFAULT clause.\n\nExamples\n--------\nSELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2010-03-27 13:13:25 |\n+---------------------+\n\nSELECT NOW() + 0;\n+-----------------------+\n| NOW() + 0             |\n+-----------------------+\n| 20100327131329.000000 |\n+-----------------------+\n\nWith precision:\nSELECT CURRENT_TIMESTAMP(2);\n+------------------------+\n| CURRENT_TIMESTAMP(2)   |\n+------------------------+\n| 2018-07-10 09:47:26.24 |\n+------------------------+\n\nUsed as a default TIMESTAMP:\nCREATE TABLE t (createdTS TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\n\nFrom MariaDB 10.2.2:\nSELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n AND COLUMN_NAME LIKE '%ts%'\G\n*************************** 1. row ***************************\n     TABLE_CATALOG: def\n      TABLE_SCHEMA: test\n       TABLE_NAME: t\n      COLUMN_NAME: ts\n    ORDINAL_POSITION: 1\n     COLUMN_DEFAULT: current_timestamp()\n...\n\n<= MariaDB 10.2.1\nSELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n AND COLUMN_NAME LIKE '%ts%'\G\n*************************** 1. row ***************************\n     TABLE_CATALOG: def\n      TABLE_SCHEMA: test\n       TABLE_NAME: t\n      COLUMN_NAME: createdTS\n    ORDINAL_POSITION: 1\n     COLUMN_DEFAULT: CURRENT_TIMESTAMP\n...\n','','https://mariadb.com/kb/en/library/now/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (498,31,'PERIOD_ADD','Syntax\n------\nPERIOD_ADD(P,N)\n\nDescription\n-----------\nAdds N months to period P. P is in the format YYMM or YYYYMM, and is not a date\nvalue. If P contains a two-digit year, values from 00 to 69 are converted to from\n2000 to 2069, while values from 70 are converted to 1970 upwards.\n\nReturns a value in the format YYYYMM.\n\nExamples\n--------\nSELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n|               200803 |\n+----------------------+\n\nSELECT PERIOD_ADD(6910,2);\n+--------------------+\n| PERIOD_ADD(6910,2) |\n+--------------------+\n|             206912 |\n+--------------------+\n\nSELECT PERIOD_ADD(7010,2);\n+--------------------+\n| PERIOD_ADD(7010,2) |\n+--------------------+\n|             197012 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/period_add/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (499,31,'PERIOD_DIFF','Syntax\n------\nPERIOD_DIFF(P1,P2)\n\nDescription\n-----------\nReturns the number of months between periods P1 and P2. P1 and P2 \ncan be in the format YYMM or YYYYMM, and are not date values.\n\nIf P1 or P2 contains a two-digit year, values from 00 to 69 are converted to from\n2000 to 2069, while values from 70 are converted to 1970 upwards.\n\nExamples\n--------\nSELECT PERIOD_DIFF(200802,200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n|                         11 |\n+----------------------------+\n\nSELECT PERIOD_DIFF(6902,6803);\n+------------------------+\n| PERIOD_DIFF(6902,6803) |\n+------------------------+\n|                     11 |\n+------------------------+\n\nSELECT PERIOD_DIFF(7002,6803);\n+------------------------+\n| PERIOD_DIFF(7002,6803) |\n+------------------------+\n|                  -1177 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/period_diff/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (500,31,'QUARTER','Syntax\n------\nQUARTER(date)\n\nDescription\n-----------\nReturns the quarter of the year for date, in the range 1 to 4. Returns 0 if month\ncontains a zero value, or NULL if the given value is not otherwise a valid date (zero\nvalues are accepted).\n\nExamples\n--------\nSELECT QUARTER('2008-04-01');\n+-----------------------+\n| QUARTER('2008-04-01') |\n+-----------------------+\n|                     2 |\n+-----------------------+\n\nSELECT QUARTER('2019-00-01');\n+-----------------------+\n| QUARTER('2019-00-01') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n','','https://mariadb.com/kb/en/library/quarter/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (501,31,'SECOND','Syntax\n------\nSECOND(time)\n\nDescription\n-----------\nReturns the second for a given time (which can include microseconds), in the range 0\nto 59, or NULL if not given a valid time value.\n\nExamples\n--------\nSELECT SECOND('10:05:03');\n+--------------------+\n| SECOND('10:05:03') |\n+--------------------+\n|                  3 |\n+--------------------+\n\nSELECT SECOND('10:05:01.999999');\n+---------------------------+\n| SECOND('10:05:01.999999') |\n+---------------------------+\n|                         1 |\n+---------------------------+\n','','https://mariadb.com/kb/en/library/second/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (502,31,'SEC_TO_TIME','Syntax\n------\nSEC_TO_TIME(seconds)\n\nDescription\n-----------\nReturns the seconds argument, converted to hours, minutes, and\nseconds, as a TIME value. The range of the result is constrained to\nthat of the TIME data type. A warning occurs if the argument\ncorresponds to a value outside that range.\n\nThe time will be returned in the format hh:mm:ss, or hhmmss if used in a\nnumeric calculation.\n\nExamples\n--------\nSELECT SEC_TO_TIME(12414);\n+--------------------+\n| SEC_TO_TIME(12414) |\n+--------------------+\n| 03:26:54           |\n+--------------------+\n\nSELECT SEC_TO_TIME(12414)+0;\n+----------------------+\n| SEC_TO_TIME(12414)+0 |\n+----------------------+\n|                32654 |\n+----------------------+\n\nSELECT SEC_TO_TIME(9999999);\n+----------------------+\n| SEC_TO_TIME(9999999) |\n+----------------------+\n| 838:59:59            |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '9999999' |\n+---------+------+-------------------------------------------+\n','','https://mariadb.com/kb/en/library/sec_to_time/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (503,31,'STR_TO_DATE','Syntax\n------\nSTR_TO_DATE(str,format)\n\nDescription\n-----------\nThis is the inverse of the DATE_FORMAT() function. It takes\na string str and a format string format. STR_TO_DATE() returns a\nDATETIME value if the format string contains both date and time parts, or a\nDATE or TIME value if the string contains only date or time parts.\n\nThe date, time, or datetime values contained in str should be given in the format\nindicated by format. If str contains an illegal date, time, or datetime value,\nSTR_TO_DATE() returns NULL. An illegal value also produces a warning.\n\nThe options that can be used by STR_TO_DATE(), as well as its inverse DATE_FORMAT()\nand the FROM_UNIXTIME() function, are:\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\n|Option                                                                              \n                    |Description\n                                        |\n|%a                                                                                  \n                    |Short weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%b                                                                                  \n                    |Short form month name in current locale. For\nlocale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.|\n|%c                                                                                  \n                    |Month with 1 or 2 digits.\n\n|\n|%D                                                                                  \n                    |Day with English suffix 'th', 'nd', 'st' or\n'rd''. (1st, 2nd, 3rd...).                                                       |\n|%d                                                                                  \n                    |Day with 2 digits.\n\n|\n|%e                                                                                  \n                    |Day with 1 or 2 digits.\n\n|\n|%f                                                                                  \n                    |Microseconds 6 digits.\n\n|\n|%H                                                                                  \n                    |Hour with 2 digits between 00-23.\n\n|\n|%h                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%I                                                                                  \n                    |Hour with 2 digits between 01-12.\n\n|\n|%i                                                                                  \n                    |Minute with 2 digits.\n\n|\n|%j                                                                                  \n                    |Day of the year (001-366)\n                                        |\n|%k                                                                                  \n                    |Hour with 1 digits between 0-23.\n\n|\n|%l                                                                                  \n                    |Hour with 1 digits between 1-12.\n\n|\n|%M                                                                                  \n                    |Full month name in current locale (Variable\nlc_time_names).                                                                  |\n|%m                                                                                  \n                    |Month with 2 digits.\n\n|\n|%p                                                                                  \n                    |AM/PM according to current locale (Variable\nlc_time_names).                                                                  |\n|%r                                                                                  \n                    |Time in 12 hour format, followed by AM/PM.\n\nShort for '%I:%i:%S %p'.                                                          |\n|%S                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%s                                                                                  \n                    |Seconds with 2 digits.\n\n|\n|%T                                                                                  \n                    |Time in 24 hour format. Short for\n'%H:%i:%S'.\n\n|\n|%U                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Sunday.                                                                   |\n|%u                                                                                  \n                    |Week number (00-53), when first day of the\nweek is Monday.                                                                   |\n|%V                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Sunday. Used with %X.                                                     |\n|%v                                                                                  \n                    |Week number (01-53), when first day of the\nweek is Monday. Used with %x.                                                     |\n|%W                                                                                  \n                    |Full weekday name in current locale\n(Variable lc_time_names).\n\n|\n|%w                                                                                  \n                    |Day of the week. 0 = Sunday, 6 = Saturday.\n\n|\n|%X                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Sunday. Used with %V.                                                       |\n|%x                                                                                  \n                    |Year with 4 digits when first day of the\nweek is Monday. Used with %v.                                                       |\n|%Y                                                                                  \n                    |Year with 4 digits.\n\n|\n|%y                                                                                  \n                    |Year with 2 digits.\n\n|\n|%#                                                                                  \n                    |For str_to_date(), skip all numbers.\n\n|\n|%.\n\n|For str_to_date(), skip all punctation\ncharacters.\n\n|\n|%@                                                                                  \n                    |For str_to_date(), skip all alpha\ncharacters.\n\n|\n|%%                                                                                  \n                    |A literal % character.\n\n|\n+------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n--------------------------------------------------------------------------------+\n\nExamples\n--------\nSELECT STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y');\n+---------------------------------------------------------+\n| STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y') |\n+---------------------------------------------------------+\n| 2014-06-02                                              |\n+---------------------------------------------------------+\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y');\n+--------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y') |\n+--------------------------------------------------------------+\n| NULL                                                         |\n+--------------------------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-------------------------------------------------------------------\n---------------+\n| Level   | Code | Message                                                           \n       |\n+---------+------+-------------------------------------------------------------------\n---------------+\n| Warning | 1411 | Incorrect datetime value: 'Wednesday23423, June 2, 2014' for\nfunction str_to_date |\n+---------+------+-------------------------------------------------------------------\n---------------+\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y');\n+----------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y') |\n+----------------------------------------------------------------+\n| 2014-06-02                                                     |\n+----------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/str_to_date/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (504,31,'SUBDATE','Syntax\n------\nSUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n\nDescription\n-----------\nWhen invoked with the INTERVAL form of the second argument, SUBDATE()\nis a synonym for DATE_SUB(). See Date and Time Units for a complete list of permitted\nunits.\n\nThe second form allows the use of an integer value for days. In such\ncases, it is interpreted as the number of days to be subtracted from\nthe date or datetime expression expr.\n\nExamples\n--------\nSELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2007-12-02                              |\n+-----------------------------------------+\n\nSELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2007-12-02                             |\n+----------------------------------------+\n\nSELECT SUBDATE('2008-01-02 12:00:00', 31);\n+------------------------------------+\n| SUBDATE('2008-01-02 12:00:00', 31) |\n+------------------------------------+\n| 2007-12-02 12:00:00                |\n+------------------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d, SUBDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | SUBDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-01-20 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-05 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-04-11 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-10-20 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-01-20 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-09-27 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, SUBDATE(d, INTERVAL 10 MINUTE) from t1;\n+---------------------+--------------------------------+\n| d                   | SUBDATE(d, INTERVAL 10 MINUTE) |\n+---------------------+--------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-30 21:21:07            |\n| 1983-10-15 06:42:51 | 1983-10-15 06:32:51            |\n| 2011-04-21 12:34:56 | 2011-04-21 12:24:56            |\n| 2011-10-30 06:31:41 | 2011-10-30 06:21:41            |\n| 2011-01-30 14:03:25 | 2011-01-30 13:53:25            |\n| 2004-10-07 11:19:34 | 2004-10-07 11:09:34            |\n+---------------------+--------------------------------+\n','','https://mariadb.com/kb/en/library/subdate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (505,31,'SUBTIME','Syntax\n------\nSUBTIME(expr1,expr2)\n\nDescription\n-----------\nSUBTIME() returns expr1 - expr2 expressed as a value in the same\nformat as expr1. expr1 is a time or datetime expression, and expr2 is\na time expression.\n\nExamples\n--------\nSELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n+--------------------------------------------------------+\n| SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002') |\n+--------------------------------------------------------+\n| 2007-12-30 22:58:58.999997                             |\n+--------------------------------------------------------+\n\nSELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| SUBTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| -00:59:59.999999                              |\n+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/subtime/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (506,31,'SYSDATE','Syntax\n------\nSYSDATE([precision])\n\nDescription\n-----------\nReturns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context.\n\nThe optional precision determines the microsecond precision. See Microseconds\nin MariaDB.\n\nSYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored routine\nor trigger, NOW() returns the time at which the routine or triggering\nstatement began to execute.)\nIn addition, changing the timestamp system variable with a SET timestamp statement\naffects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().\n\nBecause SYSDATE() can return different values even within the same\nstatement, and is not affected by SET TIMESTAMP, it is\nnon-deterministic and therefore unsafe for replication if\nstatement-based binary logging is used. If that is a problem, you can\nuse row-based logging, or start the server with the mysqld option --sysdate-is-now to\ncause SYSDATE() to be an alias for NOW(). The non-deterministic nature of SYSDATE()\nalso means that indexes cannot be used for evaluating expressions that refer to it,\nand that statements using the SYSDATE() function are unsafe for\nstatement-based replication.\n\nExamples\n--------\nDifference between NOW() and SYSDATE():\nSELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:40 |        0 | 2010-03-27 13:23:40 |\n+---------------------+----------+---------------------+\n\nSELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:52 |        0 | 2010-03-27 13:23:54 |\n+---------------------+----------+---------------------+\n\nWith precision:\nSELECT SYSDATE(4);\n+--------------------------+\n| SYSDATE(4)               |\n+--------------------------+\n| 2018-07-10 10:17:13.1689 |\n+--------------------------+\n','','https://mariadb.com/kb/en/library/sysdate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (507,31,'TIME Function','Syntax\n------\nTIME(expr)\n\nDescription\n-----------\nExtracts the time part of the time or datetime expression expr and\nreturns it as a string.\n\nExamples\n--------\nSELECT TIME('2003-12-31 01:02:03');\n+-----------------------------+\n| TIME('2003-12-31 01:02:03') |\n+-----------------------------+\n| 01:02:03                    |\n+-----------------------------+\n\nSELECT TIME('2003-12-31 01:02:03.000123');\n+------------------------------------+\n| TIME('2003-12-31 01:02:03.000123') |\n+------------------------------------+\n| 01:02:03.000123                    |\n+------------------------------------+\n','','https://mariadb.com/kb/en/library/time-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (508,31,'TIMEDIFF','Syntax\n------\nTIMEDIFF(expr1,expr2)\n\nDescription\n-----------\nTIMEDIFF() returns expr1 - expr2 expressed as a time value. expr1 and\nexpr2 are time or date-and-time expressions, but both must be of the\nsame type.\n\nExamples\n--------\nSELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001');\n+---------------------------------------------------------------+\n| TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001') |\n+---------------------------------------------------------------+\n| -00:00:00.000001                                              |\n+---------------------------------------------------------------+\n\nSELECT TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002');\n+----------------------------------------------------------------------+\n| TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002') |\n+----------------------------------------------------------------------+\n| 46:58:57.999999                                                      |\n+----------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/timediff/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (509,31,'TIMESTAMP FUNCTION','Syntax\n------\nTIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n\nDescription\n-----------\nWith a single argument, this function returns the date or datetime\nexpression expr as a datetime value. With two arguments, it adds the\ntime expression expr2 to the date or datetime expression expr1 and\nreturns the result as a datetime value.\n\nExamples\n--------\nSELECT TIMESTAMP('2003-12-31');\n+-------------------------+\n| TIMESTAMP('2003-12-31') |\n+-------------------------+\n| 2003-12-31 00:00:00     |\n+-------------------------+\n\nSELECT TIMESTAMP('2003-12-31 12:00:00','6:30:00');\n+--------------------------------------------+\n| TIMESTAMP('2003-12-31 12:00:00','6:30:00') |\n+--------------------------------------------+\n| 2003-12-31 18:30:00                        |\n+--------------------------------------------+\n','','https://mariadb.com/kb/en/library/timestamp-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (510,31,'TIMESTAMPADD','Syntax\n------\nTIMESTAMPADD(unit,interval,datetime_expr)\n\nDescription\n-----------\nAdds the integer expression interval to the date or datetime\nexpression datetime_expr. The unit for interval is given by the unit\nargument, which should be one of the following values: MICROSECOND, SECOND, MINUTE,\nHOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.\n\nThe unit value may be specified using one of keywords as shown, or\nwith a prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are\nlegal.\n\nBefore MariaDB 5.5, FRAC_SECOND was permitted as a synonym for MICROSECOND.\n\nExamples\n--------\nSELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');\n+-------------------------------------+\n| TIMESTAMPADD(MINUTE,1,'2003-01-02') |\n+-------------------------------------+\n| 2003-01-02 00:01:00                 |\n+-------------------------------------+\n\nSELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n+-----------------------------------+\n| TIMESTAMPADD(WEEK,1,'2003-01-02') |\n+-----------------------------------+\n| 2003-01-09                        |\n+-----------------------------------+\n','','https://mariadb.com/kb/en/library/timestampadd/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (511,31,'TIMESTAMPDIFF','Syntax\n------\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n\nDescription\n-----------\nReturns datetime_expr2 - datetime_expr1, where datetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One expression may be\na date and the other a datetime; a date value is treated as a datetime\nhaving the time part '00:00:00' where necessary. The unit for the\nresult (an integer) is given by the unit argument. The legal values\nfor unit are the same as those listed in the description of the\nTIMESTAMPADD() function, i.e  MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH,\nQUARTER, or YEAR.\n\nTIMESTAMPDIFF can also be used to calculate age.\n\nExamples\n--------\nSELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n+------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01') |\n+------------------------------------------------+\n|                                              3 |\n+------------------------------------------------+\n\nSELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n+-----------------------------------------------+\n| TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01') |\n+-----------------------------------------------+\n|                                            -1 |\n+-----------------------------------------------+\n\nSELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n+----------------------------------------------------------+\n| TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55') |\n+----------------------------------------------------------+\n|                                                   128885 |\n+----------------------------------------------------------+\n\nCalculating age:\nSELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-05-27 |\n+------------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-06-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   47 |\n+------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-05-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   48 |\n+------+\n\nAge as of 2014-08-02:\nSELECT name, date_of_birth, TIMESTAMPDIFF(YEAR,date_of_birth,'2014-08-02') AS age \n FROM student_details;\n+---------+---------------+------+\n| name    | date_of_birth | age  |\n+---------+---------------+------+\n| Chun    | 1993-12-31    |   20 |\n| Esben   | 1946-01-01    |   68 |\n| Kaolin  | 1996-07-16    |   18 |\n| Tatiana | 1988-04-13    |   26 |\n+---------+---------------+------+\n','','https://mariadb.com/kb/en/library/timestampdiff/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (512,31,'TIME_FORMAT','Syntax\n------\nTIME_FORMAT(time,format)\n\nDescription\n-----------\nThis is used like the DATE_FORMAT() function, but the format string\nmay contain format specifiers only for hours, minutes, and seconds.\n\nOther specifiers produce a NULL value or 0.\n\nExamples\n--------\nSELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+--------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l') |\n+--------------------------------------------+\n| 100 100 04 04 4                            |\n+--------------------------------------------+\n','','https://mariadb.com/kb/en/library/time_format/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (513,31,'TIME_TO_SEC','Syntax\n------\nTIME_TO_SEC(time)\n\nDescription\n-----------\nReturns the time argument, converted to seconds.\n\nThe value returned by TIME_TO_SEC is of type DOUBLE. Before MariaDB 5.3 (and MySQL\n5.6), the type was INT. The returned value preserves microseconds of the argument.\n\nSee also Microseconds in MariaDB.\n\nExamples\n--------\nSELECT TIME_TO_SEC('22:23:00');\n+-------------------------+\n| TIME_TO_SEC('22:23:00') |\n+-------------------------+\n|                   80580 |\n+-------------------------+\n\nSELECT TIME_TO_SEC('00:39:38');\n+-------------------------+\n| TIME_TO_SEC('00:39:38') |\n+-------------------------+\n|                    2378 |\n+-------------------------+\n\nSELECT TIME_TO_SEC('09:12:55.2355');\n+------------------------------+\n| TIME_TO_SEC('09:12:55.2355') |\n+------------------------------+\n|                   33175.2355 |\n+------------------------------+\n1 row in set (0.000 sec)\n','','https://mariadb.com/kb/en/library/time_to_sec/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (514,31,'TO_DAYS','Syntax\n------\nTO_DAYS(date)\n\nDescription\n-----------\nGiven a date date, returns the number of days since the start of the current\ncalendar (0000-00-00).\n\nThe function is not designed for use with dates before the advent of the Gregorian\ncalendar in October 1582. Results will not be reliable since it doesn't account for\nthe lost days when the calendar changed from the Julian calendar.\n\nThis is the converse of the FROM_DAYS() function.\n\nExamples\n--------\nSELECT TO_DAYS('2007-10-07');\n+-----------------------+\n| TO_DAYS('2007-10-07') |\n+-----------------------+\n|                733321 |\n+-----------------------+\n\nSELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| TO_DAYS('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT TO_DAYS(950501);\n+-----------------+\n| TO_DAYS(950501) |\n+-----------------+\n|          728779 |\n+-----------------+\n','','https://mariadb.com/kb/en/library/to_days/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (515,31,'TO_SECONDS','Syntax\n------\nTO_SECONDS(expr)\n\nDescription\n-----------\nReturns the number of seconds from year 0 till expr, or NULL if expr is not a valid\ndate or datetime.\n\nExamples\n--------\nSELECT TO_SECONDS('2013-06-13');\n+--------------------------+\n| TO_SECONDS('2013-06-13') |\n+--------------------------+\n|              63538300800 |\n+--------------------------+\n\nSELECT TO_SECONDS('2013-06-13 21:45:13');\n+-----------------------------------+\n| TO_SECONDS('2013-06-13 21:45:13') |\n+-----------------------------------+\n|                       63538379113 |\n+-----------------------------------+\n\nSELECT TO_SECONDS(NOW());\n+-------------------+\n| TO_SECONDS(NOW()) |\n+-------------------+\n|       63543530875 |\n+-------------------+\n\nSELECT TO_SECONDS(20130513);\n+----------------------+\n| TO_SECONDS(20130513) |\n+----------------------+\n|          63535622400 |\n+----------------------+\n1 row in set (0.00 sec)\n\nSELECT TO_SECONDS(130513);\n+--------------------+\n| TO_SECONDS(130513) |\n+--------------------+\n|        63535622400 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/to_seconds/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (516,31,'UNIX_TIMESTAMP','Syntax\n------\nUNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n\nDescription\n-----------\nIf called with no argument, returns a Unix timestamp (seconds since\n'1970-01-01 00:00:00' UTC) as an unsigned integer. If UNIX_TIMESTAMP()\nis called with a date argument, it returns the value of the argument as seconds\nsince '1970-01-01 00:00:00' UTC. date may be a DATE string, a\nDATETIME string, a TIMESTAMP, or a number in\nthe format YYMMDD or YYYYMMDD. The server interprets date as a value in the\ncurrent time zone and converts it to an internal value in UTC. Clients can set\ntheir time zone as described in time zones.\n\nThe inverse function of UNIX_TIMESTAMP() is FROM_UNIXTIME()\nUNIX_TIMESTAMP() supports microseconds.\n\nTimestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19\n05:14:07. This is due to the underlying 32-bit limitation. Using the function on a\ndate beyond this will result in NULL being returned. Use DATETIME as a storage type\nif you require dates beyond this.\n\nError Handling\n\nReturns NULL for wrong arguments to UNIX_TIMESTAMP(). In MySQL and MariaDB before 5.3\nwrong arguments to UNIX_TIMESTAMP() returned 0.\n\nCompatibility\n\nAs you can see in the examples above, UNIX_TIMESTAMP(constant-date-string) returns a\ntimestamp with 6 decimals while MariaDB 5.2 and before returns it without decimals.\n\nThis can cause a problem if you are using UNIX_TIMESTAMP() as a partitioning\nfunction. You can fix this by using FLOOR(UNIX_TIMESTAMP(..)) or changing the date\nstring to a date number, like 20080101000000.\n\nExamples\n--------\nSELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n|       1269711082 |\n+------------------+\n\nSELECT UNIX_TIMESTAMP('2007-11-30 10:30:19');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2007-11-30 10:30:19') |\n+---------------------------------------+\n|                     1196436619.000000 |\n+---------------------------------------+\n\nSELECT UNIX_TIMESTAMP("2007-11-30 10:30:19.123456");\n+----------------------------------------------+\n| unix_timestamp("2007-11-30 10:30:19.123456") |\n+----------------------------------------------+\n|                            1196411419.123456 |\n+----------------------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19'));\n+------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19')) |\n+------------------------------------------------------+\n| 2007-11-30 10:30:19.000000                           |\n+------------------------------------------------------+\n\nSELECT FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19')));\n+-------------------------------------------------------------+\n| FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19'))) |\n+-------------------------------------------------------------+\n| 2007-11-30 10:30:19                                         |\n+-------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/unix_timestamp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (517,31,'UTC_DATE','Syntax\n------\nUTC_DATE, UTC_DATE()\n\nDescription\n-----------\nReturns the current UTC date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or numeric context.\n\nExamples\n--------\nSELECT UTC_DATE(), UTC_DATE() + 0;\n+------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 |\n+------------+----------------+\n| 2010-03-27 |       20100327 |\n+------------+----------------+\n','','https://mariadb.com/kb/en/library/utc_date/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (518,31,'UTC_TIME','Syntax\n------\nUTC_TIME\nUTC_TIME([precision])\n\nDescription\n-----------\nReturns the current UTC time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format,\ndepending on whether the function is used in a string or numeric context.\n\nThe optional precision determines the microsecond precision. See Microseconds\nin MariaDB.\n\nExamples\n--------\nSELECT UTC_TIME(), UTC_TIME() + 0;\n+------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 |\n+------------+----------------+\n| 17:32:34   |  173234.000000 |\n+------------+----------------+\n\nWith precision:\nSELECT UTC_TIME(5);\n+----------------+\n| UTC_TIME(5)    |\n+----------------+\n| 07:52:50.78369 |\n+----------------+\n','','https://mariadb.com/kb/en/library/utc_time/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (519,31,'UTC_TIMESTAMP','Syntax\n------\nUTC_TIMESTAMP\nUTC_TIMESTAMP([precision])\n\nDescription\n-----------\nReturns the current UTC date and time as a value in 'YYYY-MM-DD\nHH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on whether the\nfunction is used in a string or numeric context.\n\nThe optional precision determines the microsecond precision. See Microseconds\nin MariaDB.\n\nExamples\n--------\nSELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n+---------------------+-----------------------+\n| UTC_TIMESTAMP()     | UTC_TIMESTAMP() + 0   |\n+---------------------+-----------------------+\n| 2010-03-27 17:33:16 | 20100327173316.000000 |\n+---------------------+-----------------------+\n\nWith precision:\nSELECT UTC_TIMESTAMP(4);\n+--------------------------+\n| UTC_TIMESTAMP(4)         |\n+--------------------------+\n| 2018-07-10 07:51:09.1019 |\n+--------------------------+\n','','https://mariadb.com/kb/en/library/utc_timestamp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (520,31,'WEEK','Syntax\n------\nWEEK(date[,mode])\n\nDescription\n-----------\nThis function returns the week number for date. The two-argument form of\nWEEK() allows you to specify whether the week starts on Sunday or Monday\nand whether the return value should be in the range from 0 to 53 or from 1 to\n53. If the mode argument is omitted, the value of the default_week_format system\nvariable is used.\n\nModes\n\n+---------------------------+---------------------------+---------------------------+\n--------------------------+\n|Mode                       |1st day of week            |Range                     \n|Week 1 is the 1st week with|\n|0                          |Sunday                     |0-53                      \n|a Sunday in this year      |\n|1                          |Monday                     |0-53                      \n|more than 3 days this year |\n|2                          |Sunday                     |1-53                      \n|a Sunday in this year      |\n|3                          |Monday                     |1-53                      \n|more than 3 days this year |\n|4                          |Sunday                     |0-53                      \n|more than 3 days this year |\n|5                          |Monday                     |0-53                      \n|a Monday in this year      |\n|6                          |Sunday                     |1-53                      \n|more than 3 days this year |\n|7                          |Monday                     |1-53                      \n|a Monday in this year      |\n+---------------------------+---------------------------+---------------------------+\n--------------------------+\nWith the mode value of 3, which means “more than 3 days this year”,  weeks are\nnumbered according to ISO 8601:1988.\n\nExamples\n--------\nSELECT WEEK('2008-02-20');\n+--------------------+\n| WEEK('2008-02-20') |\n+--------------------+\n|                  7 |\n+--------------------+\n\nSELECT WEEK('2008-02-20',0);\n+----------------------+\n| WEEK('2008-02-20',0) |\n+----------------------+\n|                    7 |\n+----------------------+\n\nSELECT WEEK('2008-02-20',1);\n+----------------------+\n| WEEK('2008-02-20',1) |\n+----------------------+\n|                    8 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',0);\n+----------------------+\n| WEEK('2008-12-31',0) |\n+----------------------+\n|                   52 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',1);\n+----------------------+\n| WEEK('2008-12-31',1) |\n+----------------------+\n|                   53 |\n+----------------------+\n\nSELECT WEEK('2019-12-30',3);\n+----------------------+\n| WEEK('2019-12-30',3) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d, WEEK(d,0), WEEK(d,1) from t1;\n+---------------------+-----------+-----------+\n| d                   | WEEK(d,0) | WEEK(d,1) |\n+---------------------+-----------+-----------+\n| 2007-01-30 21:31:07 |         4 |         5 |\n| 1983-10-15 06:42:51 |        41 |        41 |\n| 2011-04-21 12:34:56 |        16 |        16 |\n| 2011-10-30 06:31:41 |        44 |        43 |\n| 2011-01-30 14:03:25 |         5 |         4 |\n| 2004-10-07 11:19:34 |        40 |        41 |\n+---------------------+-----------+-----------+\n','','https://mariadb.com/kb/en/library/week/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (521,31,'WEEKDAY','Syntax\n------\nWEEKDAY(date)\n\nDescription\n-----------\nReturns the weekday index for date \n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).\n\nThis contrasts with DAYOFWEEK() which follows the ODBC standard\n(1 = Sunday, 2 = Monday, ..., 7 = Saturday).\n\nExamples\n--------\nSELECT WEEKDAY('2008-02-03 22:23:00');\n+--------------------------------+\n| WEEKDAY('2008-02-03 22:23:00') |\n+--------------------------------+\n|                              6 |\n+--------------------------------+\n\nSELECT WEEKDAY('2007-11-06');\n+-----------------------+\n| WEEKDAY('2007-11-06') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT d FROM t1 where WEEKDAY(d) = 6;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n','','https://mariadb.com/kb/en/library/weekday/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (522,31,'WEEKOFYEAR','Syntax\n------\nWEEKOFYEAR(date)\n\nDescription\n-----------\nReturns the calendar week of the date as a number in the range from 1\nto 53. WEEKOFYEAR() is a compatibility function that is equivalent to\nWEEK(date,3).\n\nExamples\n--------\nSELECT WEEKOFYEAR('2008-02-20');\n+--------------------------+\n| WEEKOFYEAR('2008-02-20') |\n+--------------------------+\n|                        8 |\n+--------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nselect * from t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n\nSELECT d, WEEKOFYEAR(d), WEEK(d,3) from t1;\n+---------------------+---------------+-----------+\n| d                   | WEEKOFYEAR(d) | WEEK(d,3) |\n+---------------------+---------------+-----------+\n| 2007-01-30 21:31:07 |             5 |         5 |\n| 1983-10-15 06:42:51 |            41 |        41 |\n| 2011-04-21 12:34:56 |            16 |        16 |\n| 2011-10-30 06:31:41 |            43 |        43 |\n| 2011-01-30 14:03:25 |             4 |         4 |\n| 2004-10-07 11:19:34 |            41 |        41 |\n+---------------------+---------------+-----------+\n','','https://mariadb.com/kb/en/library/weekofyear/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (523,31,'YEAR','Syntax\n------\nYEAR(date)\n\nDescription\n-----------\nReturns the year for the given date, in the range 1000 to 9999, or 0 for the\n"zero" date.\n\nExamples\n--------\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n\nSELECT * FROM t1 WHERE YEAR(d) = 2011;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n\nSELECT YEAR('1987-01-01');\n+--------------------+\n| YEAR('1987-01-01') |\n+--------------------+\n|               1987 |\n+--------------------+\n','','https://mariadb.com/kb/en/library/year/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (524,31,'YEARWEEK','Syntax\n------\nYEARWEEK(date), YEARWEEK(date,mode)\n\nDescription\n-----------\nReturns year and week for a date. The mode argument works exactly like the mode\nargument to WEEK(). The year in the result may be different from the\nyear in the date argument for the first and the last week of the year.\n\nExamples\n--------\nSELECT YEARWEEK('1987-01-01');\n+------------------------+\n| YEARWEEK('1987-01-01') |\n+------------------------+\n|                 198652 |\n+------------------------+\n\nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\n\nSELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n6 rows in set (0.02 sec)\n\nSELECT YEARWEEK(d) FROM t1 WHERE YEAR(d) = 2011;\n+-------------+\n| YEARWEEK(d) |\n+-------------+\n|      201116 |\n|      201144 |\n|      201105 |\n+-------------+\n3 rows in set (0.03 sec)\n','','https://mariadb.com/kb/en/library/yearweek/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (525,32,'Well-Known Binary (WKB) Format','WKB stands for Well-Known Binary, a format for representing geographical and\ngeometrical data.\n\nWKB uses 1-byte unsigned integers, 4-byte unsigned integers, and 8-byte\ndouble-precision numbers.\n\nTake the following example, a sequence of 21 bytes each represented by two\nhex digits:\n000000000140000000000000004010000000000000\n','','https://mariadb.com/kb/en/library/well-known-binary-wkb-format/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (526,32,'AsBinary','A synonym for ST_AsBinary().\n','','https://mariadb.com/kb/en/library/wkb-asbinary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (527,32,'AsWKB','A synonym for ST_AsBinary().\n','','https://mariadb.com/kb/en/library/aswkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (528,32,'MLineFromWKB','Syntax\n------\nMLineFromWKB(wkb[,srid])\nMultiLineStringFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a MULTILINESTRING value using its WKB  representation and SRID.\n\nMLineFromWKB() and MultiLineStringFromWKB() are synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(MLineFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16\n23,16 48))'));\n\nSELECT ST_AsText(MLineFromWKB(@g));\n+--------------------------------------------------------+\n| ST_AsText(MLineFromWKB(@g))                            |\n+--------------------------------------------------------+\n| MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48)) |\n+--------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/mlinefromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (529,32,'MPointFromWKB','Syntax\n------\nMPointFromWKB(wkb[,srid])\nMultiPointFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a MULTIPOINT value using its WKB representation and SRID.\n\nMPointFromWKB() and MultiPointFromWKB() are synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(MPointFromText('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6\n9, 4 9, 1 5 )'));\n\nSELECT ST_AsText(MPointFromWKB(@g));\n+-----------------------------------------------------+\n| ST_AsText(MPointFromWKB(@g))                        |\n+-----------------------------------------------------+\n| MULTIPOINT(1 1,2 2,5 3,7 2,9 3,8 4,6 6,6 9,4 9,1 5) |\n+-----------------------------------------------------+\n','','https://mariadb.com/kb/en/library/mpointfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (530,32,'MPolyFromWKB','Syntax\n------\nMPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a MULTIPOLYGON value using its WKB  representation and SRID.\n\nMPolyFromWKB() and MultiPolygonFromWKB() are synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(MPointFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52\n18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))'));\n\nSELECT ST_AsText(MPolyFromWKB(@g));\n+------------------------------------------------------------------------------------\n--------------------------+\n| ST_AsText(MPolyFromWKB(@g))                                                        \n             |\n+------------------------------------------------------------------------------------\n--------------------------+\n| MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59\n18,67 18,67 13,59 13,59 18))) |\n+------------------------------------------------------------------------------------\n--------------------------+\n','','https://mariadb.com/kb/en/library/mpolyfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (531,32,'GeomCollFromWKB','A synonym for ST_GeomCollFromWKB.\n','','https://mariadb.com/kb/en/library/wkb-geomcollfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (532,32,'GeometryCollectionFromWKB','A synonym for ST_GeomCollFromWKB.\n','','https://mariadb.com/kb/en/library/geometrycollectionfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (533,32,'GeometryFromWKB','A synonym for ST_GeomFromWKB.\n','','https://mariadb.com/kb/en/library/geometryfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (534,32,'GeomFromWKB','A synonym for ST_GeomFromWKB.\n','','https://mariadb.com/kb/en/library/wkb-geomfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (535,32,'LineFromWKB','A synonym for ST_LineFromWKB.\n','','https://mariadb.com/kb/en/library/wkb-linefromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (536,32,'LineStringFromWKB','A synonym for ST_LineFromWKB.\n','','https://mariadb.com/kb/en/library/linestringfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (537,32,'MultiLineStringFromWKB','A synonym for MLineFromWKB().\n','','https://mariadb.com/kb/en/library/multilinestringfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (538,32,'MultiPointFromWKB','A synonym for MPointFromWKB.\n','','https://mariadb.com/kb/en/library/multipointfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (539,32,'MultiPolygonFromWKB','Synonym for MPolyFromWKB.\n','','https://mariadb.com/kb/en/library/multipolygonfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (540,32,'PointFromWKB','A synonym for ST_PointFromWKB.\n','','https://mariadb.com/kb/en/library/wkb-pointfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (541,32,'PolyFromWKB','A synonym for ST_PolyFromWKB.\n','','https://mariadb.com/kb/en/library/wkb-polyfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (542,32,'PolygonFromWKB','A synonym for ST_PolyFromWKB.\n','','https://mariadb.com/kb/en/library/polygonfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (543,32,'ST_AsBinary','Syntax\n------\nST_AsBinary(g)\nAsBinary(g)\nST_AsWKB(g)\nAsWKB(g)\n\nDescription\n-----------\nConverts a value in internal geometry format to its WKB representation and returns\nthe binary result.\n\nST_AsBinary(), AsBinary(), ST_AsWKB() and AsWKB() are synonyms,\n\nExamples\n--------\nSET @poly = ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))');\nSELECT ST_AsBinary(@poly);\n\nSELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly)));\n+--------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly))) |\n+--------------------------------------------+\n| POLYGON((0 0,0 1,1 1,1 0,0 0))             |\n+--------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_asbinary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (544,32,'ST_AsWKB','A synonym for ST_AsBinary().\n','','https://mariadb.com/kb/en/library/st_aswkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (545,32,'ST_GeomCollFromWKB','Syntax\n------\nST_GeomCollFromWKB(wkb[,srid])\nST_GeometryCollectionFromWKB(wkb[,srid])\nGeomCollFromWKB(wkb[,srid])\nGeometryCollectionFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a GEOMETRYCOLLECTION value using its WKB  representation and SRID.\n\nST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(), GeomCollFromWKB() and\nGeometryCollectionFromWKB() are synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(ST_GeomFromText('GEOMETRYCOLLECTION(POLYGON((5 5,10 5,10 10,5\n5)),POINT(10 10))'));\n\nSELECT ST_AsText(ST_GeomCollFromWKB(@g));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomCollFromWKB(@g))                              |\n+----------------------------------------------------------------+\n| GEOMETRYCOLLECTION(POLYGON((5 5,10 5,10 10,5 5)),POINT(10 10)) |\n+----------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_geomcollfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (546,32,'ST_GeometryCollectionFromWKB','A synonym for ST_GeomCollFromWKB.\n','','https://mariadb.com/kb/en/library/st_geometrycollectionfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (547,32,'ST_GeometryFromWKB','A synonym for ST_GeomFromWKB.\n','','https://mariadb.com/kb/en/library/st_geometryfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (548,32,'ST_GeomFromWKB','Syntax\n------\nST_GeomFromWKB(wkb[,srid])\nST_GeometryFromWKB(wkb[,srid])\nGeomFromWKB(wkb[,srid])\nGeometryFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a geometry value of any type using its WKB  representation and SRID.\n\nST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB() and GeometryFromWKB()\nare synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(ST_LineFromText('LINESTRING(0 4, 4 6)'));\n\nSELECT ST_AsText(ST_GeomFromWKB(@g));\n+-------------------------------+\n| ST_AsText(ST_GeomFromWKB(@g)) |\n+-------------------------------+\n| LINESTRING(0 4,4 6)           |\n+-------------------------------+\n','','https://mariadb.com/kb/en/library/st_geomfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (549,32,'ST_LineFromWKB','Syntax\n------\nST_LineFromWKB(wkb[,srid])\nLineFromWKB(wkb[,srid])\nST_LineStringFromWKB(wkb[,srid])\nLineStringFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a LINESTRING value using its WKB  representation and SRID.\n\nST_LineFromWKB(), LineFromWKB(), ST_LineStringFromWKB(), and LineStringFromWKB()\nare synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(ST_LineFromText('LineString(0 4,4 6)'));\n\nSELECT ST_AsText(ST_LineFromWKB(@g)) AS l;\n+---------------------+\n| l                   |\n+---------------------+\n| LINESTRING(0 4,4 6) |\n+---------------------+\n','','https://mariadb.com/kb/en/library/st_linefromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (550,32,'ST_LineStringFromWKB','A synonym for ST_LineFromWKB.\n','','https://mariadb.com/kb/en/library/st_linestringfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (551,32,'ST_PointFromWKB','Syntax\n------\nST_PointFromWKB(wkb[,srid])\nPointFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a POINT value using its WKB representation and SRID.\n\nST_PointFromWKB() and PointFromWKB() are synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(ST_PointFromText('POINT(0 4)'));\n\nSELECT ST_AsText(ST_PointFromWKB(@g)) AS p;\n+------------+\n| p          |\n+------------+\n| POINT(0 4) |\n+------------+\n','','https://mariadb.com/kb/en/library/st_pointfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (552,32,'ST_PolyFromWKB','Syntax\n------\nST_PolyFromWKB(wkb[,srid])\nST_PolygonFromWKB(wkb[,srid])\nPolyFromWKB(wkb[,srid])\nPolygonFromWKB(wkb[,srid])\n\nDescription\n-----------\nConstructs a POLYGON value using its WKB representation and SRID.\n\nST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB() and PolygonFromWKB()\nare synonyms.\n\nExamples\n--------\nSET @g = ST_AsBinary(ST_PolyFromText('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))'));\n\nSELECT ST_AsText(ST_PolyFromWKB(@g)) AS p;\n+----------------------------------------+\n| p                                      |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n','','https://mariadb.com/kb/en/library/st_polyfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (553,32,'ST_PolygonFromWKB','A synonym for ST_PolyFromWKB.\n','','https://mariadb.com/kb/en/library/st_polygonfromwkb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (554,36,'BOUNDARY','A synonym for ST_BOUNDARY.\n','','https://mariadb.com/kb/en/library/geometry-properties-boundary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (555,36,'DIMENSION','A synonym for ST_DIMENSION.\n','','https://mariadb.com/kb/en/library/dimension/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (556,36,'ENVELOPE','A synonym for ST_ENVELOPE.\n','','https://mariadb.com/kb/en/library/geometry-properties-envelope/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (557,36,'GeometryN','A synonym for ST_GeometryN.\n','','https://mariadb.com/kb/en/library/geometry-properties-geometryn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (558,36,'GeometryType','A synonym for ST_GeometryType.\n','','https://mariadb.com/kb/en/library/geometry-properties-geometrytype/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (559,36,'IsClosed','A synonym for ST_IsClosed.\n','','https://mariadb.com/kb/en/library/isclosed/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (560,36,'IsEmpty','A synonym for ST_IsEmpty.\n','','https://mariadb.com/kb/en/library/geometry-properties-isempty/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (561,36,'IsRing','A synonym for ST_IsRing.\n','','https://mariadb.com/kb/en/library/isring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (562,36,'IsSimple','A synonym for ST_IsSImple.\n','','https://mariadb.com/kb/en/library/geometry-properties-issimple/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (563,36,'NumGeometries','A synonym for ST_NumGeometries.\n','','https://mariadb.com/kb/en/library/geometry-properties-numgeometries/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (564,36,'SRID','A synonym for ST_SRID.\n','','https://mariadb.com/kb/en/library/geometry-properties-srid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (565,36,'ST_BOUNDARY','Syntax\n------\nST_BOUNDARY(g)\nBOUNDARY(g)\n\nDescription\n-----------\nReturns a geometry that is the closure of the combinatorial boundary of the geometry\nvalue g.\n\nBOUNDARY() is a synonym.\n\nExamples\n--------\nSELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)')));\n+----------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)'))) |\n+----------------------------------------------------------------------+\n| MULTIPOINT(3 3,-3 3)                                                 |\n+----------------------------------------------------------------------+\n\nSELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))')));\n+--------------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))'))) |\n+--------------------------------------------------------------------------+\n| LINESTRING(3 3,0 0,-3 3,3 3)                                             |\n+--------------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_boundary/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (566,36,'ST_DIMENSION','Syntax\n------\nST_Dimension(g)\nDimension(g)\n\nDescription\n-----------\nReturns the inherent dimension of the geometry value g. The result can\nbe\n+----------------------------------------+----------------------------------------+\n|Dimension                               |Definition                              |\n|   -1                                   |empty geometry                          |\n|    0                                   |geometry with no length or area         |\n|    1                                   |geometry with no area but nonzero length|\n|    2                                   |geometry with nonzero area              |\n+----------------------------------------+----------------------------------------+\nST_Dimension() and Dimension() are synonyms.\n\nExamples\n--------\nSELECT Dimension(GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------+\n| Dimension(GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_dimension/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (567,36,'ST_ENVELOPE','Syntax\n------\nST_ENVELOPE(g)\nENVELOPE(g)\n\nDescription\n-----------\nReturns the Minimum Bounding Rectangle (MBR) for the geometry value g.  The result is\nreturned as a Polygon value.\n\nThe polygon is defined by the corner points of the bounding box:\nPOLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n\nST_ENVELOPE() and ENVELOPE() are synonyms.\n\nExamples\n--------\nSELECT AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)')));\n+----------------------------------------------------------+\n| AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)'))) |\n+----------------------------------------------------------+\n| POLYGON((1 1,4 1,4 4,1 4,1 1))                           |\n+----------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_envelope/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (568,36,'ST_GEOMETRYN','Syntax\n------\nST_GeometryN(gc,N)\nGeometryN(gc,N)\n\nDescription\n-----------\nReturns the N-th geometry in the GeometryCollection gc. Geometries are numbered\nbeginning with 1.\n\nST_GeometryN() and GeometryN() are synonyms.\n\nExample\n-------\nSET @gc = 'GeometryCollection(Point(1 1),LineString(12 14, 9 11))';\n\nSELECT AsText(GeometryN(GeomFromText(@gc),1));\n+----------------------------------------+\n| AsText(GeometryN(GeomFromText(@gc),1)) |\n+----------------------------------------+\n| POINT(1 1)                             |\n+----------------------------------------+\n','','https://mariadb.com/kb/en/library/st_geometryn/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (569,36,'ST_GEOMETRYTYPE','Syntax\n------\nST_GeometryType(g)\nGeometryType(g)\n\nDescription\n-----------\nReturns as a string the name of the geometry type of which the\ngeometry instance g is a member. The name corresponds to one of the\ninstantiable Geometry subclasses.\n\nST_GeometryType() and GeometryType() are synonyms.\n\nExamples\n--------\nSELECT GeometryType(GeomFromText('POINT(1 1)'));\n+------------------------------------------+\n| GeometryType(GeomFromText('POINT(1 1)')) |\n+------------------------------------------+\n| POINT                                    |\n+------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_geometrytype/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (570,36,'ST_ISCLOSED','Syntax\n------\nST_IsClosed(g)\nIsClosed(g)\n\nDescription\n-----------\nReturns 1 if a given LINESTRING's start and end points are the same, or 0 if they are\nnot the same. Before MariaDB 10.1.5, returns NULL if not given a LINESTRING. After\nMariaDB 10.1.5, returns -1.\n\nST_IsClosed() and IsClosed() are synonyms.\n\nExamples\n--------\nSET @ls = 'LineString(0 0, 0 4, 4 4, 0 0)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n\nSET @ls = 'LineString(0 0, 0 4, 4 4, 0 1)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              0 |\n+--------------------------------+\n','','https://mariadb.com/kb/en/library/st_isclosed/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (571,36,'ST_ISEMPTY','Syntax\n------\nST_IsEmpty(g)\nIsEmpty(g)\n\nDescription\n-----------\nIsEmpty is a function defined by the OpenGIS specification, but is not fully\nimplemented by MariaDB or MySQL.\n\nSince MariaDB and MySQL do not support GIS EMPTY values such as POINT EMPTY, as\nimplemented it simply returns 1 if the geometry value g is invalid, 0 if it is valid,\nand NULL if the argument is NULL.\n\nST_IsEmpty() and IsEmpty() are synonyms.\n','','https://mariadb.com/kb/en/library/st_isempty/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (572,36,'ST_IsRing','Syntax\n------\nST_IsRing(g)\nIsRing(g)\n\nDescription\n-----------\nReturns true if a given LINESTRING is a ring, that is, both ST_IsClosed and\nST_IsSimple. A simple curve does not pass through the same point more than once.\n\nHowever, see MDEV-7510.\n\nSt_IsRing() and IsRing() are synonyms.\n','','https://mariadb.com/kb/en/library/st_isring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (573,36,'ST_IsSimple','Syntax\n------\nST_IsSimple(g)\nIsSimple(g)\n\nDescription\n-----------\nReturns true if the given Geometry has no anomalous geometric points, false if it\ndoes, or NULL if given a NULL value.\n\nST_IsSimple() and IsSimple() are synonyms.\n\nExamples\n--------\nA POINT is always simple.\n\nSET @g = 'Point(1 2)';\n\nSELECT ST_ISSIMPLE(GEOMFROMTEXT(@g));\n+-------------------------------+\n| ST_ISSIMPLE(GEOMFROMTEXT(@g)) |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\n','','https://mariadb.com/kb/en/library/st_issimple/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (574,36,'ST_NUMGEOMETRIES','Syntax\n------\nST_NumGeometries(gc)\nNumGeometries(gc)\n\nDescription\n-----------\nReturns the number of geometries in the GeometryCollection gc.\n\nST_NumGeometries() and NumGeometries() are synonyms.\n\nExample\n-------\nSET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\n\nSELECT NUMGEOMETRIES(GeomFromText(@gc));\n+----------------------------------+\n| NUMGEOMETRIES(GeomFromText(@gc)) |\n+----------------------------------+\n|                                2 |\n+----------------------------------+\n','','https://mariadb.com/kb/en/library/st_numgeometries/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (575,36,'ST_RELATE','Syntax\n------\nST_Relate(g1, g2, i)\n\nDescription\n-----------\nReturns true if Geometry g1 is spatially related to Geometryg2 by testing for\nintersections between the interior, boundary and exterior of the two geometries as\nspecified by the values in intersection matrix pattern i.\n','','https://mariadb.com/kb/en/library/st_relate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (576,36,'ST_SRID','Syntax\n------\nST_SRID(g)\nSRID(g)\n\nDescription\n-----------\nReturns an integer indicating the Spatial Reference System ID for the\ngeometry value g.\n\nIn MariaDB, the SRID value is just an integer associated with the\ngeometry value. All calculations are done assuming Euclidean (planar)\ngeometry.\n\nST_SRID() and SRID() are synonyms.\n\nExamples\n--------\nSELECT SRID(GeomFromText('LineString(1 1,2 2)',101));\n+-----------------------------------------------+\n| SRID(GeomFromText('LineString(1 1,2 2)',101)) |\n+-----------------------------------------------+\n|                                           101 |\n+-----------------------------------------------+\n','','https://mariadb.com/kb/en/library/st_srid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (577,37,'ASCII','Syntax\n------\nASCII(str)\n\nDescription\n-----------\nReturns the numeric ASCII value of the leftmost character of the string argument.\n\nReturns 0 if the given string is empty and NULL if it is NULL.\n\nASCII() works for 8-bit characters.\n\nExamples\n--------\nSELECT ASCII(9);\n+----------+\n| ASCII(9) |\n+----------+\n|       57 |\n+----------+\n\nSELECT ASCII('9');\n+------------+\n| ASCII('9') |\n+------------+\n|         57 |\n+------------+\n\nSELECT ASCII('abc');\n+--------------+\n| ASCII('abc') |\n+--------------+\n|           97 |\n+--------------+\n','','https://mariadb.com/kb/en/library/ascii/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (578,37,'BIN','Syntax\n------\nBIN(N)\n\nDescription\n-----------\nReturns a string representation of the binary value of the given longlong (that is,\nBIGINT) number. This is equivalent to CONV(N,10,2). The argument should be positive.\n\nIf it is a FLOAT, it will be truncated. Returns NULL if the argument is NULL.\n\nExamples\n--------\nSELECT BIN(12);\n+---------+\n| BIN(12) |\n+---------+\n| 1100    |\n+---------+\n','','https://mariadb.com/kb/en/library/bin/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (579,37,'BINARY Operator','This page describes the BINARY operator. For details about the data type, see\nBinary Data Type.\n\nSyntax\n------\nBINARY\n\nDescription\n-----------\nThe BINARY operator casts the string following it to a binary string.  This is an\neasy way to force a column comparison to be done byte by byte rather than character\nby character. This causes the comparison to be case sensitive even if the column\nisn't defined as BINARY or BLOB.\n\nBINARY also causes trailing spaces to be significant.\n\nExamples\n--------\nSELECT 'a' = 'A';\n+-----------+\n| 'a' = 'A' |\n+-----------+\n|         1 |\n+-----------+\n\nSELECT BINARY 'a' = 'A';\n+------------------+\n| BINARY 'a' = 'A' |\n+------------------+\n|                0 |\n+------------------+\n\nSELECT 'a' = 'a ';\n+------------+\n| 'a' = 'a ' |\n+------------+\n|          1 |\n+------------+\n\nSELECT BINARY 'a' = 'a ';\n+-------------------+\n| BINARY 'a' = 'a ' |\n+-------------------+\n|                 0 |\n+-------------------+\n','','https://mariadb.com/kb/en/library/binary-operator/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (580,37,'BIT_LENGTH','Syntax\n------\nBIT_LENGTH(str)\n\nDescription\n-----------\nReturns the length of the given string argument in bits. If the argument is not a\nstring, it will be converted to string. If the argument is NULL, it returns NULL.\n\nExamples\n--------\nSELECT BIT_LENGTH('text');\n+--------------------+\n| BIT_LENGTH('text') |\n+--------------------+\n|                 32 |\n+--------------------+\n\nSELECT BIT_LENGTH('');\n+----------------+\n| BIT_LENGTH('') |\n+----------------+\n|              0 |\n+----------------+\n\nCompatibility\n-------------\nPostgreSQL and Sybase support BIT_LENGTH().\n','','https://mariadb.com/kb/en/library/bit_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (581,37,'CAST','Syntax\n------\nCAST(expr AS type)\n\nDescription\n-----------\nThe CAST() function takes a value of one type and produces a value of another type,\nsimilar to the CONVERT() function.\n\nThe type can be one of the following values:\n\nThe main difference between CAST and CONVERT() is that CONVERT(expr,type) is ODBC\nsyntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.\n\nIn MariaDB 10.4 and later, you can use the CAST() function with the INTERVAL keyword.\n\nUntil MariaDB 5.5.31, X'HHHH', the standard SQL syntax for binary string literals,\nerroneously worked in the same way as 0xHHHH. In 5.5.31 it was intentionally changed\nto behave as a string in all contexts (and never as a number).\n\nThis introduced an incompatibility with previous versions of MariaDB, and all\nversions of MySQL (see the example below).\n\nExamples\n--------\nSimple casts:\nSELECT CAST("abc" AS BINARY);\nSELECT CAST("1" AS UNSIGNED INTEGER);\nSELECT CAST(123 AS CHAR CHARACTER SET utf8)\n\nNote that when one casts to CHAR without specifying the character set, the\ncollation_connection character set collation will be used. When used with CHAR\nCHARACTER SET, the default collation for that character set will be used.\n\nSELECT COLLATION(CAST(123 AS CHAR));\n+------------------------------+\n| COLLATION(CAST(123 AS CHAR)) |\n+------------------------------+\n| latin1_swedish_ci            |\n+------------------------------+\n\nSELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8));\n+-------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8)) |\n+-------------------------------------------------+\n| utf8_general_ci                                 |\n+-------------------------------------------------+\n\nIf you also want to change the collation, you have to use the COLLATE operator:\nSELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) \n COLLATE utf8_unicode_ci);\n+-------------------------------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) COLLATE utf8_unicode_ci) |\n+-------------------------------------------------------------------------+\n| utf8_unicode_ci                                                         |\n+-------------------------------------------------------------------------+\n\nUsing CAST() to order an ENUM field as a CHAR rather than the internal\nnumerical value:\nCREATE TABLE enum_list (enum_field enum('c','a','b'));\n\nINSERT INTO enum_list (enum_field) \nVALUES('c'),('a'),('c'),('b');\n\nSELECT * FROM enum_list \nORDER BY enum_field;\n+------------+\n| enum_field |\n+------------+\n| c          |\n| c          |\n| a          |\n| b          |\n+------------+\n\nSELECT * FROM enum_list \nORDER BY CAST(enum_field AS CHAR);\n+------------+\n| enum_field |\n+------------+\n| a          |\n| b          |\n| c          |\n| c          |\n+------------+\n\nFrom MariaDB 5.5.31, the following will trigger warnings, since x'aa' and 'X'aa' no\nlonger behave as a number. Previously, and in all versions of MySQL, no warnings are\ntriggered since they did erroneously behave as a number:\nSELECT CAST(0xAA AS UNSIGNED), CAST(x'aa' AS UNSIGNED), CAST(X'aa' AS UNSIGNED);\n+------------------------+-------------------------+-------------------------+\n| CAST(0xAA AS UNSIGNED) | CAST(x'aa' AS UNSIGNED) | CAST(X'aa' AS UNSIGNED) |\n+------------------------+-------------------------+-------------------------+\n|                    170 |                       0 |                       0 |\n+------------------------+-------------------------+-------------------------+\n1 row in set, 2 warnings (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect INTEGER value: '\xAA'\nWarning (Code 1292): Truncated incorrect INTEGER value: '\xAA'\n\nCasting to intervals:\nSELECT CAST(2019-01-04 INTERVAL AS DAY_SECOND(2)) AS "Cast";\n\n+-------------+\n| Cast        |\n+-------------+\n| 00:20:17.00 |\n+-------------+\n','','https://mariadb.com/kb/en/library/cast/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (582,37,'CHAR Function','Syntax\n------\nCHAR(N,... [USING charset_name])\n\nDescription\n-----------\nCHAR() interprets each argument as an INT and returns a string consisting of the\ncharacters given by the code values of those integers. NULL values are skipped.  By\ndefault, CHAR() returns a binary string. To produce a string in a given character\nset, use the optional USING clause:\nSELECT CHARSET(CHAR(0x65)), CHARSET(CHAR(0x65 USING utf8));\n+---------------------+--------------------------------+\n| CHARSET(CHAR(0x65)) | CHARSET(CHAR(0x65 USING utf8)) |\n+---------------------+--------------------------------+\n| binary              | utf8                           |\n+---------------------+--------------------------------+\n\nIf USING is given and the result string is illegal for the given character set, a\nwarning is issued. Also, if strict SQL mode is enabled, the result from CHAR()\nbecomes NULL.\n\nExamples\n--------\nSELECT CHAR(77,97,114,'105',97,'68',66);\n+----------------------------------+\n| CHAR(77,97,114,'105',97,'68',66) |\n+----------------------------------+\n| MariaDB                          |\n+----------------------------------+\n\nSELECT CHAR(77,77.3,'77.3');\n+----------------------+\n| CHAR(77,77.3,'77.3') |\n+----------------------+\n| MMM                  |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect INTEGER value: '77.3'\n','','https://mariadb.com/kb/en/library/char-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (583,37,'CHARACTER_LENGTH','Syntax\n------\nCHARACTER_LENGTH(str)\n\nDescription\n-----------\nCHARACTER_LENGTH() is a synonym for CHAR_LENGTH().\n','','https://mariadb.com/kb/en/library/character_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (584,37,'CHAR_LENGTH','Syntax\n------\nCHAR_LENGTH(str)\nCHARACTER_LENGTH(str)\n\nDescription\n-----------\nReturns the length of the given string argument, measured in characters. A multi-byte\ncharacter counts as a single character. This means that for a string containing five\ntwo-byte characters, LENGTH() (or OCTET_LENGTH() in Oracle mode) returns 10, whereas\nCHAR_LENGTH() returns 5. If the argument is NULL, it returns NULL.\n\nIf the argument is not a string value, it is converted into a string.\n\nIt is synonymous with the CHARACTER_LENGTH() function.\n\nExamples\n--------\nSELECT CHAR_LENGTH('MariaDB');\n+------------------------+\n| CHAR_LENGTH('MariaDB') |\n+------------------------+\n|                      7 |\n+------------------------+\n\nWhen Oracle mode from MariaDB 10.3 is not set:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n\nIn Oracle mode from MariaDB 10.3:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n','','https://mariadb.com/kb/en/library/char_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (585,37,'CHR','Syntax\n------\nCHR(N)\n\nDescription\n-----------\nCHR() interprets each argument N as an integer and returns a VARCHAR(1) string\nconsisting of the character given by the code values of the integer. The character\nset and collation of the string are set according to the values of the\ncharacter_set_database and collation_database system variables.\n\nCHR() is similar to the CHAR() function, but only accepts a single argument.\n\nCHR() is available in all sql_modes.\n\nExamples\n--------\nSELECT CHR(67);\n+---------+\n| CHR(67) |\n+---------+\n| C       |\n+---------+\n\nSELECT CHR('67');\n+-----------+\n| CHR('67') |\n+-----------+\n| C         |\n+-----------+\n\nSELECT CHR('C');\n+----------+\n| CHR('C') |\n+----------+\n|          |\n+----------+\n1 row in set, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: 'C' |\n+---------+------+----------------------------------------+\n','','https://mariadb.com/kb/en/library/chr/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (586,37,'CONCAT','Syntax\n------\nCONCAT(str1,str2,...)\n\nDescription\n-----------\nReturns the string that results from concatenating the arguments. May have one or\nmore arguments. If all arguments are non-binary strings, the result is a non-binary\nstring. If the arguments include any binary strings, the result is a binary string. A\nnumeric argument is converted to its equivalent binary string form; if you want to\navoid that, you can use an explicit type cast, as in this example:\nSELECT CONCAT(CAST(int_col AS CHAR), char_col);\n\nCONCAT() returns NULL if any argument is NULL.\n\nA NULL parameter hides all information contained in other parameters from the result.\n\nSometimes this is not desirable; to avoid this, you can:\n\nOracle Mode\n\nExamples\n--------\nSELECT CONCAT('Ma', 'ria', 'DB');\n+---------------------------+\n| CONCAT('Ma', 'ria', 'DB') |\n+---------------------------+\n| MariaDB                   |\n+---------------------------+\n\nSELECT CONCAT('Ma', 'ria', NULL, 'DB');\n+---------------------------------+\n| CONCAT('Ma', 'ria', NULL, 'DB') |\n+---------------------------------+\n| NULL                            |\n+---------------------------------+\n\nSELECT CONCAT(42.0);\n+--------------+\n| CONCAT(42.0) |\n+--------------+\n| 42.0         |\n+--------------+\n\nUsing IFNULL() to handle NULLs:\nSELECT CONCAT('The value of @v is: ', IFNULL(@v, ''));\n+------------------------------------------------+\n| CONCAT('The value of @v is: ', IFNULL(@v, '')) |\n+------------------------------------------------+\n| The value of @v is:                            |\n+------------------------------------------------+\n\nIn Oracle mode, from MariaDB 10.3:\nSELECT CONCAT('Ma', 'ria', NULL, 'DB');\n+---------------------------------+\n| CONCAT('Ma', 'ria', NULL, 'DB') |\n+---------------------------------+\n| MariaDB                         |\n+---------------------------------+\n','','https://mariadb.com/kb/en/library/concat/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (587,37,'CONCAT_WS','Syntax\n------\nCONCAT_WS(separator,str1,str2,...)\n\nDescription\n-----------\nCONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT().\n\nThe first argument is the separator for the rest of the arguments. The separator is\nadded between the strings to be concatenated. The separator can be a string, as can\nthe rest of the arguments.\n\nIf the separator is NULL, the result is NULL; all other NULL values are skipped. This\nmakes CONCAT_WS() suitable when you want to concatenate some values and avoid losing\nall information if one of them is NULL.\n\nExamples\n--------\nSELECT CONCAT_WS(',','First name','Second name','Last Name');\n+-------------------------------------------------------+\n| CONCAT_WS(',','First name','Second name','Last Name') |\n+-------------------------------------------------------+\n| First name,Second name,Last Name                      |\n+-------------------------------------------------------+\n\nSELECT CONCAT_WS('-','Floor',NULL,'Room');\n+------------------------------------+\n| CONCAT_WS('-','Floor',NULL,'Room') |\n+------------------------------------+\n| Floor-Room                         |\n+------------------------------------+\n\nIn some cases, remember to include a space in the separator string:\nSET @a = 'gnu', @b = 'penguin', @c = 'sea lion';\nQuery OK, 0 rows affected (0.00 sec)\n\nSELECT CONCAT_WS(', ', @a, @b, @c);\n+-----------------------------+\n| CONCAT_WS(', ', @a, @b, @c) |\n+-----------------------------+\n| gnu, penguin, sea lion      |\n+-----------------------------+\n\nUsing CONCAT_WS() to handle NULLs:\nSET @a = 'a', @b = NULL, @c = 'c';\n\nSELECT CONCAT_WS('', @a, @b, @c);\n+---------------------------+\n| CONCAT_WS('', @a, @b, @c) |\n+---------------------------+\n| ac                        |\n+---------------------------+\n','','https://mariadb.com/kb/en/library/concat_ws/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (588,37,'CONVERT','Syntax\n------\nCONVERT(expr,type), CONVERT(expr USING transcoding_name)\n\nDescription\n-----------\nThe	CONVERT() and CAST() functions take a value of one type and produce a value of\nanother type.\n\nThe type can be one of the following values:\n\nNote that in MariaDB, INT and INTEGER are the same thing.\n\nBINARY produces a string with the BINARY data type.  If the optional length is given,\nBINARY(N) causes the cast to use no more than N bytes of the argument. Values shorter\nthan the given number in bytes are padded with 0x00 bytes to make them equal the\nlength value.\n\nCHAR(N) causes the cast to use no more than the number of characters given in\nthe argument.\n\nThe main difference between the CAST() and CONVERT() is that CONVERT(expr,type) is\nODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.\n\nCONVERT() with USING is used to convert data between different character sets. In\nMariaDB, transcoding names are the same as the\ncorresponding character set names. For example, this statement\nconverts the string 'abc' in the default character set to the\ncorresponding string in the utf8 character set:\nSELECT CONVERT('abc' USING utf8);\n\nExamples\n--------\nSELECT enum_col FROM tbl_name \nORDER BY CAST(enum_col AS CHAR);\n\nConverting a BINARY to string to permit the LOWER function to work:\nSET @x = 'AardVark';\n\nSET @x = BINARY 'AardVark';\n\nSELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));\n+-----------+----------------------------------+\n| LOWER(@x) | LOWER(CONVERT (@x USING latin1)) |\n+-----------+----------------------------------+\n| AardVark  | aardvark                         |\n+-----------+----------------------------------+\n','','https://mariadb.com/kb/en/library/convert/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (589,37,'ELT','Syntax\n------\nELT(N, str1[, str2, str3,...])\n\nDescription\n-----------\nTakes a numeric argument and a series of string arguments. Returns the string that\ncorresponds to the given numeric position.  For instance, it returns str1 if N is 1,\nstr2 if N is 2, and so on.  If the numeric argument is a FLOAT, MariaDB rounds it to\nthe nearest INTEGER.  If the numeric argument is less than 1, greater than the total\nnumber of arguments, or not a number, ELT() returns NULL.  It must have at least\ntwo arguments.\n\nIt is complementary to the FIELD() function.\n\nExamples\n--------\nSELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');\n+------------------------------------+\n| ELT(1, 'ej', 'Heja', 'hej', 'foo') |\n+------------------------------------+\n| ej                                 |\n+------------------------------------+\n\nSELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');\n+------------------------------------+\n| ELT(4, 'ej', 'Heja', 'hej', 'foo') |\n+------------------------------------+\n| foo                                |\n+------------------------------------+\n','','https://mariadb.com/kb/en/library/elt/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (590,37,'EXPORT_SET','Syntax\n------\nEXPORT_SET(bits, on, off[, separator[, number_of_bits]])\n\nDescription\n-----------\nTakes a minimum of three arguments.  Returns a string where each bit in the given\nbits argument is returned, with the string values given for on and off.\n\nBits are examined from right to left, (from low-order to high-order bits).  Strings\nare added to the result from left to right, separated by a separator string (defaults\nas ',').  You can optionally limit the number of bits the EXPORT_SET() function\nexamines using the number_of_bits option.\n\nIf any of the arguments are set as NULL, the function returns NULL.\n\nExamples\n--------\nSELECT EXPORT_SET(5,'Y','N',',',4);\n+-----------------------------+\n| EXPORT_SET(5,'Y','N',',',4) |\n+-----------------------------+\n| Y,N,Y,N                     |\n+-----------------------------+\n\nSELECT EXPORT_SET(6,'1','0',',',10);\n+------------------------------+\n| EXPORT_SET(6,'1','0',',',10) |\n+------------------------------+\n| 0,1,1,0,0,0,0,0,0,0          |\n+------------------------------+\n','','https://mariadb.com/kb/en/library/export_set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (591,37,'EXTRACTVALUE','Syntax\n------\nEXTRACTVALUE(xml_frag, xpath_expr)\n\nDescription\n-----------\nThe EXTRACTVALUE() function takes two string arguments: a fragment of XML markup and\nan XPath expression, (also known as a locator).  It returns the text (That is,\nCDDATA), of the first text node which is a child of the element or elements matching\nthe XPath expression.\n\nIn cases where a valid XPath expression does not match any text nodes in a valid XML\nfragment, (including the implicit /text() expression), the EXTRACTVALUE() function\nreturns an empty string.\n\nInvalid Arguments\n\nWhen either the XML fragment or the XPath expression is NULL, the EXTRACTVALUE()\nfunction returns NULL.  When the XML fragment is invalid, it raises a warning\nCode 1525:\nWarning (Code 1525): Incorrect XML value: 'parse error at line 1 pos 11:\nunexpected END-OF-INPUT'\n\nWhen the XPath value is invalid, it generates an Error 1105:\nERROR 1105 (HY000): XPATH syntax error: ')'\n\nExplicit text() Expressions\n\nThis function is the equivalent of performing a match using the XPath expression\nafter appending /text().  In other words:\nSELECT\n EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case') AS\n'Base Example',\n EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case/text()') AS\n'text() Example';\n\n+--------------+----------------+\n| Base Example | text() Example |\n+--------------+----------------+\n| example      | example        |\n+--------------+----------------+\n\nCount Matches\n\nWhen EXTRACTVALUE() returns multiple matches, it returns the content of the first\nchild text node of each matching element, in the matched order, as a single,\nspace-delimited string.\n\nBy design, the EXTRACTVALUE() function makes no distinction between a match on an\nempty element and no match at all.  If you need to determine whether no matching\nelement was found in the XML fragment or if an element was found that contained no\nchild text nodes, use the XPath count() function.\n\nFor instance, when looking for a value that exists, but contains no child text nodes,\nyou would get a count of the number of matching instances:\nSELECT\n EXTRACTVALUE('<cases><case/></cases>', '/cases/case') AS 'Empty Example',\n EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/case)') AS 'count() Example';\n\n+---------------+-----------------+\n| Empty Example | count() Example |\n+---------------+-----------------+\n|               |               1 |\n+---------------+-----------------+\n\nAlternatively, when looking for a value that doesn't exist, count() returns 0.\n\nSELECT\n EXTRACTVALUE('<cases><case/></cases>', '/cases/person') AS 'No Match Example',\n EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/person)') AS\n'count() Example';\n\n+------------------+-----------------+\n| No Match Example | count() Example |\n+------------------+-----------------+\n|                  |                0|\n+------------------+-----------------+\n\nMatches\n\nImportant: The EXTRACTVALUE() function only returns CDDATA.  It does not return tags\nthat the element might contain or the text that these child elements contain.\n\nSELECT EXTRACTVALUE('<cases><case>Person<email>x@example.com</email></case></cases>',\n'/cases') AS Case;\n\n+--------+\n| Case   |\n+--------+\n| Person |\n+--------+\n\nNote, in the above example, while the XPath expression matches to the parent <case>\ninstance, it does not return the contained <email> tag or its content.\n\nExamples\n--------\nSELECT\n  ExtractValue('<a>ccc<b>ddd</b></a>', '/a')            AS val1,\n  ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b')          AS val2,\n  ExtractValue('<a>ccc<b>ddd</b></a>', '//b')           AS val3,\n  ExtractValue('<a>ccc<b>ddd</b></a>', '/b')            AS val4,\n  ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+\n','','https://mariadb.com/kb/en/library/extractvalue/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (592,37,'FIELD','Syntax\n------\nFIELD(pattern, str1[,str2,...])\n\nDescription\n-----------\nReturns the index position of the string or number matching the given pattern.\n\nReturns 0 in the event that none of the arguments match the pattern.  Raises an Error\n1582 if not given at least two arguments.\n\nWhen all arguments given to the FIELD() function are strings, they are treated as\ncase-insensitive.  When all the arguments are numbers, they are treated as numbers.\n\nOtherwise, they are treated as doubles.\n\nIf the given pattern occurs more than once, the	FIELD() function only returns the\nindex of the first instance.  If the given pattern is NULL, the function returns 0,\nas a NULL pattern always fails to match.\n\nThis function is complementary to the ELT() function.\n\nExamples\n--------\nSELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo') \n AS 'Field Results';\n+---------------+\n| Field Results | \n+---------------+\n|             2 |\n+---------------+\n\nSELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo')\n AS 'Field Results';\n+---------------+\n| Field Results | \n+---------------+\n|             0 |\n+---------------+\n\nSELECT FIELD(1, 2, 3, 4, 5, 1) AS 'Field Results';\n+---------------+\n| Field Results |\n+---------------+\n|             5 |\n+---------------+\n\nSELECT FIELD(NULL, 2, 3) AS 'Field Results';\n+---------------+\n| Field Results |\n+---------------+\n|             0 |\n+---------------+\n\nSELECT FIELD('fail') AS 'Field Results';\nError 1582 (42000): Incorrect parameter count in call\nto native function 'field'\n','','https://mariadb.com/kb/en/library/field/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (593,37,'FIND_IN_SET','Syntax\n------\nFIND_IN_SET(pattern, strlist)\n\nDescription\n-----------\nReturns the index position where the given pattern occurs in a string list.  The\nfirst argument is the pattern you want to search for.  The second argument is a\nstring containing comma-separated variables.  If the second argument is of the SET\ndata-type, the function is optimized to use bit arithmetic.\n\nIf the pattern does not occur in the string list or if the string list is an empty\nstring, the function returns 0.  If either argument is NULL, the function returns\nNULL.  The function does not return the correct result if the pattern contains a\ncomma (",") character.\n\nExamples\n--------\nSELECT FIND_IN_SET('b','a,b,c,d') AS "Found Results";\n+---------------+\n| Found Results |\n+---------------+\n|             2 |\n+---------------+\n','','https://mariadb.com/kb/en/library/find_in_set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (594,37,'FORMAT','Syntax\n------\nFORMAT(num, decimal_position[, locale])\n\nDescription\n-----------\nFormats the given number for display as a string, adding separators to appropriate\nposition and rounding the results to the given decimal position.  For instance, it\nwould format 15233.345 to 15,233.35.\n\nIf the given decimal position is 0, it rounds to return no decimal point or\nfractional part.  You can optionally specify a locale value to format numbers to the\npattern appropriate for the given region.\n\nExamples\n--------\nSELECT FORMAT(1234567890.09876543210, 4) AS 'Format';\n+--------------------+\n| Format             |\n+--------------------+\n| 1,234,567,890.0988 |\n+--------------------+\n\nSELECT FORMAT(1234567.89, 4) AS 'Format';\n+----------------+\n| Format         |\n+----------------+\n| 1,234,567.8900 |\n+----------------+\n\nSELECT FORMAT(1234567.89, 0) AS 'Format';\n+-----------+\n| Format    |\n+-----------+\n| 1,234,568 |\n+-----------+\n\nSELECT FORMAT(123456789,2,'rm_CH') AS 'Format';\n+----------------+\n| Format         |\n+----------------+\n| 123'456'789,00 |\n+----------------+\n','','https://mariadb.com/kb/en/library/format/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (595,37,'FROM_BASE64','Syntax\n------\nFROM_BASE64(str)\n\nDescription\n-----------\nDecodes the given base-64 encode string, returning the result as a binary string.\n\nReturns NULL if the given string is NULL or if it's invalid.\n\nIt is the reverse of the TO_BASE64 function.\n\nThere are numerous methods to base-64 encode a string.  MariaDB uses the following:\n\nSELECT TO_BASE64('Maria') AS 'Input';\n+-----------+\n| Input     |\n+-----------+\n| TWFyaWE=  |\n+-----------+\n\nSELECT FROM_BASE64('TWFyaWE=') AS 'Output';\n+--------+\n| Output |\n+--------+\n| Maria  |\n+--------+\n','','https://mariadb.com/kb/en/library/from_base64/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (596,37,'HEX','Syntax\n------\nHEX(N_or_S)\n\nDescription\n-----------\nIf N_or_S is a number, returns a string representation of the hexadecimal\nvalue of N, where N is a longlong (BIGINT) number. This is equivalent\nto CONV(N,10,16).\n\nIf N_or_S is a string, returns a hexadecimal string representation of\nN_or_S where each byte of each character in N_or_S is converted to two hexadecimal\ndigits. If N_or_S is NULL, returns NULL. The inverse of this operation is performed\nby the UNHEX()\nfunction.\n\nExamples\n--------\nSELECT HEX(255);\n+----------+\n| HEX(255) |\n+----------+\n| FF       |\n+----------+\n\nSELECT 0x4D617269614442;\n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB          |\n+------------------+\n\nSELECT HEX('MariaDB');\n+----------------+\n| HEX('MariaDB') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n\nFrom MariaDB 10.5.0:\nSELECT HEX(CAST('2001:db8::ff00:42:8329' AS INET6));\n+----------------------------------------------+\n| HEX(CAST('2001:db8::ff00:42:8329' AS INET6)) |\n+----------------------------------------------+\n| 20010DB8000000000000FF0000428329             |\n+----------------------------------------------+\n','','https://mariadb.com/kb/en/library/hex/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (597,37,'INSERT Function','Syntax\n------\nINSERT(str,pos,len,newstr)\n\nDescription\n-----------\nReturns the string str, with the substring beginning at position pos\nand len characters long replaced by the string newstr. Returns the\noriginal string if pos is not within the length of the string.\n\nReplaces the rest of the string from position pos if len is not within\nthe length of the rest of the string. Returns NULL if any argument is\nNULL.\n\nExamples\n--------\nSELECT INSERT('Quadratic', 3, 4, 'What');\n+-----------------------------------+\n| INSERT('Quadratic', 3, 4, 'What') |\n+-----------------------------------+\n| QuWhattic                         |\n+-----------------------------------+\n\nSELECT INSERT('Quadratic', -1, 4, 'What');\n+------------------------------------+\n| INSERT('Quadratic', -1, 4, 'What') |\n+------------------------------------+\n| Quadratic                          |\n+------------------------------------+\n\nSELECT INSERT('Quadratic', 3, 100, 'What');\n+-------------------------------------+\n| INSERT('Quadratic', 3, 100, 'What') |\n+-------------------------------------+\n| QuWhat                              |\n+-------------------------------------+\n','','https://mariadb.com/kb/en/library/insert-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (598,37,'INSTR','Syntax\n------\nINSTR(str,substr)\n\nDescription\n-----------\nReturns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of LOCATE(),\nexcept that the order of the arguments is reversed.\n\nINSTR() performs a case-insensitive search.\n\nIf any argument is NULL, returns NULL.\n\nExamples\n--------\nSELECT INSTR('foobarbar', 'bar');\n+---------------------------+\n| INSTR('foobarbar', 'bar') |\n+---------------------------+\n|                         4 |\n+---------------------------+\n\nSELECT INSTR('My', 'Maria');\n+----------------------+\n| INSTR('My', 'Maria') |\n+----------------------+\n|                    0 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/instr/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (599,37,'LCASE','Syntax\n------\nLCASE(str)\n\nDescription\n-----------\nLCASE() is a synonym for LOWER().\n','','https://mariadb.com/kb/en/library/lcase/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (600,37,'LEFT','Syntax\n------\nLEFT(str,len)\n\nDescription\n-----------\nReturns the leftmost len characters from the string str, or NULL if\nany argument is NULL.\n\nExamples\n--------\nSELECT LEFT('MariaDB', 5);\n+--------------------+\n| LEFT('MariaDB', 5) |\n+--------------------+\n| Maria              |\n+--------------------+\n','','https://mariadb.com/kb/en/library/left/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (601,37,'LENGTH','Syntax\n------\nLENGTH(str)\n\nDescription\n-----------\nReturns the length of the string str.\n\nIn the default mode, when Oracle mode from MariaDB 10.3 is not set, the length is\nmeasured in bytes. In this case, a multi-byte character counts as multiple bytes.\n\nThis means that for a string\ncontaining five two-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH()\nreturns 5.\n\nWhen running Oracle mode from MariaDB 10.3, the length is measured in characters, and\nLENGTH is a synonym for CHAR_LENGTH().\n\nIf str is not a string value, it is converted into a string. If str is NULL, the\nfunction returns NULL.\n\nExamples\n--------\nSELECT LENGTH('MariaDB');\n+-------------------+\n| LENGTH('MariaDB') |\n+-------------------+\n|                 7 |\n+-------------------+\n\nWhen Oracle mode from MariaDB 10.3 is not set:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n\nIn Oracle mode from MariaDB 10.3:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n','','https://mariadb.com/kb/en/library/length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (602,37,'LENGTHB','Syntax\n------\nLENGTHB(str)\n\nDescription\n-----------\nLENGTHB() returns the length of the given string, in bytes. When Oracle mode is not\nset, this is a synonym for LENGTH.\n\nA multi-byte character counts as multiple bytes. This means that for a string\ncontaining five two-byte characters, LENGTHB() returns 10, whereas CHAR_LENGTH()\nreturns 5.\n\nIf str is not a string value, it is converted into a string. If str is NULL, the\nfunction returns NULL.\n\nExamples\n--------\nWhen Oracle mode from MariaDB 10.3 is not set:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n\nIn Oracle mode from MariaDB 10.3:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n','','https://mariadb.com/kb/en/library/lengthb/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (603,37,'LIKE','Syntax\n------\nexpr LIKE pat [ESCAPE 'escape_char']\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n\nDescription\n-----------\nTests whether expr matches the pattern pat. Returns either 1 (TRUE) or 0 (FALSE).\n\nBoth expr and pat may be any valid expression and are evaluated to strings.\n\nPatterns may use the following wildcard characters:\n\nUse NOT LIKE to test if a string does not match a pattern. This is equivalent\nto using\nthe NOT operator on the entire LIKE expression.\n\nIf either the expression or the pattern is NULL, the result is NULL.\n\nLIKE performs case-insensitive substring matches if the collation for the\nexpression and pattern is case-insensitive. For case-sensitive matches, declare\neither argument\nto use a binary collation using COLLATE, or coerce either of them to a BINARY\nstring using CAST. Use SHOW COLLATION to get a list of\navailable collations. Collations ending in _bin are case-sensitive.\n\nNumeric arguments are coerced to binary strings.\n\nThe _ wildcard matches a single character, not byte. It will only match a\nmulti-byte character\nif it is valid in the expression's character set. For example, _ will match _utf8"€",\nbut it\nwill not match _latin1"€" because the Euro sign is not a valid latin1 character.\n\nIf necessary,\nuse CONVERT to use the expression in a different character set.\n\nIf you need to match the characters _ or %, you must escape them. By default,\nyou can prefix the wildcard characters the backslash character \ to escape them.\n\nThe backslash is used both to encode special characters like newlines when a\nstring is\nparsed as well as to escape wildcards in a pattern after parsing. Thus, to match an\nactual backslash, you sometimes need to double-escape it as "\\\\".\n\nTo avoid difficulties with the backslash character, you can change the\nwildcard escape\ncharacter using ESCAPE in a LIKE expression. The argument to ESCAPE\nmust be a single-character string.\n\nExamples\n--------\nSelect the days that begin with "T":\nCREATE TABLE t1 (d VARCHAR(16));\nINSERT INTO t1 VALUES ("Monday"), ("Tuesday"), ("Wednesday"), ("Thursday"),\n("Friday"), ("Saturday"), ("Sunday");\nSELECT * FROM t1 WHERE d LIKE "T%";\n\nSELECT * FROM t1 WHERE d LIKE "T%";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n\nSelect the days that contain the substring "es":\nSELECT * FROM t1 WHERE d LIKE "%es%";\n\nSELECT * FROM t1 WHERE d LIKE "%es%";\n+-----------+\n| d         |\n+-----------+\n| Tuesday   |\n| Wednesday |\n+-----------+\n\nSelect the six-character day names:\nSELECT * FROM t1 WHERE d like "___day";\n\nSELECT * FROM t1 WHERE d like "___day";\n+---------+\n| d       |\n+---------+\n| Monday  |\n| Friday  |\n| Sunday  |\n+---------+\n\nWith the default collations, LIKE is case-insensitive:\nSELECT * FROM t1 where d like "t%";\n\nSELECT * FROM t1 where d like "t%";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n\nUse COLLATE to specify a binary collation, forcing\ncase-sensitive matches:\nSELECT * FROM t1 WHERE d like "t%" COLLATE latin1_bin;\n\nSELECT * FROM t1 WHERE d like "t%" COLLATE latin1_bin;\nEmpty set (0.00 sec)\n\nYou can include functions and operators in the expression to match. Select dates\nbased on their day name:\nCREATE TABLE t2 (d DATETIME);\nINSERT INTO t2 VALUES\n  ("2007-01-30 21:31:07"),\n  ("1983-10-15 06:42:51"),\n  ("2011-04-21 12:34:56"),\n  ("2011-10-30 06:31:41"),\n  ("2011-01-30 14:03:25"),\n  ("2004-10-07 11:19:34");\nSELECT * FROM t2 WHERE DAYNAME(d) LIKE "T%";\n\nSELECT * FROM t2 WHERE DAYNAME(d) LIKE "T%";\n+------------------+\n| d                |\n+------------------+\n| 2007-01-30 21:31 |\n| 2011-04-21 12:34 |\n| 2004-10-07 11:19 |\n+------------------+\n3 rows in set, 7 warnings (0.00 sec)\n\nOptimizing LIKE\n---------------\n','','https://mariadb.com/kb/en/library/like/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (604,37,'LOAD_FILE','Syntax\n------\nLOAD_FILE(file_name)\n\nDescription\n-----------\nReads the file and returns the file contents as a string. To use this function, the\nfile must be located on the server host, you must specify the full path name to the\nfile, and you must have the FILE privilege.  The file must be readable by all and it\nmust be less than the size, in bytes, of the max_allowed_packet system variable. If\nthe secure_file_priv system variable is set to a non-empty directory name, the file\nto be loaded must be located in that directory.\n\nIf the file does not exist or cannot be read because one of the preceding conditions\nis not satisfied, the function returns NULL.\n\nSince MariaDB 5.1, the character_set_filesystem system variable has controlled\ninterpretation of file names that are given as literal strings.\n\nStatements using the LOAD_FILE() function are not safe for statement based\nreplication. This is because the slave will execute the LOAD_FILE() command itself.\n\nIf the file doesn't exist on the slave, the function will return NULL.\n\nExamples\n--------\nUPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;\n','','https://mariadb.com/kb/en/library/load_file/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (605,37,'LOCATE','Syntax\n------\nLOCATE(substr,str), LOCATE(substr,str,pos)\n\nDescription\n-----------\nThe first syntax returns the position of the first occurrence of\nsubstring substr in string str. The second syntax returns the position\nof the first occurrence of substring substr in string str, starting at\nposition pos. Returns 0 if substr is not in str.\n\nLOCATE() performs a case-insensitive search.\n\nIf any argument is NULL, returns NULL.\n\nINSTR() is the same as the two-argument form of LOCATE(), except that the order of\nthe arguments is reversed.\n\nExamples\n--------\nSELECT LOCATE('bar', 'foobarbar');\n+----------------------------+\n| LOCATE('bar', 'foobarbar') |\n+----------------------------+\n|                          4 |\n+----------------------------+\n\nSELECT LOCATE('My', 'Maria');\n+-----------------------+\n| LOCATE('My', 'Maria') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT LOCATE('bar', 'foobarbar', 5);\n+-------------------------------+\n| LOCATE('bar', 'foobarbar', 5) |\n+-------------------------------+\n|                             7 |\n+-------------------------------+\n','','https://mariadb.com/kb/en/library/locate/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (606,37,'LOWER','Syntax\n------\nLOWER(str)\n\nDescription\n-----------\nReturns the string str with all characters changed to lowercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nExamples\n--------\n SELECT LOWER('QUADRATICALLY');\n+------------------------+\n| LOWER('QUADRATICALLY') |\n+------------------------+\n| quadratically          |\n+------------------------+\n\nLOWER() (and UPPER()) are ineffective when applied to binary\nstrings (BINARY, VARBINARY, BLOB).\n\nTo perform lettercase conversion, CONVERT the string to a non-binary string:\nSET @str = BINARY 'North Carolina';\n\nSELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));\n+----------------+-----------------------------------+\n| LOWER(@str)    | LOWER(CONVERT(@str USING latin1)) |\n+----------------+-----------------------------------+\n| North Carolina | north carolina                    |\n+----------------+-----------------------------------+\n','','https://mariadb.com/kb/en/library/lower/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (607,37,'LPAD','Syntax\n------\nLPAD(str, len [,padstr])\n\nDescription\n-----------\nReturns the string str, left-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters. If padstr is omitted, the LPAD function pads spaces.\n\nPrior to MariaDB 10.3.1, the padstr parameter was mandatory.\n\nReturns NULL if given a NULL argument. If the result is empty (zero length), returns\neither an empty string or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n\nThe Oracle mode version of the function can be accessed outside of Oracle mode by\nusing LPAD_ORACLE as the function name.\n\nExamples\n--------\nSELECT LPAD('hello',10,'.');\n+----------------------+\n| LPAD('hello',10,'.') |\n+----------------------+\n| .....hello           |\n+----------------------+\n\nSELECT LPAD('hello',2,'.');\n+---------------------+\n| LPAD('hello',2,'.') |\n+---------------------+\n| he                  |\n+---------------------+\n\nFrom MariaDB 10.3.1, with the pad string defaulting to space.\n\nSELECT LPAD('hello',10);\n+------------------+\n| LPAD('hello',10) |\n+------------------+\n|      hello       |\n+------------------+\n\nOracle mode version from MariaDB 10.3.6:\nSELECT LPAD('',0),LPAD_ORACLE('',0);\n+------------+-------------------+\n| LPAD('',0) | LPAD_ORACLE('',0) |\n+------------+-------------------+\n|            | NULL              |\n+------------+-------------------+\n','','https://mariadb.com/kb/en/library/lpad/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (608,37,'LTRIM','Syntax\n------\nLTRIM(str)\n\nDescription\n-----------\nReturns the string str with leading space characters removed.\n\nReturns NULL if given a NULL argument. If the result is empty, returns either an\nempty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n\nThe Oracle mode version of the function can be accessed outside of Oracle mode by\nusing LTRIM_ORACLE as the function name.\n\nExamples\n--------\nSELECT QUOTE(LTRIM('   MariaDB   '));\n+-------------------------------+\n| QUOTE(LTRIM('   MariaDB   ')) |\n+-------------------------------+\n| 'MariaDB   '                  |\n+-------------------------------+\n\nOracle mode version from MariaDB 10.3.6:\nSELECT LTRIM(''),LTRIM_ORACLE('');\n+-----------+------------------+\n| LTRIM('') | LTRIM_ORACLE('') |\n+-----------+------------------+\n|           | NULL             |\n+-----------+------------------+\n','','https://mariadb.com/kb/en/library/ltrim/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (609,37,'MAKE_SET','Syntax\n------\nMAKE_SET(bits,str1,str2,...)\n\nDescription\n-----------\nReturns a set value (a string containing substrings separated by ","\ncharacters) consisting of the strings that have the corresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL\nvalues in str1, str2, ... are not appended to the result.\n\nExamples\n--------\nSELECT MAKE_SET(1,'a','b','c');\n+-------------------------+\n| MAKE_SET(1,'a','b','c') |\n+-------------------------+\n| a                       |\n+-------------------------+\n\nSELECT MAKE_SET(1 | 4,'hello','nice','world');\n+----------------------------------------+\n| MAKE_SET(1 | 4,'hello','nice','world') |\n+----------------------------------------+\n| hello,world                            |\n+----------------------------------------+\n\nSELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n+---------------------------------------------+\n| MAKE_SET(1 | 4,'hello','nice',NULL,'world') |\n+---------------------------------------------+\n| hello                                       |\n+---------------------------------------------+\n\nSELECT QUOTE(MAKE_SET(0,'a','b','c'));\n+--------------------------------+\n| QUOTE(MAKE_SET(0,'a','b','c')) |\n+--------------------------------+\n| ''                             |\n+--------------------------------+\n','','https://mariadb.com/kb/en/library/make_set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (610,37,'MATCH AGAINST','Syntax\n------\nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n\nDescription\n-----------\nA special construct used to perform a fulltext search on a fulltext index.\n\nSee Fulltext Index Overview for a full description, and Full-text Indexes for more\narticles on the topic.\n\nExamples\n--------\nCREATE TABLE ft_myisam(copy TEXT,FULLTEXT(copy)) ENGINE=MyISAM;\n\nINSERT INTO ft_myisam(copy) VALUES ('Once upon a time'), ('There was a wicked\nwitch'), \n ('Who ate everybody up');\n\nSELECT * FROM ft_myisam WHERE MATCH(copy) AGAINST('wicked');\n+--------------------------+\n| copy                     |\n+--------------------------+\n| There was a wicked witch |\n+--------------------------+\n\nSELECT id, body, MATCH (title,body) AGAINST\n  ('Security implications of running MySQL as root'\n  IN NATURAL LANGUAGE MODE) AS score\n  FROM articles WHERE MATCH (title,body) AGAINST\n  ('Security implications of running MySQL as root'\n  IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n','','https://mariadb.com/kb/en/library/match-against/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (611,37,'MID','Syntax\n------\nMID(str,pos,len)\n\nDescription\n-----------\nMID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).\n\nExamples\n--------\nSELECT MID('abcd',4,1);\n+-----------------+\n| MID('abcd',4,1) |\n+-----------------+\n| d               |\n+-----------------+\n\nSELECT MID('abcd',2,2);\n+-----------------+\n| MID('abcd',2,2) |\n+-----------------+\n| bc              |\n+-----------------+\n\nA negative starting position:\nSELECT MID('abcd',-2,4);\n+------------------+\n| MID('abcd',-2,4) |\n+------------------+\n| cd               |\n+------------------+\n','','https://mariadb.com/kb/en/library/mid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (612,37,'NOT LIKE','Syntax\n------\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n\nDescription\n-----------\nThis is the same as NOT (expr LIKE pat [ESCAPE 'escape_char']).\n','','https://mariadb.com/kb/en/library/not-like/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (613,37,'NOT REGEXP','Syntax\n------\nexpr NOT REGEXP pat, expr NOT RLIKE pat\n\nDescription\n-----------\nThis is the same as NOT (expr REGEXP pat).\n','','https://mariadb.com/kb/en/library/not-regexp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (614,37,'OCTET_LENGTH','Syntax\n------\nOCTET_LENGTH(str)\n\nDescription\n-----------\nOCTET_LENGTH() returns the length of the given string, in octets (bytes). This is a\nsynonym for LENGTHB(), and, when Oracle mode from MariaDB 10.3 is not set, a synonym\nfor LENGTH().\n\nA multi-byte character counts as multiple bytes. This means that for a string\ncontaining five two-byte characters, OCTET_LENGTH() returns 10, whereas CHAR_LENGTH()\nreturns 5.\n\nIf str is not a string value, it is converted into a string. If str is NULL, the\nfunction returns NULL.\n\nExamples\n--------\nWhen Oracle mode from MariaDB 10.3 is not set:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n\nIn Oracle mode from MariaDB 10.3:\nSELECT CHAR_LENGTH('π'), LENGTH('π'), LENGTHB('π'), OCTET_LENGTH('π');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('π')  | LENGTH('π')  | LENGTHB('π')  | OCTET_LENGTH('π')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n','','https://mariadb.com/kb/en/library/octet_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (615,37,'ORD','Syntax\n------\nORD(str)\n\nDescription\n-----------\nIf the leftmost character of the string str is a multi-byte character,\nreturns the code for that character, calculated from the numeric\nvalues of its constituent bytes using this formula:\n (1st byte code)\n+ (2nd byte code x 256)\n+ (3rd byte code x 256 x 256) ...\n\nIf the leftmost character is not a multi-byte character, ORD() returns\nthe same value as the ASCII() function.\n\nExamples\n--------\nSELECT ORD('2');\n+----------+\n| ORD('2') |\n+----------+\n|       50 |\n+----------+\n','','https://mariadb.com/kb/en/library/ord/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (616,37,'POSITION','Syntax\n------\nPOSITION(substr IN str)\n\nDescription\n-----------\nPOSITION(substr IN str) is a synonym for LOCATE(substr,str).\n\nIt's part of ODBC 3.0.\n','','https://mariadb.com/kb/en/library/position/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (617,37,'QUOTE','Syntax\n------\nQUOTE(str)\n\nDescription\n-----------\nQuotes a string to produce a result that can be used as a properly escaped data\nvalue in an SQL statement. The string is returned enclosed by single quotes and\nwith each instance of single quote ("'"), backslash ("\"),\nASCII NUL, and Control-Z preceded by a backslash. If the argument\nis NULL, the return value is the word "NULL" without enclosing single\nquotes.\n\nExamples\n--------\nSELECT QUOTE("Don't!");\n+-----------------+\n| QUOTE("Don't!") |\n+-----------------+\n| 'Don\'t!'       |\n+-----------------+\n\nSELECT QUOTE(NULL); \n+-------------+\n| QUOTE(NULL) |\n+-------------+\n| NULL        |\n+-------------+\n','','https://mariadb.com/kb/en/library/quote/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (618,37,'REGEXP_INSTR','Syntax\n------\nREGEXP_INSTR(subject, pattern)\n\nReturns the position of the first occurrence of the regular expression pattern in the\nstring subject, or 0 if pattern was not found.\n\nThe positions start with 1 and are measured in characters (i.e. not in bytes), which\nis important for multi-byte character sets. You can cast a multi-byte character set\nto BINARY to get offsets in bytes.\n\nThe function follows the case sensitivity rules of the effective collation. Matching\nis performed case insensitively for case insensitive collations, and case sensitively\nfor case sensitive collations and for binary data.\n\nThe collation case sensitivity can be overwritten using the (?i) and (?-i)\nPCRE flags.\n\nMariaDB uses the PCRE regular expression library for enhanced regular expression\nperformance, and REGEXP_INSTR was introduced as part of this enhancement.\n\nExamples\n--------\nSELECT REGEXP_INSTR('abc','b');\n-> 2\n\nSELECT REGEXP_INSTR('abc','x');\n-> 0\n\nSELECT REGEXP_INSTR('BJÖRN','N');\n-> 5\n\nCasting a multi-byte character set as BINARY to get offsets in bytes:\nSELECT REGEXP_INSTR(BINARY 'BJÖRN','N') AS cast_utf8_to_binary;\n-> 6\n\nCase sensitivity:\nSELECT REGEXP_INSTR('ABC','b');\n-> 2\n\nSELECT REGEXP_INSTR('ABC' COLLATE utf8_bin,'b');\n-> 0\n\nSELECT REGEXP_INSTR(BINARY'ABC','b');\n-> 0\n\nSELECT REGEXP_INSTR('ABC','(?-i)b');\n-> 0\n\nSELECT REGEXP_INSTR('ABC' COLLATE utf8_bin,'(?i)b');\n-> 2\n','','https://mariadb.com/kb/en/regexp_instr/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (619,37,'REGEXP_REPLACE','Syntax\n------\nREGEXP_REPLACE(subject, pattern, replace)\n\nDescription\n-----------\nREGEXP_REPLACE returns the string subject with all occurrences of the regular\nexpression pattern replaced by the string replace. If no occurrences are found, then\nsubject is returned as is.\n\nThe replace string can have backreferences to the subexpressions in the form \N,\nwhere N is a number from 1 to 9.\n\nThe function follows the case sensitivity rules of the effective collation. Matching\nis performed case insensitively for case insensitive collations, and case sensitively\nfor case sensitive collations and for binary data.\n\nThe collation case sensitivity can be overwritten using the (?i) and (?-i)\nPCRE flags.\n\nMariaDB uses the PCRE regular expression library for enhanced regular expression\nperformance, and REGEXP_REPLACE was introduced as part of this enhancement.\n\nThe default_regex_flags variable addresses the remaining compatibilities between PCRE\nand the old regex library.\n\nExamples\n--------\nSELECT REGEXP_REPLACE('ab12cd','[0-9]','') AS remove_digits;\n-> abcd\n\nSELECT REGEXP_REPLACE('<html><head><title>title</title><body>body</body></htm>',\n'<.+?>',' ')\nAS strip_html;\n-> title  body\n\nBackreferences to the subexpressions in the form \N, where N is a number from 1 to 9:\nSELECT REGEXP_REPLACE('James Bond','^(.*) (.*)$','\\2, \\1') AS reorder_name;\n-> Bond, James\n\nCase insensitive and case sensitive matches:\nSELECT REGEXP_REPLACE('ABC','b','-') AS case_insensitive;\n-> A-C\n\nSELECT REGEXP_REPLACE('ABC' COLLATE utf8_bin,'b','-') AS case_sensitive;\n-> ABC\n\nSELECT REGEXP_REPLACE(BINARY 'ABC','b','-') AS binary_data;\n-> ABC\n\nOverwriting the collation case sensitivity using the (?i) and (?-i) PCRE flags.\n\nSELECT REGEXP_REPLACE('ABC','(?-i)b','-') AS force_case_sensitive;\n-> ABC\n\nSELECT REGEXP_REPLACE(BINARY 'ABC','(?i)b','-') AS force_case_insensitive;\n-> A-C\n','','https://mariadb.com/kb/en/regexp_replace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (620,37,'REGEXP_SUBSTR','Syntax\n------\nREGEXP_SUBSTR(subject,pattern)\n\nDescription\n-----------\nReturns the part of the string subject that matches the regular expression pattern,\nor an empty string if pattern was not found.\n\nThe function follows the case sensitivity rules of the effective collation. Matching\nis performed case insensitively for case insensitive collations, and case sensitively\nfor case sensitive collations and for binary data.\n\nThe collation case sensitivity can be overwritten using the (?i) and (?-i)\nPCRE flags.\n\nMariaDB uses the PCRE regular expression library for enhanced regular expression\nperformance, and REGEXP_SUBSTR was introduced as part of this enhancement.\n\nThe default_regex_flags variable addresses the remaining compatibilities between PCRE\nand the old regex library.\n\nExamples\n--------\nSELECT REGEXP_SUBSTR('ab12cd','[0-9]+');\n-> 12\n\nSELECT REGEXP_SUBSTR(\n 'See https://mariadb.org/en/foundation/ for details',\n 'https?://[^/]*');\n-> https://mariadb.org\n\nSELECT REGEXP_SUBSTR('ABC','b');\n-> B\n\nSELECT REGEXP_SUBSTR('ABC' COLLATE utf8_bin,'b');\n->\n\nSELECT REGEXP_SUBSTR(BINARY'ABC','b');\n->\n\nSELECT REGEXP_SUBSTR('ABC','(?i)b');\n-> B\n\nSELECT REGEXP_SUBSTR('ABC' COLLATE utf8_bin,'(?+i)b');\n-> B\n','','https://mariadb.com/kb/en/regexp_substr/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (621,37,'REPEAT Function','Syntax\n------\nREPEAT(str,count)\n\nDescription\n-----------\nReturns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount are NULL.\n\nExamples\n--------\nSELECT QUOTE(REPEAT('MariaDB ',4));\n+------------------------------------+\n| QUOTE(REPEAT('MariaDB ',4))        |\n+------------------------------------+\n| 'MariaDB MariaDB MariaDB MariaDB ' |\n+------------------------------------+\n','','https://mariadb.com/kb/en/library/repeat-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (622,37,'REPLACE Function','Syntax\n------\nREPLACE(str,from_str,to_str)\n\nDescription\n-----------\nReturns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str.\n\nExamples\n--------\nSELECT REPLACE('www.mariadb.org', 'w', 'Ww');\n+---------------------------------------+\n| REPLACE('www.mariadb.org', 'w', 'Ww') |\n+---------------------------------------+\n| WwWwWw.mariadb.org                    |\n+---------------------------------------+\n','','https://mariadb.com/kb/en/library/replace-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (623,37,'REVERSE','Syntax\n------\nREVERSE(str)\n\nDescription\n-----------\nReturns the string str with the order of the characters reversed.\n\nExamples\n--------\nSELECT REVERSE('desserts');\n+---------------------+\n| REVERSE('desserts') |\n+---------------------+\n| stressed            |\n+---------------------+\n','','https://mariadb.com/kb/en/library/reverse/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (624,37,'RIGHT','Syntax\n------\nRIGHT(str,len)\n\nDescription\n-----------\nReturns the rightmost len characters from the string str, or NULL if\nany argument is NULL.\n\nExamples\n--------\nSELECT RIGHT('MariaDB', 2);\n+---------------------+\n| RIGHT('MariaDB', 2) |\n+---------------------+\n| DB                  |\n+---------------------+\n','','https://mariadb.com/kb/en/library/right/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (625,37,'RPAD','Syntax\n------\nRPAD(str, len [, padstr])\n\nDescription\n-----------\nReturns the string str, right-padded with the string padstr to a\nlength of len characters. If str is longer than len, the return value\nis shortened to len characters. If padstr is omitted, the RPAD function pads spaces.\n\nPrior to MariaDB 10.3.1, the padstr parameter was mandatory.\n\nReturns NULL if given a NULL argument. If the result is empty (a length of zero),\nreturns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n\nThe Oracle mode version of the function can be accessed outside of Oracle mode by\nusing RPAD_ORACLE as the function name.\n\nExamples\n--------\nSELECT RPAD('hello',10,'.');\n+----------------------+\n| RPAD('hello',10,'.') |\n+----------------------+\n| hello.....           |\n+----------------------+\n\nSELECT RPAD('hello',2,'.');\n+---------------------+\n| RPAD('hello',2,'.') |\n+---------------------+\n| he                  |\n+---------------------+\n\nFrom MariaDB 10.3.1, with the pad string defaulting to space.\n\nSELECT RPAD('hello',30);\n+--------------------------------+\n| RPAD('hello',30)               |\n+--------------------------------+\n| hello                          |\n+--------------------------------+\n\nOracle mode version from MariaDB 10.3.6:\nSELECT RPAD('',0),RPAD_ORACLE('',0);\n+------------+-------------------+\n| RPAD('',0) | RPAD_ORACLE('',0) |\n+------------+-------------------+\n|            | NULL              |\n+------------+-------------------+\n','','https://mariadb.com/kb/en/library/rpad/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (626,37,'RTRIM','Syntax\n------\nRTRIM(str)\n\nDescription\n-----------\nReturns the string str with trailing space characters removed.\n\nReturns NULL if given a NULL argument. If the result is empty, returns either an\nempty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n\nThe Oracle mode version of the function can be accessed outside of Oracle mode by\nusing RTRIM_ORACLE as the function name.\n\nExamples\n--------\nSELECT QUOTE(RTRIM('MariaDB    '));\n+-----------------------------+\n| QUOTE(RTRIM('MariaDB    ')) |\n+-----------------------------+\n| 'MariaDB'                   |\n+-----------------------------+\n\nOracle mode version from MariaDB 10.3.6:\nSELECT RTRIM(''),RTRIM_ORACLE('');\n+-----------+------------------+\n| RTRIM('') | RTRIM_ORACLE('') |\n+-----------+------------------+\n|           | NULL             |\n+-----------+------------------+\n','','https://mariadb.com/kb/en/library/rtrim/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (627,37,'SOUNDEX','Syntax\n------\nSOUNDEX(str)\n\nDescription\n-----------\nReturns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string is four\ncharacters long, but the SOUNDEX() function returns an arbitrarily long\nstring. You can use SUBSTRING() on the result to get a standard soundex\nstring. All non-alphabetic characters in str are ignored. All\ninternational alphabetic characters outside the A-Z range are treated as\nvowels.\n\nImportant: When using SOUNDEX(), you should be aware of the\nfollowing details:\n\nExamples\n--------\nSOUNDEX('Hello');\n+------------------+\n| SOUNDEX('Hello') |\n+------------------+\n| H400             |\n+------------------+\n\nSELECT SOUNDEX('MariaDB');\n+--------------------+\n| SOUNDEX('MariaDB') |\n+--------------------+\n| M631               |\n+--------------------+\n\nSELECT SOUNDEX('Knowledgebase');\n+--------------------------+\n| SOUNDEX('Knowledgebase') |\n+--------------------------+\n| K543212                  |\n+--------------------------+\n\nSELECT givenname, surname FROM users WHERE SOUNDEX(givenname) = SOUNDEX("robert");\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto   | Castro  |\n+-----------+---------+\n','','https://mariadb.com/kb/en/library/soundex/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (628,37,'SOUNDS LIKE','Syntax\n------\nexpr1 SOUNDS LIKE expr2\n\nDescription\n-----------\nThis is the same as SOUNDEX(expr1) = SOUNDEX(expr2).\n\nExample\n-------\nSELECT givenname, surname FROM users WHERE givenname SOUNDS LIKE "robert";\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto   | Castro  |\n+-----------+---------+\n','','https://mariadb.com/kb/en/library/sounds-like/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (629,37,'SPACE','Syntax\n------\nSPACE(N)\n\nDescription\n-----------\nReturns a string consisting of N space characters. If N is NULL, returns NULL.\n\nExamples\n--------\nSELECT QUOTE(SPACE(6));\n+-----------------+\n| QUOTE(SPACE(6)) |\n+-----------------+\n| '      '        |\n+-----------------+\n','','https://mariadb.com/kb/en/library/space/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (630,37,'STRCMP','Syntax\n------\nSTRCMP(expr1,expr2)\n\nDescription\n-----------\nSTRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort order,\nand 1 if the strings are otherwise not the same. Returns NULL is either argument\nis NULL.\n\nExamples\n--------\nSELECT STRCMP('text', 'text2');\n+-------------------------+\n| STRCMP('text', 'text2') |\n+-------------------------+\n|                      -1 |\n+-------------------------+\n\nSELECT STRCMP('text2', 'text');\n+-------------------------+\n| STRCMP('text2', 'text') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSELECT STRCMP('text', 'text');\n+------------------------+\n| STRCMP('text', 'text') |\n+------------------------+\n|                      0 |\n+------------------------+\n','','https://mariadb.com/kb/en/library/strcmp/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (631,37,'SUBSTR','Description\n-----------\nSUBSTR() is a synonym for SUBSTRING().\n','','https://mariadb.com/kb/en/library/substr/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (632,37,'SUBSTRING','Syntax\n------\nSUBSTRING(str,pos), \nSUBSTRING(str FROM pos), \nSUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nSUBSTR(str,pos), \nSUBSTR(str FROM pos), \nSUBSTR(str,pos,len),\nSUBSTR(str FROM pos FOR len)\n\nDescription\n-----------\nThe forms without a len argument return a substring from string str starting at\nposition pos.\n\nThe forms with a len argument return a substring len characters long from string str,\nstarting at position pos.\n\nThe forms that use FROM are standard SQL syntax.\n\nIt is also possible to use a negative value for pos. In this case, the beginning of\nthe substring is pos characters from the end of the string, rather than the\nbeginning. A negative value may be used for pos in any of the forms of this function.\n\nBy default, the position of the first character in the string from which the\nsubstring is to be extracted is reckoned as 1. For Oracle-compatibility, from MariaDB\n10.3.3, when sql_mode is set to 'oracle', position zero is treated as position 1\n(although the first character is still reckoned as 1).\n\nIf any argument is NULL, returns NULL.\n\nExamples\n--------\nSELECT SUBSTRING('Knowledgebase',5);\n+------------------------------+\n| SUBSTRING('Knowledgebase',5) |\n+------------------------------+\n| ledgebase                    |\n+------------------------------+\n\nSELECT SUBSTRING('MariaDB' FROM 6);\n+-----------------------------+\n| SUBSTRING('MariaDB' FROM 6) |\n+-----------------------------+\n| DB                          |\n+-----------------------------+\n\nSELECT SUBSTRING('Knowledgebase',3,7);\n+--------------------------------+\n| SUBSTRING('Knowledgebase',3,7) |\n+--------------------------------+\n| owledge                        |\n+--------------------------------+\n\nSELECT SUBSTRING('Knowledgebase', -4);\n+--------------------------------+\n| SUBSTRING('Knowledgebase', -4) |\n+--------------------------------+\n| base                           |\n+--------------------------------+\n\nSELECT SUBSTRING('Knowledgebase', -8, 4);\n+-----------------------------------+\n| SUBSTRING('Knowledgebase', -8, 4) |\n+-----------------------------------+\n| edge                              |\n+-----------------------------------+\n\nSELECT SUBSTRING('Knowledgebase' FROM -8 FOR 4);\n+------------------------------------------+\n| SUBSTRING('Knowledgebase' FROM -8 FOR 4) |\n+------------------------------------------+\n| edge                                     |\n+------------------------------------------+\n\nOracle mode from MariaDB 10.3.3:\nSELECT SUBSTR('abc',0,3);\n+-------------------+\n| SUBSTR('abc',0,3) |\n+-------------------+\n|                   |\n+-------------------+\n\nSELECT SUBSTR('abc',1,2);\n+-------------------+\n| SUBSTR('abc',1,2) |\n+-------------------+\n| ab                |\n+-------------------+\n\nSET sql_mode='oracle';\n\nSELECT SUBSTR('abc',0,3);\n+-------------------+\n| SUBSTR('abc',0,3) |\n+-------------------+\n| abc               |\n+-------------------+\n\nSELECT SUBSTR('abc',1,2);\n+-------------------+\n| SUBSTR('abc',1,2) |\n+-------------------+\n| ab                |\n+-------------------+\n','','https://mariadb.com/kb/en/library/substring/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (633,37,'SUBSTRING_INDEX','Syntax\n------\nSUBSTRING_INDEX(str,delim,count)\n\nDescription\n-----------\nReturns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left\nof the final delimiter (counting from the left) is returned. If count\nis negative, everything to the right of the final delimiter (counting from the\nright) is returned. SUBSTRING_INDEX() performs a case-sensitive match when\nsearching for delim.\n\nIf any argument is NULL, returns NULL.\n\nFor example\nSUBSTRING_INDEX('www.mariadb.org', '.', 2)\n\nmeans "Return all of the characters up to the 2nd occurrence of ."\n\nExamples\n--------\nSELECT SUBSTRING_INDEX('www.mariadb.org', '.', 2);\n+--------------------------------------------+\n| SUBSTRING_INDEX('www.mariadb.org', '.', 2) |\n+--------------------------------------------+\n| www.mariadb                                |\n+--------------------------------------------+\n\nSELECT SUBSTRING_INDEX('www.mariadb.org', '.', -2);\n+---------------------------------------------+\n| SUBSTRING_INDEX('www.mariadb.org', '.', -2) |\n+---------------------------------------------+\n| mariadb.org                                 |\n+---------------------------------------------+\n','','https://mariadb.com/kb/en/library/substring_index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (634,37,'TO_BASE64','Syntax\n------\nTO_BASE64(str)\n\nDescription\n-----------\nConverts the string argument str to its base-64 encoded form, returning the result as\na character string in the connection character set and collation.\n\nThe argument str will be converted to string first if it is not a string. A NULL\nargument will return a NULL result.\n\nThe reverse function, FROM_BASE64(), decodes an encoded base-64 string.\n\nThere are a numerous different methods to base-64 encode a string. The following are\nused by MariaDB and MySQL:\n\nExamples\n--------\nSELECT TO_BASE64('Maria');\n+--------------------+\n| TO_BASE64('Maria') |\n+--------------------+\n| TWFyaWE=           |\n+--------------------+\n','','https://mariadb.com/kb/en/library/to_base64/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (635,37,'TRIM','Syntax\n------\nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n\nFrom MariaDB 10.3.6\nTRIM_ORACLE([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n\nDescription\n-----------\nReturns the string str with all remstr prefixes or suffixes removed. If none of the\nspecifiers BOTH, LEADING, or TRAILING is given, BOTH is assumed. remstr is optional\nand, if not specified, spaces are removed.\n\nReturns NULL if given a NULL argument. If the result is empty, returns either an\nempty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL. SQL_MODE=Oracle is\nnot set by default.\n\nThe Oracle mode version of the function can be accessed in any mode by using\nTRIM_ORACLE as the function name.\n\nExamples\n--------\nSELECT TRIM('  bar   ')\G\n*************************** 1. row ***************************\nTRIM('  bar   '): bar\n\nSELECT TRIM(LEADING 'x' FROM 'xxxbarxxx')\G\n*************************** 1. row ***************************\nTRIM(LEADING 'x' FROM 'xxxbarxxx'): barxxx\n\nSELECT TRIM(BOTH 'x' FROM 'xxxbarxxx')\G\n*************************** 1. row ***************************\nTRIM(BOTH 'x' FROM 'xxxbarxxx'): bar\n\nSELECT TRIM(TRAILING 'xyz' FROM 'barxxyz')\G\n*************************** 1. row ***************************\nTRIM(TRAILING 'xyz' FROM 'barxxyz'): barx\n\nFrom MariaDB 10.3.6, with SQL_MODE=Oracle not set:\nSELECT TRIM(''),TRIM_ORACLE('');\n+----------+-----------------+\n| TRIM('') | TRIM_ORACLE('') |\n+----------+-----------------+\n|          | NULL            |\n+----------+-----------------+\n\nFrom MariaDB 10.3.6, with SQL_MODE=Oracle set:\nSELECT TRIM(''),TRIM_ORACLE('');\n+----------+-----------------+\n| TRIM('') | TRIM_ORACLE('') |\n+----------+-----------------+\n| NULL     | NULL            |\n+----------+-----------------+\n','','https://mariadb.com/kb/en/library/trim/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (636,37,'UCASE','Syntax\n------\nUCASE(str)\n\nDescription\n-----------\nUCASE() is a synonym for UPPER().\n','','https://mariadb.com/kb/en/library/ucase/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (637,37,'UNHEX','Syntax\n------\nUNHEX(str)\n\nDescription\n-----------\nPerforms the inverse operation of HEX(str). That is, it interprets\neach pair of hexadecimal digits in the argument as a number and\nconverts it to the character represented by the number. The resulting\ncharacters are returned as a binary string.\n\nIf str is NULL, UNHEX() returns NULL.\n\nExamples\n--------\nSELECT HEX('MariaDB');\n+----------------+\n| HEX('MariaDB') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n\nSELECT UNHEX('4D617269614442');\n+-------------------------+\n| UNHEX('4D617269614442') |\n+-------------------------+\n| MariaDB                 |\n+-------------------------+\n\nSELECT 0x4D617269614442;\n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB          |\n+------------------+\n\nSELECT UNHEX(HEX('string'));\n+----------------------+\n| UNHEX(HEX('string')) |\n+----------------------+\n| string               |\n+----------------------+\n\nSELECT HEX(UNHEX('1267'));\n+--------------------+\n| HEX(UNHEX('1267')) |\n+--------------------+\n| 1267               |\n+--------------------+\n','','https://mariadb.com/kb/en/library/unhex/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (638,37,'UPDATEXML','Syntax\n------\nUpdateXML(xml_target, xpath_expr, new_xml)\n\nDescription\n-----------\nThis function replaces a single portion of a given fragment of XML markup\nxml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an XPath\nexpression xpath_expr supplied by the user. If no expression matching\nxpath_expr is found, or if multiple matches are found, the function returns\nthe original xml_target XML fragment. All three arguments should be\nstrings.\n\nExamples\n--------\nSELECT\n  UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n  UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n  UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n  UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n  UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n  \G\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n1 row in set (0.00 sec)\n','','https://mariadb.com/kb/en/library/updatexml/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (639,37,'UPPER','Syntax\n------\nUPPER(str)\n\nDescription\n-----------\nReturns the string str with all characters changed to uppercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nSELECT UPPER(surname), givenname FROM users ORDER BY surname;\n+----------------+------------+\n| UPPER(surname) | givenname  |\n+----------------+------------+\n| ABEL           | Jacinto    |\n| CASTRO         | Robert     |\n| COSTA          | Phestos    |\n| MOSCHELLA      | Hippolytos |\n+----------------+------------+\n\nUPPER() is ineffective when applied to binary strings (BINARY,\nVARBINARY, BLOB). The description of \nLOWER() shows how to\nperform lettercase conversion of binary strings.\n','','https://mariadb.com/kb/en/library/upper/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (640,37,'WEIGHT_STRING','Syntax\n------\nWEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n levels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ...\n\nDescription\n-----------\nReturns a binary string representing the string's sorting and comparison value. A\nstring with a lower result means that for sorting purposes the string appears before\na string with a higher result.\n\nWEIGHT_STRING() is particularly useful when adding new collations, for\ntesting purposes.\n\nIf str is a non-binary string (CHAR, VARCHAR or TEXT), WEIGHT_STRING returns the\nstring's collation weight. If str is a binary string (BINARY, VARBINARY or BLOB), the\nreturn value is simply the input value, since the weight for each byte in a binary\nstring is the byte value.\n\nWEIGHT_STRING() returns NULL if given a NULL input.\n\nThe optional AS clause permits casting the input string to a binary or non-binary\nstring, as well as to a particular length.\n\nAS BINARY(N) measures the length in bytes rather than characters, and right pads with\n0x00 bytes to the desired length.\n\nAS CHAR(N) measures the length in characters, and right pads with spaces to the\ndesired length.\n\nN has a minimum value of 1, and if it is less than the length of the input string,\nthe string is truncated without warning.\n\nThe optional LEVEL clause specifies that the return value should contain weights for\nspecific collation levels. The levels specifier can either be a single integer, a\ncomma-separated list of integers, or a range of integers separated by a dash\n(whitespace is ignored). Integers can range from 1 to a maximum of 6, dependent on\nthe collation, and need to be listed in ascending order.\n\nIf the LEVEL clause is no provided, a default of 1 to the maximum for the collation\nis assumed.\n\nIf the LEVEL is specified without using a range, an optional modifier is permitted.\n\nASC, the default, returns the weights without any modification.\n\nDESC returns bitwise-inverted weights.\n\nREVERSE returns the weights in reverse order.\n\nExamples\n--------\nThe examples below use the HEX() function to represent non-printable results in\nhexadecimal format.\n\nSELECT HEX(WEIGHT_STRING('x'));\n+-------------------------+\n| HEX(WEIGHT_STRING('x')) |\n+-------------------------+\n| 0058                    |\n+-------------------------+\n\nSELECT HEX(WEIGHT_STRING('x' AS BINARY(4)));\n+--------------------------------------+\n| HEX(WEIGHT_STRING('x' AS BINARY(4))) |\n+--------------------------------------+\n| 78000000                             |\n+--------------------------------------+\n\nSELECT HEX(WEIGHT_STRING('x' AS CHAR(4)));\n+------------------------------------+\n| HEX(WEIGHT_STRING('x' AS CHAR(4))) |\n+------------------------------------+\n| 0058002000200020                   |\n+------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1));\n+--------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1)) |\n+--------------------------------------+\n| AA22EE                               |\n+--------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC));\n+-------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC)) |\n+-------------------------------------------+\n| 55DD11                                    |\n+-------------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE));\n+----------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE)) |\n+----------------------------------------------+\n| EE22AA                                       |\n+----------------------------------------------+\n','','https://mariadb.com/kb/en/library/weight_string/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (641,39,'ALTER DATABASE','Modifies a database, changing its overall characteristics.\n\nSyntax\n------\nALTER {DATABASE | SCHEMA} [db_name]\n  alter_specification ...\nALTER {DATABASE | SCHEMA} db_name\n  UPGRADE DATA DIRECTORY NAME\n\nalter_specification:\n  [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n | COMMENT [=] 'comment'\n\nDescription\n-----------\nALTER DATABASE enables you to change the overall characteristics of a\ndatabase. These characteristics are stored in the db.opt file in the\ndatabase directory. To use ALTER DATABASE, you need the ALTER\nprivilege on the database. ALTER SCHEMA is a synonym for ALTER\nDATABASE.\n\nThe CHARACTER SET clause changes the default database character set.\n\nThe COLLATE clause changes the default database collation. See Character Sets and\nCollations for more.\n\nYou can see what character sets and collations are available using,\nrespectively, the SHOW CHARACTER SET and SHOW COLLATION statements.\n\nChanging the default character set/collation of a database does not change the\ncharacter set/collation of any stored procedures or stored functions that were\npreviously created, and relied on the defaults. These need to be dropped and\nrecreated in order to apply the character set/collation changes.\n\nThe database name can be omitted from the first syntax, in which case\nthe statement applies to the default database.\n\nThe syntax that includes the UPGRADE DATA DIRECTORY NAME clause was\nadded in MySQL 5.1.23. It updates the name of the directory associated\nwith the database to use the encoding implemented in MySQL 5.1 for\nmapping database names to database directory names (see\nIdentifier to File Name Mapping). This\nclause is for use under these conditions:\n\nFor example,if a database in MySQL 5.0 has a name of a-b-c, the name\ncontains instance of the `-' character. In 5.0, the database directory\nis also named a-b-c, which is not necessarily safe for all file\nsystems. In MySQL 5.1 and up, the same database name is encoded as\na@002db@002dc to produce a file system-neutral directory name.\n\nWhen a MySQL installation is upgraded to MySQL 5.1 or later from an\nolder version,the server displays a name such as a-b-c (which is in\nthe old format) as #mysql50#a-b-c, and you must refer to the name\nusing the #mysql50# prefix. Use UPGRADE DATA DIRECTORY NAME in this\ncase to explicitly tell the server to re-encode the database directory\nname to the current encoding format:\nALTER DATABASE `#mysql50#a-b-c` UPGRADE DATA DIRECTORY NAME;\n\nAfter executing this statement, you can refer to the database as a-b-c\nwithout the special #mysql50# prefix.\n\nCOMMENT\n\nExamples\n--------\nALTER DATABASE test CHARACTER SET='utf8'  COLLATE='utf8_bin';\n\nFrom MariaDB 10.5.0:\nALTER DATABASE p COMMENT='Presentations';\n','','https://mariadb.com/kb/en/library/alter-database/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (642,39,'ALTER EVENT','Modifies one or more characteristics of an existing event.\n\nSyntax\n------\nALTER\n  [DEFINER = { user | CURRENT_USER }]\n  EVENT event_name\n  [ON SCHEDULE schedule]\n  [ON COMPLETION [NOT] PRESERVE]\n  [RENAME TO new_event_name]\n  [ENABLE | DISABLE | DISABLE ON SLAVE]\n  [COMMENT 'comment']\n  [DO sql_statement]\n\nDescription\n-----------\nThe ALTER EVENT statement is used to change one or more of the\ncharacteristics of an existing event without the need to drop and recreate it.\n\nThe syntax for each of the DEFINER, ON SCHEDULE, ON COMPLETION,\nCOMMENT, ENABLE / DISABLE, and DO clauses is exactly the\nsame as when used with CREATE EVENT.\n\nThis statement requires the EVENT privilege.\n\nWhen a user executes a successful ALTER EVENT statement, that user becomes\nthe definer for the affected event.\n\n(In MySQL 5.1.11 and earlier, an event could be altered only by its definer, or\nby a user having the SUPER privilege.)\nALTER EVENT works only with an existing event:\nALTER EVENT no_such_event ON SCHEDULE EVERY '2:3' DAY_HOUR;\nERROR 1539 (HY000): Unknown event 'no_such_event'\n\nExamples\n--------\nALTER EVENT myevent \n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 2 HOUR\n DO\n  UPDATE myschema.mytable SET mycol = mycol + 1;\n','','https://mariadb.com/kb/en/library/alter-event/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (643,39,'ALTER FUNCTION','Syntax\n------\nALTER FUNCTION func_name [characteristic ...]\n\ncharacteristic:\n  { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT 'string'\n\nDescription\n-----------\nThis statement can be used to change the characteristics of a stored\nfunction. More than one change may be specified in an ALTER FUNCTION\nstatement. However, you cannot change the parameters or body of a\nstored function using this statement; to make such changes, you must\ndrop and re-create the function using DROP FUNCTION and CREATE FUNCTION.\n\nYou must have the ALTER ROUTINE privilege for the function. (That\nprivilege is granted automatically to the function creator.) If binary\nlogging is enabled, the ALTER FUNCTION statement might also require\nthe SUPER privilege, as described in Binary Logging of Stored Routines.\n\nExample\n-------\nALTER FUNCTION hello SQL SECURITY INVOKER;\n','','https://mariadb.com/kb/en/library/alter-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (644,39,'ALTER LOGFILE GROUP','Syntax\n------\nALTER LOGFILE GROUP logfile_group\n  ADD UNDOFILE 'file_name'\n  [INITIAL_SIZE [=] size]\n  [WAIT]\n  ENGINE [=] engine_name\n\nThe ALTER LOGFILE GROUP statement is not supported by MariaDB. It was originally\ninherited from MySQL NDB Cluster. See MDEV-19295 for more information.\n','','https://mariadb.com/kb/en/library/alter-logfile-group/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (645,39,'ALTER PROCEDURE','Syntax\n------\nALTER PROCEDURE proc_name [characteristic ...]\n\ncharacteristic:\n  { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT 'string'\n\nDescription\n-----------\nThis statement can be used to change the characteristics of a stored\nprocedure. More than one change may be specified in an ALTER PROCEDURE\nstatement. However, you cannot change the parameters or body of a\nstored procedure using this statement. To make such changes, you must\ndrop and re-create the procedure using either CREATE OR REPLACE PROCEDURE (since\nMariaDB 10.1.3) or DROP PROCEDURE and CREATE PROCEDURE (MariaDB 10.1.2 and before).\n\nYou must have the ALTER ROUTINE privilege for the procedure. By default, that\nprivilege is granted automatically to the procedure creator. See Stored\nRoutine Privileges.\n\nExample\n-------\nALTER PROCEDURE simpleproc SQL SECURITY INVOKER;\n','','https://mariadb.com/kb/en/library/alter-procedure/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (646,39,'ALTER SERVER','Syntax\n------\nALTER SERVER server_name\n  OPTIONS (option [, option] ...)\n\nDescription\n-----------\nAlters the server information for server_name, adjusting the specified\noptions as per the CREATE SERVER command. The corresponding fields in the\nmysql.servers table are updated accordingly. This statement requires the SUPER\nprivilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.\n\nALTER SERVER is not written to the binary log, irrespective of\nthe binary log format being used. From MariaDB 10.1.13, Galera replicates the CREATE\nSERVER, ALTER SERVER and DROP SERVER statements.\n\nExamples\n--------\nALTER SERVER s OPTIONS (USER 'sally');\n','','https://mariadb.com/kb/en/library/alter-server/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (647,39,'ALTER TABLE','Syntax\n------\nALTER [ONLINE] [IGNORE] TABLE [IF EXISTS] tbl_name\n  [WAIT n | NOWAIT]\n  alter_specification [, alter_specification] ...\nalter_specification:\n  table_option ...\n | ADD [COLUMN] [IF NOT EXISTS] col_name column_definition\n    [FIRST | AFTER col_name ]\n | ADD [COLUMN] [IF NOT EXISTS] (col_name column_definition,...)\n | ADD {INDEX|KEY} [IF NOT EXISTS] [index_name]\n    [index_type] (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]] PRIMARY KEY\n    [index_type] (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]]\n    UNIQUE [INDEX|KEY] [index_name]\n    [index_type] (index_col_name,...) [index_option] ...\n | ADD FULLTEXT [INDEX|KEY] [index_name]\n    (index_col_name,...) [index_option] ...\n | ADD SPATIAL [INDEX|KEY] [index_name]\n    (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]]\n    FOREIGN KEY [IF NOT EXISTS] [index_name] (index_col_name,...)\n    reference_definition\n | ADD PERIOD FOR SYSTEM_TIME (start_column_name, end_column_name)\n | ALTER [COLUMN] col_name SET DEFAULT literal | (expression)\n | ALTER [COLUMN] col_name DROP DEFAULT\n | ALTER {INDEX|KEY} index_name [NOT] INVISIBLE\n | CHANGE [COLUMN] [IF EXISTS] old_col_name new_col_name column_definition\n    [FIRST|AFTER col_name]\n | MODIFY [COLUMN] [IF EXISTS] col_name column_definition\n    [FIRST | AFTER col_name]\n | DROP [COLUMN] [IF EXISTS] col_name [RESTRICT|CASCADE]\n | DROP PRIMARY KEY\n | DROP {INDEX|KEY} [IF EXISTS] index_name\n | DROP FOREIGN KEY [IF EXISTS] fk_symbol\n | DROP CONSTRAINT [IF EXISTS] constraint_name\n | DISABLE KEYS\n | ENABLE KEYS\n | RENAME [TO] new_tbl_name\n | ORDER BY col_name [, col_name] ...\n | RENAME COLUMN old_col_name TO new_col_name\n | RENAME {INDEX|KEY} old_index_name TO new_index_name\n | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]\n | [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n | DISCARD TABLESPACE\n | IMPORT TABLESPACE\n | ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n | LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n | FORCE\n | partition_options\n | ADD PARTITION [IF NOT EXISTS] (partition_definition)\n | DROP PARTITION [IF EXISTS] partition_names\n | COALESCE PARTITION number\n | REORGANIZE PARTITION [partition_names INTO (partition_definitions)]\n | ANALYZE PARTITION partition_names\n | CHECK PARTITION partition_names\n | OPTIMIZE PARTITION partition_names\n | REBUILD PARTITION partition_names\n | REPAIR PARTITION partition_names\n | EXCHANGE PARTITION partition_name WITH TABLE tbl_name\n | REMOVE PARTITIONING\n | ADD SYSTEM VERSIONING\n | DROP SYSTEM VERSIONING\nindex_col_name:\n  col_name [(length)] [ASC | DESC]\nindex_type:\n  USING {BTREE | HASH | RTREE}\nindex_option:\n  [ KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT 'string'\n | CLUSTERING={YES| NO} ]\n [ IGNORED | NOT IGNORED ]\ntable_options:\n  table_option [[,] table_option] ...\n\nDescription\n-----------\nALTER TABLE enables you to change the structure of an existing table.\n\nFor example, you can add or delete columns, create or destroy indexes,\nchange the type of existing columns, or rename columns or the table\nitself. You can also change the comment for the table and the storage engine of the\ntable.\n\nIf another connection is using the table, a metadata lock is active, and this\nstatement will wait until the lock is released. This is also true for\nnon-transactional tables.\n\nWhen adding a UNIQUE index on a column (or a set of columns) which have duplicated\nvalues, an error will be produced and the statement will be stopped. To suppress the\nerror and force the creation of UNIQUE indexes, discarding duplicates, the IGNORE\noption can be specified. This can be useful if a column (or a set of columns) should\nbe UNIQUE but it contains duplicate values; however, this technique provides no\ncontrol on which rows are preserved and which are deleted. Also, note that IGNORE is\naccepted but ignored in ALTER TABLE ... EXCHANGE PARTITION statements.\n\nThis statement can also be used to rename a table. For details see RENAME TABLE.\n\nWhen an index is created, the storage engine may use a configurable buffer in the\nprocess. Incrementing the buffer speeds up the index creation. Aria and MyISAM\nallocate a buffer whose size is defined by aria_sort_buffer_size or\nmyisam_sort_buffer_size, also used for REPAIR TABLE. InnoDB allocates three buffers\nwhose size is defined by innodb_sort_buffer_size.\n\nPrivileges\n----------\nExecuting the ALTER TABLE statement generally requires at least the ALTER privilege\nfor the table or the database..\nIf you are renaming a table, then it also requires the DROP, CREATE and INSERT\nprivileges for the table or the database as well.\n\nOnline DDL\n----------\nOnline DDL is supported with the ALGORITHM and LOCK clauses.\n\nSee InnoDB Online DDL Overview for more information on online DDL with InnoDB.\n\nALTER ONLINE TABLE\n\nALTER ONLINE TABLE also works for partitioned tables.\n\nOnline ALTER TABLE is available by executing the following:\nALTER ONLINE TABLE ...;\n\nThis statement has the following semantics:\nThis statement is equivalent to the following:\nALTER TABLE ... LOCK=NONE;\n\nSee the LOCK alter specification for more information.\n\nThis statement is equivalent to the following:\nALTER TABLE ... ALGORITHM=INPLACE;\n\nSee the ALGORITHM alter specification for more information.\n\nWAIT/NOWAIT\n-----------\n\nIF EXISTS\n---------\nThe  IF EXISTS and IF NOT EXISTS clauses are available for the following:\nADD COLUMN       [IF NOT EXISTS]\nADD INDEX        [IF NOT EXISTS]\nADD FOREIGN KEY  [IF NOT EXISTS]\nADD PARTITION    [IF NOT EXISTS]\nCREATE INDEX     [IF NOT EXISTS]\nDROP COLUMN      [IF EXISTS]\nDROP INDEX       [IF EXISTS]\nDROP FOREIGN KEY [IF EXISTS]\nDROP PARTITION   [IF EXISTS]\nCHANGE COLUMN    [IF EXISTS]\nMODIFY COLUMN    [IF EXISTS]\nDROP INDEX       [IF EXISTS]\nWhen IF EXISTS and IF NOT EXISTS are used in clauses, queries will not\nreport errors when the condition is triggered for that clause. A warning with\nthe same message text will be issued and the ALTER will move on to the next\nclause in the statement (or end if finished).\n\nColumn Definitions\n------------------\nSee CREATE TABLE: Column Definitions for information about column definitions.\n\nIndex Definitions\n-----------------\nSee CREATE TABLE: Index Definitions for information about index definitions.\n\nThe CREATE INDEX and DROP INDEX statements can also be used to add or remove\nan index.\n\nCharacter Sets and Collations\n-----------------------------\nCONVERT TO CHARACTER SET charset_name [COLLATE collation_name]\n[DEFAULT] CHARACTER SET [=] charset_name\n[DEFAULT] COLLATE [=] collation_name\nSee Setting Character Sets and Collations for details on setting the character sets\nand collations.\n\nAlter Specifications\n--------------------\n\nTable Options\n\nSee CREATE TABLE: Table Options for information about table options.\n\nADD COLUMN\n\n... ADD COLUMN [IF NOT EXISTS]  (col_name column_definition,...)\nAdds a column to the table. The syntax is the same as in CREATE TABLE.\n\nIf you are using IF NOT_EXISTS the column will not be added if it was not there\nalready. This is very useful when doing scripts to modify tables.\n\nThe FIRST and AFTER clauses affect the physical order of columns in the datafile. Use\nFIRST to add a column in the first (leftmost) position, or AFTER followed by a column\nname to add the new column in any other position. Note that, nowadays, the physical\nposition of a column is usually irrelevant.\n\nSee also Instant ADD COLUMN for InnoDB.\n\nDROP COLUMN\n\n... DROP COLUMN [IF EXISTS] col_name [CASCADE|RESTRICT]\nDrops the column from the table.\n\nIf you are using IF EXISTS you will not get an error if the column didn't exist.\n\nIf the column is part of any index, the column will be dropped from them, except if\nyou add a new column with identical name at the same time. The index will be dropped\nif all columns from the index were dropped.\n\nIf the column was used in a view or trigger, you will get an error next time the view\nor trigger is accessed.\n\nRESTRICT and CASCADE are allowed to make porting from other database systems easier.\n\nIn MariaDB, they do nothing.\n\nMODIFY COLUMN\n\nAllows you to modify the type of a column. The column will be at the same place as\nthe original column and all indexes on the column will be kept.  Note that when\nmodifying column, you should specify all attributes for the new column.\n\nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, PRIMARY KEY((a));\nALTER TABLE t1 MODIFY a BIGINT UNSIGNED AUTO_INCREMENT;\n\nCHANGE COLUMN\n\nWorks like MODIFY COLUMN except that you can also change the name of the column. The\ncolumn will be at the same place as the original column and all index on the column\nwill be kept.\n\nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, PRIMARY KEY(a));\nALTER TABLE t1 CHANGE a b BIGINT UNSIGNED AUTO_INCREMENT;\n\nALTER COLUMN\n\nThis lets you change column options.\n\nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, b varchar(50), PRIMARY KEY(a));\nALTER TABLE t1 ALTER b SET DEFAULT 'hello';\n\nRENAME INDEX/KEY\n\nRENAME COLUMN\n\nADD PRIMARY KEY\n\nAdd a primary key.\n\nFor PRIMARY KEY indexes, you can specify a name for the index, but it is silently\nignored, and the name of the index is always PRIMARY.\n\nSee Getting Started with Indexes: Primary Key for more information.\n\nDROP PRIMARY KEY\n\nDrop a primary key.\n\nFor PRIMARY KEY indexes, you can specify a name for the index, but it is silently\nignored, and the name of the index is always PRIMARY.\n\nSee Getting Started with Indexes: Primary Key for more information.\n\nADD FOREIGN KEY\n\nAdd a foreign key.\n\nFor FOREIGN KEY indexes, a reference definition must be provided.\n\nFor FOREIGN KEY indexes, you can specify a name for the constraint, using the\nCONSTRAINT keyword. That name will be used in error messages.\n\nFirst, you have to specify the name of the target (parent) table and a column or a\ncolumn list which must be indexed and whose values must match to the foreign key's\nvalues. The MATCH clause is accepted to improve the compatibility with other DBMS's,\nbut has no meaning in MariaDB. The ON DELETE and ON UPDATE clauses specify what must\nbe done when a DELETE (or a REPLACE) statements attempts to delete a referenced row\nfrom the parent table, and when an UPDATE statement attempts to modify the referenced\nforeign key columns in a parent table row, respectively. The following options\nare allowed:\n\nIf either clause is omitted, the default behavior for the omitted clause is RESTRICT.\n\nSee Foreign Keys for more information.\n\nDROP FOREIGN KEY\n\nDrop a foreign key.\n\nSee Foreign Keys for more information.\n\nADD INDEX\n\nAdd a plain index.\n\nPlain indexes are regular indexes that are not unique, and are not acting as a\nprimary key or a foreign key. They are also not the "specialized" FULLTEXT or\nSPATIAL indexes.\n\nSee Getting Started with Indexes: Plain Indexes for more information.\n\nDROP INDEX\n\nDrop a plain index.\n\nPlain indexes are regular indexes that are not unique, and are not acting as a\nprimary key or a foreign key. They are also not the "specialized" FULLTEXT or\nSPATIAL indexes.\n\nSee Getting Started with Indexes: Plain Indexes for more information.\n\nADD UNIQUE INDEX\n\nAdd a unique index.\n\nThe UNIQUE keyword means that the index will not accept duplicated values, except for\nNULLs. An error will raise if you try to insert duplicate values in a UNIQUE index.\n\nFor UNIQUE indexes, you can specify a name for the constraint, using the CONSTRAINT\nkeyword. That name will be used in error messages.\n\nSee Getting Started with Indexes: Unique Index for more information.\n\nDROP UNIQUE INDEX\n\nDrop a unique index.\n\nThe UNIQUE keyword means that the index will not accept duplicated values, except for\nNULLs. An error will raise if you try to insert duplicate values in a UNIQUE index.\n\nFor UNIQUE indexes, you can specify a name for the constraint, using the CONSTRAINT\nkeyword. That name will be used in error messages.\n\nSee Getting Started with Indexes: Unique Index for more information.\n\nADD FULLTEXT INDEX\n\nAdd a FULLTEXT index.\n\nSee Full-Text Indexes for more information.\n\nDROP FULLTEXT INDEX\n\nDrop a FULLTEXT index.\n\nSee Full-Text Indexes for more information.\n\nADD SPATIAL INDEX\n\nAdd a SPATIAL index.\n\nSee SPATIAL INDEX for more information.\n\nDROP SPATIAL INDEX\n\nDrop a SPATIAL index.\n\nSee SPATIAL INDEX for more information.\n\nENABLE/ DISABLE KEYS\n\nDISABLE KEYS will disable all non unique keys for the table for storage engines that\nsupport this (at least MyISAM and Aria). This can be used to speed up inserts into\nempty tables.\n\nENABLE KEYS will enable all disabled keys.\n\nRENAME TO\n\nRenames the table. See also RENAME TABLE.\n\nADD CONSTRAINT\n\nModifies the table adding a constraint on a particular column or columns.\n\nNote: Before MariaDB 10.2.1, constraint expressions were accepted in syntax,\nbut ignored.\n\nALTER TABLE table_name \nADD CONSTRAINT [constraint_name] CHECK(expression);\nBefore a row is inserted or updated, all constraints are evaluated in the order they\nare defined.  If any constraint fails, then the row will not be updated.  One can use\nmost deterministic functions in a constraint, including UDF's.\n\nCREATE TABLE account_ledger (\n	id INT PRIMARY KEY AUTO_INCREMENT,\n	transaction_name VARCHAR(100),\n	credit_account VARCHAR(100),\n	credit_amount INT,\n	debit_account VARCHAR(100),\n	debit_amount INT);\n\nALTER TABLE account_ledger \nADD CONSTRAINT is_balanced \n  CHECK((debit_amount + credit_amount) = 0);\n\nThe constraint_name is optional.  If you don't provide one in the ALTER TABLE\nstatement, MariaDB auto-generates a name for you.  This is done so that you can\nremove it later using DROP CONSTRAINT clause.\n\nYou can disable all constraint expression checks by setting the variable\ncheck_constraint_checks to OFF.  You may find this useful when loading a table that\nviolates some constraints that you want to later find and fix in SQL.\n\nTo view constraints on a table, query information_schema.TABLE_CONSTRAINTS:\nSELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE \nFROM information_schema.TABLE_CONSTRAINTS\nWHERE TABLE_NAME = 'account_ledger';\n\n+-----------------+----------------+-----------------+\n| CONSTRAINT_NAME | TABLE_NAME     | CONSTRAINT_TYPE |\n+-----------------+----------------+-----------------+\n| is_balanced     | account_ledger | CHECK           |\n+-----------------+----------------+-----------------+\n\nDROP CONSTRAINT\n\nModifies the table, removing the given constraint.\n\nALTER TABLE table_name\nDROP CONSTRAINT constraint_name;\n\nWhen you add a constraint to a table, whether through a CREATE TABLE or ALTER\nTABLE...ADD CONSTRAINT statement, you can either set a constraint_name yourself, or\nallow MariaDB to auto-generate one for you.  To view constraints on a table, query\ninformation_schema.TABLE_CONSTRAINTS.  For instance,\nCREATE TABLE t (\n a INT,\n b INT,\n c INT,\n CONSTRAINT CHECK(a > b),\n CONSTRAINT check_equals CHECK(a = c));\n\nSELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE \nFROM information_schema.TABLE_CONSTRAINTS\nWHERE TABLE_NAME = 't';\n\n+-----------------+----------------+-----------------+\n| CONSTRAINT_NAME | TABLE_NAME     | CONSTRAINT_TYPE |\n+-----------------+----------------+-----------------+\n| check_equals    | t              | CHECK           |\n| CONSTRAINT_1    | t              | CHECK           |\n+-----------------+----------------+-----------------+\n\nTo remove a constraint from the table, issue an ALTER TABLE...DROP CONSTRAINT\nstatement.  For example,\nALTER TABLE t DROP CONSTRAINT is_unique;\n\nADD SYSTEM VERSIONING\n\nAdd system versioning.\n\nDROP SYSTEM VERSIONING\n\nDrop system versioning.\n\nADD PERIOD FOR SYSTEM_TIME\n\nFORCE\n\nALTER TABLE ... FORCE can force MariaDB to re-build the table.\n\nIn MariaDB 5.5 and before, this could only be done by setting the ENGINE table option\nto its old value. For example, for an InnoDB table, one could execute the following:\nALTER TABLE tab_name ENGINE = InnoDB;\n\nThe FORCE option can be used instead. For example, :\nALTER TABLE tab_name FORCE;\n\nWith InnoDB, the table rebuild will only reclaim unused space (i.e. the space\npreviously used for deleted rows) if the innodb_file_per_table system variable is set\nto ON. If the system variable is OFF, then the space will not be reclaimed, but it\nwill be-re-used for new data that's later added.\n\nEXCHANGE PARTITION\n\nThis is used to exchange the tablespace files between a partition and another table.\n\nSee copying InnoDB's transportable tablespaces for more information.\n\nDISCARD TABLESPACE\n\nThis is used to discard an InnoDB table's tablespace.\n\nSee copying InnoDB's transportable tablespaces for more information.\n\nIMPORT TABLESPACE\n\nThis is used to import an InnoDB table's tablespace. The tablespace should have been\ncopied from its original server after executing FLUSH TABLES FOR EXPORT.\n\nSee copying InnoDB's transportable tablespaces for more information.\n\nALTER TABLE ... IMPORT only applies to InnoDB tables. Most other popular storage\nengines, such as Aria and MyISAM, will recognize their data files as soon as they've\nbeen placed in the proper directory under the datadir, and no special DDL is required\nto import them.\n\nALGORITHM\n\nThe ALTER TABLE statement supports the ALGORITHM clause. This clause is one of the\nclauses that is used to implement online DDL. ALTER TABLE supports several different\nalgorithms. An algorithm can be explicitly chosen for an ALTER TABLE operation by\nsetting the ALGORITHM clause. The supported values are:\n\nSee InnoDB Online DDL Overview: ALGORITHM for information on how the ALGORITHM clause\naffects InnoDB.\n\nALGORITHM=DEFAULT\nThe default behavior, which occurs if ALGORITHM=DEFAULT is specified, or if ALGORITHM\nis not specified at all, usually only makes a copy if the operation doesn't support\nbeing done in-place at all. In this case, the most efficient available algorithm will\nusually be used.\n\nHowever, in MariaDB 10.3.6 and before, if the value of the old_alter_table system\nvariable is set to ON, then the default behavior is to perform ALTER TABLE operations\nby making a copy of the table using the old algorithm.\n\nIn MariaDB 10.3.7 and later, the old_alter_table system variable is deprecated.\n\nInstead, the alter_algorithm system variable defines the default algorithm for ALTER\nTABLE operations.\n\nALGORITHM=COPY\nALGORITHM=COPY is the name for the original ALTER TABLE algorithm from early\nMariaDB versions.\n\nWhen ALGORITHM=COPY is set, MariaDB essentially does the following operations:\n-- Create a temporary table with the new definition\nCREATE TEMPORARY TABLE tmp_tab (\n...\n);\n\n-- Copy the data from the original table\nINSERT INTO tmp_tab\n SELECT * FROM original_tab;\n\n-- Drop the original table\nDROP TABLE original_tab;\n\n-- Rename the temporary table, so that it replaces the original one\nRENAME TABLE tmp_tab TO original_tab;\n\nThis algorithm is very inefficient, but it is generic, so it works for all\nstorage engines.\n\nIf ALGORITHM=COPY is specified, then the copy algorithm will be used even if it is\nnot necessary. This can result in a lengthy table copy. If multiple ALTER TABLE\noperations are required that each require the table to be rebuilt, then it is best to\nspecify all operations in a single ALTER TABLE statement, so that the table is only\nrebuilt once.\n\nALGORITHM=INPLACE\nALGORITHM=COPY can be incredibly slow, because the whole table has to be copied and\nrebuilt. ALGORITHM=INPLACE was introduced as a way to avoid this by performing\noperations in-place and avoiding the table copy and rebuild, when possible.\n\nWhen ALGORITHM=INPLACE is set, the underlying storage engine uses optimizations to\nperform the operation while avoiding the table copy and rebuild. However, INPLACE is\na bit of a misnomer, since some operations may still require the table to be rebuilt\nfor some storage engines. Regardless, several operations can be performed without a\nfull copy of the table for some storage engines.\n\nA more accurate name would have been ALGORITHM=ENGINE, where ENGINE refers to an\n"engine-specific" algorithm.\n\nIf an ALTER TABLE operation supports ALGORITHM=INPLACE, then it can be performed\nusing optimizations by the underlying storage engine, but it may rebuilt.\n\nSee InnoDB Online DDL Operations with ALGORITHM=INPLACE for more.\n\nALGORITHM=NOCOPY\nALGORITHM=NOCOPY was introduced in MariaDB 10.3.7.\n\nALGORITHM=INPLACE can sometimes be surprisingly slow in instances where it has to\nrebuild the clustered index, because when the clustered index has to be rebuilt, the\nwhole table has to be rebuilt. ALGORITHM=NOCOPY was introduced as a way to avoid\nthis.\n\nIf an ALTER TABLE operation supports ALGORITHM=NOCOPY, then it can be performed\nwithout rebuilding the clustered index.\n\nIf ALGORITHM=NOCOPY is specified for an ALTER TABLE operation that does not support\nALGORITHM=NOCOPY, then an error will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to rebuild the clustered index,\nand perform unexpectedly slowly.\n\nSee InnoDB Online DDL Operations with ALGORITHM=NOCOPY for more.\n\nALGORITHM=INSTANT\nALGORITHM=INSTANT was introduced in MariaDB 10.3.7.\n\nALGORITHM=INPLACE can sometimes be surprisingly slow in instances where it has to\nmodify data files. ALGORITHM=INSTANT was introduced as a way to avoid this.\n\nIf an ALTER TABLE operation supports ALGORITHM=INSTANT, then it can be performed\nwithout modifying any data files.\n\nIf ALGORITHM=INSTANT is specified for an ALTER TABLE operation that does not support\nALGORITHM=INSTANT, then an error will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to modify data files, and perform\nunexpectedly slowly.\n\nSee InnoDB Online DDL Operations with ALGORITHM=INSTANT for more.\n\nLOCK\n\nThe ALTER TABLE statement supports the LOCK clause. This clause is one of the clauses\nthat is used to implement online DDL. ALTER TABLE supports several different locking\nstrategies. A locking strategy can be explicitly chosen for an ALTER TABLE operation\nby setting the LOCK clause. The supported values are:\n\nDifferent storage engines support different locking strategies for different\noperations. If a specific locking strategy is chosen for an ALTER TABLE operation,\nand that table's storage engine does not support that locking strategy for that\nspecific operation, then an error will be raised.\n\nIf the LOCK clause is not explicitly set, then the operation uses LOCK=DEFAULT.\n\nALTER ONLINE TABLE is equivalent to LOCK=NONE. Therefore, the ALTER ONLINE TABLE\nstatement can be used to ensure that your ALTER TABLE operation allows all\nconcurrent DML.\n\nSee InnoDB Online DDL Overview: LOCK for information on how the LOCK clause\naffects InnoDB.\n\nProgress Reporting\n------------------\nMariaDB provides progress reporting for ALTER TABLE statement for clients\nthat support the new progress reporting protocol. For example, if you were using the\nmysql client, then the progress report might look like this::\nALTER TABLE test ENGINE=Aria;\nStage: 1 of 2 'copy to tmp table'    46% of stage\n\nThe progress report is also shown in the output of the SHOW PROCESSLIST statement and\nin the contents of the information_schema.PROCESSLIST table.\n\nSee Progress Reporting for more information.\n\nAborting ALTER TABLE Operations\n-------------------------------\nIf an ALTER TABLE operation is being performed and the connection is killed, the\nchanges will be rolled back in a controlled manner. The rollback can be a slow\noperation as the time it takes is relative to how far the operation has progressed.\n\nAtomic ALTER TABLE\n------------------\n\nReplication\n-----------\n\nExamples\n--------\nAdding a new column:\nALTER TABLE t1 ADD x INT;\n\nDropping a column:\nALTER TABLE t1 DROP x;\n\nModifying the type of a column:\nALTER TABLE t1 MODIFY x bigint unsigned;\n\nChanging the name and type of a column:\nALTER TABLE t1 CHANGE a b bigint unsigned auto_increment;\n\nCombining multiple clauses in a single ALTER TABLE statement, separated by commas:\nALTER TABLE t1 DROP x, ADD x2 INT,  CHANGE y y2 INT;\n\nChanging the storage engine and adding a comment:\nALTER TABLE t1 \n ENGINE = InnoDB\n COMMENT = 'First of three tables containing usage info';\n\nRebuilding the table (the previous example will also rebuild the table if it was\nalready InnoDB):\nALTER TABLE t1 FORCE;\n\nDropping an index:\nALTER TABLE rooms DROP INDEX u;\n\nAdding a unique index:\nALTER TABLE rooms ADD UNIQUE INDEX u(room_number);\n\nFrom MariaDB 10.5.3, adding a primary key for an application-time period table with a\nWITHOUT OVERLAPS constraint:\nALTER TABLE rooms ADD PRIMARY KEY(room_number, p WITHOUT OVERLAPS);\n','','https://mariadb.com/kb/en/library/alter-table/');
update help_topic set description = CONCAT(description, 'nnoDB\'s transportable tablespaces for more\ninformation.\n \nIMPORT TABLESPACE\n \nThis is used to import an InnoDB table\'s tablespace. The\ntablespace should have been copied from its original server\nafter executing FLUSH TABLES FOR EXPORT.\n \nSee copying InnoDB\'s transportable tablespaces for more\ninformation.\n \nALTER TABLE ... IMPORT only applies to InnoDB tables. Most\nother popular storage engines, such as Aria and MyISAM, will\nrecognize their data files as soon as they\'ve been placed\nin the proper directory under the datadir, and no special\nDDL is required to import them.\n \nALGORITHM\n \nIn MariaDB 5.5 and before, ALTER TABLE operations required\nmaking a temporary copy of the table, which can be slow for\nlarge tables.\n \nIn MariaDB 10.0 and later, the ALTER TABLE statement\nsupports the ALGORITHM clause. This clause is one of the\nclauses that is used to implement online DDL. ALTER TABLE\nsupports several different algorithms. An algorithm can be\nexplicitly chosen for an ALTER TABLE operation by setting\nthe ALGORITHM clause. The supported values are:\nALGORITHM=DEFAULT - This implies the default behavior for\nthe specific statement, such as if no ALGORITHM clause is\nspecified.\nALGORITHM=COPY\nALGORITHM=INPLACE\nALGORITHM=NOCOPY - This was added in MariaDB 10.3.7.\nALGORITHM=INSTANT - This was added in MariaDB 10.3.7.\n \nSee InnoDB Online DDL Overview: ALGORITHM for information on\nhow the ALGORITHM clause affects InnoDB.\n \nALGORITHM=DEFAULT\n \nThe default behavior, which occurs if ALGORITHM=DEFAULT is\nspecified, or if ALGORITHM is not specified at all, usually\nonly makes a copy if the operation doesn\'t support being\ndone in-place at all. In this case, the most efficient\navailable algorithm will usually be used.\n \nHowever, in MariaDB 10.3.6 and before, if the value of the\nold_alter_table system variable is set to ON, then the\ndefault behavior is to perform ALTER TABLE operations by\nmaking a copy of the table using the old algorithm.\n \nIn MariaDB 10.3.7 and later, the old_alter_table system\nvariable is deprecated. Instead, the alter_algorithm system\nvariable defines the default algorithm for ALTER TABLE\noperations.\n \nALGORITHM=COPY\n \nALGORITHM=COPY was introduced in MariaDB 10.0 as the name\nfor the original ALTER TABLE algorithm.\n \nWhen ALGORITHM=INPLACE is set, MariaDB essentially does the\nfollowing operations:\n \n-- Create a temporary table with the new definition\nCREATE TEMPORARY TABLE tmp_tab (\n...\n);\n \n-- Copy the data from the original table\nINSERT INTO tmp_tab\n SELECT * FROM original_tab;\n \n-- Drop the original table\nDROP TABLE original_tab;\n \n-- Rename the temporary table, so that it replaces the\noriginal one\nRENAME TABLE tmp_tab TO original_tab;\n \nThis algorithm is very inefficient, but it is generic, so it\nworks for all storage engines.\n \nIf ALGORITHM=COPY is specified, then the copy algorithm will\nbe used even if it is not necessary. This can result in a\nlengthy table copy. If multiple ALTER TABLE operations are\nrequired that each require the table to be rebuilt, then it\nis best to specify all operations in a single ALTER TABLE\nstatement, so that the table is only rebuilt once.\n \nALGORITHM=INPLACE\n \nALGORITHM=INPLACE was introduced in MariaDB 10.0.\n \nALGORITHM=COPY can be incredibly slow, because the whole\ntable has to be copied and rebuilt. ALGORITHM=INPLACE was\nintroduced as a way to avoid this by performing operations\nin-place and avoiding the table copy and rebuild, when\npossible.\n \nWhen ALGORITHM=INPLACE is set, the underlying storage engine\nuses optimizations to perform the operation while avoiding\nthe table copy and rebuild. However, INPLACE is a bit of a\nmisnomer, since some operations may still require the table\nto be rebuilt for some storage engines. Regardless, several\noperations can be performed without a full copy of the table\nfor some storage engines.\n \nA more accurate name would have been ALGORITHM=ENGINE, where\nENGINE refers to an \"engine-specific\" algorithm.\n \nIf an ALTER TABLE operation supports ALGORITHM=INPLACE, then\nit can be performed using optimizations by the underlying\nstorage engine, but it may rebuilt.\n \nSee InnoDB Online DDL Operations with ALGORITHM=INPLACE for\nmore.\n \nALGORITHM=NOCOPY\n \nALGORITHM=NOCOPY was introduced in MariaDB 10.3.7.\n \nALGORITHM=INPLACE can sometimes be surprisingly slow in\ninstances where it has to rebuild the clustered index,\nbecause when the clustered index has to be rebuilt, the\nwhole table has to be rebuilt. ALGORITHM=NOCOPY was\nintroduced as a way to avoid this. \n \nIf an ALTER TABLE operation supports ALGORITHM=NOCOPY, then\nit can be performed without rebuilding the clustered index.\n \nIf ALGORITHM=NOCOPY is specified for an ALTER TABLE\noperation that does not support ALGORITHM=NOCOPY, then an\nerror will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to\nrebuild the clustered index, and perform unexpectedly\nslowly.\n \nSee InnoDB Online DDL Operations with ALGORITHM=NOCOPY for\nmore.\n \nALGORITHM=INSTANT\n \nALGORITHM=INSTANT was introduced in MariaDB 10.3.7.\n \nALGORITHM=INPLACE can sometimes be surprisingly slow in\ninstances where it has to modify data files.\nALGORITHM=INSTANT was introduced as a way to avoid this.\n \nIf an ALTER TABLE operation supports ALGORITHM=INSTANT, then\nit can be performed without modifying any data files.\n \nIf ALGORITHM=INSTANT is specified for an ALTER TABLE\noperation that does not support ALGORITHM=INSTANT, then an\nerror will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to\nmodify data files, and perform unexpectedly slowly.\n \nSee InnoDB Online DDL Operations with ALGORITHM=INSTANT for\nmore.\n \nLOCK\n \nIn MariaDB 10.0 and later, the ALTER TABLE statement\nsupports the LOCK clause. This clause is one of the clauses\nthat is used to implement online DDL. ALTER TABLE supports\nseveral different locking strategies. A locking strategy can\nbe explicitly chosen for an ALTER TABLE operation by setting\nthe LOCK clause. The supported values are:\nDEFAULT: Acquire the least restrictive lock on the table\nthat is supported for the specific operation. Permit the\nmaximum amount of concurrency that is supported for the\nspecific operation.\nNONE: Acquire no lock on the table. Permit all concurrent\nDML. If this locking strategy is not permitted for an\noperation, then an error is raised.\nSHARED: Acquire a read lock on the table. Permit read-only\nconcurrent DML. If this locking strategy is not permitted\nfor an operation, then an error is raised.\nEXCLUSIVE: Acquire a write lock on the table. Do not permit\nconcurrent DML.\n \nDifferent storage engines support different locking\nstrategies for different operations. If a specific locking\nstrategy is chosen for an ALTER TABLE operation, and that\ntable\'s storage engine does not support that locking\nstrategy for that specific operation, then an error will be\nraised.\n \nIf the LOCK clause is not explicitly set, then the operation\nuses LOCK=DEFAULT.\n \nALTER ONLINE TABLE is equivalent to LOCK=NONE. Therefore,\nthe ALTER ONLINE TABLE statement can be used to ensure that\nyour ALTER TABLE operation allows all concurrent DML.\n \nSee InnoDB Online DDL Overview: LOCK for information on how\nthe LOCK clause affects InnoDB.\n \nProgress Reporting\n \nMariaDB provides progress reporting for ALTER TABLE\nstatement for clients\nthat support the new progress reporting protocol. For\nexample, if you were using the mysql client, then the\nprogress report might look like this::\n \nALTER TABLE test ENGINE=Aria;\nStage: 1 of 2 \'copy to tmp table\' 46% of stage\n \nThe progress report is also shown in the output of the SHOW\nPROCESSLIST statement and in the contents of the\ninformation_schema.PROCESSLIST table.\n \nSee Progress Reporting for more information.\n \nAborting ALTER TABLE Operations\n \nIf an ALTER TABLE operation is being performed and the\nconnection is killed, the changes will be rolled back in a\ncontrolled manner. The rollback can be a slow operation as\nthe time it takes is relative to how far the operation has\nprogressed.\n \nAborting ALTER TABLE ... ALGORITHM=COPY was made faster by\nremoving excessive undo logging (MDEV-11415). This\nsignificantly shortens the time it takes to abort a running\nALTER TABLE operation.\n \nExamples\n-------- \nAdding a new column:\n \nALTER TABLE t1 ADD x INT;\n \nDropping a column:\n \nALTER TABLE t1 DROP x;\n \nModifying the type of a column:\n \nALTER TABLE t1 MODIFY x bigint unsigned;\n \nChanging the name and type of a column:\n \nALTER TABLE t1 CHANGE a b bigint unsigned auto_increment;\n \nCombining multiple clauses in a single ALTER TABLE\nstatement, separated by commas:\n \nALTER TABLE t1 DROP x, ADD x2 INT, CHANGE y y2 INT;\n \nChanging the storage engine:\n \nALTER TABLE t1 ENGINE = InnoDB;\n \nRebuilding the table (the previous example will also rebuild\nthe table if it was already InnoDB):\n \nALTER TABLE t1 FORCE;\n \n\n\nURL: https://mariadb.com/kb/en/library/alter-table/') WHERE help_topic_id = 647;
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (648,39,'ALTER TABLESPACE','The ALTER TABLESPACE statement is not supported by MariaDB. It was originally\ninherited from MySQL NDB Cluster. In MySQL 5.7 and later, the statement is also\nsupported for InnoDB. However, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n','','https://mariadb.com/kb/en/library/alter-tablespace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (649,39,'ALTER VIEW','Syntax\n------\nALTER\n  [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n  [DEFINER = { user | CURRENT_USER }]\n  [SQL SECURITY { DEFINER | INVOKER }]\n  VIEW view_name [(column_list)]\n  AS select_statement\n  [WITH [CASCADED | LOCAL] CHECK OPTION]\n\nDescription\n-----------\nThis statement changes the definition of a view, which must exist. The\nsyntax is similar to that for CREATE VIEW and the effect is the same\nas for CREATE OR REPLACE VIEW if the view exists. This statement\nrequires the CREATE VIEW and DROP privileges for the view, and some\nprivilege for each column referred to in the SELECT statement. ALTER VIEW is allowed\nonly to the definer or users with the SUPER privilege.\n\nExample\n-------\nALTER VIEW v AS SELECT a, a*3 AS a2 FROM t;\n','','https://mariadb.com/kb/en/library/alter-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (650,39,'CONSTRAINT','MariaDB supports the implementation of constraints at the table-level using\neither CREATE TABLE or ALTER TABLE statements.  A table constraint restricts the data\nyou can add to the table.  If you attempt to insert invalid data on a column, MariaDB\nthrows an error.\n\nSyntax\n------\n[CONSTRAINT [symbol]] constraint_expression\n\nconstraint_expression:\n | PRIMARY KEY [index_type] (index_col_name, ...) [index_option] ...\n | FOREIGN KEY [index_name] (index_col_name, ...)\n   REFERENCES tbl_name (index_col_name, ...)\n   [ON DELETE reference_option]\n   [ON UPDATE reference_option]\n | UNIQUE [INDEX|KEY] [index_name]\n   [index_type] (index_col_name, ...) [index_option] ...\n | CHECK (check_constraints)\n\nindex_type:\n USING {BTREE | HASH | RTREE}\n\nindex_col_name:\n col_name [(length)] [ASC | DESC]\n\nindex_option:\n | KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT 'string'\n | CLUSTERING={YES|NO}\n\nreference_option:\n RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\nDescription\n-----------\nConstraints provide restrictions on the data you can add to a table.  This allows you\nto enforce data integrity from MariaDB, rather than through application logic.  When\na statement violates a constraint, MariaDB throws an error.\n\nThere are four types of table constraints:\n+--------------------------------------------------------------------------+---------\n----------------------------------------------------------------+\n|Constraint                                                               \n|Description                                                               |\n|PRIMARY KEY                                                               |Sets the\ncolumn for referencing rows.  Values must be unique and not null.|\n|FOREIGN KEY                                                               |Sets the\ncolumn to reference the primary key on another table.            |\n|UNIQUE                                                                    |Requires\nvalues in column or columns only occur once in the table.        |\n|CHECK                                                                     |Checks\nwhether the data meets the given condition.                        |\n+--------------------------------------------------------------------------+---------\n----------------------------------------------------------------+\nThe Information Schema TABLE_CONSTRAINTS Table contains information about tables that\nhave constraints.\n\nFOREIGN KEY Constraints\n\nInnoDB supports foreign key constraints. The syntax for a foreign key\nconstraint definition in InnoDB looks like this:\n[CONSTRAINT [symbol]] FOREIGN KEY\n  [index_name] (index_col_name, ...)\n  REFERENCES tbl_name (index_col_name,...)\n  [ON DELETE reference_option]\n  [ON UPDATE reference_option]\n\nreference_option:\n  RESTRICT | CASCADE | SET NULL | NO ACTION\n\nThe Information Schema REFERENTIAL_CONSTRAINTS table has more information about\nforeign keys.\n\nCHECK Constraints\n\nIn MariaDB 10.2.1 you can define constraints in 2 different ways:\n\nBefore a row is inserted or updated, all constraints are evaluated in the order they\nare defined. If any constraint expression returns false, then the row will not be\ninserted or updated.\n\nOne can use most deterministic functions in a constraint, including UDFs.\n\nCREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater\nCHECK (a>b));\n\nIf you use the second format and you don't give a name to the constraint, then the\nconstraint will get an automatically generated name. This is done so that you can\nlater delete the constraint with ALTER TABLE DROP constraint_name.\n\nOne can disable all constraint expression checks by setting the\ncheck_constraint_checks variable to OFF. This is useful for example when loading a\ntable that violates some constraints that you want to later find and fix in SQL.\n\nReplication\n\nIn row-based replication, only the master checks constraints, and failed statements\nwill not be replicated. In statement-based replication, the slaves will also check\nconstraints. Constraints should therefore be identical, as well as deterministic, in\na replication environment.\n\nAuto_increment\n\nExamples\n--------\nCREATE TABLE product (category INT NOT NULL, id INT NOT NULL,\n           price DECIMAL,\n           PRIMARY KEY(category, id)) ENGINE=INNODB;\nCREATE TABLE customer (id INT NOT NULL,\n           PRIMARY KEY (id)) ENGINE=INNODB;\nCREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,\n              product_category INT NOT NULL,\n              product_id INT NOT NULL,\n              customer_id INT NOT NULL,\n              PRIMARY KEY(no),\n              INDEX (product_category, product_id),\n              FOREIGN KEY (product_category, product_id)\n               REFERENCES product(category, id)\n               ON UPDATE CASCADE ON DELETE RESTRICT,\n              INDEX (customer_id),\n              FOREIGN KEY (customer_id)\n               REFERENCES customer(id)) ENGINE=INNODB;\n\nNumeric constraints and comparisons:\nCREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater\nCHECK (a>b));\n\nINSERT INTO t1(a) VALUES (1);\nERROR 4022 (23000): CONSTRAINT `a` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (3,4);\nERROR 4022 (23000): CONSTRAINT `a_greater` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (4,3);\nQuery OK, 1 row affected (0.04 sec)\n\nDropping a constraint:\nALTER TABLE t1 DROP CONSTRAINT a_greater;\n\nAdding a constraint:\nALTER TABLE t1 ADD CONSTRAINT a_greater CHECK (a>b);\n\nDate comparisons and character length:\nCREATE TABLE t2 (name VARCHAR(30) CHECK (CHAR_LENGTH(name)>2), start_date DATE, \n end_date DATE CHECK (start_date IS NULL OR end_date IS NULL\nOR start_date<end_date));\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione',\n'2003-12-15', '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `name` failed for `test`.`t2`\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', NULL, '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione',\n'2015-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `end_date` failed for `test`.`t2`\n\nA misplaced parenthesis:\nCREATE TABLE t3 (name VARCHAR(30) CHECK (CHAR_LENGTH(name>2)), start_date DATE, \n end_date DATE CHECK (start_date IS NULL OR end_date IS NULL\nOR start_date<end_date));\nQuery OK, 0 rows affected (0.32 sec)\n\nINSERT INTO t3(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'Io' |\n+---------+------+----------------------------------------+\n\nCompare the definition of table t2 to table t3. CHAR_LENGTH(name)>2 is very different\nto CHAR_LENGTH(name>2) as the latter mistakenly performs a numeric comparison on the\nname field, leading to unexpected results.\n','','https://mariadb.com/kb/en/library/constraint/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (651,39,'CREATE DATABASE','Syntax\n------\nCREATE [OR REPLACE] {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n  [create_specification] ...\n\ncreate_specification:\n  [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n | COMMENT [=] 'comment'\n\nDescription\n-----------\nCREATE DATABASE creates a database with the given name. To use this statement, you\nneed the CREATE privilege for the database. CREATE SCHEMA is a synonym for\nCREATE DATABASE.\n\nFor valid identifiers to use as database names, see Identifier Names.\n\nOR REPLACE\nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP DATABASE IF EXISTS db_name;\nCREATE DATABASE db_name ...;\n\nIF NOT EXISTS\nWhen the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the specified database already exists.\n\nCOMMENT\n\nExamples\n--------\nCREATE DATABASE db1;\nQuery OK, 1 row affected (0.18 sec)\n\nCREATE DATABASE db1;\nERROR 1007 (HY000): Can't create database 'db1'; database exists\n\nCREATE OR REPLACE DATABASE db1;\nQuery OK, 2 rows affected (0.00 sec)\n\nCREATE DATABASE IF NOT EXISTS db1;\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+----------------------------------------------+\n| Level | Code | Message                                      |\n+-------+------+----------------------------------------------+\n| Note  | 1007 | Can't create database 'db1'; database exists |\n+-------+------+----------------------------------------------+\n\nSetting the character sets and collation. See Setting Character Sets and Collations\nfor more details.\n\nCREATE DATABASE czech_slovak_names \n CHARACTER SET = 'keybcs2'\n COLLATE = 'keybcs2_bin';\n\nComments, from MariaDB 10.5.0:\nCREATE DATABASE presentations COMMENT 'Presentations for conferences';\n','','https://mariadb.com/kb/en/library/create-database/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (652,39,'CREATE EVENT','Syntax\n------\nCREATE [OR REPLACE]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  EVENT\n  [IF NOT EXISTS]\n  event_name\n  ON SCHEDULE schedule\n  [ON COMPLETION [NOT] PRESERVE]\n  [ENABLE | DISABLE | DISABLE ON SLAVE]\n  [COMMENT 'comment']\n  DO sql_statement;\n\nschedule:\n  AT timestamp [+ INTERVAL interval] ...\n | EVERY interval\n  [STARTS timestamp [+ INTERVAL interval] ...]\n  [ENDS timestamp [+ INTERVAL interval] ...]\n\ninterval:\n  quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n       WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n       DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n\nDescription\n-----------\nThis statement creates and schedules a new event. It requires the\nEVENT privilege for the schema in which the event is to be created.\n\nThe minimum requirements for a valid CREATE EVENT statement are as\nfollows:\n\nHere is an example of a minimal CREATE EVENT statement:\nCREATE EVENT myevent\n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n  DO\n   UPDATE myschema.mytable SET mycol = mycol + 1;\n\nThe previous statement creates an event named myevent. This event executes once\n— one hour following its creation\n— by running an SQL statement that increments the\nvalue of the myschema.mytable table's mycol column by 1.\n\nThe event_name must be a valid MariaDB identifier with a maximum length\nof 64 characters. It may be delimited using back ticks, and may be\nqualified with the name of a database schema. An event is associated\nwith both a MariaDB user (the definer) and a schema, and its name must\nbe unique among names of events within that schema. In general, the\nrules governing event names are the same as those for names of stored\nroutines. See Identifier Names.\n\nIf no schema is indicated as part of event_name, the default (current)\nschema is assumed.\n\nFor valid identifiers to use as event names, see Identifier Names.\n\nOR REPLACE\nThe OR REPLACE clause was included in MariaDB 10.1.4. If used and the event already\nexists, instead of an error being returned, the existing event will be dropped and\nreplaced by the newly defined event.\n\nIF NOT EXISTS\nIf the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the event already exists. Cannot be used together with OR REPLACE.\n\nON SCHEDULE\nThe ON SCHEDULE clause can be used to specify when the event must be triggered.\n\nAT\nIf you want to execute the event only once (one time event), you can use the AT\nkeyword, followed by a timestamp. If you use CURRENT_TIMESTAMP, the event acts as\nsoon as it is created. As a convenience, you can add one or more intervals to that\ntimestamp. You can also specify a timestamp in the past, so that the event is stored\nbut not triggered, until you modify it via ALTER EVENT.\n\nThe following example shows how to create an event that will be triggered tomorrow at\na certain time:\nCREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n\nYou can also specify that an event must be triggered at a regular interval (recurring\nevent). In such cases, use the EVERY clause followed by the interval.\n\nIf an event is recurring, you can specify when the first execution must happen via\nthe STARTS clause and a maximum time for the last execution via the ENDS clause.\n\nSTARTS and ENDS clauses are followed by a timestamp and, optionally, one or more\nintervals. The ENDS clause can specify a timestamp in the past, so that the event is\nstored but not executed until you modify it via ALTER EVENT.\n\nIn the following example, next month a recurring event will be triggered hourly for\na week:\nCREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n\nIntervals consist of a quantity and a time unit. The time units are the same used for\nother staments and time functions, except that you can't use microseconds for events.\n\nFor simple time units, like HOUR or MINUTE, the quantity is an integer number, for\nexample '10 MINUTE'. For composite time units, like HOUR_MINUTE or HOUR_SECOND, the\nquantity must be a string with all involved simple values and their separators, for\nexample '2:30' or '2:30:30'.\n\nON COMPLETION [NOT] PRESERVE\nThe ON COMPLETION clause can be used to specify if the event must be deleted after\nits last execution (that is, after its AT or ENDS timestamp is past). By default,\nevents are dropped when they are expired. To explicitly state that this is the\ndesired behaviour, you can use ON COMPLETION NOT PRESERVE. Instead, if you want the\nevent to be preserved, you can use ON COMPLETION PRESERVE.\n\nIn you specify ON COMPLETION NOT PRESERVE, and you specify a timestamp in the past\nfor AT or ENDS clause, the event will be immediatly dropped. In such cases, you will\nget a Note 1558: "Event execution time is in the past and ON COMPLETION NOT PRESERVE\nis set. The event was dropped immediately after creation".\n\nENABLE/DISABLE/DISABLE ON SLAVE\nEvents are ENABLEd by default. If you want to stop MariaDB from executing\nan event, you may specify DISABLE. When it is ready to be activated, you\nmay enable it using ALTER EVENT. Another option is\nDISABLE ON SLAVE, which indicates that an event was created on a master and has been\nreplicated to the slave, which is prevented from executing the event. If DISABLE ON\nSLAVE is specifically set, the event will not be executed.\n\nCOMMENT\nThe COMMENT clause may be used to set a comment for the event. Maximum\nlength for comments is 64 characters. The comment is a string, so it must be\nquoted. To see events comments, you can query the INFORMATION_SCHEMA.EVENTS table\n(the column is named EVENT_COMMENT).\n\nExamples\n--------\nMinimal CREATE EVENT statement:\nCREATE EVENT myevent\n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n  DO\n   UPDATE myschema.mytable SET mycol = mycol + 1;\n\nAn event that will be triggered tomorrow at a certain time:\nCREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n\nNext month a recurring event will be triggered hourly for a week:\nCREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n\nOR REPLACE and IF NOT EXISTS:\nCREATE EVENT myevent\n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n  DO\n   UPDATE myschema.mytable SET mycol = mycol + 1;\nERROR 1537 (HY000): Event 'myevent' already exists\n\nCREATE OR REPLACE EVENT myevent\n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n  DO\n   UPDATE myschema.mytable SET mycol = mycol + 1;;\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE EVENT IF NOT EXISTS myevent\n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n  DO\n   UPDATE myschema.mytable SET mycol = mycol + 1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+--------------------------------+\n| Level | Code | Message                        |\n+-------+------+--------------------------------+\n| Note  | 1537 | Event 'myevent' already exists |\n+-------+------+--------------------------------+\n','','https://mariadb.com/kb/en/library/create-event/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (653,39,'CREATE FUNCTION','Syntax\n------\nCREATE [OR REPLACE]\n  [DEFINER = {user | CURRENT_USER | role | CURRENT_ROLE }]\n  [AGGREGATE] FUNCTION [IF NOT EXISTS] func_name ([func_parameter[,...]])\n  RETURNS type\n  [characteristic ...]\n  RETURN func_body\nfunc_parameter:\n  [ IN | OUT | INOUT | IN OUT ]  param_name type\ntype:\n  Any valid MariaDB data type\ncharacteristic:\n  LANGUAGE SQL\n | [NOT] DETERMINISTIC\n | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT 'string'\nfunc_body:\n  Valid SQL procedure statement\n\nDescription\n-----------\nUse the CREATE FUNCTION statement to create a new stored function. You must have\nthe CREATE ROUTINE database privilege to use CREATE FUNCTION.\n\nA function takes any number of arguments and returns a value from the function\nbody. The\nfunction body can be any valid SQL expression as you would use, for example, in\nany select\nexpression. If you have the appropriate privileges, you can call the function exactly\nas you\nwould any built-in function. See Security below for details on privileges.\n\nYou can also use a variant of the CREATE FUNCTION statement to install a user-defined\nfunction (UDF) defined by a plugin. See CREATE FUNCTION (UDF)\nfor details.\n\nYou can use a SELECT statement for the function body by enclosing it in\nparentheses, exactly as you would to use a subselect for any other expression.\n\nThe SELECT\nstatement must return a single value. If more than one column is returned when the\nfunction is called,\nerror 1241 results. If more than one row is returned when the function is called,\nerror 1242\nresults. Use a LIMIT clause to ensure only one row is returned.\n\nYou can also replace the RETURN clause with a BEGIN...END compound\nstatement. The compound statement must contain a RETURN statement. When the\nfunction is\ncalled, the RETURN statement immediately returns its result, and any statements\nafter RETURN\nare effectively ignored.\n\nBy default, a function is associated with the current database. To associate the\nfunction explicitly\nwith a given database, specify the fully-qualified name as db_name.func_name\nwhen you create it. If the function name is the same as the name of a built-in\nfunction, you must\nuse the fully qualified name when you call it.\n\nThe parameter list enclosed within parentheses must always be present.\n\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case sensitive.\n\nEach parameter can be declared to use any valid data type, except that\nthe COLLATE attribute cannot be used.\n\nFor valid identifiers to use as function names, see Identifier Names.\n\nIN | OUT | INOUT | IN OUT\nOUT, INOUT and its equivalent IN OUT, are only valid if called from SET and not\nSELECT. These quantifiers are especially useful for creating functions with more than\none return value. This allows functions to be more complex and nested.\n\nDELIMITER $$\nCREATE FUNCTION add_func3(IN a INT, IN b INT, OUT c INT) RETURNS INT\nBEGIN\n SET c = 100;\n RETURN a + b;\nEND;\n$$\nDELIMITER ;\n\nSET @a = 2;\nSET @b = 3;\nSET @c = 0;\nSET @res= add_func3(@a, @b, @c);\n\nSELECT add_func3(@a, @b, @c);\nERROR 4186 (HY000): OUT or INOUT argument 3 for function add_func3 is not\nallowed here\n\nDELIMITER $$\nCREATE FUNCTION add_func4(IN a INT, IN b INT, d INT) RETURNS INT\nBEGIN\n DECLARE c, res INT;\n SET res = add_func3(a, b, c) + d;\n if (c > 99) then\n  return  3;\n else\n  return res;\n end if;\nEND;\n$$\n\nDELIMITER ;\n\nSELECT add_func4(1,2,3);\n+------------------+\n| add_func4(1,2,3) |\n+------------------+\n|                3 |\n+------------------+\n\nAGGREGATE\nRETURNS\nThe RETURNS clause specifies the return type of the function. NULL values are\npermitted with all return types.\n\nWhat happens if the RETURN clause returns a value of a different type? It depends on\nthe SQL_MODE in effect at the moment of the function creation.\n\nIf the SQL_MODE is strict (STRICT_ALL_TABLES or STRICT_TRANS_TABLES flags are\nspecified), a 1366 error will be produced.\n\nOtherwise, the value is coerced to the proper type. For example, if a function\nspecifies an ENUM or SET value in the RETURNS clause, but the RETURN\nclause returns an integer, the value returned from the function is the string for the\ncorresponding ENUM\nmember of set of SET members.\n\nMariaDB stores the SQL_MODE system variable setting that is in effect at the\ntime a routine is created, and always executes the routine with this setting in\nforce, regardless of the server SQL mode in effect when the routine is invoked.\n\nLANGUAGE SQL\nLANGUAGE SQL is a standard SQL clause, and it can be used in MariaDB for portability.\n\nHowever that clause has no meaning, because SQL is the only supported language for\nstored functions.\n\nA function is deterministic if it can produce only one result for a given list of\nparameters. If the result may be affected by stored data, server variables, random\nnumbers or any value that is not explicitly passed, then the function is not\ndeterministic. Also, a function is non-deterministic if it uses non-deterministic\nfunctions like NOW() or CURRENT_TIMESTAMP(). The optimizer may choose a faster\nexecution plan if it known that the function is deterministic. In such cases, you\nshould declare the routine using the DETERMINISTIC keyword. If you want to explicitly\nstate that the function is not deterministic (which is the default) you can use the\nNOT DETERMINISTIC keywords.\n\nIf you declare a non-deterministic function as DETERMINISTIC, you may get incorrect\nresults. If you declare a deterministic function as NOT DETERMINISTIC, in some cases\nthe queries will be slower.\n\nOR REPLACE\nIF NOT EXISTS\n[NOT] DETERMINISTIC\nThe [NOT] DETERMINISTIC clause also affects binary logging, because the STATEMENT\nformat can not be used to store or replicate non-deterministic statements.\n\nCONTAINS SQL, NO SQL, READS SQL DATA, and MODIFIES SQL DATA are informative clauses\nthat tell the server what the function does. MariaDB does not check in any way\nwhether the specified clause is correct. If none of these clauses are specified,\nCONTAINS SQL is used by default.\n\nMODIFIES SQL DATA\nMODIFIES SQL DATA means that the function contains statements that may modify data\nstored in databases. This happens if the function contains statements like DELETE,\nUPDATE, INSERT, REPLACE or DDL.\n\nREADS SQL DATA\nREADS SQL DATA means that the function reads data stored in databases, but does not\nmodify any data. This happens if SELECT statements are used, but there no write\noperations are executed.\n\nCONTAINS SQL\nCONTAINS SQL means that the function contains at least one SQL statement, but it does\nnot read or write any data stored in a database. Examples include SET or DO.\n\nNO SQL\nNO SQL means nothing, because MariaDB does not currently support any language other\nthan SQL.\n\nOracle Mode\n\nSecurity\n--------\nYou must have the EXECUTE privilege on a function to call it.\n\nMariaDB automatically grants the EXECUTE and ALTER ROUTINE privileges to the\naccount that called CREATE FUNCTION, even if the DEFINER clause was used.\n\nEach function has an account associated as the definer. By default, the definer is\nthe account\nthat created the function. Use the DEFINER clause to specify a different account\nas the\ndefiner. You must have the SUPER privilege, or, from MariaDB 10.5.2, the SET USER\nprivilege, to use the DEFINER\nclause. See Account Names for details on specifying accounts.\n\nThe SQL SECURITY clause specifies what privileges are used when a function is called.\n\nIf SQL SECURITY is INVOKER, the function body will be evaluated using the privileges\nof the user calling the function. If SQL SECURITY is DEFINER, the function body is\nalways evaluated using the privileges of the definer account. DEFINER is the default.\n\nThis allows you to create functions that grant limited access to certain data. For\nexample, say\nyou have a table that stores some employee information, and that you've\ngranted SELECT\nprivileges only on certain columns to the user account roger.\n\nCREATE TABLE employees (name TINYTEXT, dept TINYTEXT, salary INT);\nGRANT SELECT (name, dept) ON employees TO roger;\n\nTo allow the user the get the maximum salary for a department, define a function\nand grant\nthe EXECUTE privilege:\nCREATE FUNCTION max_salary (dept TINYTEXT) RETURNS INT RETURN\n (SELECT MAX(salary) FROM employees WHERE employees.dept = dept);\nGRANT EXECUTE ON FUNCTION max_salary TO roger;\n\nSince SQL SECURITY defaults to DEFINER, whenever the user roger calls\nthis function, the subselect will execute with your privileges. As long as you have\nprivileges to\nselect the salary of each employee, the caller of the function will be able to get\nthe maximum\nsalary for each department without being able to see individual salaries.\n\nCharacter sets and collations\n-----------------------------\nFunction return types can be declared to use any valid character set and collation.\n\nIf used, the COLLATE attribute needs to be preceded by a CHARACTER SET attribute.\n\nIf the character set and collation are not specifically set in the statement, the\ndatabase defaults at the time of creation will be used. If the database defaults\nchange at a later stage, the stored function character set/collation will not be\nchanged at the same time; the stored function needs to be dropped and recreated to\nensure the same character set/collation as the database is used.\n\nExamples\n--------\nThe following example function takes a parameter, performs an operation using\nan SQL function, and returns the result.\n\nCREATE FUNCTION hello (s CHAR(20))\n  RETURNS CHAR(50) DETERMINISTIC\n  RETURN CONCAT('Hello, ',s,'!');\n\nSELECT hello('world');\n+----------------+\n| hello('world') |\n+----------------+\n| Hello, world!  |\n+----------------+\n\nYou can use a compound statement in a function to manipulate data with statements\nlike INSERT and UPDATE. The following example creates a counter function\nthat uses a temporary table to store the current value. Because the\ncompound statement\ncontains statements terminated with semicolons, you have to first change\nthe statement\ndelimiter with the DELIMITER statement to allow the semicolon to be used in the\nfunction body. See Delimiters in the mysql client for more.\n\nCREATE TEMPORARY TABLE counter (c INT);\nINSERT INTO counter VALUES (0);\nDELIMITER //\nCREATE FUNCTION counter () RETURNS INT\n BEGIN\n  UPDATE counter SET c = c + 1;\n  RETURN (SELECT c FROM counter LIMIT 1);\n END //\nDELIMITER ;\n\nCharacter set and collation:\nCREATE FUNCTION hello2 (s CHAR(20))\n RETURNS CHAR(50) CHARACTER SET 'utf8' COLLATE 'utf8_bin' DETERMINISTIC\n RETURN CONCAT('Hello, ',s,'!');\n','','https://mariadb.com/kb/en/library/create-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (654,39,'CREATE INDEX','Syntax\n------\nCREATE [OR REPLACE] [UNIQUE|FULLTEXT|SPATIAL] INDEX \n [IF NOT EXISTS] index_name\n  [index_type]\n  ON tbl_name (index_col_name,...)\n  [WAIT n | NOWAIT]\n  [index_option]\n  [algorithm_option | lock_option] ...\n\nindex_col_name:\n  col_name [(length)] [ASC | DESC]\n\nindex_type:\n  USING {BTREE | HASH | RTREE}\n\nindex_option:\n  [ KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT 'string'\n | CLUSTERING={YES| NO} ]\n [ IGNORED | NOT IGNORED ]\n\nalgorithm_option:\n  ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n\nlock_option:\n  LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n\nDescription\n-----------\nCREATE INDEX is mapped to an ALTER TABLE statement to create indexes.\n\nSee ALTER TABLE. CREATE INDEX cannot be used to create a\nPRIMARY KEY; use ALTER TABLE instead.\n\nIf another connection is using the table, a metadata lock is active, and this\nstatement will wait until the lock is released. This is also true for\nnon-transactional tables.\n\nAnother shortcut, DROP INDEX, allows the removal of an index.\n\nFor valid identifiers to use as index names, see Identifier Names.\n\nNote that KEY_BLOCK_SIZE is currently ignored in CREATE INDEX, although it is\nincluded in the output of SHOW CREATE TABLE.\n\nPrivileges\n----------\nExecuting the CREATE INDEX statement requires the INDEX privilege for the table or\nthe database.\n\nOnline DDL\n----------\nOnline DDL is supported with the ALGORITHM and LOCK clauses.\n\nSee InnoDB Online DDL Overview for more information on online DDL with InnoDB.\n\nCREATE OR REPLACE INDEX\n-----------------------\nIf the OR REPLACE clause is used and if the index already exists, then instead of\nreturning an error, the server will drop the existing index and replace it with the\nnewly defined index.\n\nCREATE INDEX IF NOT EXISTS\n--------------------------\nIf the IF NOT EXISTS clause is used, then the index will only be created if an index\nwith the same name does not already exist. If the index already exists, then a\nwarning will be triggered by default.\n\nIndex Definitions\n-----------------\nSee CREATE TABLE: Index Definitions for information about index definitions.\n\nWAIT/NOWAIT\n-----------\n\nALGORITHM\n---------\nSee ALTER TABLE: ALGORITHM for more information.\n\nLOCK\n----\nSee ALTER TABLE: LOCK for more information.\n\nProgress Reporting\n------------------\nMariaDB provides progress reporting for CREATE INDEX statement for clients\nthat support the new progress reporting protocol. For example, if you were using the\nmysql client, then the progress report might look like this::\nCREATE INDEX ON tab (num);;\nStage: 1 of 2 'copy to tmp table'    46% of stage\n\nThe progress report is also shown in the output of the SHOW PROCESSLIST statement and\nin the contents of the information_schema.PROCESSLIST table.\n\nSee Progress Reporting for more information.\n\nWITHOUT OVERLAPS\n----------------\n\nExamples\n--------\nCreating a unique index:\nCREATE UNIQUE INDEX HomePhone ON Employees(Home_Phone);\n\nOR REPLACE and IF NOT EXISTS:\nCREATE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n\nCREATE INDEX xi ON xx5 (x);\nERROR 1061 (42000): Duplicate key name 'xi'\n\nCREATE OR REPLACE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n\nCREATE INDEX IF NOT EXISTS xi ON xx5 (x);\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------+\n| Level | Code | Message                 |\n+-------+------+-------------------------+\n| Note  | 1061 | Duplicate key name 'xi' |\n+-------+------+-------------------------+\n\nFrom MariaDB 10.5.3, creating a unique index for an application-time period table\nwith a WITHOUT OVERLAPS constraint:\nCREATE UNIQUE INDEX u ON rooms (room_number, p WITHOUT OVERLAPS);\n','','https://mariadb.com/kb/en/library/create-index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (655,39,'CREATE PACKAGE','Syntax\n------\nCREATE\n  [ OR REPLACE]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  PACKAGE [ IF NOT EXISTS ]\n  [ db_name . ] package_name\n  [ package_characteristic ... ]\n{ AS | IS }\n  [ package_specification_element ... ]\nEND [ package_name ]\n\npackage_characteristic:\n  COMMENT 'string'\n | SQL SECURITY { DEFINER | INVOKER }\n\npackage_specification_element:\n  FUNCTION_SYM package_specification_function ;\n | PROCEDURE_SYM package_specification_procedure ;\n\npackage_specification_function:\n  func_name [ ( func_param [, func_param]... ) ]\n  RETURNS func_return_type\n  [ package_routine_characteristic... ]\n\npackage_specification_procedure:\n  proc_name [ ( proc_param [, proc_param]... ) ]\n  [ package_routine_characteristic... ]\n\nfunc_return_type:\n  type\n\nfunc_param:\n  param_name [ IN | OUT | INOUT | IN OUT ] type\n\nproc_param:\n  param_name [ IN | OUT | INOUT | IN OUT ] type\n\ntype:\n  Any valid MariaDB explicit or anchored data type\n\npackage_routine_characteristic:\n   COMMENT  'string'\n  | LANGUAGE SQL\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n\nDescription\n-----------\nThe CREATE PACKAGE statement can be used when Oracle SQL_MODE is set.\n\nThe CREATE PACKAGE creates the specification for a stored package (a collection of\nlogically related stored objects). A stored package specification declares public\nroutines (procedures and functions) of the package, but does not implement\nthese routines.\n\nA package whose specification was created by the CREATE PACKAGE statement, should\nlater be implemented using the CREATE PACKAGE BODY statement.\n\nFunction parameter quantifiers IN | OUT | INOUT | IN OUT\n--------------------------------------------------------\nOUT, INOUT and its equivalent IN OUT, are only valid if called from SET and not\nSELECT. These quantifiers are especially useful for creating functions and procedures\nwith more than one return value. This allows functions and procedures to be more\ncomplex and nested.\n\nExamples\n--------\nSET sql_mode=ORACLE;\nDELIMITER $$\nCREATE OR REPLACE PACKAGE employee_tools AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND;\n$$\nDELIMITER ;\n','','https://mariadb.com/kb/en/library/create-package/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (656,39,'CREATE PACKAGE BODY','Syntax\n------\nCREATE [ OR REPLACE ]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  PACKAGE BODY\n  [ IF NOT EXISTS ]\n  [ db_name . ] package_name\n  [ package_characteristic... ]\n{ AS | IS }\n  package_implementation_declare_section\n  package_implementation_executable_section\nEND [ package_name]\n\npackage_implementation_declare_section:\n  package_implementation_item_declaration\n   [ package_implementation_item_declaration... ]\n   [ package_implementation_routine_definition... ]\n | package_implementation_routine_definition\n   [ package_implementation_routine_definition...]\n\npackage_implementation_item_declaration:\n  variable_declaration ;\n\nvariable_declaration:\n  variable_name[,...] type [:= expr ]\n\npackage_implementation_routine_definition:\n  FUNCTION package_specification_function\n   [ package_implementation_function_body ] ;\n | PROCEDURE package_specification_procedure\n   [ package_implementation_procedure_body ] ;\n\npackage_implementation_function_body:\n  { AS | IS } package_routine_body [func_name]\n\npackage_implementation_procedure_body:\n  { AS | IS } package_routine_body [proc_name]\n\npackage_routine_body:\n  [ package_routine_declarations ]\n  BEGIN\n   statements [ EXCEPTION exception_handlers ]\n  END\n\npackage_routine_declarations:\n  package_routine_declaration ';' [package_routine_declaration ';']...\n\npackage_routine_declaration:\n     variable_declaration\n    | condition_name CONDITION FOR condition_value\n    | user_exception_name EXCEPTION\n    | CURSOR_SYM cursor_name\n     [ ( cursor_formal_parameters ) ]\n     IS select_statement\n    ;\n\npackage_implementation_executable_section:\n     END\n    | BEGIN\n      statement ; [statement ; ]...\n     [EXCEPTION exception_handlers]\n     END\n\nexception_handlers:\n     exception_handler [exception_handler...]\n\nexception_handler:\n     WHEN_SYM condition_value [, condition_value]...\n      THEN_SYM statement ; [statement ;]...\n\ncondition_value:\n     condition_name\n    | user_exception_name\n    | SQLWARNING\n    | SQLEXCEPTION\n    | NOT FOUND\n    | OTHERS_SYM\n    | SQLSTATE [VALUE] sqlstate_value\n    | mariadb_error_code\n\nDescription\n-----------\nThe CREATE PACKAGE BODY statement can be used when Oracle SQL_MODE is set.\n\nThe CREATE PACKAGE BODY statement creates the package body for a stored package. The\npackage specification must be previously created using the CREATE PACKAGE statement.\n\nA package body provides implementations of the package public routines and can\noptionally have:\n\nExamples\n--------\nSET sql_mode=ORACLE;\nDELIMITER $$\nCREATE OR REPLACE PACKAGE employee_tools AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND;\n$$\nCREATE PACKAGE BODY employee_tools AS\n -- package body variables\n stdRaiseAmount DECIMAL(10,2):=500;\n\n-- private routines\n PROCEDURE log (eid INT, ecmnt TEXT) AS\n BEGIN\n  INSERT INTO employee_log (id, cmnt) VALUES (eid, ecmnt);\n END;\n\n-- public routines\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2)) AS\n  eid INT;\n BEGIN\n  INSERT INTO employee (name, salary) VALUES (ename, esalary);\n  eid:= last_insert_id();\n  log(eid, 'hire ' || ename);\n END;\n\nFUNCTION getSalary(eid INT) RETURN DECIMAL(10,2) AS\n  nSalary DECIMAL(10,2);\n BEGIN\n  SELECT salary INTO nSalary FROM employee WHERE id=eid;\n  log(eid, 'getSalary id=' || eid || ' salary=' || nSalary);\n  RETURN nSalary;\n END;\n\nPROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2)) AS\n BEGIN\n  UPDATE employee SET salary=salary+amount WHERE id=eid;\n  log(eid, 'raiseSalary id=' || eid || ' amount=' || amount);\n END;\n\nPROCEDURE raiseSalaryStd(eid INT) AS\n BEGIN\n  raiseSalary(eid, stdRaiseAmount);\n  log(eid, 'raiseSalaryStd id=' || eid);\n END;\n\nBEGIN\n -- This code is executed when the current session\n -- accesses any of the package routines for the first time\n log(0, 'Session ' || connection_id() || ' ' || current_user || ' started');\nEND;\n$$\n\nDELIMITER ;\n','','https://mariadb.com/kb/en/library/create-package-body/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (657,39,'CREATE PROCEDURE','Syntax\n------\nCREATE\n  [OR REPLACE]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  PROCEDURE sp_name ([proc_parameter[,...]])\n  [characteristic ...] routine_body\n\nproc_parameter:\n  [ IN | OUT | INOUT ] param_name type\n\ntype:\n  Any valid MariaDB data type\n\ncharacteristic:\n  LANGUAGE SQL\n | [NOT] DETERMINISTIC\n | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT 'string'\n\nroutine_body:\n  Valid SQL procedure statement\n\nDescription\n-----------\nCreates a stored procedure. By default, a routine is\nassociated with the default database. To associate the routine\nexplicitly with a given database, specify the name as db_name.sp_name\nwhen you create it.\n\nWhen the routine is invoked, an implicit USE db_name is performed (and\nundone when the routine terminates). The causes the routine to have\nthe given default database while it executes. USE statements within\nstored routines are disallowed.\n\nWhen a stored procedure has been created, you invoke it by\nusing the CALL statement (see CALL).\n\nTo execute the CREATE PROCEDURE statement, it is\nnecessary to have the CREATE ROUTINE privilege. By default, MariaDB\nautomatically grants the ALTER ROUTINE and EXECUTE privileges to the\nroutine creator. See also Stored Routine Privileges.\n\nThe DEFINER and SQL SECURITY clauses specify the security context to\nbe used when checking access privileges at routine execution time, as\ndescribed later. Requires the SUPER privilege, or, from MariaDB 10.5.2, the SET\nUSER privilege.\n\nIf the routine name is the same as the name of a built-in SQL\nfunction, you must use a space between the name and the following\nparenthesis when defining the routine, or a syntax error occurs. This\nis also true when you invoke the routine later. For this reason, we\nsuggest that it is better to avoid re-using the names of existing SQL\nfunctions for your own stored routines.\n\nThe IGNORE_SPACE SQL mode applies to built-in functions, not to stored\nroutines. It is always allowable to have spaces after a routine name,\nregardless of whether IGNORE_SPACE is enabled.\n\nThe parameter list enclosed within parentheses must always be present.\n\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case sensitive.\n\nEach parameter can be declared to use any valid data type, except that\nthe COLLATE attribute cannot be used.\n\nFor valid identifiers to use as procedure names, see Identifier Names.\n\nIN/OUT/INOUT\n\nEach parameter is an IN parameter by default. To specify otherwise for\na parameter, use the keyword OUT or INOUT before the parameter name.\n\nAn IN parameter passes a value into a procedure. The procedure might\nmodify the value, but the modification is not visible to the caller\nwhen the procedure returns. An OUT parameter passes a value from the\nprocedure back to the caller. Its initial value is NULL within the\nprocedure, and its value is visible to the caller when the procedure\nreturns. An INOUT parameter is initialized by the caller, can be\nmodified by the procedure, and any change made by the procedure is\nvisible to the caller when the procedure returns.\n\nFor each OUT or INOUT parameter, pass a user-defined variable in the\nCALL statement that invokes the procedure so that you can obtain its\nvalue when the procedure returns. If you are calling the procedure\nfrom within another stored procedure or function, you can also pass a\nroutine parameter or local routine variable as an IN or INOUT\nparameter.\n\nDETERMINISTIC/NOT DETERMINISTIC\n\nDETERMINISTIC and NOT DETERMINISTIC apply only to functions. Specifying DETERMINISTC\nor NON-DETERMINISTIC in procedures has no effect. The default value is NOT\nDETERMINISTIC. Functions are DETERMINISTIC when they always return the same value for\nthe same input. For example, a truncate or substring function. Any function involving\ndata, therefore, is always NOT DETERMINISTIC.\n\nCONTAINS SQL/NO SQL/READS SQL DATA/MODIFIES SQL DATA\n\nCONTAINS SQL, NO SQL, READS SQL DATA, and MODIFIES SQL DATA are informative clauses\nthat tell the server what the function does. MariaDB does not check in any way\nwhether the specified clause is correct. If none of these clauses are specified,\nCONTAINS SQL is used by default.\n\nMODIFIES SQL DATA means that the function contains statements that may modify data\nstored in databases. This happens if the function contains statements like DELETE,\nUPDATE, INSERT, REPLACE or DDL.\n\nREADS SQL DATA means that the function reads data stored in databases, but does not\nmodify any data. This happens if SELECT statements are used, but there no write\noperations are executed.\n\nCONTAINS SQL means that the function contains at least one SQL statement, but it does\nnot read or write any data stored in a database. Examples include SET or DO.\n\nNO SQL means nothing, because MariaDB does not currently support any language other\nthan SQL.\n\nThe routine_body consists of a valid SQL procedure statement. This can\nbe a simple statement such as SELECT or INSERT, or it can be a\ncompound statement written using BEGIN and END. Compound statements\ncan contain declarations, loops, and other control structure\nstatements. See Programmatic and Compound Statements for syntax details.\n\nMariaDB allows routines to contain DDL statements, such as CREATE and\nDROP. MariaDB also allows stored procedures (but not stored functions)\nto contain SQL transaction statements such as COMMIT.\n\nFor additional information about statements that are not allowed in\nstored routines, see Stored Routine Limitations.\n\nInvoking stored procedure from within programs\n\nFor information about invoking stored procedures from within programs written in a\nlanguage that has a MariaDB/MySQL interface, see CALL.\n\nOR REPLACE\n\nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP PROCEDURE IF EXISTS name;\nCREATE PROCEDURE name ...;\n\nwith the exception that any existing privileges for the procedure are not dropped.\n\nsql_mode\n\nMariaDB stores the sql_mode system variable setting that is in effect at the time a\nroutine is created, and always executes the routine with this setting in force,\nregardless of the server SQL mode in effect when the routine is invoked.\n\nCharacter Sets and Collations\n\nProcedure parameters can be declared with any character set/collation. If the\ncharacter set and collation are not specifically set, the database defaults at the\ntime of creation will be used. If the database defaults change at a later stage, the\nstored procedure character set/collation will not be changed at the same time; the\nstored procedure needs to be dropped and recreated to ensure the same character\nset/collation as the database is used.\n\nOracle Mode\n\nExamples\n--------\nThe following example shows a simple stored procedure that uses an OUT\nparameter. It uses the DELIMITER command to set a new delimiter for the duration of\nthe process — see Delimiters in the mysql client.\n\nDELIMITER //\n\nCREATE PROCEDURE simpleproc (OUT param1 INT)\n BEGIN\n SELECT COUNT(*) INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n\nCALL simpleproc(@a);\n\nSELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n\nCharacter set and collation:\nDELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n\nCREATE OR REPLACE:\nDELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE OR REPLACE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\nQuery OK, 0 rows affected (0.03 sec)\n','','https://mariadb.com/kb/en/library/create-procedure/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (658,39,'CREATE SEQUENCE','Syntax\n------\nCREATE [OR REPLACE] [TEMPORARY] SEQUENCE [IF NOT EXISTS] sequence_name\n[ INCREMENT [ BY | = ] increment ]\n[ MINVALUE [=] minvalue | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] maxvalue | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] start ] \n[ CACHE [=] cache | NOCACHE ] [ CYCLE | NOCYCLE] \n[table_options]\n\nThe options for CREATE SEQUENCE can be given in any order, optionally followed\nby table_options.\n\ntable_options can be any of the normal table options in CREATE TABLE but the most\nusable ones are ENGINE=... and COMMENT=.\n\nNOMAXVALUE and NOMINVALUE are there to allow one to create SEQUENCEs using the\nOracle syntax.\n\nDescription\n-----------\nCREATE SEQUENCE will create a sequence that generates new\nvalues when called with NEXT VALUE FOR sequence_name. It's an alternative to AUTO\nINCREMENT when one wants to have more control of how the numbers are generated.  As\nthe SEQUENCE caches values (up to CACHE) it can in some cases be much faster than\nAUTO INCREMENT. Another benefit is that one can access the last value generated by\nall used sequences, which solves one of the limitations with LAST_INSERT_ID().\n\nCREATE SEQUENCE requires the CREATE privilege.\n\nDROP SEQUENCE can be used to drop a sequence, and ALTER SEQUENCE to change it.\n\nArguments to Create\n\nThe following options may be used:\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------------------------+---------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------+\n|Option\n\n|Default value\n\n| Description\n\n|\n|INCREMENT\n\n| 1\n\n|Increment to use for values. May be\nnegative. Setting an increment of 0 causes the sequence to use the value of the\nauto_increment_increment system variable at the time of creation, which is always a\npositive number. (see MDEV-16035).|\n|MINVALUE\n\n|1 if INCREMENT > 0\nand -9223372036854775807 if INCREMENT < 0\n\n|Minimum value for the sequence\n\n|\n|MAXVALUE\n\n|9223372036854775806\nif INCREMENT > 0 and -1 if INCREMENT < 0\n\n|Max value for sequence\n\n|\n|START\n\n|MINVALUE if INCREMENT\n> 0 and MAX_VALUE if INCREMENT< 0\n\n|First value that the sequence will generate\n\n|\n|CACHE\n\n|1000\n\n| Number of values that should be cached. 0\nif no CACHE.  The underlying table will be updated first time a new sequence number\nis generated and each time the cache runs out.\n\n|\n+------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n---------------------------------------------------------------+---------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n----------------------------------------+--------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----------------+\nIf CYCLE is used then the sequence should start again from MINVALUE after it has run\nout of values. Default value is NOCYCLE.\n\nConstraints on Create Arguments\n\nTo be able to create a legal sequence, the following must hold:\n\nNote that sequences can't generate the maximum/minimum 64 bit number because of the\nconstraint of\nMINVALUE and MAXVALUE.\n\nAtomic DDL\n\nExamples\n--------\nCREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n\nCREATE SEQUENCE s2 START WITH -100 INCREMENT BY -10;\n\nThe following statement fails, as the increment conflicts with the defaults\nCREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10;\nERROR 4082 (HY000): Sequence 'test.s3' values are conflicting\n\nThe sequence can be created by specifying workable minimum and maximum values:\nCREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10 MINVALUE=-100 MAXVALUE=1000;\n','','https://mariadb.com/kb/en/library/create-sequence/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (659,39,'CREATE SERVER','Syntax\n------\nCREATE [OR REPLACE] SERVER [IF NOT EXISTS] server_name\n  FOREIGN DATA WRAPPER wrapper_name\n  OPTIONS (option [, option] ...)\n\noption:\n { HOST character-literal\n | DATABASE character-literal\n | USER character-literal\n | PASSWORD character-literal\n | SOCKET character-literal\n | OWNER character-literal\n | PORT numeric-literal }\n\nDescription\n-----------\nThis statement creates the definition of a server for use with the Spider, Connect, \nFEDERATED or FederatedX storage\nengine. The CREATE SERVER statement creates a new row within the\nservers table within the mysql database. This statement\nrequires the SUPER privilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.\n\nThe server_name should be a unique reference to the server. Server definitions\nare global within the scope of the server, it is not possible to qualify the\nserver definition to a specific database. server_name has a maximum length of\n64 characters (names longer than 64 characters are silently truncated), and is\ncase insensitive. You may specify the name as a quoted string.\n\nThe wrapper_name may be quoted with single quotes. Supported values are:\n\nFor each option you must specify either a character literal or numeric literal.\n\nCharacter literals are UTF-8, support a maximum length of 64 characters and\ndefault to a blank (empty) string. String literals are silently truncated to 64\ncharacters. Numeric literals must be a number between 0 and 9999, default value\nis 0.\n\nNote: The OWNER option is currently not applied, and has no effect on\nthe ownership or operation of the server connection that is created.\n\nThe CREATE SERVER statement creates an entry in the\nmysql.servers table that can later be used with the\nCREATE TABLE statement when creating a Spider, Connect, FederatedX or\nFEDERATED table. The options that you specify will\nbe used to populate the columns in the mysql.servers table. The table columns\nare Server_name, Host, Db, Username, Password, Port and Socket.\n\nDROP SERVER removes a previously created server definition.\n\nCREATE SERVER is not written to the binary log, irrespective of\nthe binary log format being used. From MariaDB 10.1.13, Galera replicates the CREATE\nSERVER, ALTER SERVER and DROP SERVER statements.\n\nFor valid identifiers to use as server names, see Identifier Names.\n\nOR REPLACE\nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP SERVER IF EXISTS name;\nCREATE SERVER server_name ...;\n\nIF NOT EXISTS\nIf the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the server already exists. Cannot be used together with OR REPLACE.\n\nExamples\n--------\nCREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\n\nOR REPLACE and IF NOT EXISTS:\nCREATE SERVER s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nERROR 1476 (HY000): The foreign server, s, you are trying to create already exists\n\nCREATE OR REPLACE SERVER s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE SERVER IF NOT EXISTS s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+----------------------------------------------------------------+\n| Level | Code | Message                                                        |\n+-------+------+----------------------------------------------------------------+\n| Note  | 1476 | The foreign server, s, you are trying to create already exists |\n+-------+------+----------------------------------------------------------------+\n','','https://mariadb.com/kb/en/library/create-server/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (660,39,'CREATE TABLE','Syntax\n------\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n  (create_definition,...) [table_options    ]... [partition_options]\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n  [(create_definition,...)] [table_options   ]... [partition_options]\n  select_statement\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n { LIKE old_table_name | (LIKE old_table_name) }\nselect_statement:\n  [IGNORE | REPLACE] [AS] SELECT ...   (Some legal select statement)\n\nDescription\n-----------\nUse the CREATE TABLE statement to create a table with the given name.\n\nIn its most basic form, the CREATE TABLE statement provides a table name\nfollowed by a list of columns, indexes, and constraints. By default, the table\nis created in the default database. Specify a database with db_name.tbl_name.\n\nIf you quote the table name, you must quote the database name and table name\nseparately as `db_name`.`tbl_name`. This is particularly useful for CREATE TABLE ...\nSELECT, because it allows to create a table into a database, which contains data from\nother databases. See Identifier Qualifiers.\n\nIf a table with the same name exists, error 1050 results. Use IF NOT EXISTS\nto suppress this error and issue a note instead. Use SHOW WARNINGS\nto see notes.\n\nThe CREATE TABLE statement automatically commits the current transaction,\nexcept when using the TEMPORARY keyword.\n\nFor valid identifiers to use as table names, see Identifier Names.\n\nNote: if the default_storage_engine is set to ColumnStore then it needs setting on\nall UMs. Otherwise when the tables using the default engine are replicated across UMs\nthey will use the wrong engine. You should therefore not use this option as a session\nvariable with ColumnStore.\n\nMicrosecond precision can be between 0-6. If no precision is specified it is assumed\nto be 0, for backward compatibility reasons.\n\nPrivileges\n----------\nExecuting the CREATE TABLE statement requires the CREATE privilege for the table or\nthe database.\n\nCREATE OR REPLACE\n-----------------\nIf the OR REPLACE clause is used and the table already exists, then instead of\nreturning an error, the server will drop the existing table and replace it with the\nnewly defined table.\n\nThis syntax was originally added to make replication more robust if it has to\nrollback and repeat statements such as CREATE ... SELECT on replicas.\n\nCREATE OR REPLACE TABLE table_name (a int);\n\nis basically the same as:\nDROP TABLE IF EXISTS table_name;\nCREATE TABLE table_name (a int);\n\nwith the following exceptions:\n\nThings to be Aware of With CREATE OR REPLACE\n\nCREATE TABLE IF NOT EXISTS\n--------------------------\nIf the IF NOT EXISTS clause is used, then the table will only be created if a table\nwith the same name does not already exist. If the table already exists, then a\nwarning will be triggered by default.\n\nCREATE TEMPORARY TABLE\n----------------------\nUse the TEMPORARY keyword to create a temporary table that is only available to the\ncurrent session. Temporary tables are dropped when the session ends. Temporary table\nnames are specific to the session. They will not conflict with other temporary tables\nfrom other sessions even if they share the same name. They will shadow names of\nnon-temporary tables or views, if they are identical. A temporary table can have the\nsame name as a non-temporary table which is located in the same database. In that\ncase, their name will reference the temporary table when used in SQL statements. You\nmust have the CREATE TEMPORARY TABLES privilege on the database to create temporary\ntables. If no storage engine is specified, the default_tmp_storage_engine setting\nwill determine the engine.\n\nROCKSDB temporary tables cannot be created by setting the default_tmp_storage_engine\nsystem variable, or using CREATE TEMPORARY TABLE LIKE. Before MariaDB 10.7, they\ncould be specified, but would silently fail, and a MyISAM table would be created\ninstead. From MariaDB 10.7 an error is returned. Explicitly creating a temporary\ntable with ENGINE=ROCKSDB has never been permitted.\n\nCREATE TABLE ... LIKE\n---------------------\nUse the LIKE clause instead of a full table definition to create a table with the\nsame definition as another table, including columns, indexes, and table options.\n\nForeign key definitions, as well as any DATA DIRECTORY or INDEX DIRECTORY table\noptions specified on the original table, will not be created.\n\nCREATE TABLE ... SELECT\n-----------------------\nYou can create a table containing data from other tables using the CREATE ... SELECT\nstatement. Columns will be created in the table for each field returned by the\nSELECT query.\n\nYou can also define some columns normally and add other columns from a SELECT. You\ncan also create columns in the normal way and assign them some values using the\nquery, this is done to force a certain type or other field characteristics. The\ncolumns that are not named in the query will be placed before the others.\n\nFor example:\nCREATE TABLE test (a INT NOT NULL, b CHAR(10)) ENGINE=MyISAM\n  SELECT 5 AS b, c, d FROM another_table;\n\nRemember that the query just returns data. If you want to use the same indexes, or\nthe same columns attributes ([NOT] NULL, DEFAULT, AUTO_INCREMENT) in the new table,\nyou need to specify them manually. Types and sizes are not automatically preserved if\nno data returned by the SELECT requires the full size, and VARCHAR could be converted\ninto CHAR. The CAST() function can be used to forcee the new table to use\ncertain types.\n\nAliases (AS) are taken into account, and they should always be used when you SELECT\nan expression (function, arithmetical operation, etc).\n\nIf an error occurs during the query, the table will not be created at all.\n\nIf the new table has a primary key or UNIQUE indexes, you can use the IGNORE or\nREPLACE keywords to handle duplicate key errors during the query. IGNORE means that\nthe newer values must not be inserted an identical value exists in the index. REPLACE\nmeans that older values must be overwritten.\n\nIf the columns in the new table are more than the rows returned by the query, the\ncolumns populated by the query will be placed after other columns. Note that if the\nstrict SQL_MODE is on, and the columns that are not names in the query do not have a\nDEFAULT value, an error will raise and no rows will be copied.\n\nConcurrent inserts are not used during the execution of a CREATE ... SELECT.\n\nIf the table already exists, an error similar to the following will be returned:\nERROR 1050 (42S01): Table 't' already exists\n\nIf the IF NOT EXISTS clause is used and the table exists, a note will be produced\ninstead of an error.\n\nTo insert rows from a query into an existing table, INSERT ... SELECT can be used.\n\nColumn Definitions\n------------------\ncreate_definition:\n { col_name column_definition | index_definition | period_definition | CHECK\n(expr) }\ncolumn_definition:\n data_type\n  [NOT NULL | NULL] [DEFAULT default_value | (expression)]\n  [ON UPDATE [NOW | CURRENT_TIMESTAMP] [(precision)]]\n  [AUTO_INCREMENT] [ZEROFILL] [UNIQUE [KEY] | [PRIMARY] KEY]\n  [INVISIBLE] [{WITH|WITHOUT} SYSTEM VERSIONING]\n  [COMMENT 'string'] [REF_SYSTEM_ID = value]\n  [reference_definition]\n | data_type [GENERATED ALWAYS]\n AS { { ROW {START|END} } | { (expression) [VIRTUAL | PERSISTENT | STORED] } }\n   [UNIQUE [KEY]] [COMMENT 'string']\nconstraint_definition:\n CONSTRAINT [constraint_name] CHECK (expression)\nNote: Until MariaDB 10.4, MariaDB accepts the shortcut format with a REFERENCES\nclause only in ALTER TABLE and CREATE TABLE statements, but that syntax does nothing.\n\nFor example:\nCREATE TABLE b(for_key INT REFERENCES a(not_key));\n\nMariaDB simply parses it without returning any error or warning, for compatibility\nwith other DBMS's. Before MariaDB 10.2.1 this was also true for CHECK constraints.\n\nHowever, only the syntax described below creates foreign keys.\n\nFrom MariaDB 10.5, MariaDB will attempt to apply the constraint. See Foreign\nKeys examples.\n\nEach definition either creates a column in the table or specifies and index or\nconstraint on one or more columns. See Indexes below for details\non creating indexes.\n\nCreate a column by specifying a column name and a data type, optionally\nfollowed by column options. See Data Types for a full list\nof data types allowed in MariaDB.\n\nNULL and NOT NULL\n\nUse the NULL or NOT NULL options to specify that values in the column\nmay or may not be NULL, respectively. By default, values may be NULL. See also NULL\nValues in MariaDB.\n\nDEFAULT Column Option\n\nSpecify a default value using the DEFAULT clause. If you don't specify DEFAULT then\nthe following rules apply:\n\nThe default value will be used if you INSERT a row without specifying a value for\nthat column, or if you specify DEFAULT for that column.\n\nBefore MariaDB 10.2.1 you couldn't usually provide an expression or function to\nevaluate at\ninsertion time. You had to provide a constant default value instead. The one\nexception is that you may use CURRENT_TIMESTAMP as\nthe default value for a TIMESTAMP column to use the current\ntimestamp at insertion time.\n\nCURRENT_TIMESTAMP may also be used as\nthe default value for a DATETIME\nFrom MariaDB 10.2.1 you can use most functions in DEFAULT.  Expressions should have\nparentheses around them. If you use a non deterministic function in DEFAULT then all\ninserts to the table will be replicated in row mode. You can even refer to earlier\ncolumns in the DEFAULT expression (excluding AUTO_INCREMENT columns):\nCREATE TABLE t1 (a int DEFAULT (1+1), b int DEFAULT (a+1));\nCREATE TABLE t2 (a bigint primary key DEFAULT UUID_SHORT());\n\nThe DEFAULT clause cannot contain any stored functions or subqueries, and a column\nused in the clause must already have been defined earlier in the statement.\n\nSince MariaDB 10.2.1, it is possible to assign BLOB or TEXT columns a DEFAULT value.\n\nIn earlier versions, assigning a default to these columns was not possible.\n\nAUTO_INCREMENT Column Option\n\nUse AUTO_INCREMENT to create a column whose value can\ncan be set automatically from a simple counter. You can only use AUTO_INCREMENT\non a column with an integer type. The column must be a key, and there can only be\none AUTO_INCREMENT column in a table. If you insert a row without specifying\na value for that column (or if you specify 0, NULL, or DEFAULT\nas the value), the actual value will be taken from the counter, with each insertion\nincrementing the counter by one. You can still insert a value explicitly. If you\ninsert a value that is greater than the current counter value, the counter is\nset based on the new value. An AUTO_INCREMENT column is implicitly NOT NULL.\n\nUse LAST_INSERT_ID to get the AUTO_INCREMENT value\nmost recently used by an INSERT statement.\n\nZEROFILL Column Option\n\nIf the ZEROFILL column option is specified for a column using a numeric data type,\nthen the column will be set to UNSIGNED and the spaces used by default to pad the\nfield are replaced with zeros. ZEROFILL is ignored in expressions or as part of a\nUNION. ZEROFILL is a non-standard MySQL and MariaDB enhancement.\n\nPRIMARY KEY Column Option\n\nUse PRIMARY KEY to make a column a primary key. A primary key is a special type of a\nunique key. There can be at most one primary key per table, and it is implicitly\nNOT NULL.\n\nSpecifying a column as a unique key creates a unique index on that column. See the\nIndex Definitions section below for more information.\n\nUNIQUE KEY Column Option\n\nUse UNIQUE KEY (or just UNIQUE) to specify that all values in the column\nmust be distinct from each other. Unless the column is NOT NULL, there may be\nmultiple rows with NULL in the column.\n\nSpecifying a column as a unique key creates a unique index on that column. See the\nIndex Definitions section below for more information.\n\nCOMMENT Column Option\n\nYou can provide a comment for each column using the COMMENT clause. The maximum\nlength is 1024 characters. Use\nthe SHOW FULL COLUMNS statement to see column comments.\n\nREF_SYSTEM_ID\n\nREF_SYSTEM_ID can be used to specify Spatial Reference System IDs for spatial data\ntype columns.\n\nGenerated Columns\n\nA generated column is a column in a table that cannot explicitly be set to a specific\nvalue in a DML query. Instead, its value is automatically generated based on an\nexpression. This expression might generate the value based on the values of other\ncolumns in the table, or it might generate the value by calling built-in functions or\nuser-defined functions (UDFs).\n\nThere are two types of generated columns:\n\nGenerated columns are also sometimes called computed columns or virtual columns.\n\nFor a complete description about generated columns and their limitations, see\nGenerated (Virtual and Persistent/Stored) Columns.\n\nCOMPRESSED\n\nINVISIBLE\n\nWITH SYSTEM VERSIONING Column Option\n\nWITHOUT SYSTEM VERSIONING Column Option\n\nIndex Definitions\n-----------------\nindex_definition:\n  {INDEX|KEY} [index_name] [index_type] (index_col_name,...) [index_option] ...\n {{{|}}} {FULLTEXT|SPATIAL} [INDEX|KEY] [index_name] (index_col_name,...)\n[index_option] ...\n {{{|}}} [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,...)\n[index_option] ...\n {{{|}}} [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type]\n(index_col_name,...) [index_option] ...\n {{{|}}} [CONSTRAINT [symbol]] FOREIGN KEY [index_name]\n(index_col_name,...) reference_definition\n\nindex_col_name:\n  col_name [(length)] [ASC | DESC]\n\nindex_type:\n  USING {BTREE | HASH | RTREE}\n\nindex_option:\n  [ KEY_BLOCK_SIZE [=] value\n {{{|}}} index_type\n {{{|}}} WITH PARSER parser_name\n {{{|}}} COMMENT 'string'\n {{{|}}} CLUSTERING={YES| NO} ]\n [ IGNORED | NOT IGNORED ]\n\nreference_definition:\n  REFERENCES tbl_name (index_col_name,...)\n   [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n   [ON DELETE reference_option]\n   [ON UPDATE reference_option]\n\nreference_option:\n  RESTRICT | CASCADE | SET NULL | NO ACTION\n\nINDEX and KEY are synonyms.\n\nIndex names are optional, if not specified an automatic name will be assigned. Index\nname are needed to drop indexes and appear in error messages when a constraint\nis violated.\n\nIndex Categories\n\nPlain Indexes\nPlain indexes are regular indexes that are not unique, and are not acting as a\nprimary key or a foreign key. They are also not the "specialized" FULLTEXT or\nSPATIAL indexes.\n\nSee Getting Started with Indexes: Plain Indexes for more information.\n\nPRIMARY KEY\nFor PRIMARY KEY indexes, you can specify a name for the index, but it is ignored, and\nthe name of the index is always PRIMARY. From MariaDB 10.3.18 and MariaDB 10.4.8, a\nwarning is explicitly issued if a name is specified. Before then, the name was\nsilently ignored.\n\nSee Getting Started with Indexes: Primary Key for more information.\n\nUNIQUE\nThe UNIQUE keyword means that the index will not accept duplicated values, except for\nNULLs. An error will raise if you try to insert duplicate values in a UNIQUE index.\n\nFor UNIQUE indexes, you can specify a name for the constraint, using the CONSTRAINT\nkeyword. That name will be used in error messages.\n\nSee Getting Started with Indexes: Unique Index for more information.\n\nFOREIGN KEY\nFor FOREIGN KEY indexes, a reference definition must be provided.\n\nFor FOREIGN KEY indexes, you can specify a name for the constraint, using the\nCONSTRAINT keyword. That name will be used in error messages.\n\nFirst, you have to specify the name of the target (parent) table and a column or a\ncolumn list which must be indexed and whose values must match to the foreign key's\nvalues. The MATCH clause is accepted to improve the compatibility with other DBMS's,\nbut has no meaning in MariaDB. The ON DELETE and ON UPDATE clauses specify what must\nbe done when a DELETE (or a REPLACE) statements attempts to delete a referenced row\nfrom the parent table, and when an UPDATE statement attempts to modify the referenced\nforeign key columns in a parent table row, respectively. The following options\nare allowed:\n\nIf either clause is omitted, the default behavior for the omitted clause is RESTRICT.\n\nSee Foreign Keys for more information.\n\nFULLTEXT\nUse the FULLTEXT keyword to create full-text indexes.\n\nSee Full-Text Indexes for more information.\n\nSPATIAL\nUse the SPATIAL keyword to create geometric indexes.\n\nSee SPATIAL INDEX for more information.\n\nIndex Options\n\nKEY_BLOCK_SIZE Index Option\nThe KEY_BLOCK_SIZE index option is similar to the KEY_BLOCK_SIZE table option.\n\nWith the InnoDB storage engine, if you specify a non-zero value for the\nKEY_BLOCK_SIZE table option for the whole table, then the table will implicitly be\ncreated with the ROW_FORMAT table option set to COMPRESSED. However, this does not\nhappen if you just set the KEY_BLOCK_SIZE index option for one or more indexes in the\ntable. The InnoDB storage engine ignores the KEY_BLOCK_SIZE index option. However,\nthe SHOW CREATE TABLE statement may still report it for the index.\n\nFor information about the KEY_BLOCK_SIZE index option, see the KEY_BLOCK_SIZE table\noption below.\n\nIndex Types\nEach storage engine supports some or all index types. See Storage Engine Index Types\nfor details on permitted index types for each storage engine.\n\nDifferent index types are optimized for different kind of operations:\n\nIndex columns names are listed between parenthesis. After each column, a prefix\nlength can be specified. If no length is specified, the whole column will be indexed.\n\nASC and DESC can be specified for compatibility with are DBMS's, but have no meaning\nin MariaDB.\n\nWITH PARSER Index Option\nThe WITH PARSER index option only applies to FULLTEXT indexes and contains the\nfulltext parser name. The fulltext parser must be an installed plugin.\n\nCOMMENT Index Option\nA comment of up to 1024 characters is permitted with the COMMENT index option.\n\nThe COMMENT index option allows you to specify a comment with user-readable text\ndescribing what the index is for. This information is not used by the server itself.\n\nCLUSTERING Index Option\nThe CLUSTERING index option is only valid for tables using the TokuDB storage engine.\n\nIGNORED / NOT IGNORED\n\nPeriods\n-------\n\nConstraint Expressions\n----------------------\nNote: Before MariaDB 10.2.1, constraint expressions were accepted in the syntax\nbut ignored.\n\nMariaDB 10.2.1 introduced two ways to define a constraint:\n\nBefore a row is inserted or updated, all constraints are evaluated in the order they\nare defined. If any constraints fails, then the row will not be updated.\n\nOne can use most deterministic functions in a constraint, including UDFs.\n\ncreate table t1 (a int check(a>0) ,b int check (b> 0), constraint abc check (a>b));\n\nIf you use the second format and you don't give a name to the constraint, then the\nconstraint will get a auto generated name. This is done so that you can later delete\nthe constraint with ALTER TABLE DROP constraint_name.\n\nOne can disable all constraint expression checks by setting the variable\ncheck_constraint_checks to OFF. This is useful for example when loading a table that\nviolates some constraints that you want to later find and fix in SQL.\n\nSee CONSTRAINT for more information.\n\nTable Options\n-------------\nFor each individual table you create (or alter), you can set some table options. The\ngeneral syntax for setting options is:\n <OPTION_NAME> = <option_value>, [<OPTION_NAME> = <option_value> ...]\nThe equal sign is optional.\n\nSome options are supported by the server and can be used for all tables, no matter\nwhat storage engine they use; other options can be specified for all storage engines,\nbut have a meaning only for some engines. Also, engines can extend CREATE TABLE with\nnew options.\n\nIf the IGNORE_BAD_TABLE_OPTIONS SQL_MODE is enabled, wrong table options generate a\nwarning; otherwise, they generate an error.\n\ntable_option:    \n  [STORAGE] ENGINE [=] engine_name\n | AUTO_INCREMENT [=] value\n | AVG_ROW_LENGTH [=] value\n | [DEFAULT] CHARACTER SET [=] charset_name\n | CHECKSUM [=] {0 | 1}\n | [DEFAULT] COLLATE [=] collation_name\n | COMMENT [=] 'string'\n | CONNECTION [=] 'connect_string'\n | DATA DIRECTORY [=] 'absolute path to directory'\n | DELAY_KEY_WRITE [=] {0 | 1}\n | ENCRYPTED [=] {YES | NO}\n | ENCRYPTION_KEY_ID [=] value\n | IETF_QUOTES [=] {YES | NO}\n | INDEX DIRECTORY [=] 'absolute path to directory'\n | INSERT_METHOD [=] { NO | FIRST | LAST }\n | KEY_BLOCK_SIZE [=] value\n | MAX_ROWS [=] value\n | MIN_ROWS [=] value\n | PACK_KEYS [=] {0 | 1 | DEFAULT}\n | PAGE_CHECKSUM [=] {0 | 1}\n | PAGE_COMPRESSED [=] {0 | 1}\n | PAGE_COMPRESSION_LEVEL [=] {0 .. 9}\n | PASSWORD [=] 'string'\n | ROW_FORMAT [=] {DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT|PAGE}\n | SEQUENCE [=] {0|1}\n | STATS_AUTO_RECALC [=] {DEFAULT|0|1}\n | STATS_PERSISTENT [=] {DEFAULT|0|1}\n | STATS_SAMPLE_PAGES [=] {DEFAULT|value}\n | TABLESPACE tablespace_name\n | TRANSACTIONAL [=]  {0 | 1}\n | UNION [=] (tbl_name[,tbl_name]...)\n | WITH SYSTEM VERSIONING\n\n[STORAGE] ENGINE\n\n[STORAGE] ENGINE specifies a storage engine for the table. If this option is not\nused, the default storage engine is used instead. That is, the default_storage_engine\nsession option value if it is set, or the value specified for the\n--default-storage-engine mysqld startup option, or the default storage engine,\nInnoDB. If the specified storage engine is not installed and active, the default\nvalue will be used, unless the NO_ENGINE_SUBSTITUTION SQL MODE is set (default). This\nis only true for CREATE TABLE, not for ALTER TABLE. For a list of storage engines\nthat are present in your server, issue a SHOW ENGINES.\n\nAUTO_INCREMENT\n\nAUTO_INCREMENT specifies the initial value for the AUTO_INCREMENT primary key. This\nworks for MyISAM, Aria, InnoDB, MEMORY, and ARCHIVE tables. You can change this\noption with ALTER TABLE, but in that case the new value must be higher than the\nhighest value which is present in the AUTO_INCREMENT column. If the storage engine\ndoes not support this option, you can insert (and then delete) a row having the\nwanted value - 1 in the AUTO_INCREMENT column.\n\nAVG_ROW_LENGTH\n\nAVG_ROW_LENGTH is the average rows size. It only applies to tables using MyISAM and\nAria storage engines that have the ROW_FORMAT table option set to FIXED format.\n\nMyISAM uses MAX_ROWS and AVG_ROW_LENGTH to decide the maximum size of a table\n(default: 256TB, or the maximum file size allowed by the system).\n\n[DEFAULT] CHARACTER SET/CHARSET\n\n[DEFAULT] CHARACTER SET (or [DEFAULT] CHARSET) is used to set a default character set\nfor the table. This is the character set used for all columns where an explicit\ncharacter set is not specified. If this option is omitted or DEFAULT is specified,\ndatabase's default character set will be used. See Setting Character Sets and\nCollations for details on setting the character sets.\n\nCHECKSUM/TABLE_CHECKSUM\n\nCHECKSUM (or TABLE_CHECKSUM) can be set to 1 to maintain a live checksum for all\ntable's rows. This makes write operations slower, but CHECKSUM TABLE will be very\nfast. This option is only supported for MyISAM and Aria tables.\n\n[DEFAULT] COLLATE\n\n[DEFAULT] COLLATE is used to set a default collation for the table. This is the\ncollation used for all columns where an explicit character set is not specified. If\nthis option is omitted or DEFAULT is specified, database's default option will be\nused. See Setting Character Sets and Collations for details on setting the collations\n\nCOMMENT\n\nCOMMENT is a comment for the table. The maximum length is 2048 characters. Also used\nto define table parameters when creating a Spider table.\n\nCONNECTION\n\nCONNECTION is used to specify a server name or a connection string for a Spider,\nCONNECT, Federated or FederatedX table.\n\nDATA DIRECTORY/INDEX DIRECTORY\n\nDATA DIRECTORY and INDEX DIRECTORY are supported for MyISAM and Aria, and DATA\nDIRECTORY is also supported by InnoDB if the innodb_file_per_table server system\nvariable is enabled, but only in CREATE TABLE, not in ALTER TABLE. So, carefully\nchoose a path for InnoDB tables at creation time, because it cannot be changed\nwithout dropping and re-creating the table. These options specify the paths for data\nfiles and index files, respectively. If these options are omitted, the database's\ndirectory will be used to store data files and index files. Note that these table\noptions do not work for partitioned tables (use the partition options instead), or if\nthe server has been invoked with the --skip-symbolic-links startup option. To avoid\nthe overwriting of old files with the same name that could be present in the\ndirectories, you can use the --keep_files_on_create option (an error will be issued\nif files already exist). These options are ignored if the NO_DIR_IN_CREATE SQL_MODE\nis enabled (useful for replication slaves). Also note that symbolic links cannot be\nused for InnoDB tables.\n\nDATA DIRECTORY works by creating symlinks from where the table would normally have\nbeen (inside the datadir) to where the option specifies. For security reasons, to\navoid bypassing the privilege system, the server does not permit symlinks inside the\ndatadir. Therefore, DATA DIRECTORY cannot be used to specify a location inside the\ndatadir. An attempt to do so will result in an error 1210 (HY000) Incorrect arguments\nto DATA DIRECTORY.\n\nDELAY_KEY_WRITE\n\nDELAY_KEY_WRITE is supported by MyISAM and Aria, and can be set to 1 to speed up\nwrite operations. In that case, when data are modified, the indexes are not updated\nuntil the table is closed. Writing the changes to the index file altogether can be\nmuch faster. However, note that this option is applied only if the delay_key_write\nserver variable is set to 'ON'. If it is 'OFF' the delayed index writes are always\ndisabled, and if it is 'ALL' the delayed index writes are always used, disregarding\nthe value of DELAY_KEY_WRITE.\n\nENCRYPTED\n\nThe ENCRYPTED table option can be used to manually set the encryption status of an\nInnoDB table. See InnoDB Encryption for more information.\n\nAria does not support the ENCRYPTED table option. See MDEV-18049.\n\nSee Data-at-Rest Encryption for more information.\n\nENCRYPTION_KEY_ID\n\nThe ENCRYPTION_KEY_ID table option can be used to manually set the encryption key of\nan InnoDB table. See InnoDB Encryption for more information.\n\nAria does not support the ENCRYPTION_KEY_ID table option. See MDEV-18049.\n\nSee Data-at-Rest Encryption for more information.\n\nIETF_QUOTES\n\nFor the CSV storage engine, the IETF_QUOTES option, when set to YES, enables\nIETF-compatible parsing of embedded quote and comma characters. Enabling this option\nfor a table improves compatibility with other tools that use CSV, but is not\ncompatible with MySQL CSV tables, or MariaDB CSV tables created without this option.\n\nDisabled by default.\n\nINSERT_METHOD\n\nINSERT_METHOD is only used with MERGE tables. This option determines in which\nunderlying table the new rows should be inserted. If you set it to 'NO' (which is the\ndefault) no new rows can be added to the table (but you will still be able to perform\nINSERTs directly against the underlying tables). FIRST means that the rows are\ninserted into the first table, and LAST means that thet are inserted into the\nlast table.\n\nKEY_BLOCK_SIZE\n\nKEY_BLOCK_SIZE is used to determine the size of key blocks, in bytes or kilobytes.\n\nHowever, this value is just a hint, and the storage engine could modify or ignore it.\n\nIf KEY_BLOCK_SIZE is set to 0, the storage engine's default value will be used.\n\nWith the InnoDB storage engine, if you specify a non-zero value for the\nKEY_BLOCK_SIZE table option for the whole table, then the table will implicitly be\ncreated with the ROW_FORMAT table option set to COMPRESSED.\n\nMIN_ROWS/MAX_ROWS\n\nMIN_ROWS and MAX_ROWS let the storage engine know how many rows you are planning to\nstore as a minimum and as a maximum. These values will not be used as real limits,\nbut they help the storage engine to optimize the table. MIN_ROWS is only used by\nMEMORY storage engine to decide the minimum memory that is always allocated. MAX_ROWS\nis used to decide the minimum size for indexes.\n\nPACK_KEYS\n\nPACK_KEYS can be used to determine whether the indexes will be compressed. Set it to\n1 to compress all keys. With a value of 0, compression will not be used. With the\nDEFAULT value, only long strings will be compressed. Uncompressed keys are faster.\n\nPAGE_CHECKSUM\n\nPAGE_CHECKSUM is only applicable to Aria tables, and determines whether indexes and\ndata should use page checksums for extra safety.\n\nPAGE_COMPRESSED\n\nPAGE_COMPRESSED is used to enable InnoDB page compression for InnoDB tables.\n\nPAGE_COMPRESSION_LEVEL\n\nPAGE_COMPRESSION_LEVEL is used to set the compression level for InnoDB page\ncompression for InnoDB tables. The table must also have the PAGE_COMPRESSED table\noption set to 1.\n\nValid values for PAGE_COMPRESSION_LEVEL are 1 (the best speed) through 9 (the best\ncompression), .\n\nPASSWORD\n\nPASSWORD is unused.\n\nRAID_TYPE\n\nRAID_TYPE is an obsolete option, as the raid support has been disabled since\nMySQL 5.0.\n\nROW_FORMAT\n\nThe ROW_FORMAT table option specifies the row format for the data file. Possible\nvalues are engine-dependent.\n\nSupported MyISAM Row Formats\nFor MyISAM, the supported row formats are:\n\nThe COMPRESSED row format can only be set by the myisampack command line tool.\n\nSee MyISAM Storage Formats for more information.\n\nSupported Aria Row Formats\nFor Aria, the supported row formats are:\n\nSee Aria Storage Formats for more information.\n\nSupported InnoDB Row Formats\nFor InnoDB, the supported row formats are:\n\nIf the ROW_FORMAT table option is set to FIXED for an InnoDB table, then the server\nwill either return an error or a warning depending on the value of the\ninnodb_strict_mode system variable. If the innodb_strict_mode system variable is set\nto OFF, then a warning is issued, and MariaDB will create the table using the default\nrow format for the specific MariaDB server version. If the innodb_strict_mode system\nvariable is set to ON, then an error will be raised.\n\nSee InnoDB Storage Formats for more information.\n\nOther Storage Engines and ROW_FORMAT\nOther storage engines do not support the ROW_FORMAT table option.\n\nSEQUENCE\n\nSTATS_AUTO_RECALC\n\nSTATS_AUTO_RECALC indicates whether to automatically recalculate persistent\nstatistics (see STATS_PERSISTENT, below) for an InnoDB table.\n\nIf set to 1, statistics will be recalculated when more than 10% of the data has\nchanged. When set to 0, stats will be recalculated only when an ANALYZE TABLE is run.\n\nIf set to DEFAULT, or left out, the value set by the innodb_stats_auto_recalc system\nvariable applies. See InnoDB Persistent Statistics.\n\nSTATS_PERSISTENT\n\nSTATS_PERSISTENT indicates whether the InnoDB statistics created by ANALYZE TABLE\nwill remain on disk or not. It can be set to 1 (on disk), 0 (not on disk, the\npre-MariaDB 10 behavior), or DEFAULT (the same as leaving out the option), in which\ncase the value set by the innodb_stats_persistent system variable will apply.\n\nPersistent statistics stored on disk allow the statistics to survive server restarts,\nand provide better query plan stability. See InnoDB Persistent Statistics.\n\nSTATS_SAMPLE_PAGES\n\nSTATS_SAMPLE_PAGES indicates how many pages are used to sample index statistics. If 0\nor DEFAULT, the default value, the innodb_stats_sample_pages value is used. See\nInnoDB Persistent Statistics.\n\nTRANSACTIONAL\n\nTRANSACTIONAL is only applicable for Aria tables. In future Aria tables created with\nthis option will be fully transactional, but currently this provides a form of crash\nprotection. See Aria Storage Engine for more details.\n\nUNION\n\nUNION must be specified when you create a MERGE table. This option contains a\ncomma-separated list of MyISAM tables which are accessed by the new table. The list\nis enclosed between parenthesis. Example: UNION = (t1,t2)\n\nWITH SYSTEM VERSIONING\n\nWITH SYSTEM VERSIONING is used for creating System-versioned tables.\n\nPartitions\n----------\npartition_options:\n  PARTITION BY\n    { [LINEAR] HASH(expr)\n    | [LINEAR] KEY(column_list)\n    | RANGE(expr)\n    | LIST(expr)\n    | SYSTEM_TIME [INTERVAL time_quantity time_unit] [LIMIT num] }\n  [PARTITIONS num]\n  [SUBPARTITION BY\n    { [LINEAR] HASH(expr)\n    | [LINEAR] KEY(column_list) }\n   [SUBPARTITIONS num]\n  ]\n  [(partition_definition [, partition_definition] ...)]\npartition_definition:\n  PARTITION partition_name\n    [VALUES {LESS THAN {(expr) | MAXVALUE} | IN (value_list)}]\n    [[STORAGE] ENGINE [=] engine_name]\n    [COMMENT [=] 'comment_text' ]\n    [DATA DIRECTORY [=] 'data_dir']\n    [INDEX DIRECTORY [=] 'index_dir']\n    [MAX_ROWS [=] max_number_of_rows]\n    [MIN_ROWS [=] min_number_of_rows]\n    [TABLESPACE [=] tablespace_name]\n    [NODEGROUP [=] node_group_id]\n    [(subpartition_definition [, subpartition_definition] ...)]\nsubpartition_definition:\n  SUBPARTITION logical_name\n    [[STORAGE] ENGINE [=] engine_name]\n    [COMMENT [=] 'comment_text' ]\n    [DATA DIRECTORY [=] 'data_dir']\n    [INDEX DIRECTORY [=] 'index_dir']\n    [MAX_ROWS [=] max_number_of_rows]\n    [MIN_ROWS [=] min_number_of_rows]\n    [TABLESPACE [=] tablespace_name]\n    [NODEGROUP [=] node_group_id]\nIf the PARTITION BY clause is used, the table will be partitioned. A partition method\nmust be explicitly indicated for partitions and subpartitions. Partition methods are:\n\nCREATE TABLE t1 (a INT, b CHAR(5), c DATETIME)\n  PARTITION BY HASH ( YEAR(c) );\n\n[LINEAR] HASH can be used for subpartitions, too.\n\nOnly HASH and KEY can be used for subpartitions, and they can be [LINEAR].\n\nIt is possible to define up to 1024 partitions and subpartitions.\n\nThe number of defined partitions can be optionally specified as PARTITION count. This\ncan be done to avoid specifying all partitions individually. But you can also declare\neach individual partition and, additionally, specify a PARTITIONS count clause; in\nthe case, the number of PARTITIONs must equal count.\n\nAlso see Partitioning Types Overview.\n\nSequences\n---------\n\nAtomic DDL\n----------\n\nExamples\n--------\ncreate table if not exists test (\na bigint auto_increment primary key,\nname varchar(128) charset utf8,\nkey name (name(32))\n) engine=InnoDB default charset latin1;\n\nThis example shows a couple of things:\n\nThe following clauses will work from MariaDB 10.2.1 only.\n\nCREATE TABLE t1(\n a int DEFAULT (1+1),\n b int DEFAULT (a+1),\n expires DATETIME DEFAULT(NOW() + INTERVAL 1 YEAR),\n x BLOB DEFAULT USER()\n);\n','','https://mariadb.com/kb/en/library/create-table/');
update help_topic set description = CONCAT(description, 'nd normally is the best choice.\nIt is supported by all storage engines. It can be used to\ncompare a column\'s value with a value using the =, >, >=,\n0) ,b int check (b> 0), constraint abc check (a>b));\n \nIf you use the second format and you don\'t give a name to\nthe constraint, then the constraint will get a auto\ngenerated name. This is done so that you can later delete\nthe constraint with ALTER TABLE DROP constraint_name.\n \nOne can disable all constraint expression checks by setting\nthe variable check_constraint_checks to OFF. This is useful\nfor example when loading a table that violates some\nconstraints that you want to later find and fix in SQL.\n \nSee CONSTRAINT for more information.\n \nTable Options\n \nFor each individual table you create (or alter), you can set\nsome table options. The general syntax for setting options\nis:\n \n  = , [ =  ...]\n \nThe equal sign is optional.\n \nSome options are supported by the server and can be used for\nall tables, no matter what storage engine they use; other\noptions can be specified for all storage engines, but have a\nmeaning only for some engines. Also, engines can extend\nCREATE TABLE with new options.\n \nIf the IGNORE_BAD_TABLE_OPTIONS SQL_MODE is enabled, wrong\ntable options generate a warning; otherwise, they generate\nan error.\n \ntable_option: \n [STORAGE] ENGINE [=] engine_name\n | AUTO_INCREMENT [=] value\n | AVG_ROW_LENGTH [=] value\n | [DEFAULT] CHARACTER SET [=] charset_name\n | CHECKSUM [=] {0 | 1}\n | [DEFAULT] COLLATE [=] collation_name\n | COMMENT [=] \'string\'\n | CONNECTION [=] \'connect_string\'\n | DATA DIRECTORY [=] \'absolute path to directory\'\n | DELAY_KEY_WRITE [=] {0 | 1}\n | ENCRYPTED [=] {YES | NO}\n | ENCRYPTION_KEY_ID [=] value\n | IETF_QUOTES [=] {YES | NO}\n | INDEX DIRECTORY [=] \'absolute path to directory\'\n | INSERT_METHOD [=] { NO | FIRST | LAST }\n | KEY_BLOCK_SIZE [=] value\n | MAX_ROWS [=] value\n | MIN_ROWS [=] value\n | PACK_KEYS [=] {0 | 1 | DEFAULT}\n | PAGE_CHECKSUM [=] {0 | 1}\n | PAGE_COMPRESSED [=] {0 | 1}\n | PAGE_COMPRESSION_LEVEL [=] {0 .. 9}\n | PASSWORD [=] \'string\'\n | ROW_FORMAT [=]\n{DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT|PAGE}\n | SEQUENCE [=] {0|1}\n | STATS_AUTO_RECALC [=] {DEFAULT|0|1}\n | STATS_PERSISTENT [=] {DEFAULT|0|1}\n | STATS_SAMPLE_PAGES [=] {DEFAULT|value}\n | TABLESPACE tablespace_name\n | TRANSACTIONAL [=] {0 | 1}\n | UNION [=] (tbl_name[,tbl_name]...)\n | WITH SYSTEM VERSIONING\n \n[STORAGE] ENGINE\n \n[STORAGE] ENGINE specifies a storage engine for the table.\nIf this option is not used, the default storage engine is\nused instead. That is, the default_storage_engine session option\nvalue if it is set, or the value specified for the\n--default-storage-engine mysqld startup options, or InnoDB.\nIf the specified storage engine is not installed and active,\nthe default value will be used, unless the\nNO_ENGINE_SUBSTITUTION SQL MODE is set (default since\nMariaDB 10.0). This is only true for CREATE TABLE, not for\nALTER TABLE. For a list of storage engines that are present\nin your server, issue a SHOW ENGINES.\n \nAUTO_INCREMENT\n \nAUTO_INCREMENT specifies the initial value for the\nAUTO_INCREMENT primary key. This works for MyISAM, Aria,\nInnoDB/XtraDB, MEMORY, and ARCHIVE tables. You can change\nthis option with ALTER TABLE, but in that case the new value\nmust be higher than the highest value which is present in\nthe AUTO_INCREMENT column. If the storage engine does not\nsupport this option, you can insert (and then delete) a row\nhaving the wanted value - 1 in the AUTO_INCREMENT column.\n \nAVG_ROW_LENGTH\n \nAVG_ROW_LENGTH is the average rows size. It only applies to\ntables using MyISAM and Aria storage engines that have the\nROW_FORMAT table option set to FIXED format.\n \nMyISAM uses MAX_ROWS and AVG_ROW_LENGTH to decide the\nmaximum size of a table (default: 256TB, or the maximum file\nsize allowed by the system).\n \n[DEFAULT] CHARACTER SET/CHARSET\n \n[DEFAULT] CHARACTER SET (or [DEFAULT] CHARSET) is used to\nset a default character set for the table. This is the\ncharacter set used for all columns where an explicit\ncharacter set is not specified. If this option is omitted or\nDEFAULT is specified, database\'s default character set will\nbe used. See Setting Character Sets and Collations for\ndetails on setting the character sets.\n \nCHECKSUM/TABLE_CHECKSUM\n \nCHECKSUM (or TABLE_CHECKSUM) can be set to 1 to maintain a\nlive checksum for all table\'s rows. This makes write\noperations slower, but CHECKSUM TABLE will be very fast.\nThis option is only supported for MyISAM and Aria tables.\n \n[DEFAULT] COLLATE\n \n[DEFAULT] COLLATE is used to set a default collation for the\ntable. This is the collation used for all columns where an\nexplicit character set is not specified. If this option is\nomitted or DEFAULT is specified, database\'s default option\nwill be used. See Setting Character Sets and Collations for\ndetails on setting the collations\n \nCOMMENT\n \nCOMMENT is a comment for the table. Maximum length is 2048\ncharacters (before mariaDB 5.5 it was 60 characters). Also\nused to define table parameters when creating a Spider\ntable.\n \nCONNECTION\n \nCONNECTION is used to specify a server name or a connection\nstring for a Spider, CONNECT, Federated or FederatedX table.\n \nDATA DIRECTORY/INDEX DIRECTORY\n \nDATA DIRECTORY and INDEX DIRECTORY were only supported for\nMyISAM and Aria, before MariaDB 5.5. Since 5.5, DATA\nDIRECTORY has also been supported by InnoDB if the\ninnodb_file_per_table server system variable is enabled, but\nonly in CREATE TABLE, not in ALTER TABLE. So, carefully\nchoose a path for InnoDB tables at creation time, because it\ncannot be changed without dropping and re-creating the\ntable. These options specify the paths for data files and\nindex files, respectively. If these options are omitted, the\ndatabase\'s directory will be used to store data files and\nindex files. Note that these table options do not work for\npartitioned tables (use the partition options instead), or\nif the server has been invoked with the\n--skip-symbolic-links startup option. To avoid the\noverwriting of old files with the same name that could be\npresent in the directories, you can use the\n--keep_files_on_create option (an error will be issued if\nfiles already exist). These options are ignored if the\nNO_DIR_IN_CREATE SQL_MODE is enabled (useful for replication\nslaves). Also note that symbolic links cannot be used for\nInnoDB tables.\n \nDATA DIRECTORY works by creating symlinks from where the\ntable would normally have been (inside the datadir) to where\nthe option specifies. For security reasons, to avoid\nbypassing the privilege system, the server does not permit\nsymlinks inside the datadir. Therefore, DATA DIRECTORY\ncannot be used to specify a location inside the datadir. An\nattempt to do so will result in an error 1210 (HY000)\nIncorrect arguments to DATA DIRECTORY.\n \nDELAY_KEY_WRITE\n \nDELAY_KEY_WRITE is supported by MyISAM and Aria, and can be\nset to 1 to speed up write operations. In that case, when\ndata are modified, the indexes are not updated until the\ntable is closed. Writing the changes to the index file\naltogether can be much faster. However, note that this\noption is applied only if the delay_key_write server\nvariable is set to \'ON\'. If it is \'OFF\' the delayed\nindex writes are always disabled, and if it is \'ALL\' the\ndelayed index writes are always used, disregarding the value\nof DELAY_KEY_WRITE.\n \nENCRYPTED\n \nThe ENCRYPTED table option was added in MariaDB 10.1.4\n \nThe ENCRYPTED table option can be used to manually set the\nencryption status of an InnoDB table. See InnoDB / XtraDB\nEncryption for more information.\n \nAria does not currently support the ENCRYPTED table option.\nSee MDEV-18049 about that.\n \nSee Data-at-Rest Encryption for more information.\n \nENCRYPTION_KEY_ID\n \nThe ENCRYPTION_KEY_ID table option was added in MariaDB\n10.1.4\n \nThe ENCRYPTION_KEY_ID table option can be used to manually\nset the encryption key of an InnoDB table. See InnoDB /\nXtraDB Encryption for more information.\n \nAria does not currently support the ENCRYPTION_KEY_ID table\noption. See MDEV-18049 about that.\n \nSee Data-at-Rest Encryption for more information.\n \nIETF_QUOTES\n \nThe IETF_QUOTES option was added in MariaDB 10.1.8\n \nFor the CSV storage engine, the IETF_QUOTES option, when set\nto YES, enables IETF-compatible parsing of embedded quote\nand comma characters. Enabling this option for a table\nimproves compatibility with other tools that use CSV, but is\nnot compatible with MySQL CSV tables, or MariaDB CSV tables\ncreated without this option. Disabled by default.\n \nINSERT_METHOD\n \nINSERT_METHOD is only used with MERGE tables. This option\ndetermines in which underlying table the new rows should be\ninserted. If you set it to \'NO\' (which is the default) no\nnew rows can be added to the table (but you will still be\nable to perform INSERTs directly against the underlying\ntables). FIRST means that the rows are inserted into the\nfirst table, and LAST means that thet are inserted into the\nlast table.\n \nKEY_BLOCK_SIZE\n \nKEY_BLOCK_SIZE is used to determine the size of key blocks,\nin bytes or kilobytes. However, this value is just a hint,\nand the storage engine could modify or ignore it. If\nKEY_BLOCK_SIZE is set to 0, the storage engine\'s default\nvalue will be used.\n \nWith the InnoDB storage engine, if you specify a non-zero\nvalue for the KEY_BLOCK_SIZE table option for the whole\ntable, then the table will implicitly be created with the\nROW_FORMAT table option set to COMPRESSED.\n \nMIN_ROWS/MAX_ROWS\n \nMIN_ROWS and MAX_ROWS let the storage engine know how many\nrows you are planning to store as a minimum and as a\nmaximum. These values will not be used as real limits, but\nthey help the storage engine to optimize the table. MIN_ROWS\nis only used by MEMORY storage engine to decide the minimum\nmemory that is always allocated. MAX_ROWS is used to decide\nthe minimum size for indexes.\n \nPACK_KEYS\n \nPACK_KEYS can be used to determine whether the indexes will\nbe compressed. Set it to 1 to compress all keys. With a\nvalue of 0, compression will not be used. With the DEFAULT\nvalue, only long strings will be compressed. Uncompressed\nkeys are faster.\n \nPAGE_CHECKSUM\n \nPAGE_CHECKSUM is only applicable to Aria tables, and\ndetermines whether indexes and data should use page\nchecksums for extra safety. \n \nPAGE_COMPRESSED\n \nPAGE_COMPRESSED is used to enable InnoDB page compression\nfor InnoDB tables.\n \nPAGE_COMPRESSION_LEVEL\n \nPAGE_COMPRESSION_LEVEL is used to set the compression level\nfor InnoDB page compression for InnoDB tables. The table\nmust also have the PAGE_COMPRESSED table option set to 1.\n \nValid values for PAGE_COMPRESSION_LEVEL are 1 (the best\nspeed) through 9 (the best compression), .\n \nPASSWORD\n \nPASSWORD is unused.\n \nRAID_TYPE\n \nRAID_TYPE is an obsolete option, as the raid support has\nbeen disabled since MySQL 5.0.\n \nROW_FORMAT\n \nThe ROW_FORMAT table option specifies the row format for the\ndata file. Possible values are engine-dependent.\n \nSupported MyISAM Row Formats\n \nFor MyISAM, the supported row formats are: \nFIXED\nDYNAMIC\nCOMPRESSED\n \nThe COMPRESSED row format can only be set by the myisampack\ncommand line tool.\n \nSee MyISAM Storage Formats for more information.\n \nSupported Aria Row Formats\n \nFor Aria, the supported row formats are:\nPAGE\nFIXED\nDYNAMIC.\n \nSee Aria Storage Formats for more information.\n \nSupported InnoDB Row Formats\n \nFor InnoDB/XtraDB, the supported row formats are:\nCOMPACT\nREDUNDANT\nCOMPRESSED\nDYNAMIC.\n \nIf the ROW_FORMAT table option is set to FIXED for an InnoDB\ntable, then the server will either return an error or a\nwarning depending on the value of the innodb_strict_mode\nsystem variable. If the innodb_strict_mode system variable\nis set to OFF, then a warning is issued, and MariaDB will\ncreate the table using the default row format for the\nspecific MariaDB server version. If the innodb_strict_mode\nsystem variable is set to ON, then an error will be raised.\n \nSee XtraDB/InnoDB Storage Formats for more information.\n \nOther Storage Engines and ROW_FORMAT\n \nOther storage engines do not support the ROW_FORMAT table\noption.\n \nSEQUENCE\n \nIf the table is a sequence, then it will have the SEQUENCE\nset to 1.\n \nSTATS_AUTO_RECALC\n \nSTATS_AUTO_RECALC is available only in MariaDB 10.0+. It\nindicates whether to automatically recalculate persistent\nstatistics (see STATS_PERSISTENT, below) for an InnoDB\ntable.\nIf set to 1, statistics will be recalculated when more than\n10% of the data has changed. When set to 0, stats will be\nrecalculated only when an ANALYZE TABLE is run. If set to\nDEFAULT, or left out, the value set by the\ninnodb_stats_auto_recalc system variable applies. See InnoDB\nPersistent Statistics.\n \nSTATS_PERSISTENT\n \nSTATS_PERSISTENT is available only in MariaDB 10.0+. It\nindicates whether the InnoDB statistics created by ANALYZE\nTABLE will remain on disk or not. It can be set to 1 (on\ndisk), 0 (not on disk, the pre-MariaDB 10 behavior), or\nDEFAULT (the same as leaving out the option), in which case\nthe value set by the innodb_stats_persistent system variable\nwill apply. Persistent statistics stored on disk allow the\nstatistics to survive server restarts, and provide better\nquery plan stability. See InnoDB Persistent Statistics.\n \nSTATS_SAMPLE_PAGES\n \nSTATS_SAMPLE_PAGES is available only in MariaDB 10.0+. It\nindicates how many pages are used to sample index\nstatistics. If 0 or DEFAULT, the default value, the\ninnodb_stats_sample_pages value is used. See InnoDB\nPersistent Statistics.\n \nTRANSACTIONAL\n \nTRANSACTIONAL is only applicable for Aria tables. In future\nAria tables created with this option will be fully\ntransactional, but currently this provides a form of crash\nprotection. See Aria Storage Engine for more details.\n \nUNION\n \nUNION must be specified when you create a MERGE table. This\noption contains a comma-separated list of MyISAM tables\nwhich are accessed by the new table. The list is enclosed\nbetween parenthesis. Example: UNION = (t1,t2)\n \nWITH SYSTEM VERSIONING\n \nWITH SYSTEM VERSIONING is used for creating System-versioned\ntables.\n \nPartitions\n \npartition_options:\n PARTITION BY\n { [LINEAR] HASH(expr)\n | [LINEAR] KEY(column_list)\n | RANGE(expr)\n | LIST(expr)\n | SYSTEM_TIME [INTERVAL time_quantity time_unit] [LIMIT\nnum] }\n [PARTITIONS num]\n [SUBPARTITION BY\n { [LINEAR] HASH(expr)\n | [LINEAR] KEY(column_list) }\n [SUBPARTITIONS num]\n ]\n [(partition_definition [, partition_definition] ...)]\n \npartition_definition:\n PARTITION partition_name\n [VALUES {LESS THAN {(expr) | MAXVALUE} | IN (value_list)}]\n [[STORAGE] ENGINE [=] engine_name]\n [COMMENT [=] \'comment_text\' ]\n [DATA DIRECTORY [=] \'data_dir\']\n [INDEX DIRECTORY [=] \'index_dir\']\n [MAX_ROWS [=] max_number_of_rows]\n [MIN_ROWS [=] min_number_of_rows]\n [TABLESPACE [=] tablespace_name]\n [NODEGROUP [=] node_group_id]\n [(subpartition_definition [, subpartition_definition] ...)]\n \nsubpartition_definition:\n SUBPARTITION logical_name\n [[STORAGE] ENGINE [=] engine_name]\n [COMMENT [=] \'comment_text\' ]\n [DATA DIRECTORY [=] \'data_dir\']\n [INDEX DIRECTORY [=] \'index_dir\']\n [MAX_ROWS [=] max_number_of_rows]\n [MIN_ROWS [=] min_number_of_rows]\n [TABLESPACE [=] tablespace_name]\n [NODEGROUP [=] node_group_id]\nIf the PARTITION BY clause is used, the table will be\npartitioned. A partition method must be explicitly indicated\nfor partitions and subpartitions. Partition methods are:\n[LINEAR] HASH creates a hash key which will be used to read\nand write rows. The partition function can be any valid SQL\nexpression which returns an INTEGER number. Thus, it is\npossible to use the HASH method on an integer column, or on\nfunctions which accept integer columns as an argument.\nHowever, VALUES LESS THAN and VALUES IN clauses can not be\nused with HASH. An example:\n \nCREATE TABLE t1 (a INT, b CHAR(5), c DATETIME)\n PARTITION BY HASH ( YEAR(c) );\n \n [LINEAR] HASH can be used for subpartitions, too.\n[LINEAR] KEY is similar to HASH, but the index has an even\ndistribution of data. Also, the expression can only be a\ncolumn or a list of columns. VALUES LESS THAN and VALUES IN\nclauses can not be used with KEY.\nRANGE partitions the rows using on a range of values, using\nthe VALUES LESS THAN operator. VALUES IN is not allowed with\nRANGE. The partition function can be any valid SQL\nexpression which returns a single value.\nLIST assignes partitions based on a table\'s column with a\nrestricted set of possible values. It is similar to RANGE,\nbut VALUES IN must be used for at least 1 columns, and\nVALUES LESS THAN is disallowed.\nSYSTEM_TIME partitioning is used for System-versioned tables\nto store historical data separately from current data.\n \nOnly HASH and KEY can be used for subpartitions, and they\ncan be [LINEAR].\n \nIt is possible to define up to 1024 partitions and\nsubpartitions.\n \nThe number of defined partitions can be optionally specified\nas PARTITION count. This can be done to avoid specifying all\npartitions individually. But you can also declare each\nindividual partition and, additionally, specify a PARTITIONS\ncount clause; in the case, the number of PARTITIONs must\nequal count.\n \nAlso see Partitioning Types Overview.\n \nSequences\n \nCREATE TABLE can also be used to create a SEQUENCE. See\nCREATE SEQUENCE and Sequence Overview.\n \nExamples\n-------- \ncreate table if not exists test (\na bigint auto_increment primary key,\nname varchar(128) charset utf8,\nkey name (name(32))\n) engine=InnoDB default charset latin1;\n \nThis example shows a couple of things:\nUsage of IF NOT EXISTS; If the table already existed, it\nwill not be created. There will not be any error for the\nclient, just a warning.\nHow to create a PRIMARY KEY that is automatically generated.\nHow to specify a table-specific character set and another\nfor a column.\nHow to create an index (name) that is only partly indexed\n(to save space).\n \nThe following clauses will work from MariaDB 10.2.1 only.\n \nCREATE TABLE t1(\n a int DEFAULT (1+1),\n b int DEFAULT (a+1),\n expires DATETIME DEFAULT(NOW() + INTERVAL 1 YEAR),\n x BLOB DEFAULT USER()\n);\n \n\n\nURL: https://mariadb.com/kb/en/library/create-table/') WHERE help_topic_id = 660;
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (661,39,'CREATE TABLESPACE','The CREATE TABLESPACE statement is not supported by MariaDB. It was\noriginally inherited from MySQL NDB Cluster. In MySQL 5.7 and later, the statement is\nalso supported for InnoDB. However, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n','','https://mariadb.com/kb/en/library/create-tablespace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (662,39,'CREATE TRIGGER','Syntax\n------\nCREATE [OR REPLACE]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  TRIGGER [IF NOT EXISTS] trigger_name trigger_time trigger_event\n  ON tbl_name FOR EACH ROW\n [{ FOLLOWS | PRECEDES } other_trigger_name ]\n trigger_stmt;\n\nDescription\n-----------\nThis statement creates a new trigger. A trigger is a named database\nobject that is associated with a table, and that activates when a\nparticular event occurs for the table. The trigger becomes associated\nwith the table named tbl_name, which must refer to a permanent table.\n\nYou cannot associate a trigger with a TEMPORARY table or a view.\n\nCREATE TRIGGER requires the TRIGGER privilege for the table associated\nwith the trigger.\n\nFor valid identifiers to use as trigger names, see Identifier Names.\n\nOR REPLACE\n\nDEFINER\n\nThe DEFINER clause determines the security context to be used when\nchecking access privileges at trigger activation time. Usage requires the SUPER\nprivilege, or, from MariaDB 10.5.2, the SET USER privilege.\n\nIF NOT EXISTS\n\ntrigger_time\n\ntrigger_time is the trigger action time. It can be BEFORE or AFTER to\nindicate that the trigger activates before or after each row to be\nmodified.\n\ntrigger_event\n\ntrigger_event indicates the kind of statement that activates the\ntrigger. The trigger_event can be one of the following:\n\nFOLLOWS/PRECEDES other_trigger_name\n\nAtomic DDL\n\nExamples\n--------\nCREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n AFTER INSERT ON animals FOR EACH ROW\n UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n\nOR REPLACE and IF NOT EXISTS\nCREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n AFTER INSERT ON animals FOR EACH ROW\n  UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nERROR 1359 (HY000): Trigger already exists\n\nCREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER increment_animal\n AFTER INSERT ON animals  FOR EACH ROW\n  UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nQuery OK, 0 rows affected (0.12 sec)\n\nCREATE DEFINER=`root`@`localhost` TRIGGER IF NOT EXISTS increment_animal\n AFTER INSERT ON animals FOR EACH ROW\n  UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1359 | Trigger already exists |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n','','https://mariadb.com/kb/en/library/create-trigger/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (663,39,'CREATE VIEW','Syntax\n------\nCREATE\n  [OR REPLACE]\n  [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n  [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n  [SQL SECURITY { DEFINER | INVOKER }]\n  VIEW [IF NOT EXISTS] view_name [(column_list)]\n  AS select_statement\n  [WITH [CASCADED | LOCAL] CHECK OPTION]\n\nDescription\n-----------\nThe CREATE VIEW statement creates a new view, or replaces an existing\none if the OR REPLACE clause is given. If the view does not exist, CREATE OR\nREPLACE VIEW is the same as CREATE VIEW. If the view does exist, CREATE OR\nREPLACE VIEW is the same as ALTER VIEW.\n\nThe select_statement is a SELECT statement that provides the definition of\nthe view. (When you select from the view, you select in effect using the SELECT\nstatement.) select_statement can select from base tables or other views.\n\nThe view definition is "frozen" at creation time, so changes to the underlying\ntables afterwards do not affect the view definition. For example, if a view is\ndefined as SELECT * on a table, new columns added to the table later do not\nbecome part of the view. A SHOW CREATE VIEW shows that\nsuch queries are rewritten and column names are included in the view\ndefinition.\n\nThe view definition must be a query that does not return errors at view\ncreation times. However, the base tables used by the views might be altered\nlater and the query may not be valid anymore. In this case, querying the view\nwill result in an error. CHECK TABLE helps in finding this kind\nof problems.\n\nThe ALGORITHM clause affects how MariaDB processes the\nview. The DEFINER and SQL SECURITY clauses specify the security context to be\nused when checking access privileges at view invocation time. The WITH CHECK\nOPTION clause can be given to constrain inserts or updates to rows in tables\nreferenced by the view. These clauses are described later in this section.\n\nThe CREATE VIEW statement requires the CREATE VIEW privilege for the\nview, and some privilege for each column selected by the SELECT\nstatement. For columns used elsewhere in the SELECT statement you must\nhave the SELECT privilege. If the OR REPLACE clause is present, you\nmust also have the DROP privilege for the view.\n\nA view belongs to a database. By default, a new view is created in the\ndefault database. To create the view explicitly in a given database,\nspecify the name as db_name.view_name when you create it.\n\nCREATE VIEW test.v AS SELECT * FROM t;\n\nBase tables and views share the same namespace within a database, so a\ndatabase cannot contain a base table and a view that have the same\nname.\n\nViews must have unique column names with no duplicates, just like base\ntables. By default, the names of the columns retrieved by the SELECT\nstatement are used for the view column names. To define explicit names\nfor the view columns, the optional column_list clause can be given as\na list of comma-separated identifiers. The number of names in\ncolumn_list must be the same as the number of columns retrieved by the\nSELECT statement.\n\nMySQL until 5.1.28\nPrior to MySQL 5.1.29, When you modify an existing view, the\ncurrent view definition is backed up and saved. It is stored in that\ntable's database directory, in a subdirectory named arc. The backup\nfile for a view v is named v.frm-00001. If you alter the view again,\nthe next backup is named v.frm-00002. The three latest view backup\ndefinitions are stored. Backed up view definitions are not preserved\nby mysqldump, or any other such programs, but you can retain them\nusing a file copy operation. However, they are not needed for anything\nbut to provide you with a backup of your previous view definition. It\nis safe to remove these backup definitions, but only while mysqld is\nnot running. If you delete the arc subdirectory or its files while\nmysqld is running, you will receive an error the next time you try to\nalter the view: \nMariaDB [test]> ALTER VIEW v AS SELECT * FROM t; \nERROR 6 (HY000): Error on delete of '.\test\arc/v.frm-0004' (Errcode: 2)\n\nColumns retrieved by the SELECT statement can be simple references to\ntable columns. They can also be expressions that use functions,\nconstant values, operators, and so forth.\n\nUnqualified table or view names in the SELECT statement are\ninterpreted with respect to the default database. A view can refer to\ntables or views in other databases by qualifying the table or view\nname with the proper database name.\n\nA view can be created from many kinds of SELECT statements. It can\nrefer to base tables or other views. It can use joins, UNION, and\nsubqueries. The SELECT need not even refer to any tables. The\nfollowing example defines a view that selects two columns from another\ntable, as well as an expression calculated from those columns:\nCREATE TABLE t (qty INT, price INT);\n\nINSERT INTO t VALUES(3, 50);\n\nCREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\n\nSELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+\n\nA view definition is subject to the following restrictions:\n\nORDER BY is allowed in a view definition, but it is ignored if you\nselect from a view using a statement that has its own ORDER BY.\n\nFor other options or clauses in the definition, they are added to the\noptions or clauses of the statement that references the view, but the\neffect is undefined. For example, if a view definition includes a\nLIMIT clause, and you select from the view using a statement that has\nits own LIMIT clause, it is undefined which limit applies. This same\nprinciple applies to options such as ALL, DISTINCT, or\nSQL_SMALL_RESULT that follow the SELECT keyword, and to clauses such\nas INTO, FOR UPDATE, and LOCK IN SHARE MODE.\n\nThe PROCEDURE clause cannot be used in a view definition, and it cannot be used if a\nview is referenced in the FROM clause.\n\nIf you create a view and then change the query processing environment\nby changing system variables, that may affect the results that you get\nfrom the view:\nCREATE VIEW v (mycol) AS SELECT 'abc';\n\nSET sql_mode = '';\n\nSELECT "mycol" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol | \n+-------+\n\nSET sql_mode = 'ANSI_QUOTES';\n\nSELECT "mycol" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   | \n+-------+\n\nThe DEFINER and SQL SECURITY clauses determine which MariaDB account to\nuse when checking access privileges for the view when a statement is\nexecuted that references the view. They were added in MySQL 5.1.2.\n\nThe legal SQL SECURITY characteristic values are DEFINER and INVOKER.\n\nThese indicate that the required privileges must be held by the user\nwho defined or invoked the view, respectively. The default SQL\nSECURITY value is DEFINER.\n\nIf a user value is given for the DEFINER clause, it should be a MariaDB\naccount in 'user_name'@'host_name' format (the same format used in the\nGRANT statement). The user_name and host_name values both are\nrequired.  The definer can also be given as CURRENT_USER or\nCURRENT_USER(). The default DEFINER value is the user who executes the\nCREATE VIEW statement. This is the same as specifying DEFINER =\nCURRENT_USER explicitly.\n\nIf you specify the DEFINER clause, these rules determine the legal\nDEFINER user values:\n\nWithin a view definition, CURRENT_USER returns the view's DEFINER\nvalue by default. For views\ndefined with the SQL SECURITY INVOKER characteristic, CURRENT_USER\nreturns the account for the view's invoker. For information about user\nauditing within views, see\nhttp://dev.mysql.com/doc/refman/5.1/en/account-activity-auditing.html.\n\nWithin a stored routine that is defined with the SQL SECURITY DEFINER\ncharacteristic, CURRENT_USER returns the routine's DEFINER value. This\nalso affects a view defined within such a program, if the view\ndefinition contains a DEFINER value of CURRENT_USER.\n\nView privileges are checked like this:\n\nExample: A view might depend on a stored function, and that function\nmight invoke other stored routines. For example, the following view\ninvokes a stored function f():\nCREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);\n\nSuppose that f() contains a statement such as this:\n\nIF name IS NULL then\n CALL p1();\nELSE\n CALL p2();\nEND IF;\n\nThe privileges required for executing statements within f() need to be\nchecked when f() executes. This might mean that privileges are needed\nfor p1() or p2(), depending on the execution path within f(). Those\nprivileges must be checked at runtime, and the user who must possess\nthe privileges is determined by the SQL SECURITY values of the view v\nand the function f().\n\nThe DEFINER and SQL SECURITY clauses for views are extensions to\nstandard SQL. In standard SQL, views are handled using the rules for\nSQL SECURITY INVOKER.\n\nIf you invoke a view that was created before MySQL 5.1.2, it is\ntreated as though it was created with a SQL SECURITY DEFINER clause\nand with a DEFINER value that is the same as your account. However,\nbecause the actual definer is unknown, MySQL issues a warning. To make\nthe warning go away, it is sufficient to re-create the view so that\nthe view definition includes a DEFINER clause.\n\nThe optional ALGORITHM clause is an extension to standard SQL. It\naffects how MariaDB processes the view. ALGORITHM takes three values:\nMERGE, TEMPTABLE, or UNDEFINED. The default algorithm is UNDEFINED if\nno ALGORITHM clause is present. See View Algorithms for more information.\n\nSome views are updatable. That is, you can use them in statements such\nas UPDATE, DELETE, or INSERT to update the contents of the underlying\ntable. For a view to be updatable, there must be a one-to-one\nrelationship between the rows in the view and the rows in the\nunderlying table. There are also certain other constructs that make a\nview non-updatable. See Inserting and Updating with Views.\n\nWITH CHECK OPTION\n\nThe WITH CHECK OPTION clause can be given for an updatable view to\nprevent inserts or updates to rows except those for which the WHERE\nclause in the select_statement is true.\n\nIn a WITH CHECK OPTION clause for an updatable view, the LOCAL and\nCASCADED keywords determine the scope of check testing when the view\nis defined in terms of another view. The LOCAL keyword restricts the\nCHECK OPTION only to the view being defined. CASCADED causes the\nchecks for underlying views to be evaluated as well. When neither\nkeyword is given, the default is CASCADED.\n\nFor more information about updatable views and the WITH CHECK OPTION\nclause, see\nInserting and Updating with Views.\n\nIF NOT EXISTS\n\nWhen the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an\nerror if the specified view already exists. Cannot be used together with the OR\nREPLACE clause.\n\nAtomic DDL\n\nExamples\n--------\nCREATE TABLE t (a INT, b INT) ENGINE = InnoDB;\n\nINSERT INTO t VALUES (1,1), (2,2), (3,3);\n\nCREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\n\nSELECT * FROM v;\n+------+------+\n| a    | a2   |\n+------+------+\n|    1 |    2 |\n|    2 |    4 |\n|    3 |    6 |\n+------+------+\n\nOR REPLACE and IF NOT EXISTS:\nCREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\nERROR 1050 (42S01): Table 'v' already exists\n\nCREATE OR REPLACE VIEW v AS SELECT a, a*2 AS a2 FROM t;\nQuery OK, 0 rows affected (0.04 sec)\n\nCREATE VIEW IF NOT EXISTS v AS SELECT a, a*2 AS a2 FROM t;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+--------------------------+\n| Level | Code | Message                  |\n+-------+------+--------------------------+\n| Note  | 1050 | Table 'v' already exists |\n+-------+------+--------------------------+\n','','https://mariadb.com/kb/en/library/create-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (664,39,'DROP DATABASE','Syntax\n------\nDROP {DATABASE | SCHEMA} [IF EXISTS] db_name\n\nDescription\n-----------\nDROP DATABASE drops all tables in the database and deletes the database. Be very\ncareful with this statement! To use DROP DATABASE,\nyou need the DROP privilege on the database. DROP SCHEMA is a synonym for\nDROP DATABASE.\n\nImportant: When a database is dropped, user privileges on the database are not\nautomatically dropped. See GRANT.\n\nIF EXISTS\nUse IF EXISTS to prevent an error from occurring for databases that do not exist. A\nNOTE is generated for each non-existent database when using IF EXISTS. See\nSHOW WARNINGS.\n\nAtomic DDL\n\nExamples\n--------\nDROP DATABASE bufg;\nQuery OK, 0 rows affected (0.39 sec)\n\nDROP DATABASE bufg;\nERROR 1008 (HY000): Can't drop database 'bufg'; database doesn't exist\n\n\W\nShow warnings enabled.\n\nDROP DATABASE IF EXISTS bufg;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nNote (Code 1008): Can't drop database 'bufg'; database doesn't exist\n','','https://mariadb.com/kb/en/library/drop-database/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (665,39,'DROP EVENT','Syntax\n------\nDROP EVENT [IF EXISTS] event_name\n\nDescription\n-----------\nThis statement drops the event named event_name. The event immediately\nceases being active, and is deleted completely from the server.\n\nIf the event does not exist, the error\nERROR 1517 (HY000): Unknown event 'event_name'\nresults. You can override this and cause the\nstatement to generate a NOTE for non-existent events instead by using\nIF EXISTS. See SHOW WARNINGS.\n\nThis statement requires the EVENT privilege. In MySQL 5.1.11 and earlier, an event\ncould be dropped only\nby its definer, or by a user having the SUPER privilege.\n\nExamples\n--------\nDROP EVENT myevent3;\n\nUsing the IF EXISTS clause:\nDROP EVENT IF EXISTS myevent3;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------+\n| Level | Code | Message                       |\n+-------+------+-------------------------------+\n| Note  | 1305 | Event myevent3 does not exist |\n+-------+------+-------------------------------+\n','','https://mariadb.com/kb/en/library/drop-event/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (666,39,'DROP FUNCTION','Syntax\n------\nDROP FUNCTION [IF EXISTS] f_name\n\nDescription\n-----------\nThe DROP FUNCTION statement is used to drop a stored function or a user-defined\nfunction (UDF). That is, the specified routine is removed from the server, along with\nall privileges specific to the function. You must have the ALTER ROUTINE privilege\nfor the routine in order to drop it. If the automatic_sp_privileges server system\nvariable is set, both the ALTER ROUTINE and EXECUTE privileges are granted\nautomatically to the routine creator - see Stored Routine Privileges.\n\nIF EXISTS\nThe IF EXISTS clause is a MySQL/MariaDB extension.  It\nprevents an error from occurring if the function does not exist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.\n\nFor dropping a user-defined functions (UDF), see DROP FUNCTION UDF.\n\nExamples\n--------\nDROP FUNCTION hello;\nQuery OK, 0 rows affected (0.042 sec)\n\nDROP FUNCTION hello;\nERROR 1305 (42000): FUNCTION test.hello does not exist\n\nDROP FUNCTION IF EXISTS hello;\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1305 | FUNCTION test.hello does not exist |\n+-------+------+------------------------------------+\n','','https://mariadb.com/kb/en/library/drop-function/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (667,39,'DROP INDEX','Syntax\n------\nDROP INDEX [IF EXISTS] index_name ON tbl_name \n  [WAIT n |NOWAIT]\n\nDescription\n-----------\nDROP INDEX drops the index named index_name from the table tbl_name.\n\nThis statement is mapped to an ALTER TABLE statement to drop the\nindex.\n\nIf another connection is using the table, a metadata lock is active, and this\nstatement will wait until the lock is released. This is also true for\nnon-transactional tables.\n\nSee ALTER TABLE.\n\nAnother shortcut, CREATE INDEX, allows the creation of an index.\n\nTo remove the primary key, `PRIMARY` must be specified as index_name. Note that the\nquotes are necessary, because PRIMARY is a keyword.\n\nPrivileges\n----------\nExecuting the DROP INDEX statement requires the INDEX privilege for the table or\nthe database.\n\nOnline DDL\n----------\nOnline DDL is used by default with InnoDB, when the drop index operation supports it.\n\nSee InnoDB Online DDL Overview for more information on online DDL with InnoDB.\n\nDROP INDEX IF EXISTS ...\n------------------------\nIf the IF EXISTS clause is used, then MariaDB will return a warning instead of an\nerror if the index does not exist.\n\nWAIT/NOWAIT\n-----------\n\nProgress Reporting\n------------------\nMariaDB provides progress reporting for DROP INDEX statement for clients\nthat support the new progress reporting protocol. For example, if you were using the\nmysql client, then the progress report might look like this::\n','','https://mariadb.com/kb/en/library/drop-index/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (668,39,'DROP PACKAGE','Syntax\n------\nDROP PACKAGE [IF EXISTS]  [ db_name . ] package_name\n\nDescription\n-----------\nThe DROP PACKAGE statement can be used when Oracle SQL_MODE is set.\n\nThe DROP PACKAGE statement drops a stored package entirely:\n','','https://mariadb.com/kb/en/library/drop-package/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (669,39,'DROP PACKAGE BODY','Syntax\n------\nDROP PACKAGE BODY [IF EXISTS]  [ db_name . ] package_name\n\nDescription\n-----------\nThe DROP PACKAGE BODY statement can be used when Oracle SQL_MODE is set.\n\nThe DROP PACKAGE BODY statement drops the package body (i.e the implementation),\npreviously created using the CREATE PACKAGE BODY statement.\n\nNote, DROP PACKAGE BODY drops only the package implementation, but does not drop the\npackage specification. Use DROP PACKAGE to drop the package entirely (i.e. both\nimplementation and specification).\n','','https://mariadb.com/kb/en/library/drop-package-body/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (670,39,'DROP PROCEDURE','Syntax\n------\nDROP PROCEDURE [IF EXISTS] sp_name\n\nDescription\n-----------\nThis statement is used to drop a stored procedure. That is, the\nspecified routine is removed from the server along with all privileges specific to\nthe procedure. You must have the ALTER ROUTINE privilege for the routine. If the\nautomatic_sp_privileges server system variable is set, that privilege and EXECUTE are\ngranted automatically to the routine creator - see Stored Routine Privileges.\n\nThe IF EXISTS clause is a MySQL/MariaDB extension.  It\nprevents an error from occurring if the procedure or function does not exist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.\n\nWhile this statement takes effect immediately, threads which are executing a\nprocedure can continue execution.\n\nExamples\n--------\nDROP PROCEDURE simpleproc;\n\nIF EXISTS:\nDROP PROCEDURE simpleproc;\nERROR 1305 (42000): PROCEDURE test.simpleproc does not exist\n\nDROP PROCEDURE IF EXISTS simpleproc;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1305 | PROCEDURE test.simpleproc does not exist |\n+-------+------+------------------------------------------+\n','','https://mariadb.com/kb/en/library/drop-procedure/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (671,39,'DROP SEQUENCE','Syntax\n------\nDROP [TEMPORARY] SEQUENCE [IF EXISTS] [/*COMMENT TO SAVE*/]\n  sequence_name [, sequence_name] ...\n\nDescription\n-----------\nDROP SEQUENCE removes one or more sequences created with CREATE SEQUENCE. You must\nhave the DROP privilege for each sequence. MariaDB returns an error indicating by\nname which non-existing tables it was unable to drop, but it also drops all of the\ntables in the list that do exist.\n\nImportant: When a table is dropped, user privileges on the table are not\nautomatically dropped. See GRANT.\n\nIf another connection is using the sequence, a metadata lock is active, and this\nstatement will wait until the lock is released. This is also true for\nnon-transactional tables.\n\nFor each referenced sequence, DROP SEQUENCE drops a temporary sequence with that\nname, if it exists. If it does not exist, and the TEMPORARY keyword is not used, it\ndrops a non-temporary sequence with the same name, if it exists. The TEMPORARY\nkeyword ensures that a non-temporary sequence will not accidentally be dropped.\n\nUse IF EXISTS to prevent an error from occurring for sequences that do not exist. A\nNOTE is generated for each non-existent sequence when using IF EXISTS. See\nSHOW WARNINGS.\n\nDROP SEQUENCE requires the DROP privilege.\n\nNotes\n-----\nDROP SEQUENCE only removes sequences, not tables. However, DROP TABLE can remove both\nsequences and tables.\n','','https://mariadb.com/kb/en/library/drop-sequence/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (672,39,'DROP SERVER','Syntax\n------\nDROP SERVER [ IF EXISTS ] server_name\n\nDescription\n-----------\nDrops the server definition for the server named server_name. The\ncorresponding row within the mysql.servers table will be deleted. This statement\nrequires the SUPER privilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.\n\nDropping a server for a table does not affect any FederatedX, FEDERATED, Connect or\nSpider tables that used this connection information when they were created.\n\nDROP SERVER is not written to the binary log, irrespective of\nthe binary log format being used. From MariaDB 10.1.13, Galera replicates the CREATE\nSERVER, ALTER SERVER and DROP SERVER statements.\n\nIF EXISTS\nIf the IF EXISTS clause is used, MariaDB will not return an error if the server does\nnot exist. Unlike all other statements, DROP SERVER IF EXISTS does not issue a note\nif the server does not exist. See MDEV-9400.\n\nExamples\n--------\nDROP SERVER s;\n\nIF EXISTS:\nDROP SERVER s;\nERROR 1477 (HY000): The foreign server name you are trying to reference \n does not exist. Data source error:  s\n\nDROP SERVER IF EXISTS s;\nQuery OK, 0 rows affected (0.00 sec)\n','','https://mariadb.com/kb/en/library/drop-server/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (673,39,'DROP TABLE','Syntax\n------\nDROP [TEMPORARY] TABLE [IF EXISTS] [/*COMMENT TO SAVE*/]\n  tbl_name [, tbl_name] ...\n  [WAIT n|NOWAIT]\n  [RESTRICT | CASCADE]\n\nDescription\n-----------\nDROP TABLE removes one or more tables. You must have the DROP privilege\nfor each table. All table data and the table definition are removed, as well as\ntriggers associated to the table, so be\ncareful with this statement! If any of the tables named in the argument list do\nnot exist, MariaDB returns an error indicating by name which non-existing tables\nit was unable to drop, but it also drops all of the tables in the list that do\nexist.\n\nImportant: When a table is dropped, user privileges on the table are not\nautomatically dropped. See GRANT.\n\nIf another thread is using the table in an explicit transaction or an autocommit\ntransaction, then the thread acquires a metadata lock (MDL) on the table. The DROP\nTABLE statement will wait in the "Waiting for table metadata lock" thread state until\nthe MDL is released. MDLs are released in the following cases:\n\nNote that for a partitioned table, DROP TABLE permanently removes the table\ndefinition, all of its partitions, and all of the data which was stored in\nthose partitions. It also removes the partitioning definition (.par) file\nassociated with the dropped table.\n\nFor each referenced table, DROP TABLE drops a temporary table with that name, if it\nexists. If it does not exist, and the TEMPORARY keyword is not used, it drops a\nnon-temporary table with the same name, if it exists. The TEMPORARY keyword ensures\nthat a non-temporary table will not accidentally be dropped.\n\nUse IF EXISTS to prevent an error from occurring for tables that do not\nexist. A NOTE is generated for each non-existent table when using\nIF EXISTS. See SHOW WARNINGS.\n\nIf a foreign key references this table, the table cannot be dropped. In this case, it\nis necessary to drop the foreign key first.\n\nRESTRICT and CASCADE are allowed to make porting from other database systems easier.\n\nIn MariaDB, they do nothing.\n\nThe comment before the table names (/*COMMENT TO SAVE*/) is stored in the binary log.\n\nThat feature can be used by replication tools to send their internal messages.\n\nIt is possible to specify table names as db_name.tab_name. This is useful to delete\ntables from multiple databases with one statement. See Identifier Qualifiers\nfor details.\n\nThe DROP privilege is required to use DROP TABLE on non-temporary tables. For\ntemporary tables, no privilege is required, because such tables are only visible for\nthe current session.\n\nNote: DROP TABLE automatically commits the current active transaction,\nunless you use the TEMPORARY keyword.\n\nDROP TABLE in replication\n-------------------------\nDROP TABLE has the following characteristics in replication:\n\nDROP TABLE on the primary is treated on the replica as DROP TABLE IF EXISTS. You can\nchange that by setting slave-ddl-exec-mode to STRICT.\n\nDropping an Internal #sql-... Table\n-----------------------------------\nFrom MariaDB 10.6, DROP TABLE is atomic and the following does not apply. Until\nMariaDB 10.5, if the mariadbd/mysqld process is killed during an ALTER TABLE you may\nfind a table named #sql-... in your data directory. In MariaDB 10.3, InnoDB tables\nwith this prefix will be deleted automatically during startup.\n\nFrom MariaDB 10.4, these temporary tables will always be deleted automatically.\n\nIf you want to delete one of these tables explicitly you can do so by using the\nfollowing syntax:\nDROP TABLE `#mysql50##sql-...`;\n\nWhen running an ALTER TABLE…ALGORITHM=INPLACE that rebuilds the table, InnoDB will\ncreate an internal #sql-ib table. Until MariaDB 10.3.2, for these tables, the .frm\nfile will be called something else. In order to drop such a table after a server\ncrash, you must rename the #sql*.frm file to match the #sql-ib*.ibd file.\n\nFrom MariaDB 10.3.3, the same name as the .frm file is used for the intermediate copy\nof the table. The #sql-ib names are used by TRUNCATE and delayed DROP.\n\nFrom MariaDB 10.2.19 and MariaDB 10.3.10, the #sql-ib tables will be\ndeleted automatically.\n\nDropping All Tables in a Database\n---------------------------------\nThe best way to drop all tables in a database is by executing DROP DATABASE, which\nwill drop the database itself, and all tables in it.\n\nHowever, if you want to drop all tables in the database, but you also want to keep\nthe database itself and any other non-table objects in it, then you would need to\nexecute DROP TABLE to drop each individual table. You can construct these DROP TABLE\ncommands by querying the TABLES table in the information_schema database.\n\nFor example:\nSELECT CONCAT('DROP TABLE IF EXISTS `', TABLE_SCHEMA, '`.`', TABLE_NAME, '`;')\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'mydb';\n\nAtomic DROP TABLE\n-----------------\n\nExamples\n--------\nDROP TABLE Employees, Customers;\n\nNotes\n-----\nBeware that DROP TABLE can drop both tables and sequences. This is mainly done to\nallow old tools like mysqldump to work with sequences.\n','','https://mariadb.com/kb/en/library/drop-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (674,39,'DROP TABLESPACE','The DROP TABLESPACE statement is not supported by MariaDB. It was originally\ninherited from MySQL NDB Cluster. In MySQL 5.7 and later, the statement is also\nsupported for InnoDB. However, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n','','https://mariadb.com/kb/en/library/drop-tablespace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (675,39,'DROP TRIGGER','Syntax\n------\nDROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n\nDescription\n-----------\nThis statement drops a trigger. The schema (database) name is optional. If the\nschema is omitted, the trigger is dropped from the default schema.\n\nIts use requires the TRIGGER privilege for the table associated with the trigger.\n\nUse IF EXISTS to prevent an error from occurring for a\ntrigger that does not exist. A NOTE is generated for a non-existent trigger\nwhen using IF EXISTS. See SHOW WARNINGS.\n\nNote: Triggers for a table are also dropped if you drop the table.\n\nAtomic DDL\n\nExamples\n--------\nDROP TRIGGER test.example_trigger;\n\nUsing the IF EXISTS clause:\nDROP TRIGGER IF EXISTS test.example_trigger;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1360 | Trigger does not exist |\n+-------+------+------------------------+\n','','https://mariadb.com/kb/en/library/drop-trigger/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (676,39,'DROP VIEW','Syntax\n------\nDROP VIEW [IF EXISTS]\n  view_name [, view_name] ...\n  [RESTRICT | CASCADE]\n\nDescription\n-----------\nDROP VIEW removes one or more views. You must have the DROP privilege for\neach view. If any of the views named in the argument list do not exist, MariaDB\nreturns an error indicating by name which non-existing views it was unable to\ndrop, but it also drops all of the views in the list that do exist.\n\nThe IF EXISTS clause prevents an error from occurring for views that don't\nexist. When this clause is given, a NOTE is generated for each non-existent\nview. See SHOW WARNINGS.\n\nRESTRICT and CASCADE, if given, are parsed and ignored.\n\nIt is possible to specify view names as db_name.view_name. This is useful to delete\nviews from multiple databases with one statement. See Identifier Qualifiers\nfor details.\n\nThe DROP privilege is required to use DROP TABLE on non-temporary tables. For\ntemporary tables, no privilege is required, because such tables are only visible for\nthe current session.\n\nIf a view references another view, it will be possible to drop the referenced view.\n\nHowever, the other view will reference a view which does not exist any more. Thus,\nquerying it will produce an error similar to the following:\nERROR 1356 (HY000): View 'db_name.view_name' references invalid table(s) or \ncolumn(s) or function(s) or definer/invoker of view lack rights to use them\n\nThis problem is reported in the output of CHECK TABLE.\n\nNote that it is not necessary to use DROP VIEW to replace an existing view, because\nCREATE VIEW has an OR REPLACE clause.\n\nAtomic DDL\n\nExamples\n--------\nDROP VIEW v,v2;\n\nGiven views v and v2, but no view v3\nDROP VIEW v,v2,v3;\nERROR 1051 (42S02): Unknown table 'v3'\n\nDROP VIEW IF EXISTS v,v2,v3;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------+\n| Level | Code | Message                 |\n+-------+------+-------------------------+\n| Note  | 1051 | Unknown table 'test.v3' |\n+-------+------+-------------------------+\n','','https://mariadb.com/kb/en/library/drop-view/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (677,39,'MERGE','Description\n-----------\nThe MERGE storage engine, also known as the MRG_MyISAM engine, is a\ncollection of identical MyISAM tables that can be used as one.\n\n"Identical" means that all tables have identical column and index\ninformation. You cannot merge MyISAM tables in which the columns are\nlisted in a different order, do not have exactly the same columns, or\nhave the indexes in different order. However, any or all of the MyISAM\ntables can be compressed with myisampack. Columns names and indexes names can be\ndifferent, as long as data types and NULL/NOT NULL clauses are the same.\n\nDifferences in\ntable options such as AVG_ROW_LENGTH, MAX_ROWS, or PACK_KEYS do not\nmatter.\n\nEach index in a MERGE table must match an index in underlying MyISAM tables, but the\nopposite is not true. Also, a MERGE table cannot have a PRIMARY KEY or UNIQUE\nindexes, because it cannot enforce uniqueness over all underlying tables.\n\nThe following options are meaningful for MERGE tables:\n\nIf you define a MERGE table with a definition which is different from the underlying\nMyISAM tables, or one of the underlying tables is not MyISAM, the CREATE TABLE\nstatement will not return any error. But any statement which involves the table will\nproduce an error like the following:\nERROR 1168 (HY000): Unable to open underlying table which is differently defined \n or of non-MyISAM type or doesn't exist\n\nA CHECK TABLE will show more information about the problem.\n\nThe error is also produced if the table is properly define, but an underlying table's\ndefinition changes at some point in time.\n\nIf you try to insert a new row into a MERGE table with INSERT_METHOD=NO, you will get\nan error like the following:\nERROR 1036 (HY000): Table 'tbl_name' is read only\n\nIt is possible to build a MERGE table on MyISAM tables which have one or more virtual\ncolumns. MERGE itself does not support virtual columns, thus such columns will be\nseen as regular columns. The data types and sizes will still need to be identical,\nand they cannot be NOT NULL.\n\nExamples\n--------\nCREATE TABLE t1 (\n  a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  message CHAR(20)) ENGINE=MyISAM;\n\nCREATE TABLE t2 (\n  a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  message CHAR(20)) ENGINE=MyISAM;\n\nINSERT INTO t1 (message) VALUES ('Testing'),('table'),('t1');\n\nINSERT INTO t2 (message) VALUES ('Testing'),('table'),('t2');\n\nCREATE TABLE total (\n  a INT NOT NULL AUTO_INCREMENT,\n  message CHAR(20), INDEX(a))\n  ENGINE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;\n\nSELECT * FROM total;\n+---+---------+\n| a | message |\n+---+---------+\n| 1 | Testing |\n| 2 | table   |\n| 3 | t1      |\n| 1 | Testing |\n| 2 | table   |\n| 3 | t2      |\n+---+---------+\n\nIn the following example, we'll create three MyISAM tables, and then a MERGE table on\nthem. However, one of them uses a different data type for the column b, so a SELECT\nwill produce an error:\nCREATE TABLE t1 (\n a INT,\n b INT\n) ENGINE = MyISAM;\n\nCREATE TABLE t2 (\n a INT,\n b INT\n) ENGINE = MyISAM;\n\nCREATE TABLE t3 (\n a INT,\n b TINYINT\n) ENGINE = MyISAM;\n\nCREATE TABLE t_mrg (\n a INT,\n b INT\n) ENGINE = MERGE,UNION=(t1,t2,t3);\n\nSELECT * FROM t_mrg;\nERROR 1168 (HY000): Unable to open underlying table which is differently defined\n or of non-MyISAM type or doesn't exist\n\nTo find out what's wrong, we'll use a CHECK TABLE:\nCHECK TABLE t_mrg;\n+------------+-------+----------+----------------------------------------------------\n------------------------------------------------+\n| Table      | Op    | Msg_type | Msg_text                                           \n     |\n+------------+-------+----------+----------------------------------------------------\n------------------------------------------------+\n| test.t_mrg | check | Error    | Table 'test.t3' is differently defined or of\nnon-MyISAM type or doesn't exist                       |\n| test.t_mrg | check | Error    | Unable to open underlying table which is\ndifferently defined or of non-MyISAM type or doesn't exist |\n| test.t_mrg | check | error    | Corrupt                                            \n    |\n+------------+-------+----------+----------------------------------------------------\n------------------------------------------------+\n\nNow, we know that the problem is in t3's definition.\n','','https://mariadb.com/kb/en/library/merge/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (678,39,'RENAME TABLE','Syntax\n------\nRENAME TABLE[S] [IF EXISTS] tbl_name \n [WAIT n | NOWAIT]\n TO new_tbl_name\n  [, tbl_name2 TO new_tbl_name2] ...\n\nDescription\n-----------\nThis statement renames one or more tables or views, but not the privileges associated\nwith them.\n\nIF EXISTS\n\nThe rename operation is done atomically, which means that no other session can\naccess any of the tables while the rename is running. For example, if you have\nan existing table old_table, you can create another table\nnew_table that has the same structure but is empty, and then\nreplace the existing table with the empty one as follows (assuming that\nbackup_table does not already exist):\nCREATE TABLE new_table (...);\nRENAME TABLE old_table TO backup_table, new_table TO old_table;\n\ntbl_name can optionally be specified as db_name.tbl_name. See Identifier Qualifiers.\n\nThis allows to use RENAME to move a table from a database to another (as long as they\nare on the same filesystem):\nRENAME TABLE db1.t TO db2.t;\n\nNote that moving a table to another database is not possible if it has some triggers.\n\nTrying to do so produces the following error:\nERROR 1435 (HY000): Trigger in wrong schema\n\nAlso, views cannot be moved to another database:\nERROR 1450 (HY000): Changing schema from 'old_db' to 'new_db' is not allowed.\n\nMultiple tables can be renamed in a single statement. The presence or absence of the\noptional S (RENAME TABLE or RENAME TABLES) has no impact, whether a single or\nmultiple tables are being renamed.\n\nIf a RENAME TABLE renames more than one table and one renaming fails, all renames\nexecuted by the same statement are rolled back.\n\nRenames are always executed in the specified order. Knowing this, it is also possible\nto swap two tables' names:\nRENAME TABLE t1 TO tmp_table,\n  t2 TO t1,\n  tmp_table TO t2;\n\nWAIT/NOWAIT\n\nPrivileges\n\nExecuting the RENAME TABLE statement requires the DROP, CREATE and INSERT privileges\nfor the table or the database.\n\nAtomic RENAME TABLE\n','','https://mariadb.com/kb/en/library/rename-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (679,39,'TRUNCATE TABLE','Syntax\n------\nTRUNCATE [TABLE] tbl_name\n [WAIT n | NOWAIT]\n\nDescription\n-----------\nTRUNCATE TABLE empties a table completely. It requires the DROP privilege. See GRANT.\n\ntbl_name can also be specified in the form db_name.tbl_name (see\nIdentifier Qualifiers).\n\nLogically, TRUNCATE TABLE is equivalent to a DELETE statement that deletes all rows,\nbut there are practical differences under some circumstances.\n\nTRUNCATE TABLE will fail for an InnoDB table if any FOREIGN KEY constraints from\nother tables reference the table, returning the error:\nERROR 1701 (42000): Cannot truncate a table referenced in a foreign key constraint\n\nForeign Key constraints between columns in the same table are permitted.\n\nFor an InnoDB table, if there are no FOREIGN KEY constraints, InnoDB performs fast\ntruncation by dropping the original table and creating an empty one with the same\ndefinition, which is much faster than deleting rows one by one. The AUTO_INCREMENT\ncounter is reset by TRUNCATE TABLE, regardless of whether there is a FOREIGN\nKEY constraint.\n\nThe count of rows affected by TRUNCATE TABLE is accurate only\nwhen it is mapped to a DELETE statement.\n\nFor other storage engines, TRUNCATE TABLE differs from\nDELETE in the following ways:\n\nFor the purposes of binary logging and replication, TRUNCATE TABLE is treated as DROP\nTABLE followed by CREATE TABLE (DDL rather than DML).\n\nTRUNCATE TABLE does not work on views. Currently, TRUNCATE TABLE drops all historical\nrecords from a system-versioned table.\n\nPerformance\n\nTRUNCATE TABLE is faster than DELETE, because it drops and re-creates a table.\n\nWith InnoDB, TRUNCATE TABLE is slower if innodb_file_per_table=ON is set (the\ndefault). This is because TRUNCATE TABLE unlinks the underlying tablespace file,\nwhich can be an expensive operation. See MDEV-8069 for more details.\n\nThe performance issues with innodb_file_per_table=ON can be exacerbated in cases\nwhere the InnoDB buffer pool is very large and innodb_adaptive_hash_index=ON is set.\n\nIn that case, using DROP TABLE followed by CREATE TABLE instead of TRUNCATE TABLE may\nperform better. Setting innodb_adaptive_hash_index=OFF (it defaults to ON before\nMariaDB 10.5) can also help. In MariaDB 10.2 only, from MariaDB 10.2.19, this\nperformance can also be improved by setting innodb_safe_truncate=OFF. See MDEV-9459\nfor more details.\n\nSetting innodb_adaptive_hash_index=OFF can also improve TRUNCATE TABLE performance in\ngeneral. See MDEV-16796 for more details.\n','','https://mariadb.com/kb/en/library/truncate-table/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (680,40,'LASTVAL','LASTVAL is a synonym for PREVIOUS VALUE for sequence_name.\n','','https://mariadb.com/kb/en/library/lastval/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (681,40,'NEXT VALUE for sequence_name','Syntax\n------\nNEXT VALUE FOR sequence\n\nor\nNEXTVAL(sequence_name)\n\nor in Oracle mode (SQL_MODE=ORACLE)\nsequence_name.nextval\n\nNEXT VALUE FOR is ANSI SQL syntax while NEXTVAL() is PostgreSQL syntax.\n\nDescription\n-----------\nGenerate next value for a SEQUENCE.\n','','https://mariadb.com/kb/en/library/next-value-for-sequence_name/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (682,40,'NEXTVAL','NEXTVAL is a synonym for NEXT VALUE for sequence_name.\n','','https://mariadb.com/kb/en/library/nextval/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (683,40,'PREVIOUS VALUE FOR sequence_name','Syntax\n------\nPREVIOUS VALUE FOR sequence_name\n\nor\nLASTVAL(sequence_name)\n\nor in Oracle mode (SQL_MODE=ORACLE)\nsequence_name.currval\n\nPREVIOUS VALUE FOR is IBM DB2 syntax while LASTVAL() is PostgreSQL syntax.\n\nDescription\n-----------\nGet last value in the current connection generated from a sequence.\n\nExample\n-------\nMariaDB [test]> CREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\nQuery OK, 0 rows affected (0.026 sec)\n\nMariaDB [test]> SELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                 NULL |\n+----------------------+\n1 row in set (0.000 sec)\n\n# The function works for sequences only, if the table is used an error is generated\nMariaDB [test]> SELECT PREVIOUS VALUE FOR t;\nERROR 4089 (42S02): 'test.t' is not a SEQUENCE\n\n# Call the NEXT VALUE FOR s:\nMariaDB [test]> SELECT NEXT VALUE FOR s;\n+------------------+\n| NEXT VALUE FOR s |\n+------------------+\n|              100 |\n+------------------+\n1 row in set (0.000 sec)\n\nMariaDB [test]> SELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                  100 |\n+----------------------+\n1 row in set (0.000 sec)\n\nNow try to start the new connection and check that the last value is still NULL,\nbefore updating the value in the new connection after the output of the new\nconnection gets current value (110 in the example below). Note that first connection\ncannot see this change and the result of last value still remains the same (100 in\nthe example above).\n\n$ .mysql -uroot test -e"SELECT PREVIOUS VALUE FOR s; SELECT NEXT VALUE FOR s; SELECT\nPREVIOUS VALUE FOR s;"\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                 NULL |\n+----------------------+\n+------------------+\n| NEXT VALUE FOR s |\n+------------------+\n|              110 |\n+------------------+\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                  110 |\n+----------------------+\n','','https://mariadb.com/kb/en/library/previous-value-for-sequence_name/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (684,40,'Sequence Overview','Introduction\n------------\nA sequence is an object that generates a sequence of numeric values, as specified by\nthe CREATE SEQUENCE statement.\n\nCREATE SEQUENCE will create a sequence that generates new values when called with\nNEXT VALUE FOR sequence_name. It's an alternative to AUTO INCREMENT when one wants to\nhave more control of how the numbers are generated. As the SEQUENCE caches values (up\nto the CACHE value in the CREATE SEQUENCE statement, by default 1000) it can in some\ncases be much faster than AUTO INCREMENT. Another benefit is that one can access the\nlast value generated by all used sequences, which solves one of the limitations\nwith LAST_INSERT_ID().\n\nCreating a Sequence\n-------------------\nThe CREATE SEQUENCE statement is used to create a sequence. Here is an example of a\nsequence starting at 100, incrementing by 10 each time:\nCREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n\nThe CREATE SEQUENCE statement, along with defaults, can be viewd with the SHOW CREATE\nSEQUENCE STATEMENT, for example:\nSHOW CREATE SEQUENCE s\G\n*************************** 1. row ***************************\n   Table: s\nCreate Table: CREATE SEQUENCE `s` start with 100 minvalue 1 maxvalue\n9223372036854775806 \n increment by 10 cache 1000 nocycle ENGINE=InnoDB\n\nUsing Sequence Objects\n----------------------\nTo get the  next value from a sequence, use\nNEXT VALUE FOR sequence_name\n\nor\nNEXTVAL(sequence_name)\n\nor in Oracle mode (SQL_MODE=ORACLE)\nsequence_name.nextval\n\nFor retrieving the last value used by the current connection from a sequence\nuse:\nPREVIOUS VALUE FOR sequence_name\n\nor\nLASTVAL(sequence_name)\n\nor in Oracle mode (SQL_MODE=ORACLE)\nsequence_name.currval\n\nFor example:\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        100 |\n+------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        110 |\n+------------+\n\nSELECT LASTVAL(s);\n+------------+\n| LASTVAL(s) |\n+------------+\n|        110 |\n+------------+\n\nUsing Sequences in DEFAULT\n\ncreate sequence s1;\ncreate table t1 (a int primary key default (next value for s1), b int);\ninsert into t1 (b) values (1),(2);\nselect * from t1;\n+---+------+\n| a | b    |\n+---+------+\n| 1 |    1 |\n| 2 |    2 |\n+---+------+\n\nChanging a Sequence\n-------------------\nThe ALTER SEQUENCE statement is used for changing sequences. For example, to restart\nthe sequence at another value:\nALTER SEQUENCE s RESTART 50;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|         50 |\n+------------+\n\nThe SETVAL function can also be used to set the next value to be returned for a\nSEQUENCE, for example:\nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSETVAL can only be used to increase the sequence value. Attempting to set a lower\nvalue will fail, returning NULL:\nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nDropping a Sequence\n-------------------\nThe DROP SEQUENCE statement is used to drop a sequence, for example:\nDROP SEQUENCE s;\n\nReplication\n-----------\nIf one wants to use Sequences in a master-master setup or with Galera one\nshould use INCREMENT=0.  This will tell the Sequence to use auto_increment_increment\nand auto_increment_offset to generate unique values for each server.\n\nStandards Compliance\n--------------------\nMariaDB 10.3  supports both ANSI SQL and Oracle syntax for sequences.\n\nHowever as SEQUENCE is implemented as a special kind of table, it uses the same\nnamespace as tables. The benefits are that sequences show up in SHOW TABLES, and one\ncan also create a sequence with CREATE TABLE and drop it with DROP TABLE. One can\nSELECT from it as from any other table. This ensures that all old tools that work\nwith tables should work with sequences.\n\nSince sequence objects act as regular tables in many contexts, they will be affected\nby LOCK TABLES. This is not the case in other DBMS, such as Oracle, where LOCK TABLE\ndoes not affect sequences.\n\nNotes\n-----\nOne of the goals with the Sequence implementation is that all old\ntools, such as mysqldump, should work unchanged, while still keeping the\nnormal usage of sequence standard compatibly.\n\nTo make this possible, sequence is currently implemented as a table with a few\nexclusive properties.\n\nThe special properties for sequence tables are:\n\nTable Operations that Work with Sequences\n-----------------------------------------\n\nImplementation\n--------------\nInternally, sequence tables are created as a normal table without\nrollback (the InnoDB, Aria and MySAM engines support this), wrapped by a\nsequence engine object. This allowed us to create sequences with\nalmost no performance impact for normal tables. (The cost is one 'if'\nper insert if the binary log is enabled).\n\nUnderlying Table Structure\n--------------------------\nThe following example shows the table structure of sequences and how it\ncan be used as a table.\n\n(Output of results are slightly edited to make them easier to read)\ncreate sequence t1;\nshow create sequence t1\G\n***** 1. row *****\n CREATE SEQUENCE `t1` start with 1 minvalue 1 maxvalue 9223372036854775806\n increment by 1 cache 1000 nocycle ENGINE=InnoDB\nshow create table t1\G\n***** 1. row *****\nCreate Table: CREATE TABLE `t1` (\n `next_not_cached_value` bigint(21) NOT NULL,\n `minimum_value` bigint(21) NOT NULL,\n `maximum_value` bigint(21) NOT NULL,\n `start_value` bigint(21) NOT NULL COMMENT 'start value when sequences is created or\nvalue if RESTART is used',\n `increment` bigint(21) NOT NULL COMMENT 'increment value',\n `cache_size` bigint(21) unsigned NOT NULL,\n `cycle_option` tinyint(1) unsigned NOT NULL COMMENT '0 if no cycles are allowed, 1\nif the sequence should begin a new cycle when maximum_value is passed',\n `cycle_count` bigint(21) NOT NULL COMMENT 'How many cycles have been done'\n) ENGINE=InnoDB SEQUENCE=1\nselect * from t1\G\nnext_not_cached_value: 1\n minimum_value: 1\n maximum_value: 9223372036854775806\n start_value: 1\n increment: 1\n cache_size: 1000\n cycle_option: 0\n cycle_count: 0\nThe cycle_count column is incremented every time the sequence wraps around.\n\nCredits\n-------\n','','https://mariadb.com/kb/en/library/sequence-overview/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (685,40,'SETVAL()','Syntax\n------\nSETVAL(sequence_name, next_value, [is_used, [round]])\n\nDescription\n-----------\nSet the next value to be returned for a SEQUENCE.\n\nThis function is compatible with PostgreSQL syntax, extended\nwith the round argument.\n\nIf the is_used argument is not given or is 1 or true, then the next used value will\none after the given value. If is_used is 0 or false then the next generated value\nwill be the given value.\n\nIf round is used then it will set the round value (or the internal cycle count,\nstarting at zero) for the sequence.\n\nIf round is not used, it's assumed to be 0.\n\nnext_value must be an integer literal.\n\nFor SEQUENCE tables defined with CYCLE (see CREATE SEQUENCE) one should use both\nnext_value and round to define the next value. In this case the\ncurrent sequence value is defined to be round, next_value.\n\nThe result returned by SETVAL() is next_value or NULL if the given next_value and\nround  is smaller than the current value.\n\nSETVAL() will not set the SEQUENCE value to a something that is less than\nits current value. This is needed to ensure that SETVAL()\nis replication safe.  If you want to set the SEQUENCE to a smaller number\nuse ALTER SEQUENCE.\n\nIf CYCLE is used, first round and then next_value are compared\nto see if the value is bigger than the current value.\n\nInternally, in the MariaDB server, SETVAL() is used to inform\nslaves that a SEQUENCE has changed value.  The slave may get\nSETVAL() statements out of order, but this is ok as only the\nbiggest one will have an effect.\n\nSETVAL requires the INSERT privilege.\n\nExamples\n--------\nSELECT setval(foo, 42);           -- Next nextval will return 43\nSELECT setval(foo, 42, true);     -- Same as above\nSELECT setval(foo, 42, false);    -- Next nextval will return 42\n\nSETVAL setting higher and lower values on a sequence with an increment of 10:\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|         50 |\n+------------+\n\nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        110 |\n+------------+\n\nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        120 |\n+------------+\n\nExample demonstrating round:\nCREATE OR REPLACE SEQUENCE s1\n START WITH 1\n MINVALUE 1\n MAXVALUE 99\n INCREMENT BY 1\n CACHE 20\n CYCLE;\n\nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n\nThe following statement returns NULL, as the given next_value and round is smaller\nthan the current value.\n\nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           2 |\n+-------------+\n\nIncreasing the round from zero to 1 will allow next_value to be returned.\n\nSELECT SETVAL(s1, 99, 1, 1);\n+----------------------+\n| SETVAL(s1, 99, 1, 1) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n','','https://mariadb.com/kb/en/library/setval/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (686,41,'JSON_ARRAY','Syntax\n------\nJSON_ARRAY([value[, value2] ...])\n\nDescription\n-----------\nReturns a JSON array containing the listed values. The list can be empty.\n\nExample\n-------\nSELECT Json_Array(56, 3.1416, 'My name is "Foo"', NULL);\n+--------------------------------------------------+\n| Json_Array(56, 3.1416, 'My name is "Foo"', NULL) |\n+--------------------------------------------------+\n| [56, 3.1416, "My name is \"Foo\"", null]         |\n+--------------------------------------------------+\n','','https://mariadb.com/kb/en/json_array/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (687,41,'JSON_ARRAY_APPEND','Syntax\n------\nJSON_ARRAY_APPEND(json_doc, path, value[, path, value] ...)\n\nDescription\n-----------\nAppends values to the end of the specified arrays within a JSON document, returning\nthe result, or NULL if any of the arguments are NULL.\n\nEvaluation is performed from left to right, with the resulting document from the\nprevious pair becoming the new value against which the next pair is evaluated.\n\nIf the json_doc is not a valid JSON document, or if any of the paths are not valid,\nor contain a * or ** wildcard, an error is returned.\n\nExamples\n--------\nSET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_ARRAY_APPEND(@json, '$[0]', 5)\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[0]', 5) |\n+-------------------------------------+\n| [[1, 5], 2, [3, 4]]                 |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$[1]', 6);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[1]', 6) |\n+-------------------------------------+\n| [1, [2, 6], [3, 4]]                 |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$[1]', 6, '$[2]', 7);\n+------------------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[1]', 6, '$[2]', 7) |\n+------------------------------------------------+\n| [1, [2, 6], [3, 4, 7]]                         |\n+------------------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$', 5);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@json, '$', 5) |\n+----------------------------------+\n| [1, 2, [3, 4], 5]                |\n+----------------------------------+\n\nSET @json = '{"A": 1, "B": [2], "C": [3, 4]}';\n\nSELECT JSON_ARRAY_APPEND(@json, '$.B', 5);\n+------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$.B', 5) |\n+------------------------------------+\n| {"A": 1, "B": [2, 5], "C": [3, 4]} |\n+------------------------------------+\n','','https://mariadb.com/kb/en/json_array_append/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (688,41,'JSON_ARRAY_INSERT','Syntax\n------\nJSON_ARRAY_INSERT(json_doc, path, value[, path, value] ...)\n\nDescription\n-----------\nInserts a value into a JSON document, returning the modified document, or NULL if any\nof the arguments are NULL.\n\nEvaluation is performed from left to right, with the resulting document from the\nprevious pair becoming the new value against which the next pair is evaluated.\n\nIf the json_doc is not a valid JSON document, or if any of the paths are not valid,\nor contain a * or ** wildcard, an error is returned.\n\nExamples\n--------\nSET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_ARRAY_INSERT(@json, '$[0]', 5);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[0]', 5) |\n+-------------------------------------+\n| [5, 1, 2, [3, 4]]                   |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_INSERT(@json, '$[1]', 6);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[1]', 6) |\n+-------------------------------------+\n| [1, 6, 2, [3, 4]]                   |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_INSERT(@json, '$[1]', 6, '$[2]', 7);\n+------------------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[1]', 6, '$[2]', 7) |\n+------------------------------------------------+\n| [1, 6, 7, 2, [3, 4]]                           |\n+------------------------------------------------+\n','','https://mariadb.com/kb/en/json_array_insert/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (689,41,'JSON_COMPACT','Syntax\n------\nJSON_COMPACT(json_doc)\n\nDescription\n-----------\nRemoves all unnecessary spaces so the json document is as short as possible.\n\nExample\n-------\nSET @j = '{ "A": 1, "B": [2, 3]}';\n\nSELECT JSON_COMPACT(@j), @j;\n+-------------------+------------------------+\n| JSON_COMPACT(@j)  | @j                     |\n+-------------------+------------------------+\n| {"A":1,"B":[2,3]} | { "A": 1, "B": [2, 3]} |\n+-------------------+------------------------+\n','','https://mariadb.com/kb/en/json_compact/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (690,41,'JSON_CONTAINS','Syntax\n------\nJSON_CONTAINS(json_doc, val[, path])\n\nDescription\n-----------\nReturns whether or not the specified value is found in the given JSON document or,\noptionally, at the specified path within the document. Returns 1 if it does, 0 if not\nand NULL if any of the arguments are null. An error occurs if the document or path is\nnot valid, or contains the * or ** wildcards.\n\nExamples\n--------\nSET @json = '{"A": 0, "B": {"C": 1}, "D": 2}';\n\nSELECT JSON_CONTAINS(@json, '2', '$.A');\n+----------------------------------+\n| JSON_CONTAINS(@json, '2', '$.A') |\n+----------------------------------+\n|                                0 |\n+----------------------------------+\n\nSELECT JSON_CONTAINS(@json, '2', '$.D');\n+----------------------------------+\n| JSON_CONTAINS(@json, '2', '$.D') |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nSELECT JSON_CONTAINS(@json, '{"C": 1}', '$.A');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, '{"C": 1}', '$.A') |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\n\nSELECT JSON_CONTAINS(@json, '{"C": 1}', '$.B');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, '{"C": 1}', '$.B') |\n+-----------------------------------------+\n|                                       1 |\n+-----------------------------------------+\n','','https://mariadb.com/kb/en/json_contains/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (691,41,'JSON_CONTAINS_PATH','Syntax\n------\nJSON_CONTAINS_PATH(json_doc, return_arg, path[, path] ...)\n\nDescription\n-----------\nIndicates whether the given JSON document contains data at the specified path or\npaths. Returns 1 if it does, 0 if not and NULL if any of the arguments are null.\n\nThe return_arg can be one or all:\n\nExamples\n--------\nSET @json = '{"A": 1, "B": [2], "C": [3, 4]}';\n\nSELECT JSON_CONTAINS_PATH(@json, 'one', '$.A', '$.D');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, 'one', '$.A', '$.D') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT JSON_CONTAINS_PATH(@json, 'all', '$.A', '$.D');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, 'all', '$.A', '$.D') |\n+------------------------------------------------+\n|                                              0 |\n+------------------------------------------------+\n','','https://mariadb.com/kb/en/json_contains_path/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (692,41,'JSON_DEPTH','Syntax\n------\nJSON_DEPTH(json_doc)\n\nDescription\n-----------\nReturns the maximum depth of the given JSON document, or NULL if the argument is\nnull. An error will occur if the argument is an invalid JSON document.\n\nExamples\n--------\nSELECT JSON_DEPTH('[]'), JSON_DEPTH('true'), JSON_DEPTH('{}');\n+------------------+--------------------+------------------+\n| JSON_DEPTH('[]') | JSON_DEPTH('true') | JSON_DEPTH('{}') |\n+------------------+--------------------+------------------+\n|                1 |                  1 |                1 |\n+------------------+--------------------+------------------+\n\nSELECT JSON_DEPTH('[1, 2, 3]'), JSON_DEPTH('[[], {}, []]');\n+-------------------------+----------------------------+\n| JSON_DEPTH('[1, 2, 3]') | JSON_DEPTH('[[], {}, []]') |\n+-------------------------+----------------------------+\n|                       2 |                          2 |\n+-------------------------+----------------------------+\n\nSELECT JSON_DEPTH('[1, 2, [3, 4, 5, 6], 7]');\n+---------------------------------------+\n| JSON_DEPTH('[1, 2, [3, 4, 5, 6], 7]') |\n+---------------------------------------+\n|                                     3 |\n+---------------------------------------+\n','','https://mariadb.com/kb/en/json_depth/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (693,41,'JSON_DETAILED','Syntax\n------\nJSON_DETAILED(json_doc[, tab_size])\n\nDescription\n-----------\nRepresents JSON in the most understandable way emphasizing nested structures.\n\nExample\n-------\nSET @j = '{ "A":1,"B":[2,3]}';\n\nSELECT @j;\n+--------------------+\n| @j                 |\n+--------------------+\n| { "A":1,"B":[2,3]} |\n+--------------------+\n\nSELECT JSON_DETAILED(@j);\n+------------------------------------------------------------+\n| JSON_DETAILED(@j)                                          |\n+------------------------------------------------------------+\n| {\n  "A": 1,\n  "B":\n  [\n    2,\n    3\n  ]\n} |\n+------------------------------------------------------------+\n','','https://mariadb.com/kb/en/json_detailed/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (694,41,'JSON_EXISTS','Syntax\n------\n\nDescription\n-----------\nDetermines whether a specified JSON value exists in the given data. Returns 1 if\nfound, 0 if not, or NULL if any of the inputs were NULL.\n\nExamples\n--------\nSELECT JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2");\n+------------------------------------------------------------+\n| JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2") |\n+------------------------------------------------------------+\n|                                                          1 |\n+------------------------------------------------------------+\n\nSELECT JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key3");\n+------------------------------------------------------------+\n| JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key3") |\n+------------------------------------------------------------+\n|                                                          0 |\n+------------------------------------------------------------+\n\nSELECT JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2[1]");\n+---------------------------------------------------------------+\n| JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2[1]") |\n+---------------------------------------------------------------+\n|                                                             1 |\n+---------------------------------------------------------------+\n\nSELECT JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2[10]");\n+----------------------------------------------------------------+\n| JSON_EXISTS('{"key1":"xxxx", "key2":[1, 2, 3]}', "$.key2[10]") |\n+----------------------------------------------------------------+\n|                                                              0 |\n+----------------------------------------------------------------+\n','','https://mariadb.com/kb/en/json_exists/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (695,41,'JSON_EXTRACT','Syntax\n------\nJSON_EXTRACT(json_doc, path[, path] ...)\n\nDescription\n-----------\nExtracts data from a JSON document. The extracted data is selected from the parts\nmatching the path arguments. Returns all matched values; either as a single matched\nvalue, or, if the arguments could return multiple values, a result autowrapped as an\narray in the matching order.\n\nReturns NULL if no paths match or if any of the arguments are NULL.\n\nAn error will occur if any path argument is not a valid path, or if the json_doc\nargument is not a valid JSON document.\n\nThe path expression be a JSONPath expression as supported by MariaDB\n\nExamples\n--------\nSET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_EXTRACT(@json, '$[1]');\n+-----------------------------+\n| JSON_EXTRACT(@json, '$[1]') |\n+-----------------------------+\n| 2                           |\n+-----------------------------+\n\nSELECT JSON_EXTRACT(@json, '$[2]');\n+-----------------------------+\n| JSON_EXTRACT(@json, '$[2]') |\n+-----------------------------+\n| [3, 4]                      |\n+-----------------------------+\n\nSELECT JSON_EXTRACT(@json, '$[2][1]');\n+--------------------------------+\n| JSON_EXTRACT(@json, '$[2][1]') |\n+--------------------------------+\n| 4                              |\n+--------------------------------+\n','','https://mariadb.com/kb/en/json_extract/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (696,41,'JSON_INSERT','Syntax\n------\nJSON_INSERT(json_doc, path, val[, path, val] ...)\n\nDescription\n-----------\nInserts data into a JSON document, returning the resulting document or NULL if any\nargument is null.\n\nAn error will occur if the JSON document is not invalid, or if any of the paths are\ninvalid or contain a * or ** wildcard.\n\nJSON_INSERT can only insert data while JSON_REPLACE can only update. JSON_SET can\nupdate or insert data.\n\nExamples\n--------\nSET @json = '{ "A": 0, "B": [1, 2]}';\n\nSELECT JSON_INSERT(@json, '$.C', '[3, 4]');\n+--------------------------------------+\n| JSON_INSERT(@json, '$.C', '[3, 4]')  |\n+--------------------------------------+\n| { "A": 0, "B": [1, 2], "C":"[3, 4]"} |\n+--------------------------------------+\n','','https://mariadb.com/kb/en/json_insert/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (697,41,'JSON_KEYS','Syntax\n------\nJSON_KEYS(json_doc[, path])\n\nDescription\n-----------\nReturns the keys as a JSON array from the top-level value of a JSON object or, if the\noptional path argument is provided, the top-level keys from the path.\n\nExcludes keys from nested sub-objects in the top level value. The resulting array\nwill be empty if the selected object is empty.\n\nReturns NULL if any of the arguments are null, a given path does not locate an\nobject, or if the json_doc argument is not an object.\n\nAn error will occur if JSON document is invalid, the path is invalid or if the path\ncontains a * or ** wildcard.\n\nExamples\n--------\nSELECT JSON_KEYS('{"A": 1, "B": {"C": 2}}');\n+--------------------------------------+\n| JSON_KEYS('{"A": 1, "B": {"C": 2}}') |\n+--------------------------------------+\n| ["A", "B"]                           |\n+--------------------------------------+\n\nSELECT JSON_KEYS('{"A": 1, "B": 2, "C": {"D": 3}}', '$.C');\n+-----------------------------------------------------+\n| JSON_KEYS('{"A": 1, "B": 2, "C": {"D": 3}}', '$.C') |\n+-----------------------------------------------------+\n| ["D"]                                               |\n+-----------------------------------------------------+\n','','https://mariadb.com/kb/en/json_keys/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (698,41,'JSON_LENGTH','Syntax\n------\nJSON_LENGTH(json_doc[, path])\n\nDescription\n-----------\nReturns the length of a JSON document, or, if the optional path argument is given,\nthe length of the value within the document specified by the path.\n\nReturns NULL if any of the arguments argument are null or the path argument does not\nidentify a value in the document.\n\nAn error will occur if the JSON document is invalid, the path is invalid or if the\npath contains a * or ** wildcard.\n\nLength will be determined as follow:\n\nThe length of nested arrays or objects are not counted.\n\nExamples\n--------\n','','https://mariadb.com/kb/en/json_length/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (699,41,'JSON_LOOSE','Syntax\n------\nJSON_LOOSE(json_doc)\n\nDescription\n-----------\nAdds spaces to a JSON document to make it look more readable.\n\nExample\n-------\nSET @j = '{ "A":1,"B":[2,3]}';\n\nSELECT JSON_LOOSE(@j), @j;\n+-----------------------+--------------------+\n| JSON_LOOSE(@j)        | @j                 |\n+-----------------------+--------------------+\n| {"A": 1, "B": [2, 3]} | { "A":1,"B":[2,3]} |\n+-----------------------+--------------------+\n','','https://mariadb.com/kb/en/json_loose/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (700,41,'JSON_MERGE','Syntax\n------\nJSON_MERGE(json_doc, json_doc[, json_doc] ...)\n\nDescription\n-----------\nMerges the given JSON documents.\n\nReturns the merged result,or NULL if any argument is NULL.\n\nAn error occurs if any of the arguments are not valid JSON documents.\n\nJSON_MERGE has been deprecated since MariaDB 10.2.25, MariaDB 10.3.16 and MariaDB\n10.4.5. JSON_MERGE_PATCH is an RFC 7396-compliant replacement, and\nJSON_MERGE_PRESERVE is a synonym.\n\nExample\n-------\nSET @json1 = '[1, 2]';\nSET @json2 = '[3, 4]';\n\nSELECT JSON_MERGE(@json1,@json2);\n+---------------------------+\n| JSON_MERGE(@json1,@json2) |\n+---------------------------+\n| [1, 2, 3, 4]              |\n+---------------------------+\n','','https://mariadb.com/kb/en/json_merge/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (701,41,'JSON_OBJECT','Syntax\n------\nJSON_OBJECT([key, value[, key, value] ...])\n\nDescription\n-----------\nReturns a JSON object containing the given key/value pairs. The key/value list can\nbe empty.\n\nAn error will occur if there are an odd number of arguments, or any key name is NULL.\n\nExample\n-------\nSELECT JSON_OBJECT("id", 1, "name", "Monty");\n+---------------------------------------+\n| JSON_OBJECT("id", 1, "name", "Monty") |\n+---------------------------------------+\n| {"id": 1, "name": "Monty"}            |\n+---------------------------------------+\n','','https://mariadb.com/kb/en/json_object/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (702,41,'JSON_QUERY','Syntax\n------\nJSON_QUERY(json_doc, path)\n\nDescription\n-----------\nGiven a JSON document, returns an object or array specified by the path. Returns NULL\nif not given a valid JSON document, or if there is no match.\n\nExamples\n--------\nselect json_query('{"key1":{"a":1, "b":[1,2]}}', '$.key1');\n+-----------------------------------------------------+\n| json_query('{"key1":{"a":1, "b":[1,2]}}', '$.key1') |\n+-----------------------------------------------------+\n| {"a":1, "b":[1,2]}                                  |\n+-----------------------------------------------------+\n\nselect json_query('{"key1":123, "key1": [1,2,3]}', '$.key1');\n+-------------------------------------------------------+\n| json_query('{"key1":123, "key1": [1,2,3]}', '$.key1') |\n+-------------------------------------------------------+\n| [1,2,3]                                               |\n+-------------------------------------------------------+\n','','https://mariadb.com/kb/en/json_query/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (703,41,'JSON_QUOTE','Syntax\n------\nJSON_QUOTE(json_value)\n\nDescription\n-----------\nQuotes a string as a JSON value, usually for producing valid JSON string literals for\ninclusion in JSON documents. Wraps the string with double quote characters and\nescapes interior quotes and other special characters, returning a utf8mb4 string.\n\nReturns NULL if the argument is NULL.\n\nExamples\n--------\nSELECT JSON_QUOTE('A'), JSON_QUOTE("B"), JSON_QUOTE('"C"');\n+-----------------+-----------------+-------------------+\n| JSON_QUOTE('A') | JSON_QUOTE("B") | JSON_QUOTE('"C"') |\n+-----------------+-----------------+-------------------+\n| "A"             | "B"             | "\"C\""           |\n+-----------------+-----------------+-------------------+\n','','https://mariadb.com/kb/en/json_quote/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (704,41,'JSON_REMOVE','Syntax\n------\nJSON_REMOVE(json_doc, path[, path] ...)\n\nDescription\n-----------\nRemoves data from a JSON document returning the result, or NULL if any of the\narguments are null. If the element does not exist in the document, no changes\nare made.\n\nAn error will occur if JSON document is invalid, the path is invalid or if the path\ncontains a * or ** wildcard.\n\nPath arguments are evaluated from left to right, with the result from the earlier\nevaluation being used as the value for the next.\n\nExamples\n--------\nSELECT JSON_REMOVE('{"A": 1, "B": 2, "C": {"D": 3}}', '$.C');\n+-------------------------------------------------------+\n| JSON_REMOVE('{"A": 1, "B": 2, "C": {"D": 3}}', '$.C') |\n+-------------------------------------------------------+\n| {"A": 1, "B": 2}                                      |\n+-------------------------------------------------------+\n\nSELECT JSON_REMOVE('["A", "B", ["C", "D"], "E"]', '$[1]');\n+----------------------------------------------------+\n| JSON_REMOVE('["A", "B", ["C", "D"], "E"]', '$[1]') |\n+----------------------------------------------------+\n| ["A", ["C", "D"], "E"]                             |\n+----------------------------------------------------+\n','','https://mariadb.com/kb/en/json_remove/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (705,41,'JSON_REPLACE','Syntax\n------\nJSON_REPLACE(json_doc, path, val[, path, val] ...)\n\nDescription\n-----------\nReplaces existing values in a JSON document, returning the result, or NULL if any of\nthe arguments are NULL.\n\nAn error will occur if the JSON document is invalid, the path is invalid or if the\npath contains a * or ** wildcard.\n\nPaths and values are evaluated from left to right, with the result from the earlier\nevaluation being used as the value for the next.\n\nJSON_REPLACE can only update data, while JSON_INSERT can only insert. JSON_SET can\nupdate or insert data.\n\nExamples\n--------\nSELECT JSON_REPLACE('{ "A": 1, "B": [2, 3]}', '$.B[1]', 4);\n+-----------------------------------------------------+\n| JSON_REPLACE('{ "A": 1, "B": [2, 3]}', '$.B[1]', 4) |\n+-----------------------------------------------------+\n| { "A": 1, "B": [2, 4]}                              |\n+-----------------------------------------------------+\n','','https://mariadb.com/kb/en/json_replace/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (706,41,'JSON_SEARCH','Syntax\n------\nJSON_SEARCH(json_doc, return_arg, search_str[, escape_char[, path] ...])\n\nDescription\n-----------\nReturns the path to the given string within a JSON document, or NULL if any of\njson_doc, search_str or a path argument is NULL; if the search string is not found,\nor if no path exists within the document.\n\nA warning will occur if the JSON document is not valid, any of the path arguments are\nnot valid, if return_arg is neither one nor all, or if the escape character is not a\nconstant. NULL will be returned.\n\nreturn_arg can be one of two values:\n\nExamples\n--------\nSET @json = '["A", [{"B": "1"}], {"C":"AB"}, {"D":"BC"}]';\n\nSELECT JSON_SEARCH(@json, 'one', 'AB');\n+---------------------------------+\n| JSON_SEARCH(@json, 'one', 'AB') |\n+---------------------------------+\n| "$[2].C"                        |\n+---------------------------------+\n','','https://mariadb.com/kb/en/json_search/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (707,41,'JSON_SET','Syntax\n------\nJSON_SET(json_doc, path, val[, path, val] ...)\n\nDescription\n-----------\nUpdates or inserts data into a JSON document, returning the result, or NULL if any of\nthe arguments are NULL or the optional path fails to find an object.\n\nAn error will occur if the JSON document is invalid, the path is invalid or if the\npath contains a * or  wildcard.\n\nJSON_SET can update or insert data, while JSON_REPLACE can only update, and\nJSON_INSERT only insert.\n\nExamples\n--------\nSELECT JSON_SET(Priv, '$.locked', 'true') FROM mysql.global_priv\n','','https://mariadb.com/kb/en/json_set/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (708,41,'JSON_TYPE','Syntax\n------\nJSON_TYPE(json_val)\n\nDescription\n-----------\nReturns the type of a JSON value (as a string), or NULL if the argument is null.\n\nAn error will occur if the argument is an invalid JSON value.\n\nThe following is a complete list of the possible return types:\n+------------------------------------------------------------------------------------\n--------+----------------------------------------------------------------------------\n----------------+--------------------------------------------------------------------\n------------------------+\n|Return type                                                                         \n    |Value\n        |Example\n            |\n|ARRAY                                                                               \n    |JSON array\n        |[1, 2, {"key": "value"}]\n            |\n|OBJECT                                                                              \n    |JSON object\n        |{"key":"value"}\n            |\n|BOOLEAN                                                                             \n    |JSON true/false literals\n        |true, false\n            |\n|DOUBLE                                                                              \n    |A number with at least one floating point decimal.\n\n|1.2                                                                 \n            |\n|INTEGER                                                                             \n    |A number without a floating point decimal.\n\n|1                                                                   \n            |\n|NULL                                                                                \n    |JSON null literal (this is returned as a string, not to be confused with the\nSQL NULL value!)|null                                                                \n            |\n|STRING                                                                              \n    |JSON String\n        |"a sample string"\n            |\n+------------------------------------------------------------------------------------\n--------+----------------------------------------------------------------------------\n----------------+--------------------------------------------------------------------\n------------------------+\n\nExamples\n--------\nSELECT JSON_TYPE('{"A": 1, "B": 2, "C": 3}');\n+---------------------------------------+\n| JSON_TYPE('{"A": 1, "B": 2, "C": 3}') |\n+---------------------------------------+\n| OBJECT                                |\n+---------------------------------------+\n','','https://mariadb.com/kb/en/json_type/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (709,41,'JSON_UNQUOTE','Syntax\n------\nJSON_UNQUOTE(val)\n\nDescription\n-----------\nUnquotes a JSON value, returning a string, or NULL if the argument is null.\n\nAn error will occur if the given value begins and ends with double quotes and is an\ninvalid JSON string literal.\n\nIf the given value is not a JSON string, value is passed through unmodified.\n\nCertain character sequences have special meanings within a string. Usually, a\nbackslash is ignored, but the escape sequences in the table below are recognised by\nMariaDB, unless the SQL Mode is set to NO_BACKSLASH_ESCAPES SQL.\n\n+----------------------------------+----------------------------------+\n|Escape sequence                   |Character                         |\n|\"                                |Double quote (")                  |\n|\b                                |Backslash                         |\n|\f                                |Formfeed                          |\n|\n                                |Newline (linefeed)                |\n|\r                                |Carriage return                   |\n|\t                                |Tab                               |\n|\\                                |Backslash (\)                     |\n|\uXXXX                            |UTF-8 bytes for Unicode value XXXX|\n+----------------------------------+----------------------------------+\n\nExamples\n--------\nSELECT JSON_UNQUOTE('"Monty"');\n+-------------------------+\n| JSON_UNQUOTE('"Monty"') |\n+-------------------------+\n| Monty                   |\n+-------------------------+\n\nWith the default SQL Mode:\nSELECT JSON_UNQUOTE('Si\bng\ting');\n+-----------------------------+\n| JSON_UNQUOTE('Si\bng\ting') |\n+-----------------------------+\n| Sng	ing                   |\n+-----------------------------+\n\nSetting NO_BACKSLASH_ESCAPES:\nSET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\n\nSELECT JSON_UNQUOTE('Si\bng\ting');\n+-----------------------------+\n| JSON_UNQUOTE('Si\bng\ting') |\n+-----------------------------+\n| Si\bng\ting                 |\n+-----------------------------+\n','','https://mariadb.com/kb/en/json_unquote/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (710,41,'JSON_VALID','Syntax\n------\nJSON_VALID(value)\n\nDescription\n-----------\nIndicates whether the given value is a valid JSON document or not. Returns 1 if\nvalid, 0 if not, and NULL if the argument is NULL.\n\nFrom MariaDB 10.4.3, the JSON_VALID function is automatically used as a CHECK\nconstraint for the JSON data type alias in order to ensure that a valid json document\nis inserted.\n\nExamples\n--------\nSELECT JSON_VALID('{"id": 1, "name": "Monty"}');\n+------------------------------------------+\n| JSON_VALID('{"id": 1, "name": "Monty"}') |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n\nSELECT JSON_VALID('{"id": 1, "name": "Monty", "oddfield"}');\n+------------------------------------------------------+\n| JSON_VALID('{"id": 1, "name": "Monty", "oddfield"}') |\n+------------------------------------------------------+\n|                                                    0 |\n+------------------------------------------------------+\n','','https://mariadb.com/kb/en/json_valid/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (711,41,'JSON_VALUE','Syntax\n------\nJSON_VALUE(json_doc, path)\n\nDescription\n-----------\nGiven a JSON document, returns the scalar specified by the path. Returns NULL if not\ngiven a valid JSON document, or if there is no match.\n\nExamples\n--------\nselect json_value('{"key1":123}', '$.key1');\n+--------------------------------------+\n| json_value('{"key1":123}', '$.key1') |\n+--------------------------------------+\n| 123                                  |\n+--------------------------------------+\n\nselect json_value('{"key1": [1,2,3], "key1":123}', '$.key1');\n+-------------------------------------------------------+\n| json_value('{"key1": [1,2,3], "key1":123}', '$.key1') |\n+-------------------------------------------------------+\n| 123                                                   |\n+-------------------------------------------------------+\n','','https://mariadb.com/kb/en/json_value/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (712,42,'CUME_DIST','Syntax\n------\nCUME_DIST() OVER ( \n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nCUME_DIST() is a window function that returns the cumulative distribution of a given\nrow. The following formula is used to calculate the value:\n(number of rows <= current row) / (total rows)\n\nExamples\n--------\ncreate table t1 (\n pk int primary key,\n a int,\n b int\n);\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n  rank() over (order by a) as rank,\n  percent_rank() over (order by a) as pct_rank,\n  cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n   percent_rank() over (order by pk) as pct_rank,\n   cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n    percent_rank() over (partition by a order by a) as pct_rank,\n    cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n','','https://mariadb.com/kb/en/cume_dist/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (713,42,'DENSE_RANK','Syntax\n------\nDENSE_RANK() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nDENSE_RANK() is a window function that displays the number of a given row, starting\nat one and following the ORDER BY sequence of the window function, with identical\nvalues receiving the same result. Unlike the  RANK() function, there are no skipped\nvalues if the preceding results are identical. It is also similar to the ROW_NUMBER()\nfunction except that in that function, identical values will receive a different row\nnumber for each result.\n\nExamples\n--------\nThe distinction between DENSE_RANK(), RANK() and ROW_NUMBER():\nCREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n ('Maths', 60, 'Thulile'),\n ('Maths', 60, 'Pritha'),\n ('Maths', 70, 'Voitto'),\n ('Maths', 55, 'Chun'),\n ('Biology', 60, 'Bilal'),\n ('Biology', 70, 'Roger');\n\nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank,\n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank,\n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num,\n course, mark, name\nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n','','https://mariadb.com/kb/en/dense_rank/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (714,42,'FIRST_VALUE','Syntax\n------\nFIRST_VALUE(expr) OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nFIRST_VALUE returns the first result from an ordered set, or NULL if no such\nresult exists.\n\nExamples\n--------\nCREATE TABLE t1 (\n pk int primary key,\n a int,\n b int,\n c char(10),\n d decimal(10, 3),\n e real\n);\n\nINSERT INTO t1 VALUES\n( 1, 0, 1,    'one',    0.1,  0.001),\n( 2, 0, 2,    'two',    0.2,  0.002),\n( 3, 0, 3,    'three',  0.3,  0.003),\n( 4, 1, 2,    'three',  0.4,  0.004),\n( 5, 1, 1,    'two',    0.5,  0.005),\n( 6, 1, 1,    'one',    0.6,  0.006),\n( 7, 2, NULL, 'n_one',  0.5,  0.007),\n( 8, 2, 1,    'n_two',  NULL, 0.008),\n( 9, 2, 2,    NULL,     0.7,  0.009),\n(10, 2, 0,    'n_four', 0.8,  0.010),\n(11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n     LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n     FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n     LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n\n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 |         1 |       11 |         11 |        11 |\n| 10 |         1 |       10 |         11 |        10 |\n|  9 |         1 |        9 |         11 |         9 |\n|  8 |         1 |        8 |         11 |         8 |\n|  7 |         1 |        7 |         11 |         7 |\n|  6 |         1 |        6 |         11 |         6 |\n|  5 |         1 |        5 |         11 |         5 |\n|  4 |         1 |        4 |         11 |         4 |\n|  3 |         1 |        3 |         11 |         3 |\n|  2 |         1 |        2 |         11 |         2 |\n|  1 |         1 |        1 |         11 |         1 |\n+----+-----------+----------+------------+-----------+\n\nCREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n\nSELECT i,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)\nAS f_1p1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING)\nAS f_2p1p,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)\nAS f_1f2f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f\nFROM t1;\n\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i    | f_1f | l_1f | f_1p1f | f_1p1f | f_2p1p | f_2p1p | f_1f2f | f_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n|    1 |    1 |    2 |      1 |      2 |   NULL |   NULL |      2 |      3 |\n|    2 |    2 |    3 |      1 |      3 |      1 |      1 |      3 |      4 |\n|    3 |    3 |    4 |      2 |      4 |      1 |      2 |      4 |      5 |\n|    4 |    4 |    5 |      3 |      5 |      2 |      3 |      5 |      6 |\n|    5 |    5 |    6 |      4 |      6 |      3 |      4 |      6 |      7 |\n|    6 |    6 |    7 |      5 |      7 |      4 |      5 |      7 |      8 |\n|    7 |    7 |    8 |      6 |      8 |      5 |      6 |      8 |      9 |\n|    8 |    8 |    9 |      7 |      9 |      6 |      7 |      9 |     10 |\n|    9 |    9 |   10 |      8 |     10 |      7 |      8 |     10 |     10 |\n|   10 |   10 |   10 |      9 |     10 |      8 |      9 |   NULL |   NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n','','https://mariadb.com/kb/en/first_value/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (715,42,'LAG','Syntax\n------\nLAG (expr[, offset]) OVER ( \n [ PARTITION BY partition_expression ]\n < ORDER BY order_list >\n)\n\nDescription\n-----------\nThe LAG function accesses data from a previous row according to the ORDER BY clause\nwithout the need for a self-join. The specific row is determined by the offset\n(default 1), which specifies the number of rows behind the current row to use. An\noffset of 0 is the current row.\n\nExamples\n--------\nCREATE TABLE t1 (pk int primary key, a int, b int, c char(10), d decimal(10, 3),\ne real);\n\nINSERT INTO t1 VALUES\n ( 1, 0, 1,    'one',    0.1,  0.001),\n ( 2, 0, 2,    'two',    0.2,  0.002),\n ( 3, 0, 3,    'three',  0.3,  0.003),\n ( 4, 1, 2,    'three',  0.4,  0.004),\n ( 5, 1, 1,    'two',    0.5,  0.005),\n ( 6, 1, 1,    'one',    0.6,  0.006),\n ( 7, 2, NULL, 'n_one',  0.5,  0.007),\n ( 8, 2, 1,    'n_two',  NULL, 0.008),\n ( 9, 2, 2,    NULL,     0.7,  0.009),\n (10, 2, 0,    'n_four', 0.8,  0.010),\n (11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, LAG(pk) OVER (ORDER BY pk) AS l,\n LAG(pk,1) OVER (ORDER BY pk) AS l1,\n LAG(pk,2) OVER (ORDER BY pk) AS l2,\n LAG(pk,0) OVER (ORDER BY pk) AS l0,\n LAG(pk,-1) OVER (ORDER BY pk) AS lm1,\n LAG(pk,-2) OVER (ORDER BY pk) AS lm2\nFROM t1;\n+----+------+------+------+------+------+------+\n| pk | l    | l1   | l2   | l0   | lm1  | lm2  |\n+----+------+------+------+------+------+------+\n|  1 | NULL | NULL | NULL |    1 |    2 |    3 |\n|  2 |    1 |    1 | NULL |    2 |    3 |    4 |\n|  3 |    2 |    2 |    1 |    3 |    4 |    5 |\n|  4 |    3 |    3 |    2 |    4 |    5 |    6 |\n|  5 |    4 |    4 |    3 |    5 |    6 |    7 |\n|  6 |    5 |    5 |    4 |    6 |    7 |    8 |\n|  7 |    6 |    6 |    5 |    7 |    8 |    9 |\n|  8 |    7 |    7 |    6 |    8 |    9 |   10 |\n|  9 |    8 |    8 |    7 |    9 |   10 |   11 |\n| 10 |    9 |    9 |    8 |   10 |   11 | NULL |\n| 11 |   10 |   10 |    9 |   11 | NULL | NULL |\n+----+------+------+------+------+------+------+\n','','https://mariadb.com/kb/en/lag/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (717,42,'MEDIAN','Syntax\n------\nMEDIAN(median expression) OVER (\n [ PARTITION BY partition_expression ]\n)\n\nDescription\n-----------\nMEDIAN() is a window function that returns the median value of a range of values.\n\nIt is a specific case of PERCENTILE_CONT, with an argument of 0.5 and the ORDER BY\ncolumn the one in MEDIAN's argument.\n\nMEDIAN(<median-arg>) OVER ( [ PARTITION BY partition_expression] )\n\nIs equivalent to:\nPERCENTILE_CONT(0.5) WITHIN \n GROUP (ORDER BY <median-arg>) OVER ( [ PARTITION BY partition_expression ])\n\nExamples\n--------\nCREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, median(star_rating) OVER (PARTITION BY name) FROM book_rating;\n+-----------------------+----------------------------------------------+\n| name                  | median(star_rating) OVER (PARTITION BY name) |\n+-----------------------+----------------------------------------------+\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n+-----------------------+----------------------------------------------+\n','','https://mariadb.com/kb/en/median/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (718,42,'NTH_VALUE','Syntax\n------\nNTH_VALUE (expr[, num_row]) OVER ( \n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nThe NTH_VALUE function returns the value evaluated at row number num_row of the\nwindow frame, starting from 1, or NULL if the row does not exist.\n','','https://mariadb.com/kb/en/nth_value/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (719,42,'NTILE','Syntax\n------\nNTILE (expr) OVER ( \n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nNTILE() is a window function that returns an integer indicating which group a given\nrow falls into. The number of groups is specified in the argument (expr), starting at\none. Ordered rows in the partition are divided into the specified number of groups\nwith as equal a size as possible.\n\nExamples\n--------\ncreate table t1 (\n  pk int primary key,\n  a int,\n  b int\n );\n\ninsert into t1 values\n  (11 , 0, 10),\n  (12 , 0, 10),\n  (13 , 1, 10),\n  (14 , 1, 10),\n  (18 , 2, 10),\n  (15 , 2, 20),\n  (16 , 2, 20),\n  (17 , 2, 20),\n  (19 , 4, 20),\n  (20 , 4, 20);\n\nselect pk, a, b,\n  ntile(1) over (order by pk)\n from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(1) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           1 |\n| 15 |    2 |   20 |                           1 |\n| 16 |    2 |   20 |                           1 |\n| 17 |    2 |   20 |                           1 |\n| 18 |    2 |   10 |                           1 |\n| 19 |    4 |   20 |                           1 |\n| 20 |    4 |   20 |                           1 |\n+----+------+------+-----------------------------+\n\nselect pk, a, b,\n  ntile(4) over (order by pk)\n from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(4) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           2 |\n| 15 |    2 |   20 |                           2 |\n| 16 |    2 |   20 |                           2 |\n| 17 |    2 |   20 |                           3 |\n| 18 |    2 |   10 |                           3 |\n| 19 |    4 |   20 |                           4 |\n| 20 |    4 |   20 |                           4 |\n+----+------+------+-----------------------------+\n','','https://mariadb.com/kb/en/ntile/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (720,42,'PERCENT_RANK','Syntax\n------\nPERCENT_RANK() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nPERCENT_RANK() is a window function that returns the relative percent rank of a given\nrow. The following formula is used to calculate the percent rank:\n(rank - 1) / (number of rows in the window or partition - 1)\n\nExamples\n--------\ncreate table t1 (\n pk int primary key,\n a int,\n b int\n);\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n  rank() over (order by a) as rank,\n  percent_rank() over (order by a) as pct_rank,\n  cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n   percent_rank() over (order by pk) as pct_rank,\n   cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n    percent_rank() over (partition by a order by a) as pct_rank,\n    cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n','','https://mariadb.com/kb/en/percent_rank/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (721,42,'PERCENTILE_CONT','Syntax\n------\n\nDescription\n-----------\nPERCENTILE_CONT() (standing for continuous percentile) is a window function which\nreturns a value which corresponds to the given fraction in the sort order. If\nrequired, it will interpolate between adjacent input items.\n\nEssentially, the following process is followed to find the value to return:\n\nThe MEDIAN function is a specific case of PERCENTILE_CONT, equivalent\nto PERCENTILE_CONT(0.5).\n\nExamples\n--------\nCREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc\n FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.0000000000 |\n| Lord of the Ladybirds | 4.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc\n FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 5.0000000000 |\n| Lord of the Ladybirds | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc\n FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 3.0000000000 |\n| Lord of the Ladybirds | 3.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc\n FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.2000000000 |\n| Lord of the Ladybirds | 4.2000000000 |\n| Lady of the Flies     | 2.6000000000 |\n| Lady of the Flies     | 2.6000000000 |\n| Lady of the Flies     | 2.6000000000 |\n+-----------------------+--------------+\n','','https://mariadb.com/kb/en/percentile_cont/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (722,42,'PERCENTILE_DISC','Syntax\n------\n\nDescription\n-----------\nPERCENTILE_DISC() (standing for discrete percentile) is a window function which\nreturns the first value in the set whose ordered position is the same or more than\nthe specified fraction.\n\nEssentially, the following process is followed to find the value to return:\n\nExamples\n--------\nCREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY star_rating)\n OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    3 |\n| Lord of the Ladybirds |    3 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    3 |\n| Lord of the Ladybirds |    3 |\n| Lady of the Flies     |    1 |\n| Lady of the Flies     |    1 |\n| Lady of the Flies     |    1 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    5 |\n| Lord of the Ladybirds |    5 |\n| Lady of the Flies     |    5 |\n| Lady of the Flies     |    5 |\n| Lady of the Flies     |    5 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    5 |\n| Lord of the Ladybirds |    5 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n+-----------------------+------\n','','https://mariadb.com/kb/en/percentile_disc/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (723,42,'RANK','Syntax\n------\nRANK() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nRANK() is a window function that displays the number of a given row, starting at one\nand following the ORDER BY sequence of the window function, with identical values\nreceiving the same result. It is similar to the ROW_NUMBER() function except that in\nthat function, identical values will receive a different row number for each result.\n\nExamples\n--------\nThe distinction between DENSE_RANK(), RANK() and ROW_NUMBER():\nCREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n ('Maths', 60, 'Thulile'),\n ('Maths', 60, 'Pritha'),\n ('Maths', 70, 'Voitto'),\n ('Maths', 55, 'Chun'),\n ('Biology', 60, 'Bilal'),\n ('Biology', 70, 'Roger');\n\nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank,\n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank,\n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num,\n course, mark, name\nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n','','https://mariadb.com/kb/en/rank/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (724,42,'ROW_NUMBER','Syntax\n------\nROW_NUMBER() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n)\n\nDescription\n-----------\nROW_NUMBER() is a window function that displays the number of a given row, starting\nat one and following the ORDER BY sequence of the window function, with identical\nvalues receiving different row numbers. It is similar to the RANK() and DENSE_RANK()\nfunctions except that in that function, identical values will receive the same rank\nfor each result.\n\nExamples\n--------\nThe distinction between DENSE_RANK(), RANK() and ROW_NUMBER():\nCREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n ('Maths', 60, 'Thulile'),\n ('Maths', 60, 'Pritha'),\n ('Maths', 70, 'Voitto'),\n ('Maths', 55, 'Chun'),\n ('Biology', 60, 'Bilal'),\n ('Biology', 70, 'Roger');\n\nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank,\n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank,\n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num,\n course, mark, name\nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n','','https://mariadb.com/kb/en/row_number/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (725,43,'SPIDER_BG_DIRECT_SQL','Syntax\n------\nSPIDER_BG_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n\nDescription\n-----------\nExecutes the given SQL statement in the background on the remote server, as defined\nin the parameters listing.  If the query returns a result-set, it sttores the results\nin the given temporary table.  When the given SQL statement executes successfully,\nthis function returns the number of called UDF's.  It returns 0 when the given SQL\nstatement fails.\n\nThis function is a UDF installed with the Spider storage engine.\n\nExamples\n--------\nSELECT SPIDER_BG_DIRECT_SQL('SELECT * FROM example_table',  '', \n 'srv "node1", port "8607"') AS "Direct Query";\n+--------------+\n| Direct Query | \n+--------------+\n|            1 |\n+--------------+\n\nParameters\n----------\nerror_rw_mode\n','','https://mariadb.com/kb/en/spider_bg_direct_sql/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (726,43,'SPIDER_COPY_TABLES','Syntax\n------\nSPIDER_COPY_TABLES(spider_table_name, \n source_link_id, destination_link_id_list [,parameters])\n\nDescription\n-----------\nA UDF installed with the Spider Storage Engine, this function copies table data from\nsource_link_id to destination_link_id_list. The service does not need to be stopped\nin order to copy.\n\nIf the Spider table is partitioned, the name must be of the format\ntable_name#P#partition_name. The partition name can be viewed in the\nmysql.spider_tables table, for example:\nSELECT table_name FROM mysql.spider_tables;\n+-------------+\n| table_name  |\n+-------------+\n| spt_a#P#pt1 |\n| spt_a#P#pt2 |\n| spt_a#P#pt3 |\n+-------------+\n\nReturns 1 if the data was copied successfully, or 0 if copying the data failed.\n','','https://mariadb.com/kb/en/spider_copy_tables/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (727,43,'SPIDER_DIRECT_SQL','Syntax\n------\nSPIDER_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n\nDescription\n-----------\nA UDF installed with the Spider Storage Engine, this function is used to execute the\nSQL string sql on the remote server, as defined in parameters. If any resultsets are\nreturned, they are stored in the tmp_table_list.\n\nThe function returns 1 if the SQL executes successfully, or 0 if it fails.\n\nExamples\n--------\nSELECT SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv "node1", port "8607"');\n+----------------------------------------------------------------------+\n| SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv "node1", port "8607"') |\n+----------------------------------------------------------------------+\n|                                                                    1 |\n+----------------------------------------------------------------------+\n','','https://mariadb.com/kb/en/spider_direct_sql/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (728,43,'SPIDER_FLUSH_TABLE_MON_CACHE','Syntax\n------\nSPIDER_FLUSH_TABLE_MON_CACHE()\n\nDescription\n-----------\nA UDF installed with the Spider Storage Engine, this function is used for refreshing\nmonitoring server information. It returns a value of 1.\n\nExamples\n--------\nSELECT SPIDER_FLUSH_TABLE_MON_CACHE();\n+--------------------------------+\n| SPIDER_FLUSH_TABLE_MON_CACHE() |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n','','https://mariadb.com/kb/en/spider_flush_table_mon_cache/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (729,44,'COLUMN_ADD','Syntax\n------\nCOLUMN_ADD(dyncol_blob, column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type], [column_name, value\n[as type]]...);\n\nDescription\n-----------\nAdds or updates dynamic columns.\n\nThe return value is a dynamic column blob after the modifications.\n\nExamples\n--------\nUPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob, "column_name", "value") WHERE id=1;\n\nNote: COLUMN_ADD() is a regular function (just like\nCONCAT()), hence, in order to update the value in the table\nyou have to use the UPDATE ... SET dynamic_col=COLUMN_ADD(dynamic_col,\n....)  pattern.\n','','https://mariadb.com/kb/en/column_add/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (730,44,'COLUMN_CHECK','Syntax\n------\nCOLUMN_CHECK(dyncol_blob);\n\nDescription\n-----------\nCheck if dyncol_blob is a valid packed dynamic columns blob. Return value of 1 means\nthe blob is valid, return value of 0 means it is not.\n\nRationale:\nNormally, one works with valid dynamic column blobs. Functions like COLUMN_CREATE,\nCOLUMN_ADD, COLUMN_DELETE always return valid dynamic column blobs. However, if a\ndynamic column blob is accidentally truncated, or transcoded from one character set\nto another, it will be corrupted. This function can be used to check if a value in a\nblob field is a valid dynamic column blob.\n','','https://mariadb.com/kb/en/column_check/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (731,44,'COLUMN_CREATE','Syntax\n------\nCOLUMN_CREATE(column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name, value [as type]]...);\n\nDescription\n-----------\nReturns a dynamic columns blob that stores the specified columns with values.\n\nThe return value is suitable for\n\nThe as type part allows one to specify the value type. In most cases,\nthis is redundant because MariaDB will be able to deduce the type of the\nvalue. Explicit type specification may be needed when the type of the value is\nnot apparent. For example, a literal '2012-12-01' has a CHAR type by\ndefault, one will need to specify '2012-12-01' AS DATE to have it stored as\na date. See Dynamic Columns:Datatypes for further details.\n\nExamples\n--------\nINSERT INTO tbl SET dyncol_blob=COLUMN_CREATE("column_name", "value");\n','','https://mariadb.com/kb/en/column_create/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (732,44,'COLUMN_DELETE','Syntax\n------\nCOLUMN_DELETE(dyncol_blob, column_nr, column_nr...);\nCOLUMN_DELETE(dyncol_blob, column_name, column_name...);\n\nDescription\n-----------\nDeletes a dynamic column with the specified name. Multiple names can be given. The\nreturn value is a dynamic column blob after the modification.\n','','https://mariadb.com/kb/en/column_delete/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (733,44,'COLUMN_EXISTS','Syntax\n------\nCOLUMN_EXISTS(dyncol_blob, column_nr);\nCOLUMN_EXISTS(dyncol_blob, column_name);\n\nDescription\n-----------\nChecks if a column with name column_name exists in dyncol_blob. If yes, return 1,\notherwise return 0. See dynamic columns for more information.\n','','https://mariadb.com/kb/en/column_exists/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (734,44,'COLUMN_GET','Syntax\n------\nCOLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n\nDescription\n-----------\nGets the value of a dynamic column by its name. If no column with the given name\nexists, NULL will be returned.\n\ncolumn_name as type requires that one specify the datatype of the dynamic column they\nare reading.\n\nThis may seem counter-intuitive: why would one need to specify which datatype they're\nretrieving? Can't the dynamic columns system figure the datatype from the data\nbeing stored?\nThe answer is: SQL is a statically-typed language. The SQL interpreter needs to know\nthe datatypes of all expressions before the query is run (for example, when one is\nusing prepared statements and runs "select COLUMN_GET(...)", the prepared statement\nAPI requires the server to inform the client about the datatype of the column being\nread before the query is executed and the server can see what datatype the column\nactually has).\n\nLengths\n\nIf you're running queries like:\nSELECT COLUMN_GET(blob, 'colname' as CHAR) ...\n\nwithout specifying a maximum length (i.e. using as CHAR, not as CHAR(n)), MariaDB\nwill report the maximum length of the resultset column to be 16,777,216. This may\ncause excessive memory usage in some client libraries, because they try to\npre-allocate a buffer of maximum resultset width. To avoid this problem, use CHAR(n)\nwhenever you're using COLUMN_GET in the select list.\n\nSee Dynamic Columns:Datatypes for more information about datatypes.\n','','https://mariadb.com/kb/en/column_get/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (735,44,'COLUMN_JSON','Syntax\n------\nCOLUMN_JSON(dyncol_blob)\n\nDescription\n-----------\nReturns a JSON representation of data in dyncol_blob. Can also be used to display\nnested columns. See dynamic columns for more information.\n\nExample\n-------\nselect item_name, COLUMN_JSON(dynamic_cols) from assets;\n+-----------------+----------------------------------------+\n| item_name       | COLUMN_JSON(dynamic_cols)              |\n+-----------------+----------------------------------------+\n| MariaDB T-shirt | {"size":"XL","color":"blue"}           |\n| Thinkpad Laptop | {"color":"black","warranty":"3 years"} |\n+-----------------+----------------------------------------+\n\nLimitation: COLUMN_JSON will decode nested dynamic columns at a nesting level of not\nmore than 10 levels deep. Dynamic columns that are nested deeper than 10 levels will\nbe shown as BINARY string, without encoding.\n','','https://mariadb.com/kb/en/column_json/');
insert into help_topic (help_topic_id,help_category_id,name,description,example,url) values (736,44,'COLUMN_LIST','Syntax\n------\nCOLUMN_LIST(dyncol_blob);\n\nDescription\n-----------\nReturns a comma-separated list of column names. The names are quoted with backticks.\n\nSee dynamic columns for more information.\n','','https://mariadb.com/kb/en/column_list/');
insert into help_keyword values (1,'master_ssl_verify_cert');
insert into help_keyword values (2,'drop prepare');
insert into help_keyword values (3,'work');
insert into help_keyword values (4,'drop');
insert into help_keyword values (5,'returns');
insert into help_keyword values (6,'value');
insert into help_keyword values (7,'nchar');
insert into help_keyword values (8,'repeat');
insert into help_keyword values (9,'columns');
insert into help_keyword values (10,'sql_big_result');
insert into help_keyword values (11,'escape');
insert into help_keyword values (12,'mode');
insert into help_keyword values (13,'schedule');
insert into help_keyword values (14,'starts');
insert into help_keyword values (15,'host');
insert into help_keyword values (16,'row_format');
insert into help_relation values (95,1);
insert into help_relation values (97,2);
insert into help_relation values (110,3);
insert into help_relation values (120,4);
insert into help_relation values (128,4);
insert into help_relation values (258,5);
insert into help_relation values (259,4);
insert into help_relation values (264,6);
insert into help_relation values (271,7);
insert into help_relation values (316,8);
insert into help_relation values (317,6);
insert into help_relation values (320,6);
insert into help_relation values (355,9);
insert into help_relation values (417,6);
insert into help_relation values (433,6);
insert into help_relation values (434,10);
insert into help_relation values (603,11);
insert into help_relation values (610,12);
insert into help_relation values (621,8);
insert into help_relation values (642,13);
insert into help_relation values (647,4);
insert into help_relation values (652,14);
insert into help_relation values (659,15);
insert into help_relation values (660,16);
insert into help_relation values (664,4);
insert into help_relation values (665,4);
insert into help_relation values (666,4);
insert into help_relation values (667,4);
insert into help_relation values (668,4);
insert into help_relation values (669,4);
insert into help_relation values (670,4);
insert into help_relation values (671,4);
insert into help_relation values (672,4);
insert into help_relation values (673,4);
insert into help_relation values (675,4);
insert into help_relation values (676,4);
unlock tables;
